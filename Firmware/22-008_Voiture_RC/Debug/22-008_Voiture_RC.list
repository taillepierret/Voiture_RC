
22-008_Voiture_RC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08005364  08005364  00015364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005410  08005410  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005410  08005410  00015410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005418  08005418  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005418  08005418  00015418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800541c  0800541c  0001541c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000000c  0800542c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  0800542c  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011ef3  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002677  00000000  00000000  00031f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001130  00000000  00000000  000345e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d80  00000000  00000000  00035718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011cb7  00000000  00000000  00036498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000151ca  00000000  00000000  0004814f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006de25  00000000  00000000  0005d319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ee8  00000000  00000000  000cb140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000cf028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800534c 	.word	0x0800534c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800534c 	.word	0x0800534c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <APP_testRx>:
	.setIrq_PF = HAL_setIRQ,
	.writeSpiValue_EN_PF = HAL_writeSpiValue_EN
};

void APP_testRx(void)
{
 80004a8:	b5b0      	push	{r4, r5, r7, lr}
 80004aa:	b098      	sub	sp, #96	; 0x60
 80004ac:	af00      	add	r7, sp, #0
	uint8_t RxAddress[] = {0x00,0xDD,0xCC,0xBB,0xAA};
 80004ae:	2358      	movs	r3, #88	; 0x58
 80004b0:	18fb      	adds	r3, r7, r3
 80004b2:	4a2a      	ldr	r2, [pc, #168]	; (800055c <APP_testRx+0xb4>)
 80004b4:	6811      	ldr	r1, [r2, #0]
 80004b6:	6019      	str	r1, [r3, #0]
 80004b8:	7912      	ldrb	r2, [r2, #4]
 80004ba:	711a      	strb	r2, [r3, #4]
	uint8_t RxData[32];
	bool flag_rx_data = false;
 80004bc:	2337      	movs	r3, #55	; 0x37
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	2200      	movs	r2, #0
 80004c2:	701a      	strb	r2, [r3, #0]
	NRF_ret_val_en NRF_ret_val_EN;
	uint8_t data[50];

	NRF_ret_val_EN = NRF24_Init_EN(NRF_HAL_function_local_STR);
 80004c4:	255f      	movs	r5, #95	; 0x5f
 80004c6:	197c      	adds	r4, r7, r5
 80004c8:	4b25      	ldr	r3, [pc, #148]	; (8000560 <APP_testRx+0xb8>)
 80004ca:	6818      	ldr	r0, [r3, #0]
 80004cc:	6859      	ldr	r1, [r3, #4]
 80004ce:	689a      	ldr	r2, [r3, #8]
 80004d0:	68db      	ldr	r3, [r3, #12]
 80004d2:	f000 feb5 	bl	8001240 <NRF24_Init_EN>
 80004d6:	0003      	movs	r3, r0
 80004d8:	7023      	strb	r3, [r4, #0]
	if (NRF_ret_val_EN != NRF_OK_EN)
 80004da:	197b      	adds	r3, r7, r5
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2b03      	cmp	r3, #3
 80004e0:	d000      	beq.n	80004e4 <APP_testRx+0x3c>
	{
		while(1);
 80004e2:	e7fe      	b.n	80004e2 <APP_testRx+0x3a>
	}

	NRF_ret_val_EN = NRF24_RxMode_EN(RxAddress, 10);
 80004e4:	255f      	movs	r5, #95	; 0x5f
 80004e6:	197c      	adds	r4, r7, r5
 80004e8:	2358      	movs	r3, #88	; 0x58
 80004ea:	18fb      	adds	r3, r7, r3
 80004ec:	210a      	movs	r1, #10
 80004ee:	0018      	movs	r0, r3
 80004f0:	f000 ff52 	bl	8001398 <NRF24_RxMode_EN>
 80004f4:	0003      	movs	r3, r0
 80004f6:	7023      	strb	r3, [r4, #0]
	if (NRF_ret_val_EN != NRF_OK_EN)
 80004f8:	197b      	adds	r3, r7, r5
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b03      	cmp	r3, #3
 80004fe:	d000      	beq.n	8000502 <APP_testRx+0x5a>
	{
		while(1);
 8000500:	e7fe      	b.n	8000500 <APP_testRx+0x58>
	}

	NRF_ret_val_EN = NRF24_ReadAll_EN(data);
 8000502:	255f      	movs	r5, #95	; 0x5f
 8000504:	197c      	adds	r4, r7, r5
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	0018      	movs	r0, r3
 800050a:	f001 f886 	bl	800161a <NRF24_ReadAll_EN>
 800050e:	0003      	movs	r3, r0
 8000510:	7023      	strb	r3, [r4, #0]
	if (NRF_ret_val_EN != NRF_OK_EN)
 8000512:	197b      	adds	r3, r7, r5
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b03      	cmp	r3, #3
 8000518:	d000      	beq.n	800051c <APP_testRx+0x74>
	{
		while(1);
 800051a:	e7fe      	b.n	800051a <APP_testRx+0x72>
	}

	while(1)
	{
		NRF_ret_val_EN = isDataAvailable_EN(2,&flag_rx_data);
 800051c:	255f      	movs	r5, #95	; 0x5f
 800051e:	197c      	adds	r4, r7, r5
 8000520:	2337      	movs	r3, #55	; 0x37
 8000522:	18fb      	adds	r3, r7, r3
 8000524:	0019      	movs	r1, r3
 8000526:	2002      	movs	r0, #2
 8000528:	f000 fffe 	bl	8001528 <isDataAvailable_EN>
 800052c:	0003      	movs	r3, r0
 800052e:	7023      	strb	r3, [r4, #0]
		if (NRF_ret_val_EN != NRF_OK_EN)
 8000530:	197b      	adds	r3, r7, r5
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b03      	cmp	r3, #3
 8000536:	d000      	beq.n	800053a <APP_testRx+0x92>
		{
			while(1);
 8000538:	e7fe      	b.n	8000538 <APP_testRx+0x90>
		}
		if (flag_rx_data == true && NRF_ret_val_EN == NRF_OK_EN)
 800053a:	2337      	movs	r3, #55	; 0x37
 800053c:	18fb      	adds	r3, r7, r3
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d0eb      	beq.n	800051c <APP_testRx+0x74>
 8000544:	235f      	movs	r3, #95	; 0x5f
 8000546:	18fb      	adds	r3, r7, r3
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b03      	cmp	r3, #3
 800054c:	d1e6      	bne.n	800051c <APP_testRx+0x74>
		{
			NRF24_Receive_EN(RxData);
 800054e:	2338      	movs	r3, #56	; 0x38
 8000550:	18fb      	adds	r3, r7, r3
 8000552:	0018      	movs	r0, r3
 8000554:	f001 f82d 	bl	80015b2 <NRF24_Receive_EN>
		NRF_ret_val_EN = isDataAvailable_EN(2,&flag_rx_data);
 8000558:	e7e0      	b.n	800051c <APP_testRx+0x74>
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	08005364 	.word	0x08005364
 8000560:	08005394 	.word	0x08005394

08000564 <HAL_setCE>:
			return LED_SET_ERROR;
	}
}

inline void HAL_setCE(bool state_B)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	0002      	movs	r2, r0
 800056c:	1dfb      	adds	r3, r7, #7
 800056e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, CE_Pin, state_B);
 8000570:	1dfb      	adds	r3, r7, #7
 8000572:	781a      	ldrb	r2, [r3, #0]
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	009b      	lsls	r3, r3, #2
 8000578:	4803      	ldr	r0, [pc, #12]	; (8000588 <HAL_setCE+0x24>)
 800057a:	0019      	movs	r1, r3
 800057c:	f001 ff62 	bl	8002444 <HAL_GPIO_WritePin>
}
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	b002      	add	sp, #8
 8000586:	bd80      	pop	{r7, pc}
 8000588:	50000400 	.word	0x50000400

0800058c <HAL_setIRQ>:

inline void HAL_setIRQ(bool state_B)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	0002      	movs	r2, r0
 8000594:	1dfb      	adds	r3, r7, #7
 8000596:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, IRQ_Pin, state_B);
 8000598:	1dfb      	adds	r3, r7, #7
 800059a:	781a      	ldrb	r2, [r3, #0]
 800059c:	2380      	movs	r3, #128	; 0x80
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	4803      	ldr	r0, [pc, #12]	; (80005b0 <HAL_setIRQ+0x24>)
 80005a2:	0019      	movs	r1, r3
 80005a4:	f001 ff4e 	bl	8002444 <HAL_GPIO_WritePin>
}
 80005a8:	46c0      	nop			; (mov r8, r8)
 80005aa:	46bd      	mov	sp, r7
 80005ac:	b002      	add	sp, #8
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	50000400 	.word	0x50000400

080005b4 <HAL_writeSpiValue_EN>:

HAL_ret_val_en HAL_writeSpiValue_EN(uint8_t* value_U8A, uint16_t size_value_U16)
{
 80005b4:	b5b0      	push	{r4, r5, r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	000a      	movs	r2, r1
 80005be:	1cbb      	adds	r3, r7, #2
 80005c0:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef ret_val;
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 80005c2:	2380      	movs	r3, #128	; 0x80
 80005c4:	0219      	lsls	r1, r3, #8
 80005c6:	23a0      	movs	r3, #160	; 0xa0
 80005c8:	05db      	lsls	r3, r3, #23
 80005ca:	2200      	movs	r2, #0
 80005cc:	0018      	movs	r0, r3
 80005ce:	f001 ff39 	bl	8002444 <HAL_GPIO_WritePin>
	ret_val = HAL_SPI_Transmit(&hspi1, value_U8A, size_value_U16, 100);
 80005d2:	250f      	movs	r5, #15
 80005d4:	197c      	adds	r4, r7, r5
 80005d6:	1cbb      	adds	r3, r7, #2
 80005d8:	881a      	ldrh	r2, [r3, #0]
 80005da:	6879      	ldr	r1, [r7, #4]
 80005dc:	480c      	ldr	r0, [pc, #48]	; (8000610 <HAL_writeSpiValue_EN+0x5c>)
 80005de:	2364      	movs	r3, #100	; 0x64
 80005e0:	f002 ffd1 	bl	8003586 <HAL_SPI_Transmit>
 80005e4:	0003      	movs	r3, r0
 80005e6:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 80005e8:	2380      	movs	r3, #128	; 0x80
 80005ea:	0219      	lsls	r1, r3, #8
 80005ec:	23a0      	movs	r3, #160	; 0xa0
 80005ee:	05db      	lsls	r3, r3, #23
 80005f0:	2201      	movs	r2, #1
 80005f2:	0018      	movs	r0, r3
 80005f4:	f001 ff26 	bl	8002444 <HAL_GPIO_WritePin>
	if (ret_val != HAL_OK)
 80005f8:	197b      	adds	r3, r7, r5
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <HAL_writeSpiValue_EN+0x50>
	{
		return SPI_WRITE_ERROR_EN;
 8000600:	2302      	movs	r3, #2
 8000602:	e000      	b.n	8000606 <HAL_writeSpiValue_EN+0x52>
	}
	else
	{
		return SPI_WRITE_OK_EN;
 8000604:	2303      	movs	r3, #3
	}
}
 8000606:	0018      	movs	r0, r3
 8000608:	46bd      	mov	sp, r7
 800060a:	b004      	add	sp, #16
 800060c:	bdb0      	pop	{r4, r5, r7, pc}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	200000d8 	.word	0x200000d8

08000614 <HAL_readSpiValue_EN>:

HAL_ret_val_en HAL_readSpiValue_EN(uint8_t reg_U8, uint8_t* read_value_U8A,uint16_t size_read_value_U16)
{
 8000614:	b5b0      	push	{r4, r5, r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6039      	str	r1, [r7, #0]
 800061c:	0011      	movs	r1, r2
 800061e:	1dfb      	adds	r3, r7, #7
 8000620:	1c02      	adds	r2, r0, #0
 8000622:	701a      	strb	r2, [r3, #0]
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	1c0a      	adds	r2, r1, #0
 8000628:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef ret_val;
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 800062a:	2380      	movs	r3, #128	; 0x80
 800062c:	0219      	lsls	r1, r3, #8
 800062e:	23a0      	movs	r3, #160	; 0xa0
 8000630:	05db      	lsls	r3, r3, #23
 8000632:	2200      	movs	r2, #0
 8000634:	0018      	movs	r0, r3
 8000636:	f001 ff05 	bl	8002444 <HAL_GPIO_WritePin>
	ret_val = HAL_SPI_Transmit(&hspi1, &reg_U8, 1, 100);
 800063a:	250f      	movs	r5, #15
 800063c:	197c      	adds	r4, r7, r5
 800063e:	1df9      	adds	r1, r7, #7
 8000640:	481a      	ldr	r0, [pc, #104]	; (80006ac <HAL_readSpiValue_EN+0x98>)
 8000642:	2364      	movs	r3, #100	; 0x64
 8000644:	2201      	movs	r2, #1
 8000646:	f002 ff9e 	bl	8003586 <HAL_SPI_Transmit>
 800064a:	0003      	movs	r3, r0
 800064c:	7023      	strb	r3, [r4, #0]
	if (ret_val != HAL_OK)
 800064e:	197b      	adds	r3, r7, r5
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d009      	beq.n	800066a <HAL_readSpiValue_EN+0x56>
	{
		HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 8000656:	2380      	movs	r3, #128	; 0x80
 8000658:	0219      	lsls	r1, r3, #8
 800065a:	23a0      	movs	r3, #160	; 0xa0
 800065c:	05db      	lsls	r3, r3, #23
 800065e:	2201      	movs	r2, #1
 8000660:	0018      	movs	r0, r3
 8000662:	f001 feef 	bl	8002444 <HAL_GPIO_WritePin>
		return SPI_READ_ERROR_EN;
 8000666:	2304      	movs	r3, #4
 8000668:	e01b      	b.n	80006a2 <HAL_readSpiValue_EN+0x8e>
	}
	ret_val = HAL_SPI_Receive(&hspi1, read_value_U8A, size_read_value_U16+1, 100);
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	881b      	ldrh	r3, [r3, #0]
 800066e:	3301      	adds	r3, #1
 8000670:	b29a      	uxth	r2, r3
 8000672:	250f      	movs	r5, #15
 8000674:	197c      	adds	r4, r7, r5
 8000676:	6839      	ldr	r1, [r7, #0]
 8000678:	480c      	ldr	r0, [pc, #48]	; (80006ac <HAL_readSpiValue_EN+0x98>)
 800067a:	2364      	movs	r3, #100	; 0x64
 800067c:	f003 f8e0 	bl	8003840 <HAL_SPI_Receive>
 8000680:	0003      	movs	r3, r0
 8000682:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 8000684:	2380      	movs	r3, #128	; 0x80
 8000686:	0219      	lsls	r1, r3, #8
 8000688:	23a0      	movs	r3, #160	; 0xa0
 800068a:	05db      	lsls	r3, r3, #23
 800068c:	2201      	movs	r2, #1
 800068e:	0018      	movs	r0, r3
 8000690:	f001 fed8 	bl	8002444 <HAL_GPIO_WritePin>
	if (ret_val != HAL_OK)
 8000694:	197b      	adds	r3, r7, r5
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <HAL_readSpiValue_EN+0x8c>
	{
		return SPI_READ_ERROR_EN;
 800069c:	2304      	movs	r3, #4
 800069e:	e000      	b.n	80006a2 <HAL_readSpiValue_EN+0x8e>
	}
	else
	{
		return SPI_READ_OK_EN;
 80006a0:	2305      	movs	r3, #5
	}
}
 80006a2:	0018      	movs	r0, r3
 80006a4:	46bd      	mov	sp, r7
 80006a6:	b004      	add	sp, #16
 80006a8:	bdb0      	pop	{r4, r5, r7, pc}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	200000d8 	.word	0x200000d8

080006b0 <HAL_delay_ms>:

inline void HAL_delay_ms(uint32_t time_ms_U32)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	HAL_Delay(time_ms_U32);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	0018      	movs	r0, r3
 80006bc:	f001 faa0 	bl	8001c00 <HAL_Delay>
}
 80006c0:	46c0      	nop			; (mov r8, r8)
 80006c2:	46bd      	mov	sp, r7
 80006c4:	b002      	add	sp, #8
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006cc:	f001 fa28 	bl	8001b20 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d0:	f000 f810 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d4:	f000 fa12 	bl	8000afc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006d8:	f000 f9e0 	bl	8000a9c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80006dc:	f000 f954 	bl	8000988 <MX_TIM2_Init>
  MX_ADC_Init();
 80006e0:	f000 f876 	bl	80007d0 <MX_ADC_Init>
  MX_SPI1_Init();
 80006e4:	f000 f918 	bl	8000918 <MX_SPI1_Init>
  MX_I2C1_Init();
 80006e8:	f000 f8d8 	bl	800089c <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	APP_testRx();
 80006ec:	f7ff fedc 	bl	80004a8 <APP_testRx>
	//APP_testTx();
	while (1) {
 80006f0:	e7fe      	b.n	80006f0 <main+0x28>
	...

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b099      	sub	sp, #100	; 0x64
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	242c      	movs	r4, #44	; 0x2c
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	0018      	movs	r0, r3
 8000700:	2334      	movs	r3, #52	; 0x34
 8000702:	001a      	movs	r2, r3
 8000704:	2100      	movs	r1, #0
 8000706:	f004 fdf5 	bl	80052f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070a:	2318      	movs	r3, #24
 800070c:	18fb      	adds	r3, r7, r3
 800070e:	0018      	movs	r0, r3
 8000710:	2314      	movs	r3, #20
 8000712:	001a      	movs	r2, r3
 8000714:	2100      	movs	r1, #0
 8000716:	f004 fded 	bl	80052f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800071a:	003b      	movs	r3, r7
 800071c:	0018      	movs	r0, r3
 800071e:	2318      	movs	r3, #24
 8000720:	001a      	movs	r2, r3
 8000722:	2100      	movs	r1, #0
 8000724:	f004 fde6 	bl	80052f4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000728:	4b27      	ldr	r3, [pc, #156]	; (80007c8 <SystemClock_Config+0xd4>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a27      	ldr	r2, [pc, #156]	; (80007cc <SystemClock_Config+0xd8>)
 800072e:	401a      	ands	r2, r3
 8000730:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <SystemClock_Config+0xd4>)
 8000732:	2180      	movs	r1, #128	; 0x80
 8000734:	0109      	lsls	r1, r1, #4
 8000736:	430a      	orrs	r2, r1
 8000738:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800073a:	0021      	movs	r1, r4
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2210      	movs	r2, #16
 8000740:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2201      	movs	r2, #1
 8000746:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	22a0      	movs	r2, #160	; 0xa0
 8000752:	0212      	lsls	r2, r2, #8
 8000754:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2200      	movs	r2, #0
 800075a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	187b      	adds	r3, r7, r1
 800075e:	0018      	movs	r0, r3
 8000760:	f001 ffbc 	bl	80026dc <HAL_RCC_OscConfig>
 8000764:	1e03      	subs	r3, r0, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000768:	f000 fa52 	bl	8000c10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076c:	2118      	movs	r1, #24
 800076e:	187b      	adds	r3, r7, r1
 8000770:	220f      	movs	r2, #15
 8000772:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	2200      	movs	r2, #0
 8000778:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000780:	187b      	adds	r3, r7, r1
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000786:	187b      	adds	r3, r7, r1
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800078c:	187b      	adds	r3, r7, r1
 800078e:	2100      	movs	r1, #0
 8000790:	0018      	movs	r0, r3
 8000792:	f002 fb1f 	bl	8002dd4 <HAL_RCC_ClockConfig>
 8000796:	1e03      	subs	r3, r0, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800079a:	f000 fa39 	bl	8000c10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800079e:	003b      	movs	r3, r7
 80007a0:	220a      	movs	r2, #10
 80007a2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007a4:	003b      	movs	r3, r7
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007aa:	003b      	movs	r3, r7
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007b0:	003b      	movs	r3, r7
 80007b2:	0018      	movs	r0, r3
 80007b4:	f002 fd32 	bl	800321c <HAL_RCCEx_PeriphCLKConfig>
 80007b8:	1e03      	subs	r3, r0, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80007bc:	f000 fa28 	bl	8000c10 <Error_Handler>
  }
}
 80007c0:	46c0      	nop			; (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	b019      	add	sp, #100	; 0x64
 80007c6:	bd90      	pop	{r4, r7, pc}
 80007c8:	40007000 	.word	0x40007000
 80007cc:	ffffe7ff 	.word	0xffffe7ff

080007d0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007d6:	003b      	movs	r3, r7
 80007d8:	0018      	movs	r0, r3
 80007da:	2308      	movs	r3, #8
 80007dc:	001a      	movs	r2, r3
 80007de:	2100      	movs	r1, #0
 80007e0:	f004 fd88 	bl	80052f4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80007e4:	4b2a      	ldr	r3, [pc, #168]	; (8000890 <MX_ADC_Init+0xc0>)
 80007e6:	4a2b      	ldr	r2, [pc, #172]	; (8000894 <MX_ADC_Init+0xc4>)
 80007e8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <MX_ADC_Init+0xc0>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80007f0:	4b27      	ldr	r3, [pc, #156]	; (8000890 <MX_ADC_Init+0xc0>)
 80007f2:	22c0      	movs	r2, #192	; 0xc0
 80007f4:	0612      	lsls	r2, r2, #24
 80007f6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80007f8:	4b25      	ldr	r3, [pc, #148]	; (8000890 <MX_ADC_Init+0xc0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007fe:	4b24      	ldr	r3, [pc, #144]	; (8000890 <MX_ADC_Init+0xc0>)
 8000800:	2200      	movs	r2, #0
 8000802:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000804:	4b22      	ldr	r3, [pc, #136]	; (8000890 <MX_ADC_Init+0xc0>)
 8000806:	2201      	movs	r2, #1
 8000808:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800080a:	4b21      	ldr	r3, [pc, #132]	; (8000890 <MX_ADC_Init+0xc0>)
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000810:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <MX_ADC_Init+0xc0>)
 8000812:	2220      	movs	r2, #32
 8000814:	2100      	movs	r1, #0
 8000816:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <MX_ADC_Init+0xc0>)
 800081a:	2221      	movs	r2, #33	; 0x21
 800081c:	2100      	movs	r1, #0
 800081e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000820:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <MX_ADC_Init+0xc0>)
 8000822:	2200      	movs	r2, #0
 8000824:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <MX_ADC_Init+0xc0>)
 8000828:	22c2      	movs	r2, #194	; 0xc2
 800082a:	32ff      	adds	r2, #255	; 0xff
 800082c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800082e:	4b18      	ldr	r3, [pc, #96]	; (8000890 <MX_ADC_Init+0xc0>)
 8000830:	222c      	movs	r2, #44	; 0x2c
 8000832:	2100      	movs	r1, #0
 8000834:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000836:	4b16      	ldr	r3, [pc, #88]	; (8000890 <MX_ADC_Init+0xc0>)
 8000838:	2204      	movs	r2, #4
 800083a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_ADC_Init+0xc0>)
 800083e:	2200      	movs	r2, #0
 8000840:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000842:	4b13      	ldr	r3, [pc, #76]	; (8000890 <MX_ADC_Init+0xc0>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_ADC_Init+0xc0>)
 800084a:	2201      	movs	r2, #1
 800084c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <MX_ADC_Init+0xc0>)
 8000850:	2200      	movs	r2, #0
 8000852:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000854:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_ADC_Init+0xc0>)
 8000856:	0018      	movs	r0, r3
 8000858:	f001 f9f6 	bl	8001c48 <HAL_ADC_Init>
 800085c:	1e03      	subs	r3, r0, #0
 800085e:	d001      	beq.n	8000864 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000860:	f000 f9d6 	bl	8000c10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000864:	003b      	movs	r3, r7
 8000866:	4a0c      	ldr	r2, [pc, #48]	; (8000898 <MX_ADC_Init+0xc8>)
 8000868:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800086a:	003b      	movs	r3, r7
 800086c:	2280      	movs	r2, #128	; 0x80
 800086e:	0152      	lsls	r2, r2, #5
 8000870:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000872:	003a      	movs	r2, r7
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_ADC_Init+0xc0>)
 8000876:	0011      	movs	r1, r2
 8000878:	0018      	movs	r0, r3
 800087a:	f001 fb59 	bl	8001f30 <HAL_ADC_ConfigChannel>
 800087e:	1e03      	subs	r3, r0, #0
 8000880:	d001      	beq.n	8000886 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000882:	f000 f9c5 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	b002      	add	sp, #8
 800088c:	bd80      	pop	{r7, pc}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	20000028 	.word	0x20000028
 8000894:	40012400 	.word	0x40012400
 8000898:	10000010 	.word	0x10000010

0800089c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008a0:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <MX_I2C1_Init+0x74>)
 80008a2:	4a1c      	ldr	r2, [pc, #112]	; (8000914 <MX_I2C1_Init+0x78>)
 80008a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000000;
 80008a6:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <MX_I2C1_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008ac:	4b18      	ldr	r3, [pc, #96]	; (8000910 <MX_I2C1_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b2:	4b17      	ldr	r3, [pc, #92]	; (8000910 <MX_I2C1_Init+0x74>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_I2C1_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <MX_I2C1_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_I2C1_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_I2C1_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_I2C1_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_I2C1_Init+0x74>)
 80008d8:	0018      	movs	r0, r3
 80008da:	f001 fdd1 	bl	8002480 <HAL_I2C_Init>
 80008de:	1e03      	subs	r3, r0, #0
 80008e0:	d001      	beq.n	80008e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008e2:	f000 f995 	bl	8000c10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008e6:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <MX_I2C1_Init+0x74>)
 80008e8:	2100      	movs	r1, #0
 80008ea:	0018      	movs	r0, r3
 80008ec:	f001 fe5e 	bl	80025ac <HAL_I2CEx_ConfigAnalogFilter>
 80008f0:	1e03      	subs	r3, r0, #0
 80008f2:	d001      	beq.n	80008f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008f4:	f000 f98c 	bl	8000c10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <MX_I2C1_Init+0x74>)
 80008fa:	2100      	movs	r1, #0
 80008fc:	0018      	movs	r0, r3
 80008fe:	f001 fea1 	bl	8002644 <HAL_I2CEx_ConfigDigitalFilter>
 8000902:	1e03      	subs	r3, r0, #0
 8000904:	d001      	beq.n	800090a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000906:	f000 f983 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000084 	.word	0x20000084
 8000914:	40005400 	.word	0x40005400

08000918 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800091c:	4b18      	ldr	r3, [pc, #96]	; (8000980 <MX_SPI1_Init+0x68>)
 800091e:	4a19      	ldr	r2, [pc, #100]	; (8000984 <MX_SPI1_Init+0x6c>)
 8000920:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000922:	4b17      	ldr	r3, [pc, #92]	; (8000980 <MX_SPI1_Init+0x68>)
 8000924:	2282      	movs	r2, #130	; 0x82
 8000926:	0052      	lsls	r2, r2, #1
 8000928:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <MX_SPI1_Init+0x68>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000930:	4b13      	ldr	r3, [pc, #76]	; (8000980 <MX_SPI1_Init+0x68>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_SPI1_Init+0x68>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800093c:	4b10      	ldr	r3, [pc, #64]	; (8000980 <MX_SPI1_Init+0x68>)
 800093e:	2200      	movs	r2, #0
 8000940:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_SPI1_Init+0x68>)
 8000944:	2280      	movs	r2, #128	; 0x80
 8000946:	0092      	lsls	r2, r2, #2
 8000948:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <MX_SPI1_Init+0x68>)
 800094c:	2200      	movs	r2, #0
 800094e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000950:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_SPI1_Init+0x68>)
 8000952:	2200      	movs	r2, #0
 8000954:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000956:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <MX_SPI1_Init+0x68>)
 8000958:	2200      	movs	r2, #0
 800095a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800095c:	4b08      	ldr	r3, [pc, #32]	; (8000980 <MX_SPI1_Init+0x68>)
 800095e:	2200      	movs	r2, #0
 8000960:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000962:	4b07      	ldr	r3, [pc, #28]	; (8000980 <MX_SPI1_Init+0x68>)
 8000964:	2207      	movs	r2, #7
 8000966:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <MX_SPI1_Init+0x68>)
 800096a:	0018      	movs	r0, r3
 800096c:	f002 fd82 	bl	8003474 <HAL_SPI_Init>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d001      	beq.n	8000978 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000974:	f000 f94c 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	200000d8 	.word	0x200000d8
 8000984:	40013000 	.word	0x40013000

08000988 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800098e:	2318      	movs	r3, #24
 8000990:	18fb      	adds	r3, r7, r3
 8000992:	0018      	movs	r0, r3
 8000994:	2310      	movs	r3, #16
 8000996:	001a      	movs	r2, r3
 8000998:	2100      	movs	r1, #0
 800099a:	f004 fcab 	bl	80052f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800099e:	2310      	movs	r3, #16
 80009a0:	18fb      	adds	r3, r7, r3
 80009a2:	0018      	movs	r0, r3
 80009a4:	2308      	movs	r3, #8
 80009a6:	001a      	movs	r2, r3
 80009a8:	2100      	movs	r1, #0
 80009aa:	f004 fca3 	bl	80052f4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ae:	003b      	movs	r3, r7
 80009b0:	0018      	movs	r0, r3
 80009b2:	2310      	movs	r3, #16
 80009b4:	001a      	movs	r2, r3
 80009b6:	2100      	movs	r1, #0
 80009b8:	f004 fc9c 	bl	80052f4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009bc:	4b35      	ldr	r3, [pc, #212]	; (8000a94 <MX_TIM2_Init+0x10c>)
 80009be:	2280      	movs	r2, #128	; 0x80
 80009c0:	05d2      	lsls	r2, r2, #23
 80009c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009c4:	4b33      	ldr	r3, [pc, #204]	; (8000a94 <MX_TIM2_Init+0x10c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ca:	4b32      	ldr	r3, [pc, #200]	; (8000a94 <MX_TIM2_Init+0x10c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80009d0:	4b30      	ldr	r3, [pc, #192]	; (8000a94 <MX_TIM2_Init+0x10c>)
 80009d2:	4a31      	ldr	r2, [pc, #196]	; (8000a98 <MX_TIM2_Init+0x110>)
 80009d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d6:	4b2f      	ldr	r3, [pc, #188]	; (8000a94 <MX_TIM2_Init+0x10c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009dc:	4b2d      	ldr	r3, [pc, #180]	; (8000a94 <MX_TIM2_Init+0x10c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009e2:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <MX_TIM2_Init+0x10c>)
 80009e4:	0018      	movs	r0, r3
 80009e6:	f003 fb63 	bl	80040b0 <HAL_TIM_Base_Init>
 80009ea:	1e03      	subs	r3, r0, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80009ee:	f000 f90f 	bl	8000c10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f2:	2118      	movs	r1, #24
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2280      	movs	r2, #128	; 0x80
 80009f8:	0152      	lsls	r2, r2, #5
 80009fa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009fc:	187a      	adds	r2, r7, r1
 80009fe:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <MX_TIM2_Init+0x10c>)
 8000a00:	0011      	movs	r1, r2
 8000a02:	0018      	movs	r0, r3
 8000a04:	f003 fca2 	bl	800434c <HAL_TIM_ConfigClockSource>
 8000a08:	1e03      	subs	r3, r0, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000a0c:	f000 f900 	bl	8000c10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a10:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <MX_TIM2_Init+0x10c>)
 8000a12:	0018      	movs	r0, r3
 8000a14:	f003 fb8c 	bl	8004130 <HAL_TIM_PWM_Init>
 8000a18:	1e03      	subs	r3, r0, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000a1c:	f000 f8f8 	bl	8000c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a20:	2110      	movs	r1, #16
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a2e:	187a      	adds	r2, r7, r1
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <MX_TIM2_Init+0x10c>)
 8000a32:	0011      	movs	r1, r2
 8000a34:	0018      	movs	r0, r3
 8000a36:	f003 ff45 	bl	80048c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3a:	1e03      	subs	r3, r0, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000a3e:	f000 f8e7 	bl	8000c10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a42:	003b      	movs	r3, r7
 8000a44:	2260      	movs	r2, #96	; 0x60
 8000a46:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a48:	003b      	movs	r3, r7
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a4e:	003b      	movs	r3, r7
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a54:	003b      	movs	r3, r7
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a5a:	0039      	movs	r1, r7
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <MX_TIM2_Init+0x10c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	0018      	movs	r0, r3
 8000a62:	f003 fbad 	bl	80041c0 <HAL_TIM_PWM_ConfigChannel>
 8000a66:	1e03      	subs	r3, r0, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000a6a:	f000 f8d1 	bl	8000c10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a6e:	0039      	movs	r1, r7
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <MX_TIM2_Init+0x10c>)
 8000a72:	2204      	movs	r2, #4
 8000a74:	0018      	movs	r0, r3
 8000a76:	f003 fba3 	bl	80041c0 <HAL_TIM_PWM_ConfigChannel>
 8000a7a:	1e03      	subs	r3, r0, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8000a7e:	f000 f8c7 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a82:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <MX_TIM2_Init+0x10c>)
 8000a84:	0018      	movs	r0, r3
 8000a86:	f000 ff6d 	bl	8001964 <HAL_TIM_MspPostInit>

}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b00a      	add	sp, #40	; 0x28
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	20000130 	.word	0x20000130
 8000a98:	0000ffff 	.word	0x0000ffff

08000a9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_USART2_UART_Init+0x58>)
 8000aa2:	4a15      	ldr	r2, [pc, #84]	; (8000af8 <MX_USART2_UART_Init+0x5c>)
 8000aa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aa6:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <MX_USART2_UART_Init+0x58>)
 8000aa8:	22e1      	movs	r2, #225	; 0xe1
 8000aaa:	0252      	lsls	r2, r2, #9
 8000aac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_USART2_UART_Init+0x58>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_USART2_UART_Init+0x58>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_USART2_UART_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_USART2_UART_Init+0x58>)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MX_USART2_UART_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_USART2_UART_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <MX_USART2_UART_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_USART2_UART_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ade:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <MX_USART2_UART_Init+0x58>)
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f003 ff3f 	bl	8004964 <HAL_UART_Init>
 8000ae6:	1e03      	subs	r3, r0, #0
 8000ae8:	d001      	beq.n	8000aee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000aea:	f000 f891 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000170 	.word	0x20000170
 8000af8:	40004400 	.word	0x40004400

08000afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b089      	sub	sp, #36	; 0x24
 8000b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	240c      	movs	r4, #12
 8000b04:	193b      	adds	r3, r7, r4
 8000b06:	0018      	movs	r0, r3
 8000b08:	2314      	movs	r3, #20
 8000b0a:	001a      	movs	r2, r3
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	f004 fbf1 	bl	80052f4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b12:	4b3c      	ldr	r3, [pc, #240]	; (8000c04 <MX_GPIO_Init+0x108>)
 8000b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b16:	4b3b      	ldr	r3, [pc, #236]	; (8000c04 <MX_GPIO_Init+0x108>)
 8000b18:	2180      	movs	r1, #128	; 0x80
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b1e:	4b39      	ldr	r3, [pc, #228]	; (8000c04 <MX_GPIO_Init+0x108>)
 8000b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b22:	2280      	movs	r2, #128	; 0x80
 8000b24:	4013      	ands	r3, r2
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	4b36      	ldr	r3, [pc, #216]	; (8000c04 <MX_GPIO_Init+0x108>)
 8000b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b2e:	4b35      	ldr	r3, [pc, #212]	; (8000c04 <MX_GPIO_Init+0x108>)
 8000b30:	2101      	movs	r1, #1
 8000b32:	430a      	orrs	r2, r1
 8000b34:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b36:	4b33      	ldr	r3, [pc, #204]	; (8000c04 <MX_GPIO_Init+0x108>)
 8000b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b42:	4b30      	ldr	r3, [pc, #192]	; (8000c04 <MX_GPIO_Init+0x108>)
 8000b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b46:	4b2f      	ldr	r3, [pc, #188]	; (8000c04 <MX_GPIO_Init+0x108>)
 8000b48:	2102      	movs	r1, #2
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b4e:	4b2d      	ldr	r3, [pc, #180]	; (8000c04 <MX_GPIO_Init+0x108>)
 8000b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b52:	2202      	movs	r2, #2
 8000b54:	4013      	ands	r3, r2
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, offb_Pin|off_Pin, GPIO_PIN_RESET);
 8000b5a:	4b2b      	ldr	r3, [pc, #172]	; (8000c08 <MX_GPIO_Init+0x10c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2103      	movs	r1, #3
 8000b60:	0018      	movs	r0, r3
 8000b62:	f001 fc6f 	bl	8002444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, cmd_pleins_phares_Pin|led_v_Pin|direction_Pin|IRQ_Pin
 8000b66:	23ce      	movs	r3, #206	; 0xce
 8000b68:	01db      	lsls	r3, r3, #7
 8000b6a:	4828      	ldr	r0, [pc, #160]	; (8000c0c <MX_GPIO_Init+0x110>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	0019      	movs	r1, r3
 8000b70:	f001 fc68 	bl	8002444 <HAL_GPIO_WritePin>
                          |CE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led_r_Pin|CSN_Pin, GPIO_PIN_RESET);
 8000b74:	2381      	movs	r3, #129	; 0x81
 8000b76:	0219      	lsls	r1, r3, #8
 8000b78:	23a0      	movs	r3, #160	; 0xa0
 8000b7a:	05db      	lsls	r3, r3, #23
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f001 fc60 	bl	8002444 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : offb_Pin off_Pin */
  GPIO_InitStruct.Pin = offb_Pin|off_Pin;
 8000b84:	193b      	adds	r3, r7, r4
 8000b86:	2203      	movs	r2, #3
 8000b88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	193b      	adds	r3, r7, r4
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b90:	193b      	adds	r3, r7, r4
 8000b92:	2202      	movs	r2, #2
 8000b94:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	193b      	adds	r3, r7, r4
 8000b98:	2200      	movs	r2, #0
 8000b9a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b9c:	193b      	adds	r3, r7, r4
 8000b9e:	4a1a      	ldr	r2, [pc, #104]	; (8000c08 <MX_GPIO_Init+0x10c>)
 8000ba0:	0019      	movs	r1, r3
 8000ba2:	0010      	movs	r0, r2
 8000ba4:	f001 fae0 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pins : cmd_pleins_phares_Pin led_v_Pin direction_Pin IRQ_Pin
                           CE_Pin */
  GPIO_InitStruct.Pin = cmd_pleins_phares_Pin|led_v_Pin|direction_Pin|IRQ_Pin
 8000ba8:	0021      	movs	r1, r4
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	22ce      	movs	r2, #206	; 0xce
 8000bae:	01d2      	lsls	r2, r2, #7
 8000bb0:	601a      	str	r2, [r3, #0]
                          |CE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb2:	000c      	movs	r4, r1
 8000bb4:	193b      	adds	r3, r7, r4
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	193b      	adds	r3, r7, r4
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	193b      	adds	r3, r7, r4
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc6:	193b      	adds	r3, r7, r4
 8000bc8:	4a10      	ldr	r2, [pc, #64]	; (8000c0c <MX_GPIO_Init+0x110>)
 8000bca:	0019      	movs	r1, r3
 8000bcc:	0010      	movs	r0, r2
 8000bce:	f001 facb 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_r_Pin CSN_Pin */
  GPIO_InitStruct.Pin = led_r_Pin|CSN_Pin;
 8000bd2:	0021      	movs	r1, r4
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	2281      	movs	r2, #129	; 0x81
 8000bd8:	0212      	lsls	r2, r2, #8
 8000bda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	2201      	movs	r2, #1
 8000be0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	187a      	adds	r2, r7, r1
 8000bf0:	23a0      	movs	r3, #160	; 0xa0
 8000bf2:	05db      	lsls	r3, r3, #23
 8000bf4:	0011      	movs	r1, r2
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f001 fab6 	bl	8002168 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bfc:	46c0      	nop			; (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b009      	add	sp, #36	; 0x24
 8000c02:	bd90      	pop	{r4, r7, pc}
 8000c04:	40021000 	.word	0x40021000
 8000c08:	50001c00 	.word	0x50001c00
 8000c0c:	50000400 	.word	0x50000400

08000c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c14:	b672      	cpsid	i
}
 8000c16:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c18:	e7fe      	b.n	8000c18 <Error_Handler+0x8>

08000c1a <NRF_WriteReg_EN>:
static bool NRF_isInit_B = false;


// write a single byte to the particular register
static NRF_ret_val_en NRF_WriteReg_EN(NRF_register_REG register_REG, uint8_t Data_U8)
{
 8000c1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c1c:	b085      	sub	sp, #20
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	0002      	movs	r2, r0
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	701a      	strb	r2, [r3, #0]
 8000c26:	1dbb      	adds	r3, r7, #6
 8000c28:	1c0a      	adds	r2, r1, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
	uint8_t buf_U8[2];
	HAL_ret_val_en HAL_ret_val_EN;

	buf_U8[0] = register_REG|1<<5;
 8000c2c:	1dfb      	adds	r3, r7, #7
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2220      	movs	r2, #32
 8000c32:	4313      	orrs	r3, r2
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	250c      	movs	r5, #12
 8000c38:	197b      	adds	r3, r7, r5
 8000c3a:	701a      	strb	r2, [r3, #0]
	buf_U8[1] = Data_U8;
 8000c3c:	197b      	adds	r3, r7, r5
 8000c3e:	1dba      	adds	r2, r7, #6
 8000c40:	7812      	ldrb	r2, [r2, #0]
 8000c42:	705a      	strb	r2, [r3, #1]

	HAL_ret_val_EN = HAL_writeSpiValue_EN(buf_U8, 2);
 8000c44:	260f      	movs	r6, #15
 8000c46:	19bc      	adds	r4, r7, r6
 8000c48:	197b      	adds	r3, r7, r5
 8000c4a:	2102      	movs	r1, #2
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f7ff fcb1 	bl	80005b4 <HAL_writeSpiValue_EN>
 8000c52:	0003      	movs	r3, r0
 8000c54:	7023      	strb	r3, [r4, #0]
	if(HAL_ret_val_EN != SPI_WRITE_OK_EN)
 8000c56:	19bb      	adds	r3, r7, r6
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b03      	cmp	r3, #3
 8000c5c:	d00f      	beq.n	8000c7e <NRF_WriteReg_EN+0x64>
	{
		HAL_ret_val_EN = HAL_writeSpiValue_EN(buf_U8, 2);
 8000c5e:	19bc      	adds	r4, r7, r6
 8000c60:	197b      	adds	r3, r7, r5
 8000c62:	2102      	movs	r1, #2
 8000c64:	0018      	movs	r0, r3
 8000c66:	f7ff fca5 	bl	80005b4 <HAL_writeSpiValue_EN>
 8000c6a:	0003      	movs	r3, r0
 8000c6c:	7023      	strb	r3, [r4, #0]
		if(HAL_ret_val_EN != SPI_WRITE_OK_EN)
 8000c6e:	19bb      	adds	r3, r7, r6
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b03      	cmp	r3, #3
 8000c74:	d001      	beq.n	8000c7a <NRF_WriteReg_EN+0x60>
		{
			return NRF_SPI_ERROR_EN;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e002      	b.n	8000c80 <NRF_WriteReg_EN+0x66>
		}
		else
		{
			return NRF_OK_EN;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	e000      	b.n	8000c80 <NRF_WriteReg_EN+0x66>
		}
	}
	else
	{
		return NRF_OK_EN;
 8000c7e:	2303      	movs	r3, #3
	}

}
 8000c80:	0018      	movs	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b005      	add	sp, #20
 8000c86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c88 <NRF_WriteReg_Multi_EN>:


static HAL_ret_val_en NRF_WriteReg_Multi_EN(NRF_register_REG register_REG, uint8_t* Data_U8A, uint16_t size_U16)
{
 8000c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c8a:	46c6      	mov	lr, r8
 8000c8c:	b500      	push	{lr}
 8000c8e:	b08c      	sub	sp, #48	; 0x30
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	61b9      	str	r1, [r7, #24]
 8000c94:	0011      	movs	r1, r2
 8000c96:	231f      	movs	r3, #31
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	1c02      	adds	r2, r0, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
 8000c9e:	201c      	movs	r0, #28
 8000ca0:	183b      	adds	r3, r7, r0
 8000ca2:	1c0a      	adds	r2, r1, #0
 8000ca4:	801a      	strh	r2, [r3, #0]
 8000ca6:	466b      	mov	r3, sp
 8000ca8:	4698      	mov	r8, r3
	uint8_t buf_U8A[1+size_U16];
 8000caa:	183b      	adds	r3, r7, r0
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	1e5a      	subs	r2, r3, #1
 8000cb2:	62ba      	str	r2, [r7, #40]	; 0x28
 8000cb4:	001a      	movs	r2, r3
 8000cb6:	60ba      	str	r2, [r7, #8]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	60fa      	str	r2, [r7, #12]
 8000cbc:	68b8      	ldr	r0, [r7, #8]
 8000cbe:	68f9      	ldr	r1, [r7, #12]
 8000cc0:	0002      	movs	r2, r0
 8000cc2:	0f52      	lsrs	r2, r2, #29
 8000cc4:	000e      	movs	r6, r1
 8000cc6:	00f6      	lsls	r6, r6, #3
 8000cc8:	617e      	str	r6, [r7, #20]
 8000cca:	697e      	ldr	r6, [r7, #20]
 8000ccc:	4316      	orrs	r6, r2
 8000cce:	617e      	str	r6, [r7, #20]
 8000cd0:	0002      	movs	r2, r0
 8000cd2:	00d2      	lsls	r2, r2, #3
 8000cd4:	613a      	str	r2, [r7, #16]
 8000cd6:	001a      	movs	r2, r3
 8000cd8:	603a      	str	r2, [r7, #0]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	607a      	str	r2, [r7, #4]
 8000cde:	6838      	ldr	r0, [r7, #0]
 8000ce0:	6879      	ldr	r1, [r7, #4]
 8000ce2:	0002      	movs	r2, r0
 8000ce4:	0f52      	lsrs	r2, r2, #29
 8000ce6:	000e      	movs	r6, r1
 8000ce8:	00f5      	lsls	r5, r6, #3
 8000cea:	4315      	orrs	r5, r2
 8000cec:	0002      	movs	r2, r0
 8000cee:	00d4      	lsls	r4, r2, #3
 8000cf0:	3307      	adds	r3, #7
 8000cf2:	08db      	lsrs	r3, r3, #3
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	466a      	mov	r2, sp
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	469d      	mov	sp, r3
 8000cfc:	466b      	mov	r3, sp
 8000cfe:	3300      	adds	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
	buf_U8A[0] = register_REG|1<<5;
 8000d02:	231f      	movs	r3, #31
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2220      	movs	r2, #32
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d10:	701a      	strb	r2, [r3, #0]
	HAL_ret_val_en HAL_ret_val_EN;

	for(uint16_t counter_U16=0 ; counter_U16<size_U16 ; counter_U16++){
 8000d12:	2316      	movs	r3, #22
 8000d14:	2218      	movs	r2, #24
 8000d16:	189b      	adds	r3, r3, r2
 8000d18:	19db      	adds	r3, r3, r7
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	801a      	strh	r2, [r3, #0]
 8000d1e:	e014      	b.n	8000d4a <NRF_WriteReg_Multi_EN+0xc2>
		buf_U8A[1+counter_U16] = Data_U8A[counter_U16];
 8000d20:	2016      	movs	r0, #22
 8000d22:	2418      	movs	r4, #24
 8000d24:	1903      	adds	r3, r0, r4
 8000d26:	19db      	adds	r3, r3, r7
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	18d2      	adds	r2, r2, r3
 8000d2e:	1903      	adds	r3, r0, r4
 8000d30:	19db      	adds	r3, r3, r7
 8000d32:	881b      	ldrh	r3, [r3, #0]
 8000d34:	3301      	adds	r3, #1
 8000d36:	7811      	ldrb	r1, [r2, #0]
 8000d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d3a:	54d1      	strb	r1, [r2, r3]
	for(uint16_t counter_U16=0 ; counter_U16<size_U16 ; counter_U16++){
 8000d3c:	1903      	adds	r3, r0, r4
 8000d3e:	19db      	adds	r3, r3, r7
 8000d40:	881a      	ldrh	r2, [r3, #0]
 8000d42:	1903      	adds	r3, r0, r4
 8000d44:	19db      	adds	r3, r3, r7
 8000d46:	3201      	adds	r2, #1
 8000d48:	801a      	strh	r2, [r3, #0]
 8000d4a:	2316      	movs	r3, #22
 8000d4c:	2118      	movs	r1, #24
 8000d4e:	185b      	adds	r3, r3, r1
 8000d50:	19da      	adds	r2, r3, r7
 8000d52:	201c      	movs	r0, #28
 8000d54:	183b      	adds	r3, r7, r0
 8000d56:	8812      	ldrh	r2, [r2, #0]
 8000d58:	881b      	ldrh	r3, [r3, #0]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d3e0      	bcc.n	8000d20 <NRF_WriteReg_Multi_EN+0x98>
	}

	HAL_ret_val_EN = HAL_writeSpiValue_EN(buf_U8A, 1+size_U16);
 8000d5e:	183b      	adds	r3, r7, r0
 8000d60:	881b      	ldrh	r3, [r3, #0]
 8000d62:	3301      	adds	r3, #1
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	250b      	movs	r5, #11
 8000d68:	000e      	movs	r6, r1
 8000d6a:	186b      	adds	r3, r5, r1
 8000d6c:	19dc      	adds	r4, r3, r7
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d70:	0011      	movs	r1, r2
 8000d72:	0018      	movs	r0, r3
 8000d74:	f7ff fc1e 	bl	80005b4 <HAL_writeSpiValue_EN>
 8000d78:	0003      	movs	r3, r0
 8000d7a:	7023      	strb	r3, [r4, #0]
	if(HAL_ret_val_EN != SPI_WRITE_OK_EN)
 8000d7c:	19ab      	adds	r3, r5, r6
 8000d7e:	19db      	adds	r3, r3, r7
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d001      	beq.n	8000d8a <NRF_WriteReg_Multi_EN+0x102>
	{
		return NRF_SPI_ERROR_EN;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e000      	b.n	8000d8c <NRF_WriteReg_Multi_EN+0x104>
	}
	else
	{
		return NRF_OK_EN;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	46c5      	mov	sp, r8
	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);

	// Pull the CS HIGH to release the device
	CS_UnSelect();*/
}
 8000d8e:	0018      	movs	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b00c      	add	sp, #48	; 0x30
 8000d94:	bc80      	pop	{r7}
 8000d96:	46b8      	mov	r8, r7
 8000d98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d9a <nrf24_ReadReg_EN>:


static NRF_ret_val_en nrf24_ReadReg_EN(NRF_register_REG register_REG, uint8_t* read_value_U8P)
{
 8000d9a:	b5b0      	push	{r4, r5, r7, lr}
 8000d9c:	b084      	sub	sp, #16
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	0002      	movs	r2, r0
 8000da2:	6039      	str	r1, [r7, #0]
 8000da4:	1dfb      	adds	r3, r7, #7
 8000da6:	701a      	strb	r2, [r3, #0]
	HAL_ret_val_en HAL_ret_val_EN;
	*read_value_U8P = 0;
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
	HAL_ret_val_EN = HAL_readSpiValue_EN((uint8_t)register_REG,read_value_U8P,1);
 8000dae:	250f      	movs	r5, #15
 8000db0:	197c      	adds	r4, r7, r5
 8000db2:	6839      	ldr	r1, [r7, #0]
 8000db4:	1dfb      	adds	r3, r7, #7
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2201      	movs	r2, #1
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f7ff fc2a 	bl	8000614 <HAL_readSpiValue_EN>
 8000dc0:	0003      	movs	r3, r0
 8000dc2:	7023      	strb	r3, [r4, #0]
	if(HAL_ret_val_EN != SPI_READ_OK_EN)
 8000dc4:	197b      	adds	r3, r7, r5
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b05      	cmp	r3, #5
 8000dca:	d001      	beq.n	8000dd0 <nrf24_ReadReg_EN+0x36>
	{
		return NRF_SPI_ERROR_EN;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e000      	b.n	8000dd2 <nrf24_ReadReg_EN+0x38>
	}
	else
	{
		return NRF_OK_EN;
 8000dd0:	2303      	movs	r3, #3
	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);

	// Pull the CS HIGH to release the device
	CS_UnSelect();*/
}
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b004      	add	sp, #16
 8000dd8:	bdb0      	pop	{r4, r5, r7, pc}

08000dda <nrf24_ReadReg_Multi_EN>:


/* Read multiple bytes from the register */
static HAL_ret_val_en nrf24_ReadReg_Multi_EN(NRF_register_REG register_REG, uint8_t* read_value_U8A,uint16_t size_read_value_U16)
{
 8000dda:	b5b0      	push	{r4, r5, r7, lr}
 8000ddc:	b084      	sub	sp, #16
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6039      	str	r1, [r7, #0]
 8000de2:	0011      	movs	r1, r2
 8000de4:	1dfb      	adds	r3, r7, #7
 8000de6:	1c02      	adds	r2, r0, #0
 8000de8:	701a      	strb	r2, [r3, #0]
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	1c0a      	adds	r2, r1, #0
 8000dee:	801a      	strh	r2, [r3, #0]
	HAL_ret_val_en HAL_ret_val_EN;
	HAL_ret_val_EN = HAL_readSpiValue_EN((uint8_t)register_REG,read_value_U8A,size_read_value_U16);
 8000df0:	250f      	movs	r5, #15
 8000df2:	197c      	adds	r4, r7, r5
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	881a      	ldrh	r2, [r3, #0]
 8000df8:	6839      	ldr	r1, [r7, #0]
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f7ff fc08 	bl	8000614 <HAL_readSpiValue_EN>
 8000e04:	0003      	movs	r3, r0
 8000e06:	7023      	strb	r3, [r4, #0]
	if(HAL_ret_val_EN != SPI_READ_OK_EN)
 8000e08:	197b      	adds	r3, r7, r5
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b05      	cmp	r3, #5
 8000e0e:	d001      	beq.n	8000e14 <nrf24_ReadReg_Multi_EN+0x3a>
	{
		return NRF_SPI_ERROR_EN;
 8000e10:	2301      	movs	r3, #1
 8000e12:	e000      	b.n	8000e16 <nrf24_ReadReg_Multi_EN+0x3c>
	}
	else
	{
		return NRF_OK_EN;
 8000e14:	2303      	movs	r3, #3
	}
}
 8000e16:	0018      	movs	r0, r3
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	b004      	add	sp, #16
 8000e1c:	bdb0      	pop	{r4, r5, r7, pc}

08000e1e <nrfsendCmd_EN>:


// send the command to the NRF
static HAL_ret_val_en nrfsendCmd_EN(uint8_t cmd)
{
 8000e1e:	b5b0      	push	{r4, r5, r7, lr}
 8000e20:	b084      	sub	sp, #16
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	0002      	movs	r2, r0
 8000e26:	1dfb      	adds	r3, r7, #7
 8000e28:	701a      	strb	r2, [r3, #0]
	HAL_ret_val_en HAL_ret_val_EN;
	HAL_ret_val_EN = HAL_writeSpiValue_EN(&cmd, 1);
 8000e2a:	250f      	movs	r5, #15
 8000e2c:	197c      	adds	r4, r7, r5
 8000e2e:	1dfb      	adds	r3, r7, #7
 8000e30:	2101      	movs	r1, #1
 8000e32:	0018      	movs	r0, r3
 8000e34:	f7ff fbbe 	bl	80005b4 <HAL_writeSpiValue_EN>
 8000e38:	0003      	movs	r3, r0
 8000e3a:	7023      	strb	r3, [r4, #0]
	if(HAL_ret_val_EN != SPI_WRITE_OK_EN)
 8000e3c:	197b      	adds	r3, r7, r5
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	d001      	beq.n	8000e48 <nrfsendCmd_EN+0x2a>
	{
		return NRF_SPI_ERROR_EN;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e000      	b.n	8000e4a <nrfsendCmd_EN+0x2c>
	}
	else
	{
		return NRF_OK_EN;
 8000e48:	2303      	movs	r3, #3
	}
}
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b004      	add	sp, #16
 8000e50:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000e54 <nrf24_reset_EN>:

//TODO faire cette fonction avec ma HAL
static NRF_ret_val_en nrf24_reset_EN(NRF_register_REG REG)
{
 8000e54:	b5b0      	push	{r4, r5, r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	0002      	movs	r2, r0
 8000e5c:	1dfb      	adds	r3, r7, #7
 8000e5e:	701a      	strb	r2, [r3, #0]
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000e60:	2318      	movs	r3, #24
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	4ad1      	ldr	r2, [pc, #836]	; (80011ac <nrf24_reset_EN+0x358>)
 8000e66:	6811      	ldr	r1, [r2, #0]
 8000e68:	6019      	str	r1, [r3, #0]
 8000e6a:	7912      	ldrb	r2, [r2, #4]
 8000e6c:	711a      	strb	r2, [r3, #4]
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000e6e:	2310      	movs	r3, #16
 8000e70:	18fb      	adds	r3, r7, r3
 8000e72:	4acf      	ldr	r2, [pc, #828]	; (80011b0 <nrf24_reset_EN+0x35c>)
 8000e74:	6811      	ldr	r1, [r2, #0]
 8000e76:	6019      	str	r1, [r3, #0]
 8000e78:	7912      	ldrb	r2, [r2, #4]
 8000e7a:	711a      	strb	r2, [r3, #4]
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000e7c:	2308      	movs	r3, #8
 8000e7e:	18fb      	adds	r3, r7, r3
 8000e80:	4acb      	ldr	r2, [pc, #812]	; (80011b0 <nrf24_reset_EN+0x35c>)
 8000e82:	6811      	ldr	r1, [r2, #0]
 8000e84:	6019      	str	r1, [r3, #0]
 8000e86:	7912      	ldrb	r2, [r2, #4]
 8000e88:	711a      	strb	r2, [r3, #4]
	NRF_ret_val_en NRF_ret_val_EN;
	if(REG == STATUS_REG)
 8000e8a:	1dfb      	adds	r3, r7, #7
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b07      	cmp	r3, #7
 8000e90:	d110      	bne.n	8000eb4 <nrf24_reset_EN+0x60>
	{
		NRF_ret_val_EN = NRF_WriteReg_EN(STATUS_REG, 0x00);
 8000e92:	251f      	movs	r5, #31
 8000e94:	197c      	adds	r4, r7, r5
 8000e96:	2100      	movs	r1, #0
 8000e98:	2007      	movs	r0, #7
 8000e9a:	f7ff febe 	bl	8000c1a <NRF_WriteReg_EN>
 8000e9e:	0003      	movs	r3, r0
 8000ea0:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8000ea2:	002a      	movs	r2, r5
 8000ea4:	18bb      	adds	r3, r7, r2
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b03      	cmp	r3, #3
 8000eaa:	d100      	bne.n	8000eae <nrf24_reset_EN+0x5a>
 8000eac:	e1c2      	b.n	8001234 <nrf24_reset_EN+0x3e0>
		{
			return NRF_ret_val_EN;
 8000eae:	18bb      	adds	r3, r7, r2
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	e1c0      	b.n	8001236 <nrf24_reset_EN+0x3e2>
		}
	}

	else if(REG == FIFO_STATUS_REG)
 8000eb4:	1dfb      	adds	r3, r7, #7
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b17      	cmp	r3, #23
 8000eba:	d110      	bne.n	8000ede <nrf24_reset_EN+0x8a>
	{
		NRF_ret_val_EN = NRF_WriteReg_EN(FIFO_STATUS_REG, 0x11);
 8000ebc:	251f      	movs	r5, #31
 8000ebe:	197c      	adds	r4, r7, r5
 8000ec0:	2111      	movs	r1, #17
 8000ec2:	2017      	movs	r0, #23
 8000ec4:	f7ff fea9 	bl	8000c1a <NRF_WriteReg_EN>
 8000ec8:	0003      	movs	r3, r0
 8000eca:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8000ecc:	002a      	movs	r2, r5
 8000ece:	18bb      	adds	r3, r7, r2
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d100      	bne.n	8000ed8 <nrf24_reset_EN+0x84>
 8000ed6:	e1ad      	b.n	8001234 <nrf24_reset_EN+0x3e0>
		{
			return NRF_ret_val_EN;
 8000ed8:	18bb      	adds	r3, r7, r2
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	e1ab      	b.n	8001236 <nrf24_reset_EN+0x3e2>
		}
	}

	else {
		NRF_ret_val_EN = NRF_WriteReg_EN(CONFIG_REG, 0x08);
 8000ede:	251f      	movs	r5, #31
 8000ee0:	197c      	adds	r4, r7, r5
 8000ee2:	2108      	movs	r1, #8
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f7ff fe98 	bl	8000c1a <NRF_WriteReg_EN>
 8000eea:	0003      	movs	r3, r0
 8000eec:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8000eee:	002a      	movs	r2, r5
 8000ef0:	18bb      	adds	r3, r7, r2
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b03      	cmp	r3, #3
 8000ef6:	d002      	beq.n	8000efe <nrf24_reset_EN+0xaa>
		{
			return NRF_ret_val_EN;
 8000ef8:	18bb      	adds	r3, r7, r2
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	e19b      	b.n	8001236 <nrf24_reset_EN+0x3e2>
		}

		NRF_ret_val_EN = NRF_WriteReg_EN(EN_AA_REG, 0x3F);
 8000efe:	251f      	movs	r5, #31
 8000f00:	197c      	adds	r4, r7, r5
 8000f02:	213f      	movs	r1, #63	; 0x3f
 8000f04:	2001      	movs	r0, #1
 8000f06:	f7ff fe88 	bl	8000c1a <NRF_WriteReg_EN>
 8000f0a:	0003      	movs	r3, r0
 8000f0c:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8000f0e:	002a      	movs	r2, r5
 8000f10:	18bb      	adds	r3, r7, r2
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d002      	beq.n	8000f1e <nrf24_reset_EN+0xca>
		{
			return NRF_ret_val_EN;
 8000f18:	18bb      	adds	r3, r7, r2
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	e18b      	b.n	8001236 <nrf24_reset_EN+0x3e2>
		}

		NRF_ret_val_EN = NRF_WriteReg_EN(EN_RXADDR_REG, 0x03);
 8000f1e:	251f      	movs	r5, #31
 8000f20:	197c      	adds	r4, r7, r5
 8000f22:	2103      	movs	r1, #3
 8000f24:	2002      	movs	r0, #2
 8000f26:	f7ff fe78 	bl	8000c1a <NRF_WriteReg_EN>
 8000f2a:	0003      	movs	r3, r0
 8000f2c:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8000f2e:	002a      	movs	r2, r5
 8000f30:	18bb      	adds	r3, r7, r2
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b03      	cmp	r3, #3
 8000f36:	d002      	beq.n	8000f3e <nrf24_reset_EN+0xea>
		{
			return NRF_ret_val_EN;
 8000f38:	18bb      	adds	r3, r7, r2
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	e17b      	b.n	8001236 <nrf24_reset_EN+0x3e2>
		}

		NRF_ret_val_EN = NRF_WriteReg_EN(SETUP_AW_REG, 0x03);
 8000f3e:	251f      	movs	r5, #31
 8000f40:	197c      	adds	r4, r7, r5
 8000f42:	2103      	movs	r1, #3
 8000f44:	2003      	movs	r0, #3
 8000f46:	f7ff fe68 	bl	8000c1a <NRF_WriteReg_EN>
 8000f4a:	0003      	movs	r3, r0
 8000f4c:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8000f4e:	002a      	movs	r2, r5
 8000f50:	18bb      	adds	r3, r7, r2
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d002      	beq.n	8000f5e <nrf24_reset_EN+0x10a>
		{
			return NRF_ret_val_EN;
 8000f58:	18bb      	adds	r3, r7, r2
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	e16b      	b.n	8001236 <nrf24_reset_EN+0x3e2>
		}

		NRF_ret_val_EN = NRF_WriteReg_EN(SETUP_RETR_REG, 0x03);
 8000f5e:	251f      	movs	r5, #31
 8000f60:	197c      	adds	r4, r7, r5
 8000f62:	2103      	movs	r1, #3
 8000f64:	2004      	movs	r0, #4
 8000f66:	f7ff fe58 	bl	8000c1a <NRF_WriteReg_EN>
 8000f6a:	0003      	movs	r3, r0
 8000f6c:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8000f6e:	002a      	movs	r2, r5
 8000f70:	18bb      	adds	r3, r7, r2
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b03      	cmp	r3, #3
 8000f76:	d002      	beq.n	8000f7e <nrf24_reset_EN+0x12a>
		{
			return NRF_ret_val_EN;
 8000f78:	18bb      	adds	r3, r7, r2
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	e15b      	b.n	8001236 <nrf24_reset_EN+0x3e2>
		}

		NRF_ret_val_EN = NRF_WriteReg_EN(RF_CH_REG, 0x02);
 8000f7e:	251f      	movs	r5, #31
 8000f80:	197c      	adds	r4, r7, r5
 8000f82:	2102      	movs	r1, #2
 8000f84:	2005      	movs	r0, #5
 8000f86:	f7ff fe48 	bl	8000c1a <NRF_WriteReg_EN>
 8000f8a:	0003      	movs	r3, r0
 8000f8c:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8000f8e:	002a      	movs	r2, r5
 8000f90:	18bb      	adds	r3, r7, r2
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b03      	cmp	r3, #3
 8000f96:	d002      	beq.n	8000f9e <nrf24_reset_EN+0x14a>
		{
			return NRF_ret_val_EN;
 8000f98:	18bb      	adds	r3, r7, r2
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	e14b      	b.n	8001236 <nrf24_reset_EN+0x3e2>
		}

		NRF_ret_val_EN = NRF_WriteReg_EN(RF_SETUP_REG, 0x0E);
 8000f9e:	251f      	movs	r5, #31
 8000fa0:	197c      	adds	r4, r7, r5
 8000fa2:	210e      	movs	r1, #14
 8000fa4:	2006      	movs	r0, #6
 8000fa6:	f7ff fe38 	bl	8000c1a <NRF_WriteReg_EN>
 8000faa:	0003      	movs	r3, r0
 8000fac:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8000fae:	002a      	movs	r2, r5
 8000fb0:	18bb      	adds	r3, r7, r2
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	d002      	beq.n	8000fbe <nrf24_reset_EN+0x16a>
		{
			return NRF_ret_val_EN;
 8000fb8:	18bb      	adds	r3, r7, r2
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	e13b      	b.n	8001236 <nrf24_reset_EN+0x3e2>
		}

		NRF_ret_val_EN = NRF_WriteReg_EN(STATUS_REG, 0x00);
 8000fbe:	251f      	movs	r5, #31
 8000fc0:	197c      	adds	r4, r7, r5
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	2007      	movs	r0, #7
 8000fc6:	f7ff fe28 	bl	8000c1a <NRF_WriteReg_EN>
 8000fca:	0003      	movs	r3, r0
 8000fcc:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8000fce:	002a      	movs	r2, r5
 8000fd0:	18bb      	adds	r3, r7, r2
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	d002      	beq.n	8000fde <nrf24_reset_EN+0x18a>
		{
			return NRF_ret_val_EN;
 8000fd8:	18bb      	adds	r3, r7, r2
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	e12b      	b.n	8001236 <nrf24_reset_EN+0x3e2>
		}

		NRF_ret_val_EN = NRF_WriteReg_EN(OBSERVE_TX_REG, 0x00);
 8000fde:	251f      	movs	r5, #31
 8000fe0:	197c      	adds	r4, r7, r5
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2008      	movs	r0, #8
 8000fe6:	f7ff fe18 	bl	8000c1a <NRF_WriteReg_EN>
 8000fea:	0003      	movs	r3, r0
 8000fec:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8000fee:	002a      	movs	r2, r5
 8000ff0:	18bb      	adds	r3, r7, r2
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b03      	cmp	r3, #3
 8000ff6:	d002      	beq.n	8000ffe <nrf24_reset_EN+0x1aa>
		{
			return NRF_ret_val_EN;
 8000ff8:	18bb      	adds	r3, r7, r2
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	e11b      	b.n	8001236 <nrf24_reset_EN+0x3e2>
		}

		NRF_ret_val_EN = NRF_WriteReg_EN(CD_REG, 0x00);
 8000ffe:	251f      	movs	r5, #31
 8001000:	197c      	adds	r4, r7, r5
 8001002:	2100      	movs	r1, #0
 8001004:	2009      	movs	r0, #9
 8001006:	f7ff fe08 	bl	8000c1a <NRF_WriteReg_EN>
 800100a:	0003      	movs	r3, r0
 800100c:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 800100e:	002a      	movs	r2, r5
 8001010:	18bb      	adds	r3, r7, r2
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b03      	cmp	r3, #3
 8001016:	d002      	beq.n	800101e <nrf24_reset_EN+0x1ca>
		{
			return NRF_ret_val_EN;
 8001018:	18bb      	adds	r3, r7, r2
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	e10b      	b.n	8001236 <nrf24_reset_EN+0x3e2>
		}

		NRF_ret_val_EN = NRF_WriteReg_Multi_EN(RX_ADDR_P0_REG, rx_addr_p0_def, 5);
 800101e:	251f      	movs	r5, #31
 8001020:	197c      	adds	r4, r7, r5
 8001022:	2308      	movs	r3, #8
 8001024:	18fb      	adds	r3, r7, r3
 8001026:	2205      	movs	r2, #5
 8001028:	0019      	movs	r1, r3
 800102a:	200a      	movs	r0, #10
 800102c:	f7ff fe2c 	bl	8000c88 <NRF_WriteReg_Multi_EN>
 8001030:	0003      	movs	r3, r0
 8001032:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8001034:	197b      	adds	r3, r7, r5
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b03      	cmp	r3, #3
 800103a:	d002      	beq.n	8001042 <nrf24_reset_EN+0x1ee>
		{
			return NRF_ret_val_EN;
 800103c:	197b      	adds	r3, r7, r5
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	e0f9      	b.n	8001236 <nrf24_reset_EN+0x3e2>
		}

		NRF_ret_val_EN = NRF_WriteReg_Multi_EN(RX_ADDR_P1_REG, rx_addr_p1_def, 5);
 8001042:	251f      	movs	r5, #31
 8001044:	197c      	adds	r4, r7, r5
 8001046:	2318      	movs	r3, #24
 8001048:	18fb      	adds	r3, r7, r3
 800104a:	2205      	movs	r2, #5
 800104c:	0019      	movs	r1, r3
 800104e:	200b      	movs	r0, #11
 8001050:	f7ff fe1a 	bl	8000c88 <NRF_WriteReg_Multi_EN>
 8001054:	0003      	movs	r3, r0
 8001056:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8001058:	197b      	adds	r3, r7, r5
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b03      	cmp	r3, #3
 800105e:	d002      	beq.n	8001066 <nrf24_reset_EN+0x212>
		{
			return NRF_ret_val_EN;
 8001060:	197b      	adds	r3, r7, r5
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	e0e7      	b.n	8001236 <nrf24_reset_EN+0x3e2>
		}

		NRF_ret_val_EN = NRF_WriteReg_EN(RX_ADDR_P2_REG, 0xC3);
 8001066:	251f      	movs	r5, #31
 8001068:	197c      	adds	r4, r7, r5
 800106a:	21c3      	movs	r1, #195	; 0xc3
 800106c:	200b      	movs	r0, #11
 800106e:	f7ff fdd4 	bl	8000c1a <NRF_WriteReg_EN>
 8001072:	0003      	movs	r3, r0
 8001074:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8001076:	002a      	movs	r2, r5
 8001078:	18bb      	adds	r3, r7, r2
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b03      	cmp	r3, #3
 800107e:	d002      	beq.n	8001086 <nrf24_reset_EN+0x232>
		{
			return NRF_ret_val_EN;
 8001080:	18bb      	adds	r3, r7, r2
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	e0d7      	b.n	8001236 <nrf24_reset_EN+0x3e2>
		}

		NRF_ret_val_EN = NRF_WriteReg_EN(RX_ADDR_P3_REG, 0xC4);
 8001086:	251f      	movs	r5, #31
 8001088:	197c      	adds	r4, r7, r5
 800108a:	21c4      	movs	r1, #196	; 0xc4
 800108c:	200d      	movs	r0, #13
 800108e:	f7ff fdc4 	bl	8000c1a <NRF_WriteReg_EN>
 8001092:	0003      	movs	r3, r0
 8001094:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8001096:	002a      	movs	r2, r5
 8001098:	18bb      	adds	r3, r7, r2
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b03      	cmp	r3, #3
 800109e:	d002      	beq.n	80010a6 <nrf24_reset_EN+0x252>
		{
			return NRF_ret_val_EN;
 80010a0:	18bb      	adds	r3, r7, r2
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	e0c7      	b.n	8001236 <nrf24_reset_EN+0x3e2>
		}

		NRF_ret_val_EN = NRF_WriteReg_EN(RX_ADDR_P4_REG, 0xC5);
 80010a6:	251f      	movs	r5, #31
 80010a8:	197c      	adds	r4, r7, r5
 80010aa:	21c5      	movs	r1, #197	; 0xc5
 80010ac:	200e      	movs	r0, #14
 80010ae:	f7ff fdb4 	bl	8000c1a <NRF_WriteReg_EN>
 80010b2:	0003      	movs	r3, r0
 80010b4:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 80010b6:	002a      	movs	r2, r5
 80010b8:	18bb      	adds	r3, r7, r2
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b03      	cmp	r3, #3
 80010be:	d002      	beq.n	80010c6 <nrf24_reset_EN+0x272>
		{
			return NRF_ret_val_EN;
 80010c0:	18bb      	adds	r3, r7, r2
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	e0b7      	b.n	8001236 <nrf24_reset_EN+0x3e2>
		}

		NRF_ret_val_EN = NRF_WriteReg_EN(RX_ADDR_P5_REG, 0xC6);
 80010c6:	251f      	movs	r5, #31
 80010c8:	197c      	adds	r4, r7, r5
 80010ca:	21c6      	movs	r1, #198	; 0xc6
 80010cc:	200f      	movs	r0, #15
 80010ce:	f7ff fda4 	bl	8000c1a <NRF_WriteReg_EN>
 80010d2:	0003      	movs	r3, r0
 80010d4:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 80010d6:	002a      	movs	r2, r5
 80010d8:	18bb      	adds	r3, r7, r2
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b03      	cmp	r3, #3
 80010de:	d002      	beq.n	80010e6 <nrf24_reset_EN+0x292>
		{
			return NRF_ret_val_EN;
 80010e0:	18bb      	adds	r3, r7, r2
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	e0a7      	b.n	8001236 <nrf24_reset_EN+0x3e2>
		}

		NRF_ret_val_EN = NRF_WriteReg_Multi_EN(TX_ADDR_REG, tx_addr_def, 5);
 80010e6:	251f      	movs	r5, #31
 80010e8:	197c      	adds	r4, r7, r5
 80010ea:	2310      	movs	r3, #16
 80010ec:	18fb      	adds	r3, r7, r3
 80010ee:	2205      	movs	r2, #5
 80010f0:	0019      	movs	r1, r3
 80010f2:	2010      	movs	r0, #16
 80010f4:	f7ff fdc8 	bl	8000c88 <NRF_WriteReg_Multi_EN>
 80010f8:	0003      	movs	r3, r0
 80010fa:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 80010fc:	197b      	adds	r3, r7, r5
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b03      	cmp	r3, #3
 8001102:	d002      	beq.n	800110a <nrf24_reset_EN+0x2b6>
		{
			return NRF_ret_val_EN;
 8001104:	197b      	adds	r3, r7, r5
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	e095      	b.n	8001236 <nrf24_reset_EN+0x3e2>
		}

		NRF_ret_val_EN = NRF_WriteReg_EN(RX_PW_P0_REG, 0);
 800110a:	251f      	movs	r5, #31
 800110c:	197c      	adds	r4, r7, r5
 800110e:	2100      	movs	r1, #0
 8001110:	2011      	movs	r0, #17
 8001112:	f7ff fd82 	bl	8000c1a <NRF_WriteReg_EN>
 8001116:	0003      	movs	r3, r0
 8001118:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 800111a:	002a      	movs	r2, r5
 800111c:	18bb      	adds	r3, r7, r2
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b03      	cmp	r3, #3
 8001122:	d002      	beq.n	800112a <nrf24_reset_EN+0x2d6>
		{
			return NRF_ret_val_EN;
 8001124:	18bb      	adds	r3, r7, r2
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	e085      	b.n	8001236 <nrf24_reset_EN+0x3e2>
		}

		NRF_ret_val_EN = NRF_WriteReg_EN(RX_PW_P1_REG, 0);
 800112a:	251f      	movs	r5, #31
 800112c:	197c      	adds	r4, r7, r5
 800112e:	2100      	movs	r1, #0
 8001130:	2012      	movs	r0, #18
 8001132:	f7ff fd72 	bl	8000c1a <NRF_WriteReg_EN>
 8001136:	0003      	movs	r3, r0
 8001138:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 800113a:	002a      	movs	r2, r5
 800113c:	18bb      	adds	r3, r7, r2
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b03      	cmp	r3, #3
 8001142:	d002      	beq.n	800114a <nrf24_reset_EN+0x2f6>
		{
			return NRF_ret_val_EN;
 8001144:	18bb      	adds	r3, r7, r2
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	e075      	b.n	8001236 <nrf24_reset_EN+0x3e2>
		}

		NRF_ret_val_EN = NRF_WriteReg_EN(RX_PW_P2_REG, 0);
 800114a:	251f      	movs	r5, #31
 800114c:	197c      	adds	r4, r7, r5
 800114e:	2100      	movs	r1, #0
 8001150:	2013      	movs	r0, #19
 8001152:	f7ff fd62 	bl	8000c1a <NRF_WriteReg_EN>
 8001156:	0003      	movs	r3, r0
 8001158:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 800115a:	002a      	movs	r2, r5
 800115c:	18bb      	adds	r3, r7, r2
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b03      	cmp	r3, #3
 8001162:	d002      	beq.n	800116a <nrf24_reset_EN+0x316>
		{
			return NRF_ret_val_EN;
 8001164:	18bb      	adds	r3, r7, r2
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	e065      	b.n	8001236 <nrf24_reset_EN+0x3e2>
		}

		NRF_ret_val_EN = NRF_WriteReg_EN(RX_PW_P3_REG, 0);
 800116a:	251f      	movs	r5, #31
 800116c:	197c      	adds	r4, r7, r5
 800116e:	2100      	movs	r1, #0
 8001170:	2014      	movs	r0, #20
 8001172:	f7ff fd52 	bl	8000c1a <NRF_WriteReg_EN>
 8001176:	0003      	movs	r3, r0
 8001178:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 800117a:	002a      	movs	r2, r5
 800117c:	18bb      	adds	r3, r7, r2
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b03      	cmp	r3, #3
 8001182:	d002      	beq.n	800118a <nrf24_reset_EN+0x336>
		{
			return NRF_ret_val_EN;
 8001184:	18bb      	adds	r3, r7, r2
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	e055      	b.n	8001236 <nrf24_reset_EN+0x3e2>
		}

		NRF_ret_val_EN = NRF_WriteReg_EN(RX_PW_P4_REG, 0);
 800118a:	251f      	movs	r5, #31
 800118c:	197c      	adds	r4, r7, r5
 800118e:	2100      	movs	r1, #0
 8001190:	2015      	movs	r0, #21
 8001192:	f7ff fd42 	bl	8000c1a <NRF_WriteReg_EN>
 8001196:	0003      	movs	r3, r0
 8001198:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 800119a:	002a      	movs	r2, r5
 800119c:	18bb      	adds	r3, r7, r2
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b03      	cmp	r3, #3
 80011a2:	d007      	beq.n	80011b4 <nrf24_reset_EN+0x360>
		{
			return NRF_ret_val_EN;
 80011a4:	18bb      	adds	r3, r7, r2
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	e045      	b.n	8001236 <nrf24_reset_EN+0x3e2>
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	08005384 	.word	0x08005384
 80011b0:	0800538c 	.word	0x0800538c
		}

		NRF_ret_val_EN = NRF_WriteReg_EN(RX_PW_P5_REG, 0);
 80011b4:	251f      	movs	r5, #31
 80011b6:	197c      	adds	r4, r7, r5
 80011b8:	2100      	movs	r1, #0
 80011ba:	2016      	movs	r0, #22
 80011bc:	f7ff fd2d 	bl	8000c1a <NRF_WriteReg_EN>
 80011c0:	0003      	movs	r3, r0
 80011c2:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 80011c4:	002a      	movs	r2, r5
 80011c6:	18bb      	adds	r3, r7, r2
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d002      	beq.n	80011d4 <nrf24_reset_EN+0x380>
		{
			return NRF_ret_val_EN;
 80011ce:	18bb      	adds	r3, r7, r2
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	e030      	b.n	8001236 <nrf24_reset_EN+0x3e2>
		}

		NRF_ret_val_EN = NRF_WriteReg_EN(FIFO_STATUS_REG, 0x11);
 80011d4:	251f      	movs	r5, #31
 80011d6:	197c      	adds	r4, r7, r5
 80011d8:	2111      	movs	r1, #17
 80011da:	2017      	movs	r0, #23
 80011dc:	f7ff fd1d 	bl	8000c1a <NRF_WriteReg_EN>
 80011e0:	0003      	movs	r3, r0
 80011e2:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 80011e4:	002a      	movs	r2, r5
 80011e6:	18bb      	adds	r3, r7, r2
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	d002      	beq.n	80011f4 <nrf24_reset_EN+0x3a0>
		{
			return NRF_ret_val_EN;
 80011ee:	18bb      	adds	r3, r7, r2
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	e020      	b.n	8001236 <nrf24_reset_EN+0x3e2>
		}

		NRF_ret_val_EN = NRF_WriteReg_EN(DYNPD_REG, 0);
 80011f4:	251f      	movs	r5, #31
 80011f6:	197c      	adds	r4, r7, r5
 80011f8:	2100      	movs	r1, #0
 80011fa:	201c      	movs	r0, #28
 80011fc:	f7ff fd0d 	bl	8000c1a <NRF_WriteReg_EN>
 8001200:	0003      	movs	r3, r0
 8001202:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8001204:	002a      	movs	r2, r5
 8001206:	18bb      	adds	r3, r7, r2
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b03      	cmp	r3, #3
 800120c:	d002      	beq.n	8001214 <nrf24_reset_EN+0x3c0>
		{
			return NRF_ret_val_EN;
 800120e:	18bb      	adds	r3, r7, r2
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	e010      	b.n	8001236 <nrf24_reset_EN+0x3e2>
		}

		NRF_ret_val_EN = NRF_WriteReg_EN(FEATURE_REG, 0);
 8001214:	251f      	movs	r5, #31
 8001216:	197c      	adds	r4, r7, r5
 8001218:	2100      	movs	r1, #0
 800121a:	201d      	movs	r0, #29
 800121c:	f7ff fcfd 	bl	8000c1a <NRF_WriteReg_EN>
 8001220:	0003      	movs	r3, r0
 8001222:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8001224:	002a      	movs	r2, r5
 8001226:	18bb      	adds	r3, r7, r2
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b03      	cmp	r3, #3
 800122c:	d002      	beq.n	8001234 <nrf24_reset_EN+0x3e0>
		{
			return NRF_ret_val_EN;
 800122e:	18bb      	adds	r3, r7, r2
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	e000      	b.n	8001236 <nrf24_reset_EN+0x3e2>
		}

	}
	return NRF_OK_EN;
 8001234:	2303      	movs	r3, #3
}
 8001236:	0018      	movs	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	b008      	add	sp, #32
 800123c:	bdb0      	pop	{r4, r5, r7, pc}
 800123e:	46c0      	nop			; (mov r8, r8)

08001240 <NRF24_Init_EN>:



//TODO faire cette fonction avec la lecture des retour de fonctions
NRF_ret_val_en NRF24_Init_EN(NRF_HAL_function_str NRF_HAL_function_STR)
{
 8001240:	b5b0      	push	{r4, r5, r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	003c      	movs	r4, r7
 8001248:	6020      	str	r0, [r4, #0]
 800124a:	6061      	str	r1, [r4, #4]
 800124c:	60a2      	str	r2, [r4, #8]
 800124e:	60e3      	str	r3, [r4, #12]
	NRF_HAL_function_local_STR.readSpiValue_EN_PF = NRF_HAL_function_STR.readSpiValue_EN_PF;
 8001250:	003b      	movs	r3, r7
 8001252:	68da      	ldr	r2, [r3, #12]
 8001254:	4b4e      	ldr	r3, [pc, #312]	; (8001390 <NRF24_Init_EN+0x150>)
 8001256:	60da      	str	r2, [r3, #12]
	NRF_HAL_function_local_STR.setCe_PF = NRF_HAL_function_STR.setCe_PF;
 8001258:	003b      	movs	r3, r7
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b4c      	ldr	r3, [pc, #304]	; (8001390 <NRF24_Init_EN+0x150>)
 800125e:	601a      	str	r2, [r3, #0]
	NRF_HAL_function_local_STR.setIrq_PF = NRF_HAL_function_STR.setIrq_PF;
 8001260:	003b      	movs	r3, r7
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	4b4a      	ldr	r3, [pc, #296]	; (8001390 <NRF24_Init_EN+0x150>)
 8001266:	605a      	str	r2, [r3, #4]
	NRF_HAL_function_local_STR.writeSpiValue_EN_PF = NRF_HAL_function_STR.writeSpiValue_EN_PF;
 8001268:	003b      	movs	r3, r7
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	4b48      	ldr	r3, [pc, #288]	; (8001390 <NRF24_Init_EN+0x150>)
 800126e:	609a      	str	r2, [r3, #8]

	// disable the chip before configuring the device
	NRF_HAL_function_local_STR.setCe_PF(false);
 8001270:	4b47      	ldr	r3, [pc, #284]	; (8001390 <NRF24_Init_EN+0x150>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2000      	movs	r0, #0
 8001276:	4798      	blx	r3

	NRF_ret_val_en NRF_ret_val_EN;

	// reset everything
	NRF_ret_val_EN = nrf24_reset_EN(0);
 8001278:	2517      	movs	r5, #23
 800127a:	197c      	adds	r4, r7, r5
 800127c:	2000      	movs	r0, #0
 800127e:	f7ff fde9 	bl	8000e54 <nrf24_reset_EN>
 8001282:	0003      	movs	r3, r0
 8001284:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 8001286:	002a      	movs	r2, r5
 8001288:	18bb      	adds	r3, r7, r2
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b03      	cmp	r3, #3
 800128e:	d002      	beq.n	8001296 <NRF24_Init_EN+0x56>
	{
		return NRF_ret_val_EN;
 8001290:	18bb      	adds	r3, r7, r2
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	e077      	b.n	8001386 <NRF24_Init_EN+0x146>
	}


	NRF_ret_val_EN = NRF_WriteReg_EN(CONFIG_REG, 0);  // will be configured later
 8001296:	2517      	movs	r5, #23
 8001298:	197c      	adds	r4, r7, r5
 800129a:	2100      	movs	r1, #0
 800129c:	2000      	movs	r0, #0
 800129e:	f7ff fcbc 	bl	8000c1a <NRF_WriteReg_EN>
 80012a2:	0003      	movs	r3, r0
 80012a4:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 80012a6:	002a      	movs	r2, r5
 80012a8:	18bb      	adds	r3, r7, r2
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	d002      	beq.n	80012b6 <NRF24_Init_EN+0x76>
	{
		return NRF_ret_val_EN;
 80012b0:	18bb      	adds	r3, r7, r2
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	e067      	b.n	8001386 <NRF24_Init_EN+0x146>
	}


	NRF_ret_val_EN = NRF_WriteReg_EN(EN_AA_REG, 0);  // No Auto ACK
 80012b6:	2517      	movs	r5, #23
 80012b8:	197c      	adds	r4, r7, r5
 80012ba:	2100      	movs	r1, #0
 80012bc:	2001      	movs	r0, #1
 80012be:	f7ff fcac 	bl	8000c1a <NRF_WriteReg_EN>
 80012c2:	0003      	movs	r3, r0
 80012c4:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 80012c6:	002a      	movs	r2, r5
 80012c8:	18bb      	adds	r3, r7, r2
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b03      	cmp	r3, #3
 80012ce:	d002      	beq.n	80012d6 <NRF24_Init_EN+0x96>
	{
		return NRF_ret_val_EN;
 80012d0:	18bb      	adds	r3, r7, r2
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	e057      	b.n	8001386 <NRF24_Init_EN+0x146>
	}


	NRF_ret_val_EN = NRF_WriteReg_EN(EN_RXADDR_REG, 0);  // Not Enabling any data pipe right now
 80012d6:	2517      	movs	r5, #23
 80012d8:	197c      	adds	r4, r7, r5
 80012da:	2100      	movs	r1, #0
 80012dc:	2002      	movs	r0, #2
 80012de:	f7ff fc9c 	bl	8000c1a <NRF_WriteReg_EN>
 80012e2:	0003      	movs	r3, r0
 80012e4:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 80012e6:	002a      	movs	r2, r5
 80012e8:	18bb      	adds	r3, r7, r2
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b03      	cmp	r3, #3
 80012ee:	d002      	beq.n	80012f6 <NRF24_Init_EN+0xb6>
	{
		return NRF_ret_val_EN;
 80012f0:	18bb      	adds	r3, r7, r2
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	e047      	b.n	8001386 <NRF24_Init_EN+0x146>
	}


	NRF_ret_val_EN = NRF_WriteReg_EN(SETUP_AW_REG, 0x03);  // 5 Bytes for the TX/RX address
 80012f6:	2517      	movs	r5, #23
 80012f8:	197c      	adds	r4, r7, r5
 80012fa:	2103      	movs	r1, #3
 80012fc:	2003      	movs	r0, #3
 80012fe:	f7ff fc8c 	bl	8000c1a <NRF_WriteReg_EN>
 8001302:	0003      	movs	r3, r0
 8001304:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 8001306:	002a      	movs	r2, r5
 8001308:	18bb      	adds	r3, r7, r2
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b03      	cmp	r3, #3
 800130e:	d002      	beq.n	8001316 <NRF24_Init_EN+0xd6>
	{
		return NRF_ret_val_EN;
 8001310:	18bb      	adds	r3, r7, r2
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	e037      	b.n	8001386 <NRF24_Init_EN+0x146>
	}


	NRF_ret_val_EN = NRF_WriteReg_EN(SETUP_RETR_REG, 0);   // No retransmission
 8001316:	2517      	movs	r5, #23
 8001318:	197c      	adds	r4, r7, r5
 800131a:	2100      	movs	r1, #0
 800131c:	2004      	movs	r0, #4
 800131e:	f7ff fc7c 	bl	8000c1a <NRF_WriteReg_EN>
 8001322:	0003      	movs	r3, r0
 8001324:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 8001326:	002a      	movs	r2, r5
 8001328:	18bb      	adds	r3, r7, r2
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b03      	cmp	r3, #3
 800132e:	d002      	beq.n	8001336 <NRF24_Init_EN+0xf6>
	{
		return NRF_ret_val_EN;
 8001330:	18bb      	adds	r3, r7, r2
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	e027      	b.n	8001386 <NRF24_Init_EN+0x146>
	}


	NRF_ret_val_EN = NRF_WriteReg_EN(RF_CH_REG, 0);  // will be setup during Tx or RX
 8001336:	2517      	movs	r5, #23
 8001338:	197c      	adds	r4, r7, r5
 800133a:	2100      	movs	r1, #0
 800133c:	2005      	movs	r0, #5
 800133e:	f7ff fc6c 	bl	8000c1a <NRF_WriteReg_EN>
 8001342:	0003      	movs	r3, r0
 8001344:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 8001346:	002a      	movs	r2, r5
 8001348:	18bb      	adds	r3, r7, r2
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b03      	cmp	r3, #3
 800134e:	d002      	beq.n	8001356 <NRF24_Init_EN+0x116>
	{
		return NRF_ret_val_EN;
 8001350:	18bb      	adds	r3, r7, r2
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	e017      	b.n	8001386 <NRF24_Init_EN+0x146>
	}


	NRF_ret_val_EN = NRF_WriteReg_EN(RF_SETUP_REG, 0x0E);   // Power= 0db, data rate = 2Mbps
 8001356:	2517      	movs	r5, #23
 8001358:	197c      	adds	r4, r7, r5
 800135a:	210e      	movs	r1, #14
 800135c:	2006      	movs	r0, #6
 800135e:	f7ff fc5c 	bl	8000c1a <NRF_WriteReg_EN>
 8001362:	0003      	movs	r3, r0
 8001364:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 8001366:	002a      	movs	r2, r5
 8001368:	18bb      	adds	r3, r7, r2
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b03      	cmp	r3, #3
 800136e:	d002      	beq.n	8001376 <NRF24_Init_EN+0x136>
	{
		return NRF_ret_val_EN;
 8001370:	18bb      	adds	r3, r7, r2
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	e007      	b.n	8001386 <NRF24_Init_EN+0x146>
	}


	// Enable the chip after configuring the device
	NRF_HAL_function_local_STR.setCe_PF(true);
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <NRF24_Init_EN+0x150>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2001      	movs	r0, #1
 800137c:	4798      	blx	r3

	NRF_isInit_B = true;
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <NRF24_Init_EN+0x154>)
 8001380:	2201      	movs	r2, #1
 8001382:	701a      	strb	r2, [r3, #0]

	return NRF_OK_EN;
 8001384:	2303      	movs	r3, #3
}
 8001386:	0018      	movs	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	b006      	add	sp, #24
 800138c:	bdb0      	pop	{r4, r5, r7, pc}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	200001f8 	.word	0x200001f8
 8001394:	20000208 	.word	0x20000208

08001398 <NRF24_RxMode_EN>:
	return NRF_OK_EN;
}


NRF_ret_val_en NRF24_RxMode_EN(uint8_t *Address, uint8_t channel)
{
 8001398:	b5b0      	push	{r4, r5, r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	000a      	movs	r2, r1
 80013a2:	1cfb      	adds	r3, r7, #3
 80013a4:	701a      	strb	r2, [r3, #0]
	if(NRF_isInit_B == false)
 80013a6:	4b5e      	ldr	r3, [pc, #376]	; (8001520 <NRF24_RxMode_EN+0x188>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2201      	movs	r2, #1
 80013ac:	4053      	eors	r3, r2
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <NRF24_RxMode_EN+0x20>
	{
		return NRF_NOT_INIT_EN;
 80013b4:	2300      	movs	r3, #0
 80013b6:	e0af      	b.n	8001518 <NRF24_RxMode_EN+0x180>
	}
	// disable the chip before configuring the device
	NRF_HAL_function_local_STR.setCe_PF(false);
 80013b8:	4b5a      	ldr	r3, [pc, #360]	; (8001524 <NRF24_RxMode_EN+0x18c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2000      	movs	r0, #0
 80013be:	4798      	blx	r3
	NRF_ret_val_en NRF_ret_val_EN;

	NRF_ret_val_EN = nrf24_reset_EN(STATUS_REG);
 80013c0:	250f      	movs	r5, #15
 80013c2:	197c      	adds	r4, r7, r5
 80013c4:	2007      	movs	r0, #7
 80013c6:	f7ff fd45 	bl	8000e54 <nrf24_reset_EN>
 80013ca:	0003      	movs	r3, r0
 80013cc:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 80013ce:	197b      	adds	r3, r7, r5
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b03      	cmp	r3, #3
 80013d4:	d001      	beq.n	80013da <NRF24_RxMode_EN+0x42>
	{
		return NRF_SPI_ERROR_EN;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e09e      	b.n	8001518 <NRF24_RxMode_EN+0x180>
	}

	NRF_ret_val_EN = NRF_WriteReg_EN(RF_CH_REG, channel);  // select the channel
 80013da:	250f      	movs	r5, #15
 80013dc:	197c      	adds	r4, r7, r5
 80013de:	1cfb      	adds	r3, r7, #3
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	0019      	movs	r1, r3
 80013e4:	2005      	movs	r0, #5
 80013e6:	f7ff fc18 	bl	8000c1a <NRF_WriteReg_EN>
 80013ea:	0003      	movs	r3, r0
 80013ec:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 80013ee:	197b      	adds	r3, r7, r5
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b03      	cmp	r3, #3
 80013f4:	d001      	beq.n	80013fa <NRF24_RxMode_EN+0x62>
	{
		return NRF_SPI_ERROR_EN;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e08e      	b.n	8001518 <NRF24_RxMode_EN+0x180>
	}

	// select data pipe 2
	uint8_t en_rxaddr = 0;
 80013fa:	210e      	movs	r1, #14
 80013fc:	187b      	adds	r3, r7, r1
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
	NRF_ret_val_EN = nrf24_ReadReg_EN(EN_RXADDR_REG,&en_rxaddr);
 8001402:	250f      	movs	r5, #15
 8001404:	197c      	adds	r4, r7, r5
 8001406:	187b      	adds	r3, r7, r1
 8001408:	0019      	movs	r1, r3
 800140a:	2002      	movs	r0, #2
 800140c:	f7ff fcc5 	bl	8000d9a <nrf24_ReadReg_EN>
 8001410:	0003      	movs	r3, r0
 8001412:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 8001414:	197b      	adds	r3, r7, r5
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b03      	cmp	r3, #3
 800141a:	d001      	beq.n	8001420 <NRF24_RxMode_EN+0x88>
	{
		return NRF_SPI_ERROR_EN;
 800141c:	2301      	movs	r3, #1
 800141e:	e07b      	b.n	8001518 <NRF24_RxMode_EN+0x180>
	}

	en_rxaddr = en_rxaddr |(1<<2);
 8001420:	210e      	movs	r1, #14
 8001422:	187b      	adds	r3, r7, r1
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2204      	movs	r2, #4
 8001428:	4313      	orrs	r3, r2
 800142a:	b2da      	uxtb	r2, r3
 800142c:	187b      	adds	r3, r7, r1
 800142e:	701a      	strb	r2, [r3, #0]
	NRF_ret_val_EN = NRF_WriteReg_EN(EN_RXADDR_REG, en_rxaddr);
 8001430:	187b      	adds	r3, r7, r1
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	250f      	movs	r5, #15
 8001436:	197c      	adds	r4, r7, r5
 8001438:	0019      	movs	r1, r3
 800143a:	2002      	movs	r0, #2
 800143c:	f7ff fbed 	bl	8000c1a <NRF_WriteReg_EN>
 8001440:	0003      	movs	r3, r0
 8001442:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 8001444:	197b      	adds	r3, r7, r5
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b03      	cmp	r3, #3
 800144a:	d002      	beq.n	8001452 <NRF24_RxMode_EN+0xba>
	{
		return NRF_ret_val_EN;
 800144c:	197b      	adds	r3, r7, r5
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	e062      	b.n	8001518 <NRF24_RxMode_EN+0x180>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	NRF_ret_val_EN = NRF_WriteReg_Multi_EN(RX_ADDR_P1_REG, Address, 5);  // Write the Pipe1 address
 8001452:	250f      	movs	r5, #15
 8001454:	197c      	adds	r4, r7, r5
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2205      	movs	r2, #5
 800145a:	0019      	movs	r1, r3
 800145c:	200b      	movs	r0, #11
 800145e:	f7ff fc13 	bl	8000c88 <NRF_WriteReg_Multi_EN>
 8001462:	0003      	movs	r3, r0
 8001464:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 8001466:	197b      	adds	r3, r7, r5
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b03      	cmp	r3, #3
 800146c:	d002      	beq.n	8001474 <NRF24_RxMode_EN+0xdc>
	{
		return NRF_ret_val_EN;
 800146e:	197b      	adds	r3, r7, r5
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	e051      	b.n	8001518 <NRF24_RxMode_EN+0x180>
	}

	NRF_ret_val_EN = NRF_WriteReg_EN(RX_ADDR_P2_REG, 0xEE);  // Write the Pipe2 LSB address
 8001474:	250f      	movs	r5, #15
 8001476:	197c      	adds	r4, r7, r5
 8001478:	21ee      	movs	r1, #238	; 0xee
 800147a:	200b      	movs	r0, #11
 800147c:	f7ff fbcd 	bl	8000c1a <NRF_WriteReg_EN>
 8001480:	0003      	movs	r3, r0
 8001482:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 8001484:	002a      	movs	r2, r5
 8001486:	18bb      	adds	r3, r7, r2
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b03      	cmp	r3, #3
 800148c:	d002      	beq.n	8001494 <NRF24_RxMode_EN+0xfc>
	{
		return NRF_ret_val_EN;
 800148e:	18bb      	adds	r3, r7, r2
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	e041      	b.n	8001518 <NRF24_RxMode_EN+0x180>
	}

	NRF_ret_val_EN = NRF_WriteReg_EN(RX_PW_P2_REG, 32);   // 32 bit payload size for pipe 2
 8001494:	250f      	movs	r5, #15
 8001496:	197c      	adds	r4, r7, r5
 8001498:	2120      	movs	r1, #32
 800149a:	2013      	movs	r0, #19
 800149c:	f7ff fbbd 	bl	8000c1a <NRF_WriteReg_EN>
 80014a0:	0003      	movs	r3, r0
 80014a2:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 80014a4:	002a      	movs	r2, r5
 80014a6:	18bb      	adds	r3, r7, r2
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	d002      	beq.n	80014b4 <NRF24_RxMode_EN+0x11c>
	{
		return NRF_ret_val_EN;
 80014ae:	18bb      	adds	r3, r7, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	e031      	b.n	8001518 <NRF24_RxMode_EN+0x180>
	}


	// power up the device in Rx mode
	uint8_t config = 0;
 80014b4:	210d      	movs	r1, #13
 80014b6:	187b      	adds	r3, r7, r1
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
	NRF_ret_val_EN = nrf24_ReadReg_EN(CONFIG_REG,&config);
 80014bc:	250f      	movs	r5, #15
 80014be:	197c      	adds	r4, r7, r5
 80014c0:	187b      	adds	r3, r7, r1
 80014c2:	0019      	movs	r1, r3
 80014c4:	2000      	movs	r0, #0
 80014c6:	f7ff fc68 	bl	8000d9a <nrf24_ReadReg_EN>
 80014ca:	0003      	movs	r3, r0
 80014cc:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 80014ce:	197b      	adds	r3, r7, r5
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	d002      	beq.n	80014dc <NRF24_RxMode_EN+0x144>
	{
		return NRF_ret_val_EN;
 80014d6:	197b      	adds	r3, r7, r5
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	e01d      	b.n	8001518 <NRF24_RxMode_EN+0x180>
	}

	config = config |(1<<1) |(1<<0);
 80014dc:	210d      	movs	r1, #13
 80014de:	187b      	adds	r3, r7, r1
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2203      	movs	r2, #3
 80014e4:	4313      	orrs	r3, r2
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	187b      	adds	r3, r7, r1
 80014ea:	701a      	strb	r2, [r3, #0]
	NRF_ret_val_EN = NRF_WriteReg_EN(CONFIG_REG, config);
 80014ec:	187b      	adds	r3, r7, r1
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	250f      	movs	r5, #15
 80014f2:	197c      	adds	r4, r7, r5
 80014f4:	0019      	movs	r1, r3
 80014f6:	2000      	movs	r0, #0
 80014f8:	f7ff fb8f 	bl	8000c1a <NRF_WriteReg_EN>
 80014fc:	0003      	movs	r3, r0
 80014fe:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 8001500:	197b      	adds	r3, r7, r5
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b03      	cmp	r3, #3
 8001506:	d002      	beq.n	800150e <NRF24_RxMode_EN+0x176>
	{
		return NRF_ret_val_EN;
 8001508:	197b      	adds	r3, r7, r5
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	e004      	b.n	8001518 <NRF24_RxMode_EN+0x180>
	}

	// Enable the chip after configuring the device
	NRF_HAL_function_local_STR.setCe_PF(true);
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <NRF24_RxMode_EN+0x18c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2001      	movs	r0, #1
 8001514:	4798      	blx	r3

	return NRF_OK_EN;
 8001516:	2303      	movs	r3, #3
}
 8001518:	0018      	movs	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	b004      	add	sp, #16
 800151e:	bdb0      	pop	{r4, r5, r7, pc}
 8001520:	20000208 	.word	0x20000208
 8001524:	200001f8 	.word	0x200001f8

08001528 <isDataAvailable_EN>:


NRF_ret_val_en isDataAvailable_EN(uint8_t pipenum_U8, bool* flag_availability_B)
{
 8001528:	b5b0      	push	{r4, r5, r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	0002      	movs	r2, r0
 8001530:	6039      	str	r1, [r7, #0]
 8001532:	1dfb      	adds	r3, r7, #7
 8001534:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 8001536:	210e      	movs	r1, #14
 8001538:	187b      	adds	r3, r7, r1
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
	NRF_ret_val_en NRF_ret_val_EN;

	NRF_ret_val_EN = nrf24_ReadReg_EN(STATUS_REG,&status);
 800153e:	250f      	movs	r5, #15
 8001540:	197c      	adds	r4, r7, r5
 8001542:	187b      	adds	r3, r7, r1
 8001544:	0019      	movs	r1, r3
 8001546:	2007      	movs	r0, #7
 8001548:	f7ff fc27 	bl	8000d9a <nrf24_ReadReg_EN>
 800154c:	0003      	movs	r3, r0
 800154e:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 8001550:	197b      	adds	r3, r7, r5
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b03      	cmp	r3, #3
 8001556:	d002      	beq.n	800155e <isDataAvailable_EN+0x36>
	{
		return NRF_ret_val_EN;
 8001558:	197b      	adds	r3, r7, r5
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	e025      	b.n	80015aa <isDataAvailable_EN+0x82>
	}


	if((status&(1<<6))&&(status&(pipenum_U8<<1)))
 800155e:	210e      	movs	r1, #14
 8001560:	187b      	adds	r3, r7, r1
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	001a      	movs	r2, r3
 8001566:	2340      	movs	r3, #64	; 0x40
 8001568:	4013      	ands	r3, r2
 800156a:	d01a      	beq.n	80015a2 <isDataAvailable_EN+0x7a>
 800156c:	187b      	adds	r3, r7, r1
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	001a      	movs	r2, r3
 8001572:	1dfb      	adds	r3, r7, #7
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	4013      	ands	r3, r2
 800157a:	d012      	beq.n	80015a2 <isDataAvailable_EN+0x7a>
	{

		NRF_ret_val_EN = NRF_WriteReg_EN(STATUS_REG,(1<<6));
 800157c:	250f      	movs	r5, #15
 800157e:	197c      	adds	r4, r7, r5
 8001580:	2140      	movs	r1, #64	; 0x40
 8001582:	2007      	movs	r0, #7
 8001584:	f7ff fb49 	bl	8000c1a <NRF_WriteReg_EN>
 8001588:	0003      	movs	r3, r0
 800158a:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 800158c:	002a      	movs	r2, r5
 800158e:	18bb      	adds	r3, r7, r2
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b03      	cmp	r3, #3
 8001594:	d002      	beq.n	800159c <isDataAvailable_EN+0x74>
		{
			return NRF_ret_val_EN;
 8001596:	18bb      	adds	r3, r7, r2
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	e006      	b.n	80015aa <isDataAvailable_EN+0x82>
		}

		*flag_availability_B = true;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	2201      	movs	r2, #1
 80015a0:	701a      	strb	r2, [r3, #0]
	}

	*flag_availability_B = false;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]
	return NRF_OK_EN;
 80015a8:	2303      	movs	r3, #3
}
 80015aa:	0018      	movs	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	b004      	add	sp, #16
 80015b0:	bdb0      	pop	{r4, r5, r7, pc}

080015b2 <NRF24_Receive_EN>:


//TODO faire cette fonction avec la lecture des retour de fonctions
NRF_ret_val_en NRF24_Receive_EN(uint8_t *data)
{
 80015b2:	b5b0      	push	{r4, r5, r7, lr}
 80015b4:	b084      	sub	sp, #16
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend_U8 = 0;
 80015ba:	230f      	movs	r3, #15
 80015bc:	18fb      	adds	r3, r7, r3
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
	HAL_ret_val_en HAL_ret_val_EN;
	NRF_ret_val_en NRF_ret_val_EN;

	HAL_ret_val_EN = HAL_readSpiValue_EN(R_RX_PAYLOAD_REG,data,32);
 80015c2:	250e      	movs	r5, #14
 80015c4:	197c      	adds	r4, r7, r5
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2220      	movs	r2, #32
 80015ca:	0019      	movs	r1, r3
 80015cc:	2061      	movs	r0, #97	; 0x61
 80015ce:	f7ff f821 	bl	8000614 <HAL_readSpiValue_EN>
 80015d2:	0003      	movs	r3, r0
 80015d4:	7023      	strb	r3, [r4, #0]
	if(HAL_ret_val_EN != SPI_READ_OK_EN)
 80015d6:	197b      	adds	r3, r7, r5
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b05      	cmp	r3, #5
 80015dc:	d001      	beq.n	80015e2 <NRF24_Receive_EN+0x30>
	{
		return NRF_SPI_ERROR_EN;
 80015de:	2301      	movs	r3, #1
 80015e0:	e017      	b.n	8001612 <NRF24_Receive_EN+0x60>
	}

	HAL_delay_ms(1);
 80015e2:	2001      	movs	r0, #1
 80015e4:	f7ff f864 	bl	80006b0 <HAL_delay_ms>

	cmdtosend_U8 = FLUSH_RX_REG;
 80015e8:	210f      	movs	r1, #15
 80015ea:	187b      	adds	r3, r7, r1
 80015ec:	22e2      	movs	r2, #226	; 0xe2
 80015ee:	701a      	strb	r2, [r3, #0]
	NRF_ret_val_EN = nrfsendCmd_EN(cmdtosend_U8);
 80015f0:	250d      	movs	r5, #13
 80015f2:	197c      	adds	r4, r7, r5
 80015f4:	187b      	adds	r3, r7, r1
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	0018      	movs	r0, r3
 80015fa:	f7ff fc10 	bl	8000e1e <nrfsendCmd_EN>
 80015fe:	0003      	movs	r3, r0
 8001600:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 8001602:	197b      	adds	r3, r7, r5
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b03      	cmp	r3, #3
 8001608:	d002      	beq.n	8001610 <NRF24_Receive_EN+0x5e>
	{
		return NRF_ret_val_EN;
 800160a:	197b      	adds	r3, r7, r5
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	e000      	b.n	8001612 <NRF24_Receive_EN+0x60>
	}
	else
	{
		return NRF_OK_EN;
 8001610:	2303      	movs	r3, #3
	}

}
 8001612:	0018      	movs	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	b004      	add	sp, #16
 8001618:	bdb0      	pop	{r4, r5, r7, pc}

0800161a <NRF24_ReadAll_EN>:



// Read all the Register data
NRF_ret_val_en NRF24_ReadAll_EN(uint8_t *data)
{
 800161a:	b5b0      	push	{r4, r5, r7, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
	NRF_ret_val_en NRF_ret_val_EN;
	for(int i=0; i<10; i++)
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	e015      	b.n	8001654 <NRF24_ReadAll_EN+0x3a>
	{
		NRF_ret_val_EN = nrf24_ReadReg_EN(i,(uint8_t*)(data+i));
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	b2d8      	uxtb	r0, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	18d3      	adds	r3, r2, r3
 8001632:	250f      	movs	r5, #15
 8001634:	197c      	adds	r4, r7, r5
 8001636:	0019      	movs	r1, r3
 8001638:	f7ff fbaf 	bl	8000d9a <nrf24_ReadReg_EN>
 800163c:	0003      	movs	r3, r0
 800163e:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8001640:	197b      	adds	r3, r7, r5
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b03      	cmp	r3, #3
 8001646:	d002      	beq.n	800164e <NRF24_ReadAll_EN+0x34>
		{
			return NRF_ret_val_EN;
 8001648:	197b      	adds	r3, r7, r5
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	e097      	b.n	800177e <NRF24_ReadAll_EN+0x164>
	for(int i=0; i<10; i++)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	3301      	adds	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	2b09      	cmp	r3, #9
 8001658:	dde6      	ble.n	8001628 <NRF24_ReadAll_EN+0xe>
		}
	}

	NRF_ret_val_EN = nrf24_ReadReg_Multi_EN(RX_ADDR_P0_REG,(data+10), 5);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	330a      	adds	r3, #10
 800165e:	250f      	movs	r5, #15
 8001660:	197c      	adds	r4, r7, r5
 8001662:	2205      	movs	r2, #5
 8001664:	0019      	movs	r1, r3
 8001666:	200a      	movs	r0, #10
 8001668:	f7ff fbb7 	bl	8000dda <nrf24_ReadReg_Multi_EN>
 800166c:	0003      	movs	r3, r0
 800166e:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 8001670:	197b      	adds	r3, r7, r5
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b03      	cmp	r3, #3
 8001676:	d002      	beq.n	800167e <NRF24_ReadAll_EN+0x64>
	{
		return NRF_ret_val_EN;
 8001678:	197b      	adds	r3, r7, r5
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	e07f      	b.n	800177e <NRF24_ReadAll_EN+0x164>
	}

	NRF_ret_val_EN = nrf24_ReadReg_Multi_EN(RX_ADDR_P1_REG,(data+15), 5);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	330f      	adds	r3, #15
 8001682:	250f      	movs	r5, #15
 8001684:	197c      	adds	r4, r7, r5
 8001686:	2205      	movs	r2, #5
 8001688:	0019      	movs	r1, r3
 800168a:	200b      	movs	r0, #11
 800168c:	f7ff fba5 	bl	8000dda <nrf24_ReadReg_Multi_EN>
 8001690:	0003      	movs	r3, r0
 8001692:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 8001694:	197b      	adds	r3, r7, r5
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b03      	cmp	r3, #3
 800169a:	d001      	beq.n	80016a0 <NRF24_ReadAll_EN+0x86>
	{
		return NRF_SPI_ERROR_EN;
 800169c:	2301      	movs	r3, #1
 800169e:	e06e      	b.n	800177e <NRF24_ReadAll_EN+0x164>
	}

	NRF_ret_val_EN = nrf24_ReadReg_EN(RX_ADDR_P2_REG,(uint8_t*)(data+20));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3314      	adds	r3, #20
 80016a4:	250f      	movs	r5, #15
 80016a6:	197c      	adds	r4, r7, r5
 80016a8:	0019      	movs	r1, r3
 80016aa:	200b      	movs	r0, #11
 80016ac:	f7ff fb75 	bl	8000d9a <nrf24_ReadReg_EN>
 80016b0:	0003      	movs	r3, r0
 80016b2:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 80016b4:	197b      	adds	r3, r7, r5
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	d001      	beq.n	80016c0 <NRF24_ReadAll_EN+0xa6>
	{
		return NRF_SPI_ERROR_EN;
 80016bc:	2301      	movs	r3, #1
 80016be:	e05e      	b.n	800177e <NRF24_ReadAll_EN+0x164>
	}

	NRF_ret_val_EN = nrf24_ReadReg_EN(RX_ADDR_P3_REG,(uint8_t*)(data+21));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3315      	adds	r3, #21
 80016c4:	250f      	movs	r5, #15
 80016c6:	197c      	adds	r4, r7, r5
 80016c8:	0019      	movs	r1, r3
 80016ca:	200d      	movs	r0, #13
 80016cc:	f7ff fb65 	bl	8000d9a <nrf24_ReadReg_EN>
 80016d0:	0003      	movs	r3, r0
 80016d2:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 80016d4:	197b      	adds	r3, r7, r5
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b03      	cmp	r3, #3
 80016da:	d001      	beq.n	80016e0 <NRF24_ReadAll_EN+0xc6>
	{
		return NRF_SPI_ERROR_EN;
 80016dc:	2301      	movs	r3, #1
 80016de:	e04e      	b.n	800177e <NRF24_ReadAll_EN+0x164>
	}

	NRF_ret_val_EN = nrf24_ReadReg_EN(RX_ADDR_P4_REG,(uint8_t*)(data+22));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3316      	adds	r3, #22
 80016e4:	250f      	movs	r5, #15
 80016e6:	197c      	adds	r4, r7, r5
 80016e8:	0019      	movs	r1, r3
 80016ea:	200e      	movs	r0, #14
 80016ec:	f7ff fb55 	bl	8000d9a <nrf24_ReadReg_EN>
 80016f0:	0003      	movs	r3, r0
 80016f2:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 80016f4:	197b      	adds	r3, r7, r5
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b03      	cmp	r3, #3
 80016fa:	d001      	beq.n	8001700 <NRF24_ReadAll_EN+0xe6>
	{
		return NRF_SPI_ERROR_EN;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e03e      	b.n	800177e <NRF24_ReadAll_EN+0x164>
	}

	NRF_ret_val_EN = nrf24_ReadReg_EN(RX_ADDR_P5_REG,(uint8_t*)(data+23));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3317      	adds	r3, #23
 8001704:	250f      	movs	r5, #15
 8001706:	197c      	adds	r4, r7, r5
 8001708:	0019      	movs	r1, r3
 800170a:	200f      	movs	r0, #15
 800170c:	f7ff fb45 	bl	8000d9a <nrf24_ReadReg_EN>
 8001710:	0003      	movs	r3, r0
 8001712:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 8001714:	197b      	adds	r3, r7, r5
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b03      	cmp	r3, #3
 800171a:	d001      	beq.n	8001720 <NRF24_ReadAll_EN+0x106>
	{
		return NRF_SPI_ERROR_EN;
 800171c:	2301      	movs	r3, #1
 800171e:	e02e      	b.n	800177e <NRF24_ReadAll_EN+0x164>
	}


	NRF_ret_val_EN = nrf24_ReadReg_Multi_EN(RX_ADDR_P0_REG,(data+24), 5);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3318      	adds	r3, #24
 8001724:	250f      	movs	r5, #15
 8001726:	197c      	adds	r4, r7, r5
 8001728:	2205      	movs	r2, #5
 800172a:	0019      	movs	r1, r3
 800172c:	200a      	movs	r0, #10
 800172e:	f7ff fb54 	bl	8000dda <nrf24_ReadReg_Multi_EN>
 8001732:	0003      	movs	r3, r0
 8001734:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 8001736:	197b      	adds	r3, r7, r5
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b03      	cmp	r3, #3
 800173c:	d001      	beq.n	8001742 <NRF24_ReadAll_EN+0x128>
	{
		return NRF_SPI_ERROR_EN;
 800173e:	2301      	movs	r3, #1
 8001740:	e01d      	b.n	800177e <NRF24_ReadAll_EN+0x164>
	}

	for(int i=29; i<38; i++)
 8001742:	231d      	movs	r3, #29
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	e016      	b.n	8001776 <NRF24_ReadAll_EN+0x15c>
	{
		NRF_ret_val_EN = nrf24_ReadReg_EN(i-12,(uint8_t*)(data+i));
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	b2db      	uxtb	r3, r3
 800174c:	3b0c      	subs	r3, #12
 800174e:	b2d8      	uxtb	r0, r3
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	18d3      	adds	r3, r2, r3
 8001756:	250f      	movs	r5, #15
 8001758:	197c      	adds	r4, r7, r5
 800175a:	0019      	movs	r1, r3
 800175c:	f7ff fb1d 	bl	8000d9a <nrf24_ReadReg_EN>
 8001760:	0003      	movs	r3, r0
 8001762:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8001764:	197b      	adds	r3, r7, r5
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b03      	cmp	r3, #3
 800176a:	d001      	beq.n	8001770 <NRF24_ReadAll_EN+0x156>
		{
			return NRF_SPI_ERROR_EN;
 800176c:	2301      	movs	r3, #1
 800176e:	e006      	b.n	800177e <NRF24_ReadAll_EN+0x164>
	for(int i=29; i<38; i++)
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	3301      	adds	r3, #1
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	2b25      	cmp	r3, #37	; 0x25
 800177a:	dde5      	ble.n	8001748 <NRF24_ReadAll_EN+0x12e>
		}

	}
	return NRF_OK_EN;
 800177c:	2303      	movs	r3, #3
}
 800177e:	0018      	movs	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	b006      	add	sp, #24
 8001784:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001788 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178c:	4b07      	ldr	r3, [pc, #28]	; (80017ac <HAL_MspInit+0x24>)
 800178e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_MspInit+0x24>)
 8001792:	2101      	movs	r1, #1
 8001794:	430a      	orrs	r2, r1
 8001796:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <HAL_MspInit+0x24>)
 800179a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800179c:	4b03      	ldr	r3, [pc, #12]	; (80017ac <HAL_MspInit+0x24>)
 800179e:	2180      	movs	r1, #128	; 0x80
 80017a0:	0549      	lsls	r1, r1, #21
 80017a2:	430a      	orrs	r2, r1
 80017a4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40021000 	.word	0x40021000

080017b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b089      	sub	sp, #36	; 0x24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	240c      	movs	r4, #12
 80017ba:	193b      	adds	r3, r7, r4
 80017bc:	0018      	movs	r0, r3
 80017be:	2314      	movs	r3, #20
 80017c0:	001a      	movs	r2, r3
 80017c2:	2100      	movs	r1, #0
 80017c4:	f003 fd96 	bl	80052f4 <memset>
  if(hadc->Instance==ADC1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a14      	ldr	r2, [pc, #80]	; (8001820 <HAL_ADC_MspInit+0x70>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d122      	bne.n	8001818 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017d2:	4b14      	ldr	r3, [pc, #80]	; (8001824 <HAL_ADC_MspInit+0x74>)
 80017d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017d6:	4b13      	ldr	r3, [pc, #76]	; (8001824 <HAL_ADC_MspInit+0x74>)
 80017d8:	2180      	movs	r1, #128	; 0x80
 80017da:	0089      	lsls	r1, r1, #2
 80017dc:	430a      	orrs	r2, r1
 80017de:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e0:	4b10      	ldr	r3, [pc, #64]	; (8001824 <HAL_ADC_MspInit+0x74>)
 80017e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017e4:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <HAL_ADC_MspInit+0x74>)
 80017e6:	2101      	movs	r1, #1
 80017e8:	430a      	orrs	r2, r1
 80017ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80017ec:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <HAL_ADC_MspInit+0x74>)
 80017ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f0:	2201      	movs	r2, #1
 80017f2:	4013      	ands	r3, r2
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017f8:	193b      	adds	r3, r7, r4
 80017fa:	2210      	movs	r2, #16
 80017fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017fe:	193b      	adds	r3, r7, r4
 8001800:	2203      	movs	r2, #3
 8001802:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	193b      	adds	r3, r7, r4
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180a:	193a      	adds	r2, r7, r4
 800180c:	23a0      	movs	r3, #160	; 0xa0
 800180e:	05db      	lsls	r3, r3, #23
 8001810:	0011      	movs	r1, r2
 8001812:	0018      	movs	r0, r3
 8001814:	f000 fca8 	bl	8002168 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001818:	46c0      	nop			; (mov r8, r8)
 800181a:	46bd      	mov	sp, r7
 800181c:	b009      	add	sp, #36	; 0x24
 800181e:	bd90      	pop	{r4, r7, pc}
 8001820:	40012400 	.word	0x40012400
 8001824:	40021000 	.word	0x40021000

08001828 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001828:	b590      	push	{r4, r7, lr}
 800182a:	b089      	sub	sp, #36	; 0x24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	240c      	movs	r4, #12
 8001832:	193b      	adds	r3, r7, r4
 8001834:	0018      	movs	r0, r3
 8001836:	2314      	movs	r3, #20
 8001838:	001a      	movs	r2, r3
 800183a:	2100      	movs	r1, #0
 800183c:	f003 fd5a 	bl	80052f4 <memset>
  if(hi2c->Instance==I2C1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a17      	ldr	r2, [pc, #92]	; (80018a4 <HAL_I2C_MspInit+0x7c>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d128      	bne.n	800189c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184a:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <HAL_I2C_MspInit+0x80>)
 800184c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800184e:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <HAL_I2C_MspInit+0x80>)
 8001850:	2102      	movs	r1, #2
 8001852:	430a      	orrs	r2, r1
 8001854:	62da      	str	r2, [r3, #44]	; 0x2c
 8001856:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <HAL_I2C_MspInit+0x80>)
 8001858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185a:	2202      	movs	r2, #2
 800185c:	4013      	ands	r3, r2
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001862:	0021      	movs	r1, r4
 8001864:	187b      	adds	r3, r7, r1
 8001866:	22c0      	movs	r2, #192	; 0xc0
 8001868:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800186a:	187b      	adds	r3, r7, r1
 800186c:	2212      	movs	r2, #18
 800186e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	187b      	adds	r3, r7, r1
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001876:	187b      	adds	r3, r7, r1
 8001878:	2203      	movs	r2, #3
 800187a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800187c:	187b      	adds	r3, r7, r1
 800187e:	2201      	movs	r2, #1
 8001880:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001882:	187b      	adds	r3, r7, r1
 8001884:	4a09      	ldr	r2, [pc, #36]	; (80018ac <HAL_I2C_MspInit+0x84>)
 8001886:	0019      	movs	r1, r3
 8001888:	0010      	movs	r0, r2
 800188a:	f000 fc6d 	bl	8002168 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_I2C_MspInit+0x80>)
 8001890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001892:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <HAL_I2C_MspInit+0x80>)
 8001894:	2180      	movs	r1, #128	; 0x80
 8001896:	0389      	lsls	r1, r1, #14
 8001898:	430a      	orrs	r2, r1
 800189a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800189c:	46c0      	nop			; (mov r8, r8)
 800189e:	46bd      	mov	sp, r7
 80018a0:	b009      	add	sp, #36	; 0x24
 80018a2:	bd90      	pop	{r4, r7, pc}
 80018a4:	40005400 	.word	0x40005400
 80018a8:	40021000 	.word	0x40021000
 80018ac:	50000400 	.word	0x50000400

080018b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b089      	sub	sp, #36	; 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	240c      	movs	r4, #12
 80018ba:	193b      	adds	r3, r7, r4
 80018bc:	0018      	movs	r0, r3
 80018be:	2314      	movs	r3, #20
 80018c0:	001a      	movs	r2, r3
 80018c2:	2100      	movs	r1, #0
 80018c4:	f003 fd16 	bl	80052f4 <memset>
  if(hspi->Instance==SPI1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a17      	ldr	r2, [pc, #92]	; (800192c <HAL_SPI_MspInit+0x7c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d128      	bne.n	8001924 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018d2:	4b17      	ldr	r3, [pc, #92]	; (8001930 <HAL_SPI_MspInit+0x80>)
 80018d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018d6:	4b16      	ldr	r3, [pc, #88]	; (8001930 <HAL_SPI_MspInit+0x80>)
 80018d8:	2180      	movs	r1, #128	; 0x80
 80018da:	0149      	lsls	r1, r1, #5
 80018dc:	430a      	orrs	r2, r1
 80018de:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e0:	4b13      	ldr	r3, [pc, #76]	; (8001930 <HAL_SPI_MspInit+0x80>)
 80018e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_SPI_MspInit+0x80>)
 80018e6:	2102      	movs	r1, #2
 80018e8:	430a      	orrs	r2, r1
 80018ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80018ec:	4b10      	ldr	r3, [pc, #64]	; (8001930 <HAL_SPI_MspInit+0x80>)
 80018ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f0:	2202      	movs	r2, #2
 80018f2:	4013      	ands	r3, r2
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80018f8:	0021      	movs	r1, r4
 80018fa:	187b      	adds	r3, r7, r1
 80018fc:	2238      	movs	r2, #56	; 0x38
 80018fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001900:	187b      	adds	r3, r7, r1
 8001902:	2202      	movs	r2, #2
 8001904:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	187b      	adds	r3, r7, r1
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190c:	187b      	adds	r3, r7, r1
 800190e:	2203      	movs	r2, #3
 8001910:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001912:	187b      	adds	r3, r7, r1
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001918:	187b      	adds	r3, r7, r1
 800191a:	4a06      	ldr	r2, [pc, #24]	; (8001934 <HAL_SPI_MspInit+0x84>)
 800191c:	0019      	movs	r1, r3
 800191e:	0010      	movs	r0, r2
 8001920:	f000 fc22 	bl	8002168 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001924:	46c0      	nop			; (mov r8, r8)
 8001926:	46bd      	mov	sp, r7
 8001928:	b009      	add	sp, #36	; 0x24
 800192a:	bd90      	pop	{r4, r7, pc}
 800192c:	40013000 	.word	0x40013000
 8001930:	40021000 	.word	0x40021000
 8001934:	50000400 	.word	0x50000400

08001938 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	2380      	movs	r3, #128	; 0x80
 8001946:	05db      	lsls	r3, r3, #23
 8001948:	429a      	cmp	r2, r3
 800194a:	d105      	bne.n	8001958 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800194c:	4b04      	ldr	r3, [pc, #16]	; (8001960 <HAL_TIM_Base_MspInit+0x28>)
 800194e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001950:	4b03      	ldr	r3, [pc, #12]	; (8001960 <HAL_TIM_Base_MspInit+0x28>)
 8001952:	2101      	movs	r1, #1
 8001954:	430a      	orrs	r2, r1
 8001956:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001958:	46c0      	nop			; (mov r8, r8)
 800195a:	46bd      	mov	sp, r7
 800195c:	b002      	add	sp, #8
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40021000 	.word	0x40021000

08001964 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001964:	b590      	push	{r4, r7, lr}
 8001966:	b089      	sub	sp, #36	; 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	240c      	movs	r4, #12
 800196e:	193b      	adds	r3, r7, r4
 8001970:	0018      	movs	r0, r3
 8001972:	2314      	movs	r3, #20
 8001974:	001a      	movs	r2, r3
 8001976:	2100      	movs	r1, #0
 8001978:	f003 fcbc 	bl	80052f4 <memset>
  if(htim->Instance==TIM2)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	05db      	lsls	r3, r3, #23
 8001984:	429a      	cmp	r2, r3
 8001986:	d122      	bne.n	80019ce <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001988:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <HAL_TIM_MspPostInit+0x74>)
 800198a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800198c:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_TIM_MspPostInit+0x74>)
 800198e:	2101      	movs	r1, #1
 8001990:	430a      	orrs	r2, r1
 8001992:	62da      	str	r2, [r3, #44]	; 0x2c
 8001994:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <HAL_TIM_MspPostInit+0x74>)
 8001996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001998:	2201      	movs	r2, #1
 800199a:	4013      	ands	r3, r2
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = onb_Pin|on_Pin;
 80019a0:	0021      	movs	r1, r4
 80019a2:	187b      	adds	r3, r7, r1
 80019a4:	2203      	movs	r2, #3
 80019a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	187b      	adds	r3, r7, r1
 80019aa:	2202      	movs	r2, #2
 80019ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019ae:	187b      	adds	r3, r7, r1
 80019b0:	2202      	movs	r2, #2
 80019b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b4:	187b      	adds	r3, r7, r1
 80019b6:	2200      	movs	r2, #0
 80019b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80019ba:	187b      	adds	r3, r7, r1
 80019bc:	2202      	movs	r2, #2
 80019be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c0:	187a      	adds	r2, r7, r1
 80019c2:	23a0      	movs	r3, #160	; 0xa0
 80019c4:	05db      	lsls	r3, r3, #23
 80019c6:	0011      	movs	r1, r2
 80019c8:	0018      	movs	r0, r3
 80019ca:	f000 fbcd 	bl	8002168 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80019ce:	46c0      	nop			; (mov r8, r8)
 80019d0:	46bd      	mov	sp, r7
 80019d2:	b009      	add	sp, #36	; 0x24
 80019d4:	bd90      	pop	{r4, r7, pc}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	40021000 	.word	0x40021000

080019dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019dc:	b590      	push	{r4, r7, lr}
 80019de:	b089      	sub	sp, #36	; 0x24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	240c      	movs	r4, #12
 80019e6:	193b      	adds	r3, r7, r4
 80019e8:	0018      	movs	r0, r3
 80019ea:	2314      	movs	r3, #20
 80019ec:	001a      	movs	r2, r3
 80019ee:	2100      	movs	r1, #0
 80019f0:	f003 fc80 	bl	80052f4 <memset>
  if(huart->Instance==USART2)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a18      	ldr	r2, [pc, #96]	; (8001a5c <HAL_UART_MspInit+0x80>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d12a      	bne.n	8001a54 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019fe:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <HAL_UART_MspInit+0x84>)
 8001a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a02:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <HAL_UART_MspInit+0x84>)
 8001a04:	2180      	movs	r1, #128	; 0x80
 8001a06:	0289      	lsls	r1, r1, #10
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0c:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <HAL_UART_MspInit+0x84>)
 8001a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a10:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <HAL_UART_MspInit+0x84>)
 8001a12:	2101      	movs	r1, #1
 8001a14:	430a      	orrs	r2, r1
 8001a16:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a18:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <HAL_UART_MspInit+0x84>)
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	4013      	ands	r3, r2
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA9     ------> USART2_TX
    PA10     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a24:	193b      	adds	r3, r7, r4
 8001a26:	22c0      	movs	r2, #192	; 0xc0
 8001a28:	00d2      	lsls	r2, r2, #3
 8001a2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	0021      	movs	r1, r4
 8001a2e:	187b      	adds	r3, r7, r1
 8001a30:	2202      	movs	r2, #2
 8001a32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	187b      	adds	r3, r7, r1
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3a:	187b      	adds	r3, r7, r1
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001a40:	187b      	adds	r3, r7, r1
 8001a42:	2204      	movs	r2, #4
 8001a44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a46:	187a      	adds	r2, r7, r1
 8001a48:	23a0      	movs	r3, #160	; 0xa0
 8001a4a:	05db      	lsls	r3, r3, #23
 8001a4c:	0011      	movs	r1, r2
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f000 fb8a 	bl	8002168 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a54:	46c0      	nop			; (mov r8, r8)
 8001a56:	46bd      	mov	sp, r7
 8001a58:	b009      	add	sp, #36	; 0x24
 8001a5a:	bd90      	pop	{r4, r7, pc}
 8001a5c:	40004400 	.word	0x40004400
 8001a60:	40021000 	.word	0x40021000

08001a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <NMI_Handler+0x4>

08001a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <HardFault_Handler+0x4>

08001a70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a74:	46c0      	nop			; (mov r8, r8)
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a88:	f000 f89e 	bl	8001bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a8c:	46c0      	nop			; (mov r8, r8)
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001a9c:	4813      	ldr	r0, [pc, #76]	; (8001aec <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001a9e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001aa0:	f7ff fff7 	bl	8001a92 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001aa4:	4812      	ldr	r0, [pc, #72]	; (8001af0 <LoopForever+0x6>)
    LDR R1, [R0]
 8001aa6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001aa8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001aaa:	4a12      	ldr	r2, [pc, #72]	; (8001af4 <LoopForever+0xa>)
    CMP R1, R2
 8001aac:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001aae:	d105      	bne.n	8001abc <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001ab0:	4811      	ldr	r0, [pc, #68]	; (8001af8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001ab2:	4912      	ldr	r1, [pc, #72]	; (8001afc <LoopForever+0x12>)
    STR R1, [R0]
 8001ab4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001ab6:	4812      	ldr	r0, [pc, #72]	; (8001b00 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001ab8:	4912      	ldr	r1, [pc, #72]	; (8001b04 <LoopForever+0x1a>)
    STR R1, [R0]
 8001aba:	6001      	str	r1, [r0, #0]

08001abc <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001abc:	4812      	ldr	r0, [pc, #72]	; (8001b08 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001abe:	4913      	ldr	r1, [pc, #76]	; (8001b0c <LoopForever+0x22>)
  ldr r2, =_sidata
 8001ac0:	4a13      	ldr	r2, [pc, #76]	; (8001b10 <LoopForever+0x26>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac4:	e002      	b.n	8001acc <LoopCopyDataInit>

08001ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aca:	3304      	adds	r3, #4

08001acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad0:	d3f9      	bcc.n	8001ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ad2:	4a10      	ldr	r2, [pc, #64]	; (8001b14 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001ad4:	4c10      	ldr	r4, [pc, #64]	; (8001b18 <LoopForever+0x2e>)
  movs r3, #0
 8001ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad8:	e001      	b.n	8001ade <LoopFillZerobss>

08001ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001adc:	3204      	adds	r2, #4

08001ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae0:	d3fb      	bcc.n	8001ada <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ae2:	f003 fc0f 	bl	8005304 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ae6:	f7fe fdef 	bl	80006c8 <main>

08001aea <LoopForever>:

LoopForever:
    b LoopForever
 8001aea:	e7fe      	b.n	8001aea <LoopForever>
   ldr   r0, =_estack
 8001aec:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8001af0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001af4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8001af8:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001afc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001b00:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001b04:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001b10:	08005420 	.word	0x08005420
  ldr r2, =_sbss
 8001b14:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001b18:	20000210 	.word	0x20000210

08001b1c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b1c:	e7fe      	b.n	8001b1c <ADC1_IRQHandler>
	...

08001b20 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b26:	1dfb      	adds	r3, r7, #7
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <HAL_Init+0x3c>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <HAL_Init+0x3c>)
 8001b32:	2140      	movs	r1, #64	; 0x40
 8001b34:	430a      	orrs	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b38:	2003      	movs	r0, #3
 8001b3a:	f000 f811 	bl	8001b60 <HAL_InitTick>
 8001b3e:	1e03      	subs	r3, r0, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001b42:	1dfb      	adds	r3, r7, #7
 8001b44:	2201      	movs	r2, #1
 8001b46:	701a      	strb	r2, [r3, #0]
 8001b48:	e001      	b.n	8001b4e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b4a:	f7ff fe1d 	bl	8001788 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b4e:	1dfb      	adds	r3, r7, #7
 8001b50:	781b      	ldrb	r3, [r3, #0]
}
 8001b52:	0018      	movs	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	b002      	add	sp, #8
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	40022000 	.word	0x40022000

08001b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b68:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <HAL_InitTick+0x5c>)
 8001b6a:	681c      	ldr	r4, [r3, #0]
 8001b6c:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <HAL_InitTick+0x60>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	0019      	movs	r1, r3
 8001b72:	23fa      	movs	r3, #250	; 0xfa
 8001b74:	0098      	lsls	r0, r3, #2
 8001b76:	f7fe fac7 	bl	8000108 <__udivsi3>
 8001b7a:	0003      	movs	r3, r0
 8001b7c:	0019      	movs	r1, r3
 8001b7e:	0020      	movs	r0, r4
 8001b80:	f7fe fac2 	bl	8000108 <__udivsi3>
 8001b84:	0003      	movs	r3, r0
 8001b86:	0018      	movs	r0, r3
 8001b88:	f000 fae1 	bl	800214e <HAL_SYSTICK_Config>
 8001b8c:	1e03      	subs	r3, r0, #0
 8001b8e:	d001      	beq.n	8001b94 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e00f      	b.n	8001bb4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d80b      	bhi.n	8001bb2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	425b      	negs	r3, r3
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f000 fabe 	bl	8002124 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_InitTick+0x64>)
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	e000      	b.n	8001bb4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
}
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	b003      	add	sp, #12
 8001bba:	bd90      	pop	{r4, r7, pc}
 8001bbc:	20000000 	.word	0x20000000
 8001bc0:	20000008 	.word	0x20000008
 8001bc4:	20000004 	.word	0x20000004

08001bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <HAL_IncTick+0x1c>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	001a      	movs	r2, r3
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_IncTick+0x20>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	18d2      	adds	r2, r2, r3
 8001bd8:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <HAL_IncTick+0x20>)
 8001bda:	601a      	str	r2, [r3, #0]
}
 8001bdc:	46c0      	nop			; (mov r8, r8)
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	20000008 	.word	0x20000008
 8001be8:	2000020c 	.word	0x2000020c

08001bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf0:	4b02      	ldr	r3, [pc, #8]	; (8001bfc <HAL_GetTick+0x10>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
}
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	46c0      	nop			; (mov r8, r8)
 8001bfc:	2000020c 	.word	0x2000020c

08001c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c08:	f7ff fff0 	bl	8001bec <HAL_GetTick>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	3301      	adds	r3, #1
 8001c18:	d005      	beq.n	8001c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <HAL_Delay+0x44>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	001a      	movs	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	189b      	adds	r3, r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	f7ff ffe0 	bl	8001bec <HAL_GetTick>
 8001c2c:	0002      	movs	r2, r0
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d8f7      	bhi.n	8001c28 <HAL_Delay+0x28>
  {
  }
}
 8001c38:	46c0      	nop			; (mov r8, r8)
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	b004      	add	sp, #16
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	20000008 	.word	0x20000008

08001c48 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e159      	b.n	8001f0e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10a      	bne.n	8001c78 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2250      	movs	r2, #80	; 0x50
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	0018      	movs	r0, r3
 8001c74:	f7ff fd9c 	bl	80017b0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7c:	2210      	movs	r2, #16
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b10      	cmp	r3, #16
 8001c82:	d005      	beq.n	8001c90 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001c8e:	d00b      	beq.n	8001ca8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c94:	2210      	movs	r2, #16
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2250      	movs	r2, #80	; 0x50
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e132      	b.n	8001f0e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cac:	4a9a      	ldr	r2, [pc, #616]	; (8001f18 <HAL_ADC_Init+0x2d0>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d108      	bne.n	8001cd8 <HAL_ADC_Init+0x90>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d101      	bne.n	8001cd8 <HAL_ADC_Init+0x90>
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e000      	b.n	8001cda <HAL_ADC_Init+0x92>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d149      	bne.n	8001d72 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	23c0      	movs	r3, #192	; 0xc0
 8001ce4:	061b      	lsls	r3, r3, #24
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d00b      	beq.n	8001d02 <HAL_ADC_Init+0xba>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	2380      	movs	r3, #128	; 0x80
 8001cf0:	05db      	lsls	r3, r3, #23
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d005      	beq.n	8001d02 <HAL_ADC_Init+0xba>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	2380      	movs	r3, #128	; 0x80
 8001cfc:	061b      	lsls	r3, r3, #24
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d111      	bne.n	8001d26 <HAL_ADC_Init+0xde>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	0092      	lsls	r2, r2, #2
 8001d0e:	0892      	lsrs	r2, r2, #2
 8001d10:	611a      	str	r2, [r3, #16]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6919      	ldr	r1, [r3, #16]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	611a      	str	r2, [r3, #16]
 8001d24:	e014      	b.n	8001d50 <HAL_ADC_Init+0x108>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	691a      	ldr	r2, [r3, #16]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	0092      	lsls	r2, r2, #2
 8001d32:	0892      	lsrs	r2, r2, #2
 8001d34:	611a      	str	r2, [r3, #16]
 8001d36:	4b79      	ldr	r3, [pc, #484]	; (8001f1c <HAL_ADC_Init+0x2d4>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	4b78      	ldr	r3, [pc, #480]	; (8001f1c <HAL_ADC_Init+0x2d4>)
 8001d3c:	4978      	ldr	r1, [pc, #480]	; (8001f20 <HAL_ADC_Init+0x2d8>)
 8001d3e:	400a      	ands	r2, r1
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	4b76      	ldr	r3, [pc, #472]	; (8001f1c <HAL_ADC_Init+0x2d4>)
 8001d44:	6819      	ldr	r1, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	4b74      	ldr	r3, [pc, #464]	; (8001f1c <HAL_ADC_Init+0x2d4>)
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2118      	movs	r1, #24
 8001d5c:	438a      	bics	r2, r1
 8001d5e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68d9      	ldr	r1, [r3, #12]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001d72:	4b6a      	ldr	r3, [pc, #424]	; (8001f1c <HAL_ADC_Init+0x2d4>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	4b69      	ldr	r3, [pc, #420]	; (8001f1c <HAL_ADC_Init+0x2d4>)
 8001d78:	496a      	ldr	r1, [pc, #424]	; (8001f24 <HAL_ADC_Init+0x2dc>)
 8001d7a:	400a      	ands	r2, r1
 8001d7c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001d7e:	4b67      	ldr	r3, [pc, #412]	; (8001f1c <HAL_ADC_Init+0x2d4>)
 8001d80:	6819      	ldr	r1, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d86:	065a      	lsls	r2, r3, #25
 8001d88:	4b64      	ldr	r3, [pc, #400]	; (8001f1c <HAL_ADC_Init+0x2d4>)
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	055b      	lsls	r3, r3, #21
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d108      	bne.n	8001dae <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2180      	movs	r1, #128	; 0x80
 8001da8:	0549      	lsls	r1, r1, #21
 8001daa:	430a      	orrs	r2, r1
 8001dac:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	495b      	ldr	r1, [pc, #364]	; (8001f28 <HAL_ADC_Init+0x2e0>)
 8001dba:	400a      	ands	r2, r1
 8001dbc:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68d9      	ldr	r1, [r3, #12]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d101      	bne.n	8001dd4 <HAL_ADC_Init+0x18c>
 8001dd0:	2304      	movs	r3, #4
 8001dd2:	e000      	b.n	8001dd6 <HAL_ADC_Init+0x18e>
 8001dd4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001dd6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2020      	movs	r0, #32
 8001ddc:	5c1b      	ldrb	r3, [r3, r0]
 8001dde:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001de0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	202c      	movs	r0, #44	; 0x2c
 8001de6:	5c1b      	ldrb	r3, [r3, r0]
 8001de8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001dea:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001df0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001df8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001e00:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e0e:	23c2      	movs	r3, #194	; 0xc2
 8001e10:	33ff      	adds	r3, #255	; 0xff
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d00b      	beq.n	8001e2e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68d9      	ldr	r1, [r3, #12]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001e24:	431a      	orrs	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2221      	movs	r2, #33	; 0x21
 8001e32:	5c9b      	ldrb	r3, [r3, r2]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d11a      	bne.n	8001e6e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	5c9b      	ldrb	r3, [r3, r2]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d109      	bne.n	8001e56 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2180      	movs	r1, #128	; 0x80
 8001e4e:	0249      	lsls	r1, r1, #9
 8001e50:	430a      	orrs	r2, r1
 8001e52:	60da      	str	r2, [r3, #12]
 8001e54:	e00b      	b.n	8001e6e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e66:	2201      	movs	r2, #1
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d11f      	bne.n	8001eb6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	492a      	ldr	r1, [pc, #168]	; (8001f2c <HAL_ADC_Init+0x2e4>)
 8001e82:	400a      	ands	r2, r1
 8001e84:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6919      	ldr	r1, [r3, #16]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001e94:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001e9a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691a      	ldr	r2, [r3, #16]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2101      	movs	r1, #1
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	611a      	str	r2, [r3, #16]
 8001eb4:	e00e      	b.n	8001ed4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d107      	bne.n	8001ed4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	691a      	ldr	r2, [r3, #16]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2101      	movs	r1, #1
 8001ed0:	438a      	bics	r2, r1
 8001ed2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	695a      	ldr	r2, [r3, #20]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2107      	movs	r1, #7
 8001ee0:	438a      	bics	r2, r1
 8001ee2:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6959      	ldr	r1, [r3, #20]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f00:	2203      	movs	r2, #3
 8001f02:	4393      	bics	r3, r2
 8001f04:	2201      	movs	r2, #1
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	0018      	movs	r0, r3
 8001f10:	46bd      	mov	sp, r7
 8001f12:	b002      	add	sp, #8
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	fffffefd 	.word	0xfffffefd
 8001f1c:	40012708 	.word	0x40012708
 8001f20:	ffc3ffff 	.word	0xffc3ffff
 8001f24:	fdffffff 	.word	0xfdffffff
 8001f28:	fffe0219 	.word	0xfffe0219
 8001f2c:	fffffc03 	.word	0xfffffc03

08001f30 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2250      	movs	r2, #80	; 0x50
 8001f3e:	5c9b      	ldrb	r3, [r3, r2]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d101      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x18>
 8001f44:	2302      	movs	r3, #2
 8001f46:	e050      	b.n	8001fea <HAL_ADC_ConfigChannel+0xba>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2250      	movs	r2, #80	; 0x50
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	2204      	movs	r2, #4
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d00b      	beq.n	8001f74 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f60:	2220      	movs	r2, #32
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2250      	movs	r2, #80	; 0x50
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e03a      	b.n	8001fea <HAL_ADC_ConfigChannel+0xba>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4a1e      	ldr	r2, [pc, #120]	; (8001ff4 <HAL_ADC_ConfigChannel+0xc4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d018      	beq.n	8001fb0 <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	035b      	lsls	r3, r3, #13
 8001f8a:	0b5a      	lsrs	r2, r3, #13
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	629a      	str	r2, [r3, #40]	; 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	2380      	movs	r3, #128	; 0x80
 8001f9a:	029b      	lsls	r3, r3, #10
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d01f      	beq.n	8001fe0 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001fa0:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <HAL_ADC_ConfigChannel+0xc8>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <HAL_ADC_ConfigChannel+0xc8>)
 8001fa6:	2180      	movs	r1, #128	; 0x80
 8001fa8:	03c9      	lsls	r1, r1, #15
 8001faa:	430a      	orrs	r2, r1
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	e017      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	035b      	lsls	r3, r3, #13
 8001fbc:	0b5b      	lsrs	r3, r3, #13
 8001fbe:	43d9      	mvns	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	400a      	ands	r2, r1
 8001fc6:	629a      	str	r2, [r3, #40]	; 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	029b      	lsls	r3, r3, #10
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d005      	beq.n	8001fe0 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <HAL_ADC_ConfigChannel+0xc8>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <HAL_ADC_ConfigChannel+0xc8>)
 8001fda:	4908      	ldr	r1, [pc, #32]	; (8001ffc <HAL_ADC_ConfigChannel+0xcc>)
 8001fdc:	400a      	ands	r2, r1
 8001fde:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2250      	movs	r2, #80	; 0x50
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	0018      	movs	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	b002      	add	sp, #8
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	46c0      	nop			; (mov r8, r8)
 8001ff4:	00001001 	.word	0x00001001
 8001ff8:	40012708 	.word	0x40012708
 8001ffc:	ffbfffff 	.word	0xffbfffff

08002000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002000:	b590      	push	{r4, r7, lr}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	0002      	movs	r2, r0
 8002008:	6039      	str	r1, [r7, #0]
 800200a:	1dfb      	adds	r3, r7, #7
 800200c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800200e:	1dfb      	adds	r3, r7, #7
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b7f      	cmp	r3, #127	; 0x7f
 8002014:	d828      	bhi.n	8002068 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002016:	4a2f      	ldr	r2, [pc, #188]	; (80020d4 <__NVIC_SetPriority+0xd4>)
 8002018:	1dfb      	adds	r3, r7, #7
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	b25b      	sxtb	r3, r3
 800201e:	089b      	lsrs	r3, r3, #2
 8002020:	33c0      	adds	r3, #192	; 0xc0
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	589b      	ldr	r3, [r3, r2]
 8002026:	1dfa      	adds	r2, r7, #7
 8002028:	7812      	ldrb	r2, [r2, #0]
 800202a:	0011      	movs	r1, r2
 800202c:	2203      	movs	r2, #3
 800202e:	400a      	ands	r2, r1
 8002030:	00d2      	lsls	r2, r2, #3
 8002032:	21ff      	movs	r1, #255	; 0xff
 8002034:	4091      	lsls	r1, r2
 8002036:	000a      	movs	r2, r1
 8002038:	43d2      	mvns	r2, r2
 800203a:	401a      	ands	r2, r3
 800203c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	019b      	lsls	r3, r3, #6
 8002042:	22ff      	movs	r2, #255	; 0xff
 8002044:	401a      	ands	r2, r3
 8002046:	1dfb      	adds	r3, r7, #7
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	0018      	movs	r0, r3
 800204c:	2303      	movs	r3, #3
 800204e:	4003      	ands	r3, r0
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002054:	481f      	ldr	r0, [pc, #124]	; (80020d4 <__NVIC_SetPriority+0xd4>)
 8002056:	1dfb      	adds	r3, r7, #7
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	b25b      	sxtb	r3, r3
 800205c:	089b      	lsrs	r3, r3, #2
 800205e:	430a      	orrs	r2, r1
 8002060:	33c0      	adds	r3, #192	; 0xc0
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002066:	e031      	b.n	80020cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002068:	4a1b      	ldr	r2, [pc, #108]	; (80020d8 <__NVIC_SetPriority+0xd8>)
 800206a:	1dfb      	adds	r3, r7, #7
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	0019      	movs	r1, r3
 8002070:	230f      	movs	r3, #15
 8002072:	400b      	ands	r3, r1
 8002074:	3b08      	subs	r3, #8
 8002076:	089b      	lsrs	r3, r3, #2
 8002078:	3306      	adds	r3, #6
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	18d3      	adds	r3, r2, r3
 800207e:	3304      	adds	r3, #4
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	1dfa      	adds	r2, r7, #7
 8002084:	7812      	ldrb	r2, [r2, #0]
 8002086:	0011      	movs	r1, r2
 8002088:	2203      	movs	r2, #3
 800208a:	400a      	ands	r2, r1
 800208c:	00d2      	lsls	r2, r2, #3
 800208e:	21ff      	movs	r1, #255	; 0xff
 8002090:	4091      	lsls	r1, r2
 8002092:	000a      	movs	r2, r1
 8002094:	43d2      	mvns	r2, r2
 8002096:	401a      	ands	r2, r3
 8002098:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	019b      	lsls	r3, r3, #6
 800209e:	22ff      	movs	r2, #255	; 0xff
 80020a0:	401a      	ands	r2, r3
 80020a2:	1dfb      	adds	r3, r7, #7
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	0018      	movs	r0, r3
 80020a8:	2303      	movs	r3, #3
 80020aa:	4003      	ands	r3, r0
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020b0:	4809      	ldr	r0, [pc, #36]	; (80020d8 <__NVIC_SetPriority+0xd8>)
 80020b2:	1dfb      	adds	r3, r7, #7
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	001c      	movs	r4, r3
 80020b8:	230f      	movs	r3, #15
 80020ba:	4023      	ands	r3, r4
 80020bc:	3b08      	subs	r3, #8
 80020be:	089b      	lsrs	r3, r3, #2
 80020c0:	430a      	orrs	r2, r1
 80020c2:	3306      	adds	r3, #6
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	18c3      	adds	r3, r0, r3
 80020c8:	3304      	adds	r3, #4
 80020ca:	601a      	str	r2, [r3, #0]
}
 80020cc:	46c0      	nop			; (mov r8, r8)
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b003      	add	sp, #12
 80020d2:	bd90      	pop	{r4, r7, pc}
 80020d4:	e000e100 	.word	0xe000e100
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	1e5a      	subs	r2, r3, #1
 80020e8:	2380      	movs	r3, #128	; 0x80
 80020ea:	045b      	lsls	r3, r3, #17
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d301      	bcc.n	80020f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020f0:	2301      	movs	r3, #1
 80020f2:	e010      	b.n	8002116 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020f4:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <SysTick_Config+0x44>)
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	3a01      	subs	r2, #1
 80020fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020fc:	2301      	movs	r3, #1
 80020fe:	425b      	negs	r3, r3
 8002100:	2103      	movs	r1, #3
 8002102:	0018      	movs	r0, r3
 8002104:	f7ff ff7c 	bl	8002000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <SysTick_Config+0x44>)
 800210a:	2200      	movs	r2, #0
 800210c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800210e:	4b04      	ldr	r3, [pc, #16]	; (8002120 <SysTick_Config+0x44>)
 8002110:	2207      	movs	r2, #7
 8002112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002114:	2300      	movs	r3, #0
}
 8002116:	0018      	movs	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	b002      	add	sp, #8
 800211c:	bd80      	pop	{r7, pc}
 800211e:	46c0      	nop			; (mov r8, r8)
 8002120:	e000e010 	.word	0xe000e010

08002124 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
 800212e:	210f      	movs	r1, #15
 8002130:	187b      	adds	r3, r7, r1
 8002132:	1c02      	adds	r2, r0, #0
 8002134:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	187b      	adds	r3, r7, r1
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	b25b      	sxtb	r3, r3
 800213e:	0011      	movs	r1, r2
 8002140:	0018      	movs	r0, r3
 8002142:	f7ff ff5d 	bl	8002000 <__NVIC_SetPriority>
}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	46bd      	mov	sp, r7
 800214a:	b004      	add	sp, #16
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	0018      	movs	r0, r3
 800215a:	f7ff ffbf 	bl	80020dc <SysTick_Config>
 800215e:	0003      	movs	r3, r0
}
 8002160:	0018      	movs	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	b002      	add	sp, #8
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800217e:	e149      	b.n	8002414 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2101      	movs	r1, #1
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4091      	lsls	r1, r2
 800218a:	000a      	movs	r2, r1
 800218c:	4013      	ands	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d100      	bne.n	8002198 <HAL_GPIO_Init+0x30>
 8002196:	e13a      	b.n	800240e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2203      	movs	r2, #3
 800219e:	4013      	ands	r3, r2
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d005      	beq.n	80021b0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2203      	movs	r2, #3
 80021aa:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d130      	bne.n	8002212 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	2203      	movs	r2, #3
 80021bc:	409a      	lsls	r2, r3
 80021be:	0013      	movs	r3, r2
 80021c0:	43da      	mvns	r2, r3
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4013      	ands	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	409a      	lsls	r2, r3
 80021d2:	0013      	movs	r3, r2
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021e6:	2201      	movs	r2, #1
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	409a      	lsls	r2, r3
 80021ec:	0013      	movs	r3, r2
 80021ee:	43da      	mvns	r2, r3
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4013      	ands	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	091b      	lsrs	r3, r3, #4
 80021fc:	2201      	movs	r2, #1
 80021fe:	401a      	ands	r2, r3
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	409a      	lsls	r2, r3
 8002204:	0013      	movs	r3, r2
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2203      	movs	r2, #3
 8002218:	4013      	ands	r3, r2
 800221a:	2b03      	cmp	r3, #3
 800221c:	d017      	beq.n	800224e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	2203      	movs	r2, #3
 800222a:	409a      	lsls	r2, r3
 800222c:	0013      	movs	r3, r2
 800222e:	43da      	mvns	r2, r3
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	4013      	ands	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	409a      	lsls	r2, r3
 8002240:	0013      	movs	r3, r2
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2203      	movs	r2, #3
 8002254:	4013      	ands	r3, r2
 8002256:	2b02      	cmp	r3, #2
 8002258:	d123      	bne.n	80022a2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	08da      	lsrs	r2, r3, #3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3208      	adds	r2, #8
 8002262:	0092      	lsls	r2, r2, #2
 8002264:	58d3      	ldr	r3, [r2, r3]
 8002266:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	2207      	movs	r2, #7
 800226c:	4013      	ands	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	220f      	movs	r2, #15
 8002272:	409a      	lsls	r2, r3
 8002274:	0013      	movs	r3, r2
 8002276:	43da      	mvns	r2, r3
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4013      	ands	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	691a      	ldr	r2, [r3, #16]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	2107      	movs	r1, #7
 8002286:	400b      	ands	r3, r1
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	409a      	lsls	r2, r3
 800228c:	0013      	movs	r3, r2
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	08da      	lsrs	r2, r3, #3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3208      	adds	r2, #8
 800229c:	0092      	lsls	r2, r2, #2
 800229e:	6939      	ldr	r1, [r7, #16]
 80022a0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	2203      	movs	r2, #3
 80022ae:	409a      	lsls	r2, r3
 80022b0:	0013      	movs	r3, r2
 80022b2:	43da      	mvns	r2, r3
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4013      	ands	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2203      	movs	r2, #3
 80022c0:	401a      	ands	r2, r3
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	409a      	lsls	r2, r3
 80022c8:	0013      	movs	r3, r2
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	23c0      	movs	r3, #192	; 0xc0
 80022dc:	029b      	lsls	r3, r3, #10
 80022de:	4013      	ands	r3, r2
 80022e0:	d100      	bne.n	80022e4 <HAL_GPIO_Init+0x17c>
 80022e2:	e094      	b.n	800240e <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e4:	4b51      	ldr	r3, [pc, #324]	; (800242c <HAL_GPIO_Init+0x2c4>)
 80022e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022e8:	4b50      	ldr	r3, [pc, #320]	; (800242c <HAL_GPIO_Init+0x2c4>)
 80022ea:	2101      	movs	r1, #1
 80022ec:	430a      	orrs	r2, r1
 80022ee:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80022f0:	4a4f      	ldr	r2, [pc, #316]	; (8002430 <HAL_GPIO_Init+0x2c8>)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	089b      	lsrs	r3, r3, #2
 80022f6:	3302      	adds	r3, #2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	589b      	ldr	r3, [r3, r2]
 80022fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2203      	movs	r2, #3
 8002302:	4013      	ands	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	220f      	movs	r2, #15
 8002308:	409a      	lsls	r2, r3
 800230a:	0013      	movs	r3, r2
 800230c:	43da      	mvns	r2, r3
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4013      	ands	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	23a0      	movs	r3, #160	; 0xa0
 8002318:	05db      	lsls	r3, r3, #23
 800231a:	429a      	cmp	r2, r3
 800231c:	d013      	beq.n	8002346 <HAL_GPIO_Init+0x1de>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a44      	ldr	r2, [pc, #272]	; (8002434 <HAL_GPIO_Init+0x2cc>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d00d      	beq.n	8002342 <HAL_GPIO_Init+0x1da>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a43      	ldr	r2, [pc, #268]	; (8002438 <HAL_GPIO_Init+0x2d0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d007      	beq.n	800233e <HAL_GPIO_Init+0x1d6>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a42      	ldr	r2, [pc, #264]	; (800243c <HAL_GPIO_Init+0x2d4>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d101      	bne.n	800233a <HAL_GPIO_Init+0x1d2>
 8002336:	2305      	movs	r3, #5
 8002338:	e006      	b.n	8002348 <HAL_GPIO_Init+0x1e0>
 800233a:	2306      	movs	r3, #6
 800233c:	e004      	b.n	8002348 <HAL_GPIO_Init+0x1e0>
 800233e:	2302      	movs	r3, #2
 8002340:	e002      	b.n	8002348 <HAL_GPIO_Init+0x1e0>
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <HAL_GPIO_Init+0x1e0>
 8002346:	2300      	movs	r3, #0
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	2103      	movs	r1, #3
 800234c:	400a      	ands	r2, r1
 800234e:	0092      	lsls	r2, r2, #2
 8002350:	4093      	lsls	r3, r2
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002358:	4935      	ldr	r1, [pc, #212]	; (8002430 <HAL_GPIO_Init+0x2c8>)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	089b      	lsrs	r3, r3, #2
 800235e:	3302      	adds	r3, #2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002366:	4b36      	ldr	r3, [pc, #216]	; (8002440 <HAL_GPIO_Init+0x2d8>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	43da      	mvns	r2, r3
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4013      	ands	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	035b      	lsls	r3, r3, #13
 800237e:	4013      	ands	r3, r2
 8002380:	d003      	beq.n	800238a <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4313      	orrs	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800238a:	4b2d      	ldr	r3, [pc, #180]	; (8002440 <HAL_GPIO_Init+0x2d8>)
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002390:	4b2b      	ldr	r3, [pc, #172]	; (8002440 <HAL_GPIO_Init+0x2d8>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	43da      	mvns	r2, r3
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4013      	ands	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	2380      	movs	r3, #128	; 0x80
 80023a6:	039b      	lsls	r3, r3, #14
 80023a8:	4013      	ands	r3, r2
 80023aa:	d003      	beq.n	80023b4 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80023b4:	4b22      	ldr	r3, [pc, #136]	; (8002440 <HAL_GPIO_Init+0x2d8>)
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80023ba:	4b21      	ldr	r3, [pc, #132]	; (8002440 <HAL_GPIO_Init+0x2d8>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	43da      	mvns	r2, r3
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4013      	ands	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	029b      	lsls	r3, r3, #10
 80023d2:	4013      	ands	r3, r2
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4313      	orrs	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80023de:	4b18      	ldr	r3, [pc, #96]	; (8002440 <HAL_GPIO_Init+0x2d8>)
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023e4:	4b16      	ldr	r3, [pc, #88]	; (8002440 <HAL_GPIO_Init+0x2d8>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	43da      	mvns	r2, r3
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	2380      	movs	r3, #128	; 0x80
 80023fa:	025b      	lsls	r3, r3, #9
 80023fc:	4013      	ands	r3, r2
 80023fe:	d003      	beq.n	8002408 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002408:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <HAL_GPIO_Init+0x2d8>)
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	3301      	adds	r3, #1
 8002412:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	40da      	lsrs	r2, r3
 800241c:	1e13      	subs	r3, r2, #0
 800241e:	d000      	beq.n	8002422 <HAL_GPIO_Init+0x2ba>
 8002420:	e6ae      	b.n	8002180 <HAL_GPIO_Init+0x18>
  }
}
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	46c0      	nop			; (mov r8, r8)
 8002426:	46bd      	mov	sp, r7
 8002428:	b006      	add	sp, #24
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40021000 	.word	0x40021000
 8002430:	40010000 	.word	0x40010000
 8002434:	50000400 	.word	0x50000400
 8002438:	50000800 	.word	0x50000800
 800243c:	50001c00 	.word	0x50001c00
 8002440:	40010400 	.word	0x40010400

08002444 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	0008      	movs	r0, r1
 800244e:	0011      	movs	r1, r2
 8002450:	1cbb      	adds	r3, r7, #2
 8002452:	1c02      	adds	r2, r0, #0
 8002454:	801a      	strh	r2, [r3, #0]
 8002456:	1c7b      	adds	r3, r7, #1
 8002458:	1c0a      	adds	r2, r1, #0
 800245a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800245c:	1c7b      	adds	r3, r7, #1
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d004      	beq.n	800246e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002464:	1cbb      	adds	r3, r7, #2
 8002466:	881a      	ldrh	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800246c:	e003      	b.n	8002476 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800246e:	1cbb      	adds	r3, r7, #2
 8002470:	881a      	ldrh	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	46bd      	mov	sp, r7
 800247a:	b002      	add	sp, #8
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e082      	b.n	8002598 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2241      	movs	r2, #65	; 0x41
 8002496:	5c9b      	ldrb	r3, [r3, r2]
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d107      	bne.n	80024ae <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2240      	movs	r2, #64	; 0x40
 80024a2:	2100      	movs	r1, #0
 80024a4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	0018      	movs	r0, r3
 80024aa:	f7ff f9bd 	bl	8001828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2241      	movs	r2, #65	; 0x41
 80024b2:	2124      	movs	r1, #36	; 0x24
 80024b4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2101      	movs	r1, #1
 80024c2:	438a      	bics	r2, r1
 80024c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4934      	ldr	r1, [pc, #208]	; (80025a0 <HAL_I2C_Init+0x120>)
 80024d0:	400a      	ands	r2, r1
 80024d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4931      	ldr	r1, [pc, #196]	; (80025a4 <HAL_I2C_Init+0x124>)
 80024e0:	400a      	ands	r2, r1
 80024e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d108      	bne.n	80024fe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2180      	movs	r1, #128	; 0x80
 80024f6:	0209      	lsls	r1, r1, #8
 80024f8:	430a      	orrs	r2, r1
 80024fa:	609a      	str	r2, [r3, #8]
 80024fc:	e007      	b.n	800250e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2184      	movs	r1, #132	; 0x84
 8002508:	0209      	lsls	r1, r1, #8
 800250a:	430a      	orrs	r2, r1
 800250c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d104      	bne.n	8002520 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2280      	movs	r2, #128	; 0x80
 800251c:	0112      	lsls	r2, r2, #4
 800251e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	491f      	ldr	r1, [pc, #124]	; (80025a8 <HAL_I2C_Init+0x128>)
 800252c:	430a      	orrs	r2, r1
 800252e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68da      	ldr	r2, [r3, #12]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	491a      	ldr	r1, [pc, #104]	; (80025a4 <HAL_I2C_Init+0x124>)
 800253c:	400a      	ands	r2, r1
 800253e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	431a      	orrs	r2, r3
 800254a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69d9      	ldr	r1, [r3, #28]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a1a      	ldr	r2, [r3, #32]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2101      	movs	r1, #1
 8002576:	430a      	orrs	r2, r1
 8002578:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2241      	movs	r2, #65	; 0x41
 8002584:	2120      	movs	r1, #32
 8002586:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2242      	movs	r2, #66	; 0x42
 8002592:	2100      	movs	r1, #0
 8002594:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	0018      	movs	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	b002      	add	sp, #8
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	f0ffffff 	.word	0xf0ffffff
 80025a4:	ffff7fff 	.word	0xffff7fff
 80025a8:	02008000 	.word	0x02008000

080025ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2241      	movs	r2, #65	; 0x41
 80025ba:	5c9b      	ldrb	r3, [r3, r2]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b20      	cmp	r3, #32
 80025c0:	d138      	bne.n	8002634 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2240      	movs	r2, #64	; 0x40
 80025c6:	5c9b      	ldrb	r3, [r3, r2]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025cc:	2302      	movs	r3, #2
 80025ce:	e032      	b.n	8002636 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2240      	movs	r2, #64	; 0x40
 80025d4:	2101      	movs	r1, #1
 80025d6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2241      	movs	r2, #65	; 0x41
 80025dc:	2124      	movs	r1, #36	; 0x24
 80025de:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2101      	movs	r1, #1
 80025ec:	438a      	bics	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4911      	ldr	r1, [pc, #68]	; (8002640 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80025fc:	400a      	ands	r2, r1
 80025fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6819      	ldr	r1, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2101      	movs	r1, #1
 800261c:	430a      	orrs	r2, r1
 800261e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2241      	movs	r2, #65	; 0x41
 8002624:	2120      	movs	r1, #32
 8002626:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2240      	movs	r2, #64	; 0x40
 800262c:	2100      	movs	r1, #0
 800262e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	e000      	b.n	8002636 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002634:	2302      	movs	r3, #2
  }
}
 8002636:	0018      	movs	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	b002      	add	sp, #8
 800263c:	bd80      	pop	{r7, pc}
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	ffffefff 	.word	0xffffefff

08002644 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2241      	movs	r2, #65	; 0x41
 8002652:	5c9b      	ldrb	r3, [r3, r2]
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b20      	cmp	r3, #32
 8002658:	d139      	bne.n	80026ce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2240      	movs	r2, #64	; 0x40
 800265e:	5c9b      	ldrb	r3, [r3, r2]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002664:	2302      	movs	r3, #2
 8002666:	e033      	b.n	80026d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2240      	movs	r2, #64	; 0x40
 800266c:	2101      	movs	r1, #1
 800266e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2241      	movs	r2, #65	; 0x41
 8002674:	2124      	movs	r1, #36	; 0x24
 8002676:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2101      	movs	r1, #1
 8002684:	438a      	bics	r2, r1
 8002686:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4a11      	ldr	r2, [pc, #68]	; (80026d8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002694:	4013      	ands	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	021b      	lsls	r3, r3, #8
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	4313      	orrs	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2101      	movs	r1, #1
 80026b6:	430a      	orrs	r2, r1
 80026b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2241      	movs	r2, #65	; 0x41
 80026be:	2120      	movs	r1, #32
 80026c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2240      	movs	r2, #64	; 0x40
 80026c6:	2100      	movs	r1, #0
 80026c8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	e000      	b.n	80026d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026ce:	2302      	movs	r3, #2
  }
}
 80026d0:	0018      	movs	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b004      	add	sp, #16
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	fffff0ff 	.word	0xfffff0ff

080026dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026dc:	b5b0      	push	{r4, r5, r7, lr}
 80026de:	b08a      	sub	sp, #40	; 0x28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d102      	bne.n	80026f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	f000 fb6c 	bl	8002dc8 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026f0:	4bc8      	ldr	r3, [pc, #800]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	220c      	movs	r2, #12
 80026f6:	4013      	ands	r3, r2
 80026f8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026fa:	4bc6      	ldr	r3, [pc, #792]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	025b      	lsls	r3, r3, #9
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2201      	movs	r2, #1
 800270c:	4013      	ands	r3, r2
 800270e:	d100      	bne.n	8002712 <HAL_RCC_OscConfig+0x36>
 8002710:	e07d      	b.n	800280e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	2b08      	cmp	r3, #8
 8002716:	d007      	beq.n	8002728 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	2b0c      	cmp	r3, #12
 800271c:	d112      	bne.n	8002744 <HAL_RCC_OscConfig+0x68>
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	2380      	movs	r3, #128	; 0x80
 8002722:	025b      	lsls	r3, r3, #9
 8002724:	429a      	cmp	r2, r3
 8002726:	d10d      	bne.n	8002744 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002728:	4bba      	ldr	r3, [pc, #744]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	2380      	movs	r3, #128	; 0x80
 800272e:	029b      	lsls	r3, r3, #10
 8002730:	4013      	ands	r3, r2
 8002732:	d100      	bne.n	8002736 <HAL_RCC_OscConfig+0x5a>
 8002734:	e06a      	b.n	800280c <HAL_RCC_OscConfig+0x130>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d166      	bne.n	800280c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	f000 fb42 	bl	8002dc8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	2380      	movs	r3, #128	; 0x80
 800274a:	025b      	lsls	r3, r3, #9
 800274c:	429a      	cmp	r2, r3
 800274e:	d107      	bne.n	8002760 <HAL_RCC_OscConfig+0x84>
 8002750:	4bb0      	ldr	r3, [pc, #704]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4baf      	ldr	r3, [pc, #700]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002756:	2180      	movs	r1, #128	; 0x80
 8002758:	0249      	lsls	r1, r1, #9
 800275a:	430a      	orrs	r2, r1
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	e027      	b.n	80027b0 <HAL_RCC_OscConfig+0xd4>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	23a0      	movs	r3, #160	; 0xa0
 8002766:	02db      	lsls	r3, r3, #11
 8002768:	429a      	cmp	r2, r3
 800276a:	d10e      	bne.n	800278a <HAL_RCC_OscConfig+0xae>
 800276c:	4ba9      	ldr	r3, [pc, #676]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4ba8      	ldr	r3, [pc, #672]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002772:	2180      	movs	r1, #128	; 0x80
 8002774:	02c9      	lsls	r1, r1, #11
 8002776:	430a      	orrs	r2, r1
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	4ba6      	ldr	r3, [pc, #664]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	4ba5      	ldr	r3, [pc, #660]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002780:	2180      	movs	r1, #128	; 0x80
 8002782:	0249      	lsls	r1, r1, #9
 8002784:	430a      	orrs	r2, r1
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	e012      	b.n	80027b0 <HAL_RCC_OscConfig+0xd4>
 800278a:	4ba2      	ldr	r3, [pc, #648]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	4ba1      	ldr	r3, [pc, #644]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002790:	49a1      	ldr	r1, [pc, #644]	; (8002a18 <HAL_RCC_OscConfig+0x33c>)
 8002792:	400a      	ands	r2, r1
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	4b9f      	ldr	r3, [pc, #636]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	2380      	movs	r3, #128	; 0x80
 800279c:	025b      	lsls	r3, r3, #9
 800279e:	4013      	ands	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4b9b      	ldr	r3, [pc, #620]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4b9a      	ldr	r3, [pc, #616]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 80027aa:	499c      	ldr	r1, [pc, #624]	; (8002a1c <HAL_RCC_OscConfig+0x340>)
 80027ac:	400a      	ands	r2, r1
 80027ae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d014      	beq.n	80027e2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7ff fa18 	bl	8001bec <HAL_GetTick>
 80027bc:	0003      	movs	r3, r0
 80027be:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027c2:	f7ff fa13 	bl	8001bec <HAL_GetTick>
 80027c6:	0002      	movs	r2, r0
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b64      	cmp	r3, #100	; 0x64
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e2f9      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027d4:	4b8f      	ldr	r3, [pc, #572]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	2380      	movs	r3, #128	; 0x80
 80027da:	029b      	lsls	r3, r3, #10
 80027dc:	4013      	ands	r3, r2
 80027de:	d0f0      	beq.n	80027c2 <HAL_RCC_OscConfig+0xe6>
 80027e0:	e015      	b.n	800280e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e2:	f7ff fa03 	bl	8001bec <HAL_GetTick>
 80027e6:	0003      	movs	r3, r0
 80027e8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ec:	f7ff f9fe 	bl	8001bec <HAL_GetTick>
 80027f0:	0002      	movs	r2, r0
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b64      	cmp	r3, #100	; 0x64
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e2e4      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027fe:	4b85      	ldr	r3, [pc, #532]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	2380      	movs	r3, #128	; 0x80
 8002804:	029b      	lsls	r3, r3, #10
 8002806:	4013      	ands	r3, r2
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x110>
 800280a:	e000      	b.n	800280e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2202      	movs	r2, #2
 8002814:	4013      	ands	r3, r2
 8002816:	d100      	bne.n	800281a <HAL_RCC_OscConfig+0x13e>
 8002818:	e099      	b.n	800294e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	2220      	movs	r2, #32
 8002824:	4013      	ands	r3, r2
 8002826:	d009      	beq.n	800283c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002828:	4b7a      	ldr	r3, [pc, #488]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	4b79      	ldr	r3, [pc, #484]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 800282e:	2120      	movs	r1, #32
 8002830:	430a      	orrs	r2, r1
 8002832:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	2220      	movs	r2, #32
 8002838:	4393      	bics	r3, r2
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	2b04      	cmp	r3, #4
 8002840:	d005      	beq.n	800284e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	2b0c      	cmp	r3, #12
 8002846:	d13e      	bne.n	80028c6 <HAL_RCC_OscConfig+0x1ea>
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d13b      	bne.n	80028c6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800284e:	4b71      	ldr	r3, [pc, #452]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2204      	movs	r2, #4
 8002854:	4013      	ands	r3, r2
 8002856:	d004      	beq.n	8002862 <HAL_RCC_OscConfig+0x186>
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e2b2      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002862:	4b6c      	ldr	r3, [pc, #432]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	4a6e      	ldr	r2, [pc, #440]	; (8002a20 <HAL_RCC_OscConfig+0x344>)
 8002868:	4013      	ands	r3, r2
 800286a:	0019      	movs	r1, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	021a      	lsls	r2, r3, #8
 8002872:	4b68      	ldr	r3, [pc, #416]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002874:	430a      	orrs	r2, r1
 8002876:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002878:	4b66      	ldr	r3, [pc, #408]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2209      	movs	r2, #9
 800287e:	4393      	bics	r3, r2
 8002880:	0019      	movs	r1, r3
 8002882:	4b64      	ldr	r3, [pc, #400]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002886:	430a      	orrs	r2, r1
 8002888:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800288a:	f000 fbeb 	bl	8003064 <HAL_RCC_GetSysClockFreq>
 800288e:	0001      	movs	r1, r0
 8002890:	4b60      	ldr	r3, [pc, #384]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	091b      	lsrs	r3, r3, #4
 8002896:	220f      	movs	r2, #15
 8002898:	4013      	ands	r3, r2
 800289a:	4a62      	ldr	r2, [pc, #392]	; (8002a24 <HAL_RCC_OscConfig+0x348>)
 800289c:	5cd3      	ldrb	r3, [r2, r3]
 800289e:	000a      	movs	r2, r1
 80028a0:	40da      	lsrs	r2, r3
 80028a2:	4b61      	ldr	r3, [pc, #388]	; (8002a28 <HAL_RCC_OscConfig+0x34c>)
 80028a4:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80028a6:	4b61      	ldr	r3, [pc, #388]	; (8002a2c <HAL_RCC_OscConfig+0x350>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2513      	movs	r5, #19
 80028ac:	197c      	adds	r4, r7, r5
 80028ae:	0018      	movs	r0, r3
 80028b0:	f7ff f956 	bl	8001b60 <HAL_InitTick>
 80028b4:	0003      	movs	r3, r0
 80028b6:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80028b8:	197b      	adds	r3, r7, r5
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d046      	beq.n	800294e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80028c0:	197b      	adds	r3, r7, r5
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	e280      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d027      	beq.n	800291c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80028cc:	4b51      	ldr	r3, [pc, #324]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2209      	movs	r2, #9
 80028d2:	4393      	bics	r3, r2
 80028d4:	0019      	movs	r1, r3
 80028d6:	4b4f      	ldr	r3, [pc, #316]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 80028d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028da:	430a      	orrs	r2, r1
 80028dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028de:	f7ff f985 	bl	8001bec <HAL_GetTick>
 80028e2:	0003      	movs	r3, r0
 80028e4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e8:	f7ff f980 	bl	8001bec <HAL_GetTick>
 80028ec:	0002      	movs	r2, r0
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e266      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028fa:	4b46      	ldr	r3, [pc, #280]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2204      	movs	r2, #4
 8002900:	4013      	ands	r3, r2
 8002902:	d0f1      	beq.n	80028e8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002904:	4b43      	ldr	r3, [pc, #268]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	4a45      	ldr	r2, [pc, #276]	; (8002a20 <HAL_RCC_OscConfig+0x344>)
 800290a:	4013      	ands	r3, r2
 800290c:	0019      	movs	r1, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	021a      	lsls	r2, r3, #8
 8002914:	4b3f      	ldr	r3, [pc, #252]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002916:	430a      	orrs	r2, r1
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	e018      	b.n	800294e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800291c:	4b3d      	ldr	r3, [pc, #244]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4b3c      	ldr	r3, [pc, #240]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002922:	2101      	movs	r1, #1
 8002924:	438a      	bics	r2, r1
 8002926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002928:	f7ff f960 	bl	8001bec <HAL_GetTick>
 800292c:	0003      	movs	r3, r0
 800292e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002932:	f7ff f95b 	bl	8001bec <HAL_GetTick>
 8002936:	0002      	movs	r2, r0
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e241      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002944:	4b33      	ldr	r3, [pc, #204]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2204      	movs	r2, #4
 800294a:	4013      	ands	r3, r2
 800294c:	d1f1      	bne.n	8002932 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2210      	movs	r2, #16
 8002954:	4013      	ands	r3, r2
 8002956:	d100      	bne.n	800295a <HAL_RCC_OscConfig+0x27e>
 8002958:	e0a1      	b.n	8002a9e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d140      	bne.n	80029e2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002960:	4b2c      	ldr	r3, [pc, #176]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	2380      	movs	r3, #128	; 0x80
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4013      	ands	r3, r2
 800296a:	d005      	beq.n	8002978 <HAL_RCC_OscConfig+0x29c>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e227      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002978:	4b26      	ldr	r3, [pc, #152]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	4a2c      	ldr	r2, [pc, #176]	; (8002a30 <HAL_RCC_OscConfig+0x354>)
 800297e:	4013      	ands	r3, r2
 8002980:	0019      	movs	r1, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1a      	ldr	r2, [r3, #32]
 8002986:	4b23      	ldr	r3, [pc, #140]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002988:	430a      	orrs	r2, r1
 800298a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800298c:	4b21      	ldr	r3, [pc, #132]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	021b      	lsls	r3, r3, #8
 8002992:	0a19      	lsrs	r1, r3, #8
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	061a      	lsls	r2, r3, #24
 800299a:	4b1e      	ldr	r3, [pc, #120]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 800299c:	430a      	orrs	r2, r1
 800299e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	0b5b      	lsrs	r3, r3, #13
 80029a6:	3301      	adds	r3, #1
 80029a8:	2280      	movs	r2, #128	; 0x80
 80029aa:	0212      	lsls	r2, r2, #8
 80029ac:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80029ae:	4b19      	ldr	r3, [pc, #100]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	091b      	lsrs	r3, r3, #4
 80029b4:	210f      	movs	r1, #15
 80029b6:	400b      	ands	r3, r1
 80029b8:	491a      	ldr	r1, [pc, #104]	; (8002a24 <HAL_RCC_OscConfig+0x348>)
 80029ba:	5ccb      	ldrb	r3, [r1, r3]
 80029bc:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80029be:	4b1a      	ldr	r3, [pc, #104]	; (8002a28 <HAL_RCC_OscConfig+0x34c>)
 80029c0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80029c2:	4b1a      	ldr	r3, [pc, #104]	; (8002a2c <HAL_RCC_OscConfig+0x350>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2513      	movs	r5, #19
 80029c8:	197c      	adds	r4, r7, r5
 80029ca:	0018      	movs	r0, r3
 80029cc:	f7ff f8c8 	bl	8001b60 <HAL_InitTick>
 80029d0:	0003      	movs	r3, r0
 80029d2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80029d4:	197b      	adds	r3, r7, r5
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d060      	beq.n	8002a9e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80029dc:	197b      	adds	r3, r7, r5
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	e1f2      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d03f      	beq.n	8002a6a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029ea:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 80029f0:	2180      	movs	r1, #128	; 0x80
 80029f2:	0049      	lsls	r1, r1, #1
 80029f4:	430a      	orrs	r2, r1
 80029f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f8:	f7ff f8f8 	bl	8001bec <HAL_GetTick>
 80029fc:	0003      	movs	r3, r0
 80029fe:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a00:	e018      	b.n	8002a34 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a02:	f7ff f8f3 	bl	8001bec <HAL_GetTick>
 8002a06:	0002      	movs	r2, r0
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d911      	bls.n	8002a34 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e1d9      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
 8002a14:	40021000 	.word	0x40021000
 8002a18:	fffeffff 	.word	0xfffeffff
 8002a1c:	fffbffff 	.word	0xfffbffff
 8002a20:	ffffe0ff 	.word	0xffffe0ff
 8002a24:	080053a4 	.word	0x080053a4
 8002a28:	20000000 	.word	0x20000000
 8002a2c:	20000004 	.word	0x20000004
 8002a30:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a34:	4bc9      	ldr	r3, [pc, #804]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	2380      	movs	r3, #128	; 0x80
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d0e0      	beq.n	8002a02 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a40:	4bc6      	ldr	r3, [pc, #792]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	4ac6      	ldr	r2, [pc, #792]	; (8002d60 <HAL_RCC_OscConfig+0x684>)
 8002a46:	4013      	ands	r3, r2
 8002a48:	0019      	movs	r1, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a1a      	ldr	r2, [r3, #32]
 8002a4e:	4bc3      	ldr	r3, [pc, #780]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002a50:	430a      	orrs	r2, r1
 8002a52:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a54:	4bc1      	ldr	r3, [pc, #772]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	021b      	lsls	r3, r3, #8
 8002a5a:	0a19      	lsrs	r1, r3, #8
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	061a      	lsls	r2, r3, #24
 8002a62:	4bbe      	ldr	r3, [pc, #760]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002a64:	430a      	orrs	r2, r1
 8002a66:	605a      	str	r2, [r3, #4]
 8002a68:	e019      	b.n	8002a9e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a6a:	4bbc      	ldr	r3, [pc, #752]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	4bbb      	ldr	r3, [pc, #748]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002a70:	49bc      	ldr	r1, [pc, #752]	; (8002d64 <HAL_RCC_OscConfig+0x688>)
 8002a72:	400a      	ands	r2, r1
 8002a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a76:	f7ff f8b9 	bl	8001bec <HAL_GetTick>
 8002a7a:	0003      	movs	r3, r0
 8002a7c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a80:	f7ff f8b4 	bl	8001bec <HAL_GetTick>
 8002a84:	0002      	movs	r2, r0
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e19a      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002a92:	4bb2      	ldr	r3, [pc, #712]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	2380      	movs	r3, #128	; 0x80
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2208      	movs	r2, #8
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d036      	beq.n	8002b16 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d019      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ab0:	4baa      	ldr	r3, [pc, #680]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002ab2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ab4:	4ba9      	ldr	r3, [pc, #676]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abc:	f7ff f896 	bl	8001bec <HAL_GetTick>
 8002ac0:	0003      	movs	r3, r0
 8002ac2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac6:	f7ff f891 	bl	8001bec <HAL_GetTick>
 8002aca:	0002      	movs	r2, r0
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e177      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ad8:	4ba0      	ldr	r3, [pc, #640]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002adc:	2202      	movs	r2, #2
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d0f1      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x3ea>
 8002ae2:	e018      	b.n	8002b16 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ae4:	4b9d      	ldr	r3, [pc, #628]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002ae6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ae8:	4b9c      	ldr	r3, [pc, #624]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002aea:	2101      	movs	r1, #1
 8002aec:	438a      	bics	r2, r1
 8002aee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af0:	f7ff f87c 	bl	8001bec <HAL_GetTick>
 8002af4:	0003      	movs	r3, r0
 8002af6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002afa:	f7ff f877 	bl	8001bec <HAL_GetTick>
 8002afe:	0002      	movs	r2, r0
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e15d      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b0c:	4b93      	ldr	r3, [pc, #588]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b10:	2202      	movs	r2, #2
 8002b12:	4013      	ands	r3, r2
 8002b14:	d1f1      	bne.n	8002afa <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2204      	movs	r2, #4
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d100      	bne.n	8002b22 <HAL_RCC_OscConfig+0x446>
 8002b20:	e0ae      	b.n	8002c80 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b22:	2023      	movs	r0, #35	; 0x23
 8002b24:	183b      	adds	r3, r7, r0
 8002b26:	2200      	movs	r2, #0
 8002b28:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b2a:	4b8c      	ldr	r3, [pc, #560]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b2e:	2380      	movs	r3, #128	; 0x80
 8002b30:	055b      	lsls	r3, r3, #21
 8002b32:	4013      	ands	r3, r2
 8002b34:	d109      	bne.n	8002b4a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b36:	4b89      	ldr	r3, [pc, #548]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002b38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b3a:	4b88      	ldr	r3, [pc, #544]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002b3c:	2180      	movs	r1, #128	; 0x80
 8002b3e:	0549      	lsls	r1, r1, #21
 8002b40:	430a      	orrs	r2, r1
 8002b42:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002b44:	183b      	adds	r3, r7, r0
 8002b46:	2201      	movs	r2, #1
 8002b48:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4a:	4b87      	ldr	r3, [pc, #540]	; (8002d68 <HAL_RCC_OscConfig+0x68c>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	2380      	movs	r3, #128	; 0x80
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	4013      	ands	r3, r2
 8002b54:	d11a      	bne.n	8002b8c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b56:	4b84      	ldr	r3, [pc, #528]	; (8002d68 <HAL_RCC_OscConfig+0x68c>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	4b83      	ldr	r3, [pc, #524]	; (8002d68 <HAL_RCC_OscConfig+0x68c>)
 8002b5c:	2180      	movs	r1, #128	; 0x80
 8002b5e:	0049      	lsls	r1, r1, #1
 8002b60:	430a      	orrs	r2, r1
 8002b62:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b64:	f7ff f842 	bl	8001bec <HAL_GetTick>
 8002b68:	0003      	movs	r3, r0
 8002b6a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b6e:	f7ff f83d 	bl	8001bec <HAL_GetTick>
 8002b72:	0002      	movs	r2, r0
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b64      	cmp	r3, #100	; 0x64
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e123      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b80:	4b79      	ldr	r3, [pc, #484]	; (8002d68 <HAL_RCC_OscConfig+0x68c>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	2380      	movs	r3, #128	; 0x80
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d0f0      	beq.n	8002b6e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d107      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x4cc>
 8002b98:	4b70      	ldr	r3, [pc, #448]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002b9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b9c:	4b6f      	ldr	r3, [pc, #444]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002b9e:	2180      	movs	r1, #128	; 0x80
 8002ba0:	0049      	lsls	r1, r1, #1
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	651a      	str	r2, [r3, #80]	; 0x50
 8002ba6:	e031      	b.n	8002c0c <HAL_RCC_OscConfig+0x530>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10c      	bne.n	8002bca <HAL_RCC_OscConfig+0x4ee>
 8002bb0:	4b6a      	ldr	r3, [pc, #424]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002bb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bb4:	4b69      	ldr	r3, [pc, #420]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002bb6:	496b      	ldr	r1, [pc, #428]	; (8002d64 <HAL_RCC_OscConfig+0x688>)
 8002bb8:	400a      	ands	r2, r1
 8002bba:	651a      	str	r2, [r3, #80]	; 0x50
 8002bbc:	4b67      	ldr	r3, [pc, #412]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002bbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bc0:	4b66      	ldr	r3, [pc, #408]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002bc2:	496a      	ldr	r1, [pc, #424]	; (8002d6c <HAL_RCC_OscConfig+0x690>)
 8002bc4:	400a      	ands	r2, r1
 8002bc6:	651a      	str	r2, [r3, #80]	; 0x50
 8002bc8:	e020      	b.n	8002c0c <HAL_RCC_OscConfig+0x530>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	23a0      	movs	r3, #160	; 0xa0
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d10e      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x518>
 8002bd6:	4b61      	ldr	r3, [pc, #388]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002bd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bda:	4b60      	ldr	r3, [pc, #384]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002bdc:	2180      	movs	r1, #128	; 0x80
 8002bde:	00c9      	lsls	r1, r1, #3
 8002be0:	430a      	orrs	r2, r1
 8002be2:	651a      	str	r2, [r3, #80]	; 0x50
 8002be4:	4b5d      	ldr	r3, [pc, #372]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002be6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002be8:	4b5c      	ldr	r3, [pc, #368]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002bea:	2180      	movs	r1, #128	; 0x80
 8002bec:	0049      	lsls	r1, r1, #1
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	651a      	str	r2, [r3, #80]	; 0x50
 8002bf2:	e00b      	b.n	8002c0c <HAL_RCC_OscConfig+0x530>
 8002bf4:	4b59      	ldr	r3, [pc, #356]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002bf6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bf8:	4b58      	ldr	r3, [pc, #352]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002bfa:	495a      	ldr	r1, [pc, #360]	; (8002d64 <HAL_RCC_OscConfig+0x688>)
 8002bfc:	400a      	ands	r2, r1
 8002bfe:	651a      	str	r2, [r3, #80]	; 0x50
 8002c00:	4b56      	ldr	r3, [pc, #344]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002c02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c04:	4b55      	ldr	r3, [pc, #340]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002c06:	4959      	ldr	r1, [pc, #356]	; (8002d6c <HAL_RCC_OscConfig+0x690>)
 8002c08:	400a      	ands	r2, r1
 8002c0a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d015      	beq.n	8002c40 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c14:	f7fe ffea 	bl	8001bec <HAL_GetTick>
 8002c18:	0003      	movs	r3, r0
 8002c1a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c1c:	e009      	b.n	8002c32 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c1e:	f7fe ffe5 	bl	8001bec <HAL_GetTick>
 8002c22:	0002      	movs	r2, r0
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	4a51      	ldr	r2, [pc, #324]	; (8002d70 <HAL_RCC_OscConfig+0x694>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e0ca      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c32:	4b4a      	ldr	r3, [pc, #296]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002c34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c36:	2380      	movs	r3, #128	; 0x80
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	d0ef      	beq.n	8002c1e <HAL_RCC_OscConfig+0x542>
 8002c3e:	e014      	b.n	8002c6a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c40:	f7fe ffd4 	bl	8001bec <HAL_GetTick>
 8002c44:	0003      	movs	r3, r0
 8002c46:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c48:	e009      	b.n	8002c5e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c4a:	f7fe ffcf 	bl	8001bec <HAL_GetTick>
 8002c4e:	0002      	movs	r2, r0
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	4a46      	ldr	r2, [pc, #280]	; (8002d70 <HAL_RCC_OscConfig+0x694>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e0b4      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c5e:	4b3f      	ldr	r3, [pc, #252]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002c60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c62:	2380      	movs	r3, #128	; 0x80
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4013      	ands	r3, r2
 8002c68:	d1ef      	bne.n	8002c4a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c6a:	2323      	movs	r3, #35	; 0x23
 8002c6c:	18fb      	adds	r3, r7, r3
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d105      	bne.n	8002c80 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c74:	4b39      	ldr	r3, [pc, #228]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002c76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c78:	4b38      	ldr	r3, [pc, #224]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002c7a:	493e      	ldr	r1, [pc, #248]	; (8002d74 <HAL_RCC_OscConfig+0x698>)
 8002c7c:	400a      	ands	r2, r1
 8002c7e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d100      	bne.n	8002c8a <HAL_RCC_OscConfig+0x5ae>
 8002c88:	e09d      	b.n	8002dc6 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	2b0c      	cmp	r3, #12
 8002c8e:	d100      	bne.n	8002c92 <HAL_RCC_OscConfig+0x5b6>
 8002c90:	e076      	b.n	8002d80 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d145      	bne.n	8002d26 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9a:	4b30      	ldr	r3, [pc, #192]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	4b2f      	ldr	r3, [pc, #188]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002ca0:	4935      	ldr	r1, [pc, #212]	; (8002d78 <HAL_RCC_OscConfig+0x69c>)
 8002ca2:	400a      	ands	r2, r1
 8002ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca6:	f7fe ffa1 	bl	8001bec <HAL_GetTick>
 8002caa:	0003      	movs	r3, r0
 8002cac:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb0:	f7fe ff9c 	bl	8001bec <HAL_GetTick>
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e082      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002cc2:	4b26      	ldr	r3, [pc, #152]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	2380      	movs	r3, #128	; 0x80
 8002cc8:	049b      	lsls	r3, r3, #18
 8002cca:	4013      	ands	r3, r2
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cce:	4b23      	ldr	r3, [pc, #140]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	4a2a      	ldr	r2, [pc, #168]	; (8002d7c <HAL_RCC_OscConfig+0x6a0>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	0019      	movs	r1, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	4b1c      	ldr	r3, [pc, #112]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002cea:	430a      	orrs	r2, r1
 8002cec:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cee:	4b1b      	ldr	r3, [pc, #108]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	4b1a      	ldr	r3, [pc, #104]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002cf4:	2180      	movs	r1, #128	; 0x80
 8002cf6:	0449      	lsls	r1, r1, #17
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfc:	f7fe ff76 	bl	8001bec <HAL_GetTick>
 8002d00:	0003      	movs	r3, r0
 8002d02:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d06:	f7fe ff71 	bl	8001bec <HAL_GetTick>
 8002d0a:	0002      	movs	r2, r0
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e057      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002d18:	4b10      	ldr	r3, [pc, #64]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	2380      	movs	r3, #128	; 0x80
 8002d1e:	049b      	lsls	r3, r3, #18
 8002d20:	4013      	ands	r3, r2
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x62a>
 8002d24:	e04f      	b.n	8002dc6 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d26:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002d2c:	4912      	ldr	r1, [pc, #72]	; (8002d78 <HAL_RCC_OscConfig+0x69c>)
 8002d2e:	400a      	ands	r2, r1
 8002d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d32:	f7fe ff5b 	bl	8001bec <HAL_GetTick>
 8002d36:	0003      	movs	r3, r0
 8002d38:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d3c:	f7fe ff56 	bl	8001bec <HAL_GetTick>
 8002d40:	0002      	movs	r2, r0
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e03c      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d4e:	4b03      	ldr	r3, [pc, #12]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	2380      	movs	r3, #128	; 0x80
 8002d54:	049b      	lsls	r3, r3, #18
 8002d56:	4013      	ands	r3, r2
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCC_OscConfig+0x660>
 8002d5a:	e034      	b.n	8002dc6 <HAL_RCC_OscConfig+0x6ea>
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	ffff1fff 	.word	0xffff1fff
 8002d64:	fffffeff 	.word	0xfffffeff
 8002d68:	40007000 	.word	0x40007000
 8002d6c:	fffffbff 	.word	0xfffffbff
 8002d70:	00001388 	.word	0x00001388
 8002d74:	efffffff 	.word	0xefffffff
 8002d78:	feffffff 	.word	0xfeffffff
 8002d7c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d101      	bne.n	8002d8c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e01d      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d8c:	4b10      	ldr	r3, [pc, #64]	; (8002dd0 <HAL_RCC_OscConfig+0x6f4>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	2380      	movs	r3, #128	; 0x80
 8002d96:	025b      	lsls	r3, r3, #9
 8002d98:	401a      	ands	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d10f      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	23f0      	movs	r3, #240	; 0xf0
 8002da6:	039b      	lsls	r3, r3, #14
 8002da8:	401a      	ands	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d107      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	23c0      	movs	r3, #192	; 0xc0
 8002db6:	041b      	lsls	r3, r3, #16
 8002db8:	401a      	ands	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d001      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	0018      	movs	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	b00a      	add	sp, #40	; 0x28
 8002dce:	bdb0      	pop	{r4, r5, r7, pc}
 8002dd0:	40021000 	.word	0x40021000

08002dd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd4:	b5b0      	push	{r4, r5, r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e128      	b.n	800303a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002de8:	4b96      	ldr	r3, [pc, #600]	; (8003044 <HAL_RCC_ClockConfig+0x270>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2201      	movs	r2, #1
 8002dee:	4013      	ands	r3, r2
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d91e      	bls.n	8002e34 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df6:	4b93      	ldr	r3, [pc, #588]	; (8003044 <HAL_RCC_ClockConfig+0x270>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	4393      	bics	r3, r2
 8002dfe:	0019      	movs	r1, r3
 8002e00:	4b90      	ldr	r3, [pc, #576]	; (8003044 <HAL_RCC_ClockConfig+0x270>)
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e08:	f7fe fef0 	bl	8001bec <HAL_GetTick>
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e10:	e009      	b.n	8002e26 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e12:	f7fe feeb 	bl	8001bec <HAL_GetTick>
 8002e16:	0002      	movs	r2, r0
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	4a8a      	ldr	r2, [pc, #552]	; (8003048 <HAL_RCC_ClockConfig+0x274>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e109      	b.n	800303a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e26:	4b87      	ldr	r3, [pc, #540]	; (8003044 <HAL_RCC_ClockConfig+0x270>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d1ee      	bne.n	8002e12 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2202      	movs	r2, #2
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d009      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e3e:	4b83      	ldr	r3, [pc, #524]	; (800304c <HAL_RCC_ClockConfig+0x278>)
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	22f0      	movs	r2, #240	; 0xf0
 8002e44:	4393      	bics	r3, r2
 8002e46:	0019      	movs	r1, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	4b7f      	ldr	r3, [pc, #508]	; (800304c <HAL_RCC_ClockConfig+0x278>)
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2201      	movs	r2, #1
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d100      	bne.n	8002e5e <HAL_RCC_ClockConfig+0x8a>
 8002e5c:	e089      	b.n	8002f72 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d107      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e66:	4b79      	ldr	r3, [pc, #484]	; (800304c <HAL_RCC_ClockConfig+0x278>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	2380      	movs	r3, #128	; 0x80
 8002e6c:	029b      	lsls	r3, r3, #10
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d120      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e0e1      	b.n	800303a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	d107      	bne.n	8002e8e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e7e:	4b73      	ldr	r3, [pc, #460]	; (800304c <HAL_RCC_ClockConfig+0x278>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	2380      	movs	r3, #128	; 0x80
 8002e84:	049b      	lsls	r3, r3, #18
 8002e86:	4013      	ands	r3, r2
 8002e88:	d114      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e0d5      	b.n	800303a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d106      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e96:	4b6d      	ldr	r3, [pc, #436]	; (800304c <HAL_RCC_ClockConfig+0x278>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2204      	movs	r2, #4
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d109      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0ca      	b.n	800303a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ea4:	4b69      	ldr	r3, [pc, #420]	; (800304c <HAL_RCC_ClockConfig+0x278>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	2380      	movs	r3, #128	; 0x80
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4013      	ands	r3, r2
 8002eae:	d101      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e0c2      	b.n	800303a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eb4:	4b65      	ldr	r3, [pc, #404]	; (800304c <HAL_RCC_ClockConfig+0x278>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	2203      	movs	r2, #3
 8002eba:	4393      	bics	r3, r2
 8002ebc:	0019      	movs	r1, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	4b62      	ldr	r3, [pc, #392]	; (800304c <HAL_RCC_ClockConfig+0x278>)
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ec8:	f7fe fe90 	bl	8001bec <HAL_GetTick>
 8002ecc:	0003      	movs	r3, r0
 8002ece:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d111      	bne.n	8002efc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ed8:	e009      	b.n	8002eee <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eda:	f7fe fe87 	bl	8001bec <HAL_GetTick>
 8002ede:	0002      	movs	r2, r0
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	4a58      	ldr	r2, [pc, #352]	; (8003048 <HAL_RCC_ClockConfig+0x274>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e0a5      	b.n	800303a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002eee:	4b57      	ldr	r3, [pc, #348]	; (800304c <HAL_RCC_ClockConfig+0x278>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	220c      	movs	r2, #12
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2b08      	cmp	r3, #8
 8002ef8:	d1ef      	bne.n	8002eda <HAL_RCC_ClockConfig+0x106>
 8002efa:	e03a      	b.n	8002f72 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b03      	cmp	r3, #3
 8002f02:	d111      	bne.n	8002f28 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f04:	e009      	b.n	8002f1a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f06:	f7fe fe71 	bl	8001bec <HAL_GetTick>
 8002f0a:	0002      	movs	r2, r0
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	4a4d      	ldr	r2, [pc, #308]	; (8003048 <HAL_RCC_ClockConfig+0x274>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e08f      	b.n	800303a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f1a:	4b4c      	ldr	r3, [pc, #304]	; (800304c <HAL_RCC_ClockConfig+0x278>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	220c      	movs	r2, #12
 8002f20:	4013      	ands	r3, r2
 8002f22:	2b0c      	cmp	r3, #12
 8002f24:	d1ef      	bne.n	8002f06 <HAL_RCC_ClockConfig+0x132>
 8002f26:	e024      	b.n	8002f72 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d11b      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f30:	e009      	b.n	8002f46 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f32:	f7fe fe5b 	bl	8001bec <HAL_GetTick>
 8002f36:	0002      	movs	r2, r0
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	4a42      	ldr	r2, [pc, #264]	; (8003048 <HAL_RCC_ClockConfig+0x274>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e079      	b.n	800303a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f46:	4b41      	ldr	r3, [pc, #260]	; (800304c <HAL_RCC_ClockConfig+0x278>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	220c      	movs	r2, #12
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d1ef      	bne.n	8002f32 <HAL_RCC_ClockConfig+0x15e>
 8002f52:	e00e      	b.n	8002f72 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f54:	f7fe fe4a 	bl	8001bec <HAL_GetTick>
 8002f58:	0002      	movs	r2, r0
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	4a3a      	ldr	r2, [pc, #232]	; (8003048 <HAL_RCC_ClockConfig+0x274>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e068      	b.n	800303a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f68:	4b38      	ldr	r3, [pc, #224]	; (800304c <HAL_RCC_ClockConfig+0x278>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	220c      	movs	r2, #12
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f72:	4b34      	ldr	r3, [pc, #208]	; (8003044 <HAL_RCC_ClockConfig+0x270>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2201      	movs	r2, #1
 8002f78:	4013      	ands	r3, r2
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d21e      	bcs.n	8002fbe <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f80:	4b30      	ldr	r3, [pc, #192]	; (8003044 <HAL_RCC_ClockConfig+0x270>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2201      	movs	r2, #1
 8002f86:	4393      	bics	r3, r2
 8002f88:	0019      	movs	r1, r3
 8002f8a:	4b2e      	ldr	r3, [pc, #184]	; (8003044 <HAL_RCC_ClockConfig+0x270>)
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f92:	f7fe fe2b 	bl	8001bec <HAL_GetTick>
 8002f96:	0003      	movs	r3, r0
 8002f98:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9a:	e009      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f9c:	f7fe fe26 	bl	8001bec <HAL_GetTick>
 8002fa0:	0002      	movs	r2, r0
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	4a28      	ldr	r2, [pc, #160]	; (8003048 <HAL_RCC_ClockConfig+0x274>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e044      	b.n	800303a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb0:	4b24      	ldr	r3, [pc, #144]	; (8003044 <HAL_RCC_ClockConfig+0x270>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d1ee      	bne.n	8002f9c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2204      	movs	r2, #4
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d009      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc8:	4b20      	ldr	r3, [pc, #128]	; (800304c <HAL_RCC_ClockConfig+0x278>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4a20      	ldr	r2, [pc, #128]	; (8003050 <HAL_RCC_ClockConfig+0x27c>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	0019      	movs	r1, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	4b1d      	ldr	r3, [pc, #116]	; (800304c <HAL_RCC_ClockConfig+0x278>)
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2208      	movs	r2, #8
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d00a      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fe6:	4b19      	ldr	r3, [pc, #100]	; (800304c <HAL_RCC_ClockConfig+0x278>)
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	4a1a      	ldr	r2, [pc, #104]	; (8003054 <HAL_RCC_ClockConfig+0x280>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	0019      	movs	r1, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	00da      	lsls	r2, r3, #3
 8002ff6:	4b15      	ldr	r3, [pc, #84]	; (800304c <HAL_RCC_ClockConfig+0x278>)
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ffc:	f000 f832 	bl	8003064 <HAL_RCC_GetSysClockFreq>
 8003000:	0001      	movs	r1, r0
 8003002:	4b12      	ldr	r3, [pc, #72]	; (800304c <HAL_RCC_ClockConfig+0x278>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	091b      	lsrs	r3, r3, #4
 8003008:	220f      	movs	r2, #15
 800300a:	4013      	ands	r3, r2
 800300c:	4a12      	ldr	r2, [pc, #72]	; (8003058 <HAL_RCC_ClockConfig+0x284>)
 800300e:	5cd3      	ldrb	r3, [r2, r3]
 8003010:	000a      	movs	r2, r1
 8003012:	40da      	lsrs	r2, r3
 8003014:	4b11      	ldr	r3, [pc, #68]	; (800305c <HAL_RCC_ClockConfig+0x288>)
 8003016:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <HAL_RCC_ClockConfig+0x28c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	250b      	movs	r5, #11
 800301e:	197c      	adds	r4, r7, r5
 8003020:	0018      	movs	r0, r3
 8003022:	f7fe fd9d 	bl	8001b60 <HAL_InitTick>
 8003026:	0003      	movs	r3, r0
 8003028:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800302a:	197b      	adds	r3, r7, r5
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003032:	197b      	adds	r3, r7, r5
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	e000      	b.n	800303a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	0018      	movs	r0, r3
 800303c:	46bd      	mov	sp, r7
 800303e:	b004      	add	sp, #16
 8003040:	bdb0      	pop	{r4, r5, r7, pc}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	40022000 	.word	0x40022000
 8003048:	00001388 	.word	0x00001388
 800304c:	40021000 	.word	0x40021000
 8003050:	fffff8ff 	.word	0xfffff8ff
 8003054:	ffffc7ff 	.word	0xffffc7ff
 8003058:	080053a4 	.word	0x080053a4
 800305c:	20000000 	.word	0x20000000
 8003060:	20000004 	.word	0x20000004

08003064 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003064:	b5b0      	push	{r4, r5, r7, lr}
 8003066:	b08e      	sub	sp, #56	; 0x38
 8003068:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800306a:	4b4c      	ldr	r3, [pc, #304]	; (800319c <HAL_RCC_GetSysClockFreq+0x138>)
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003072:	230c      	movs	r3, #12
 8003074:	4013      	ands	r3, r2
 8003076:	2b0c      	cmp	r3, #12
 8003078:	d014      	beq.n	80030a4 <HAL_RCC_GetSysClockFreq+0x40>
 800307a:	d900      	bls.n	800307e <HAL_RCC_GetSysClockFreq+0x1a>
 800307c:	e07b      	b.n	8003176 <HAL_RCC_GetSysClockFreq+0x112>
 800307e:	2b04      	cmp	r3, #4
 8003080:	d002      	beq.n	8003088 <HAL_RCC_GetSysClockFreq+0x24>
 8003082:	2b08      	cmp	r3, #8
 8003084:	d00b      	beq.n	800309e <HAL_RCC_GetSysClockFreq+0x3a>
 8003086:	e076      	b.n	8003176 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003088:	4b44      	ldr	r3, [pc, #272]	; (800319c <HAL_RCC_GetSysClockFreq+0x138>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2210      	movs	r2, #16
 800308e:	4013      	ands	r3, r2
 8003090:	d002      	beq.n	8003098 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003092:	4b43      	ldr	r3, [pc, #268]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003094:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003096:	e07c      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003098:	4b42      	ldr	r3, [pc, #264]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x140>)
 800309a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800309c:	e079      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800309e:	4b42      	ldr	r3, [pc, #264]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x144>)
 80030a0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80030a2:	e076      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80030a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a6:	0c9a      	lsrs	r2, r3, #18
 80030a8:	230f      	movs	r3, #15
 80030aa:	401a      	ands	r2, r3
 80030ac:	4b3f      	ldr	r3, [pc, #252]	; (80031ac <HAL_RCC_GetSysClockFreq+0x148>)
 80030ae:	5c9b      	ldrb	r3, [r3, r2]
 80030b0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80030b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b4:	0d9a      	lsrs	r2, r3, #22
 80030b6:	2303      	movs	r3, #3
 80030b8:	4013      	ands	r3, r2
 80030ba:	3301      	adds	r3, #1
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030be:	4b37      	ldr	r3, [pc, #220]	; (800319c <HAL_RCC_GetSysClockFreq+0x138>)
 80030c0:	68da      	ldr	r2, [r3, #12]
 80030c2:	2380      	movs	r3, #128	; 0x80
 80030c4:	025b      	lsls	r3, r3, #9
 80030c6:	4013      	ands	r3, r2
 80030c8:	d01a      	beq.n	8003100 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80030ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030cc:	61bb      	str	r3, [r7, #24]
 80030ce:	2300      	movs	r3, #0
 80030d0:	61fb      	str	r3, [r7, #28]
 80030d2:	4a35      	ldr	r2, [pc, #212]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x144>)
 80030d4:	2300      	movs	r3, #0
 80030d6:	69b8      	ldr	r0, [r7, #24]
 80030d8:	69f9      	ldr	r1, [r7, #28]
 80030da:	f7fd f8c1 	bl	8000260 <__aeabi_lmul>
 80030de:	0002      	movs	r2, r0
 80030e0:	000b      	movs	r3, r1
 80030e2:	0010      	movs	r0, r2
 80030e4:	0019      	movs	r1, r3
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f7fd f895 	bl	8000220 <__aeabi_uldivmod>
 80030f6:	0002      	movs	r2, r0
 80030f8:	000b      	movs	r3, r1
 80030fa:	0013      	movs	r3, r2
 80030fc:	637b      	str	r3, [r7, #52]	; 0x34
 80030fe:	e037      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003100:	4b26      	ldr	r3, [pc, #152]	; (800319c <HAL_RCC_GetSysClockFreq+0x138>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2210      	movs	r2, #16
 8003106:	4013      	ands	r3, r2
 8003108:	d01a      	beq.n	8003140 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800310a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	4a23      	ldr	r2, [pc, #140]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003114:	2300      	movs	r3, #0
 8003116:	68b8      	ldr	r0, [r7, #8]
 8003118:	68f9      	ldr	r1, [r7, #12]
 800311a:	f7fd f8a1 	bl	8000260 <__aeabi_lmul>
 800311e:	0002      	movs	r2, r0
 8003120:	000b      	movs	r3, r1
 8003122:	0010      	movs	r0, r2
 8003124:	0019      	movs	r1, r3
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	603b      	str	r3, [r7, #0]
 800312a:	2300      	movs	r3, #0
 800312c:	607b      	str	r3, [r7, #4]
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f7fd f875 	bl	8000220 <__aeabi_uldivmod>
 8003136:	0002      	movs	r2, r0
 8003138:	000b      	movs	r3, r1
 800313a:	0013      	movs	r3, r2
 800313c:	637b      	str	r3, [r7, #52]	; 0x34
 800313e:	e017      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003142:	0018      	movs	r0, r3
 8003144:	2300      	movs	r3, #0
 8003146:	0019      	movs	r1, r3
 8003148:	4a16      	ldr	r2, [pc, #88]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x140>)
 800314a:	2300      	movs	r3, #0
 800314c:	f7fd f888 	bl	8000260 <__aeabi_lmul>
 8003150:	0002      	movs	r2, r0
 8003152:	000b      	movs	r3, r1
 8003154:	0010      	movs	r0, r2
 8003156:	0019      	movs	r1, r3
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315a:	001c      	movs	r4, r3
 800315c:	2300      	movs	r3, #0
 800315e:	001d      	movs	r5, r3
 8003160:	0022      	movs	r2, r4
 8003162:	002b      	movs	r3, r5
 8003164:	f7fd f85c 	bl	8000220 <__aeabi_uldivmod>
 8003168:	0002      	movs	r2, r0
 800316a:	000b      	movs	r3, r1
 800316c:	0013      	movs	r3, r2
 800316e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003172:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003174:	e00d      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003176:	4b09      	ldr	r3, [pc, #36]	; (800319c <HAL_RCC_GetSysClockFreq+0x138>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	0b5b      	lsrs	r3, r3, #13
 800317c:	2207      	movs	r2, #7
 800317e:	4013      	ands	r3, r2
 8003180:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	3301      	adds	r3, #1
 8003186:	2280      	movs	r2, #128	; 0x80
 8003188:	0212      	lsls	r2, r2, #8
 800318a:	409a      	lsls	r2, r3
 800318c:	0013      	movs	r3, r2
 800318e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003190:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003194:	0018      	movs	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	b00e      	add	sp, #56	; 0x38
 800319a:	bdb0      	pop	{r4, r5, r7, pc}
 800319c:	40021000 	.word	0x40021000
 80031a0:	003d0900 	.word	0x003d0900
 80031a4:	00f42400 	.word	0x00f42400
 80031a8:	007a1200 	.word	0x007a1200
 80031ac:	080053bc 	.word	0x080053bc

080031b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031b4:	4b02      	ldr	r3, [pc, #8]	; (80031c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80031b6:	681b      	ldr	r3, [r3, #0]
}
 80031b8:	0018      	movs	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	20000000 	.word	0x20000000

080031c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031c8:	f7ff fff2 	bl	80031b0 <HAL_RCC_GetHCLKFreq>
 80031cc:	0001      	movs	r1, r0
 80031ce:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	0a1b      	lsrs	r3, r3, #8
 80031d4:	2207      	movs	r2, #7
 80031d6:	4013      	ands	r3, r2
 80031d8:	4a04      	ldr	r2, [pc, #16]	; (80031ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80031da:	5cd3      	ldrb	r3, [r2, r3]
 80031dc:	40d9      	lsrs	r1, r3
 80031de:	000b      	movs	r3, r1
}
 80031e0:	0018      	movs	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	40021000 	.word	0x40021000
 80031ec:	080053b4 	.word	0x080053b4

080031f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031f4:	f7ff ffdc 	bl	80031b0 <HAL_RCC_GetHCLKFreq>
 80031f8:	0001      	movs	r1, r0
 80031fa:	4b06      	ldr	r3, [pc, #24]	; (8003214 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	0adb      	lsrs	r3, r3, #11
 8003200:	2207      	movs	r2, #7
 8003202:	4013      	ands	r3, r2
 8003204:	4a04      	ldr	r2, [pc, #16]	; (8003218 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003206:	5cd3      	ldrb	r3, [r2, r3]
 8003208:	40d9      	lsrs	r1, r3
 800320a:	000b      	movs	r3, r1
}
 800320c:	0018      	movs	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	40021000 	.word	0x40021000
 8003218:	080053b4 	.word	0x080053b4

0800321c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003224:	2017      	movs	r0, #23
 8003226:	183b      	adds	r3, r7, r0
 8003228:	2200      	movs	r2, #0
 800322a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2220      	movs	r2, #32
 8003232:	4013      	ands	r3, r2
 8003234:	d100      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8003236:	e0c7      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003238:	4b84      	ldr	r3, [pc, #528]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800323a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800323c:	2380      	movs	r3, #128	; 0x80
 800323e:	055b      	lsls	r3, r3, #21
 8003240:	4013      	ands	r3, r2
 8003242:	d109      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003244:	4b81      	ldr	r3, [pc, #516]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003248:	4b80      	ldr	r3, [pc, #512]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800324a:	2180      	movs	r1, #128	; 0x80
 800324c:	0549      	lsls	r1, r1, #21
 800324e:	430a      	orrs	r2, r1
 8003250:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003252:	183b      	adds	r3, r7, r0
 8003254:	2201      	movs	r2, #1
 8003256:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003258:	4b7d      	ldr	r3, [pc, #500]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	2380      	movs	r3, #128	; 0x80
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	4013      	ands	r3, r2
 8003262:	d11a      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003264:	4b7a      	ldr	r3, [pc, #488]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	4b79      	ldr	r3, [pc, #484]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800326a:	2180      	movs	r1, #128	; 0x80
 800326c:	0049      	lsls	r1, r1, #1
 800326e:	430a      	orrs	r2, r1
 8003270:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003272:	f7fe fcbb 	bl	8001bec <HAL_GetTick>
 8003276:	0003      	movs	r3, r0
 8003278:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327a:	e008      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800327c:	f7fe fcb6 	bl	8001bec <HAL_GetTick>
 8003280:	0002      	movs	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	; 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e0d9      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328e:	4b70      	ldr	r3, [pc, #448]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	2380      	movs	r3, #128	; 0x80
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	4013      	ands	r3, r2
 8003298:	d0f0      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800329a:	4b6c      	ldr	r3, [pc, #432]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	23c0      	movs	r3, #192	; 0xc0
 80032a0:	039b      	lsls	r3, r3, #14
 80032a2:	4013      	ands	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	23c0      	movs	r3, #192	; 0xc0
 80032ac:	039b      	lsls	r3, r3, #14
 80032ae:	4013      	ands	r3, r2
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d013      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	23c0      	movs	r3, #192	; 0xc0
 80032bc:	029b      	lsls	r3, r3, #10
 80032be:	401a      	ands	r2, r3
 80032c0:	23c0      	movs	r3, #192	; 0xc0
 80032c2:	029b      	lsls	r3, r3, #10
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d10a      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80032c8:	4b60      	ldr	r3, [pc, #384]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	2380      	movs	r3, #128	; 0x80
 80032ce:	029b      	lsls	r3, r3, #10
 80032d0:	401a      	ands	r2, r3
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	029b      	lsls	r3, r3, #10
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d101      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e0b1      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80032de:	4b5b      	ldr	r3, [pc, #364]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80032e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032e2:	23c0      	movs	r3, #192	; 0xc0
 80032e4:	029b      	lsls	r3, r3, #10
 80032e6:	4013      	ands	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d03b      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	23c0      	movs	r3, #192	; 0xc0
 80032f6:	029b      	lsls	r3, r3, #10
 80032f8:	4013      	ands	r3, r2
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d033      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2220      	movs	r2, #32
 8003306:	4013      	ands	r3, r2
 8003308:	d02e      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800330a:	4b50      	ldr	r3, [pc, #320]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800330c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800330e:	4a51      	ldr	r2, [pc, #324]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003310:	4013      	ands	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003314:	4b4d      	ldr	r3, [pc, #308]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003316:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003318:	4b4c      	ldr	r3, [pc, #304]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800331a:	2180      	movs	r1, #128	; 0x80
 800331c:	0309      	lsls	r1, r1, #12
 800331e:	430a      	orrs	r2, r1
 8003320:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003322:	4b4a      	ldr	r3, [pc, #296]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003324:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003326:	4b49      	ldr	r3, [pc, #292]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003328:	494b      	ldr	r1, [pc, #300]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800332a:	400a      	ands	r2, r1
 800332c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800332e:	4b47      	ldr	r3, [pc, #284]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	2380      	movs	r3, #128	; 0x80
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	4013      	ands	r3, r2
 800333c:	d014      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333e:	f7fe fc55 	bl	8001bec <HAL_GetTick>
 8003342:	0003      	movs	r3, r0
 8003344:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003346:	e009      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003348:	f7fe fc50 	bl	8001bec <HAL_GetTick>
 800334c:	0002      	movs	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	4a42      	ldr	r2, [pc, #264]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d901      	bls.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e072      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800335c:	4b3b      	ldr	r3, [pc, #236]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800335e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003360:	2380      	movs	r3, #128	; 0x80
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4013      	ands	r3, r2
 8003366:	d0ef      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2220      	movs	r2, #32
 800336e:	4013      	ands	r3, r2
 8003370:	d01f      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	23c0      	movs	r3, #192	; 0xc0
 8003378:	029b      	lsls	r3, r3, #10
 800337a:	401a      	ands	r2, r3
 800337c:	23c0      	movs	r3, #192	; 0xc0
 800337e:	029b      	lsls	r3, r3, #10
 8003380:	429a      	cmp	r2, r3
 8003382:	d10c      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8003384:	4b31      	ldr	r3, [pc, #196]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a35      	ldr	r2, [pc, #212]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800338a:	4013      	ands	r3, r2
 800338c:	0019      	movs	r1, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	23c0      	movs	r3, #192	; 0xc0
 8003394:	039b      	lsls	r3, r3, #14
 8003396:	401a      	ands	r2, r3
 8003398:	4b2c      	ldr	r3, [pc, #176]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800339a:	430a      	orrs	r2, r1
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	4b2b      	ldr	r3, [pc, #172]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80033a0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	23c0      	movs	r3, #192	; 0xc0
 80033a8:	029b      	lsls	r3, r3, #10
 80033aa:	401a      	ands	r2, r3
 80033ac:	4b27      	ldr	r3, [pc, #156]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80033ae:	430a      	orrs	r2, r1
 80033b0:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033b2:	2317      	movs	r3, #23
 80033b4:	18fb      	adds	r3, r7, r3
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d105      	bne.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033bc:	4b23      	ldr	r3, [pc, #140]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80033be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033c0:	4b22      	ldr	r3, [pc, #136]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80033c2:	4928      	ldr	r1, [pc, #160]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033c4:	400a      	ands	r2, r1
 80033c6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2202      	movs	r2, #2
 80033ce:	4013      	ands	r3, r2
 80033d0:	d009      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033d2:	4b1e      	ldr	r3, [pc, #120]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80033d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d6:	220c      	movs	r2, #12
 80033d8:	4393      	bics	r3, r2
 80033da:	0019      	movs	r1, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	4b1a      	ldr	r3, [pc, #104]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80033e2:	430a      	orrs	r2, r1
 80033e4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2204      	movs	r2, #4
 80033ec:	4013      	ands	r3, r2
 80033ee:	d009      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033f0:	4b16      	ldr	r3, [pc, #88]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80033f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f4:	4a1c      	ldr	r2, [pc, #112]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	0019      	movs	r1, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	4b13      	ldr	r3, [pc, #76]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003400:	430a      	orrs	r2, r1
 8003402:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2208      	movs	r2, #8
 800340a:	4013      	ands	r3, r2
 800340c:	d009      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800340e:	4b0f      	ldr	r3, [pc, #60]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003412:	4a16      	ldr	r2, [pc, #88]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003414:	4013      	ands	r3, r2
 8003416:	0019      	movs	r1, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691a      	ldr	r2, [r3, #16]
 800341c:	4b0b      	ldr	r3, [pc, #44]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800341e:	430a      	orrs	r2, r1
 8003420:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2280      	movs	r2, #128	; 0x80
 8003428:	4013      	ands	r3, r2
 800342a:	d009      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800342c:	4b07      	ldr	r3, [pc, #28]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800342e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003430:	4a0f      	ldr	r2, [pc, #60]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003432:	4013      	ands	r3, r2
 8003434:	0019      	movs	r1, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	695a      	ldr	r2, [r3, #20]
 800343a:	4b04      	ldr	r3, [pc, #16]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800343c:	430a      	orrs	r2, r1
 800343e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	0018      	movs	r0, r3
 8003444:	46bd      	mov	sp, r7
 8003446:	b006      	add	sp, #24
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	40021000 	.word	0x40021000
 8003450:	40007000 	.word	0x40007000
 8003454:	fffcffff 	.word	0xfffcffff
 8003458:	fff7ffff 	.word	0xfff7ffff
 800345c:	00001388 	.word	0x00001388
 8003460:	ffcfffff 	.word	0xffcfffff
 8003464:	efffffff 	.word	0xefffffff
 8003468:	fffff3ff 	.word	0xfffff3ff
 800346c:	ffffcfff 	.word	0xffffcfff
 8003470:	fff3ffff 	.word	0xfff3ffff

08003474 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e07b      	b.n	800357e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	2b00      	cmp	r3, #0
 800348c:	d109      	bne.n	80034a2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	2382      	movs	r3, #130	; 0x82
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	429a      	cmp	r2, r3
 8003498:	d009      	beq.n	80034ae <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	61da      	str	r2, [r3, #28]
 80034a0:	e005      	b.n	80034ae <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2251      	movs	r2, #81	; 0x51
 80034b8:	5c9b      	ldrb	r3, [r3, r2]
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d107      	bne.n	80034d0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2250      	movs	r2, #80	; 0x50
 80034c4:	2100      	movs	r1, #0
 80034c6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	0018      	movs	r0, r3
 80034cc:	f7fe f9f0 	bl	80018b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2251      	movs	r2, #81	; 0x51
 80034d4:	2102      	movs	r1, #2
 80034d6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2140      	movs	r1, #64	; 0x40
 80034e4:	438a      	bics	r2, r1
 80034e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	2382      	movs	r3, #130	; 0x82
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	401a      	ands	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6899      	ldr	r1, [r3, #8]
 80034f6:	2384      	movs	r3, #132	; 0x84
 80034f8:	021b      	lsls	r3, r3, #8
 80034fa:	400b      	ands	r3, r1
 80034fc:	431a      	orrs	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68d9      	ldr	r1, [r3, #12]
 8003502:	2380      	movs	r3, #128	; 0x80
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	400b      	ands	r3, r1
 8003508:	431a      	orrs	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	2102      	movs	r1, #2
 8003510:	400b      	ands	r3, r1
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	2101      	movs	r1, #1
 800351a:	400b      	ands	r3, r1
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6999      	ldr	r1, [r3, #24]
 8003522:	2380      	movs	r3, #128	; 0x80
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	400b      	ands	r3, r1
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	2138      	movs	r1, #56	; 0x38
 8003530:	400b      	ands	r3, r1
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	2180      	movs	r1, #128	; 0x80
 800353a:	400b      	ands	r3, r1
 800353c:	431a      	orrs	r2, r3
 800353e:	0011      	movs	r1, r2
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003544:	2380      	movs	r3, #128	; 0x80
 8003546:	019b      	lsls	r3, r3, #6
 8003548:	401a      	ands	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	0c1b      	lsrs	r3, r3, #16
 8003558:	2204      	movs	r2, #4
 800355a:	4013      	ands	r3, r2
 800355c:	0019      	movs	r1, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	2210      	movs	r2, #16
 8003564:	401a      	ands	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2251      	movs	r2, #81	; 0x51
 8003578:	2101      	movs	r1, #1
 800357a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	0018      	movs	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	b002      	add	sp, #8
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b088      	sub	sp, #32
 800358a:	af00      	add	r7, sp, #0
 800358c:	60f8      	str	r0, [r7, #12]
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	603b      	str	r3, [r7, #0]
 8003592:	1dbb      	adds	r3, r7, #6
 8003594:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003596:	231f      	movs	r3, #31
 8003598:	18fb      	adds	r3, r7, r3
 800359a:	2200      	movs	r2, #0
 800359c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2250      	movs	r2, #80	; 0x50
 80035a2:	5c9b      	ldrb	r3, [r3, r2]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_SPI_Transmit+0x26>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e145      	b.n	8003838 <HAL_SPI_Transmit+0x2b2>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2250      	movs	r2, #80	; 0x50
 80035b0:	2101      	movs	r1, #1
 80035b2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035b4:	f7fe fb1a 	bl	8001bec <HAL_GetTick>
 80035b8:	0003      	movs	r3, r0
 80035ba:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80035bc:	2316      	movs	r3, #22
 80035be:	18fb      	adds	r3, r7, r3
 80035c0:	1dba      	adds	r2, r7, #6
 80035c2:	8812      	ldrh	r2, [r2, #0]
 80035c4:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2251      	movs	r2, #81	; 0x51
 80035ca:	5c9b      	ldrb	r3, [r3, r2]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d004      	beq.n	80035dc <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80035d2:	231f      	movs	r3, #31
 80035d4:	18fb      	adds	r3, r7, r3
 80035d6:	2202      	movs	r2, #2
 80035d8:	701a      	strb	r2, [r3, #0]
    goto error;
 80035da:	e126      	b.n	800382a <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_SPI_Transmit+0x64>
 80035e2:	1dbb      	adds	r3, r7, #6
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d104      	bne.n	80035f4 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80035ea:	231f      	movs	r3, #31
 80035ec:	18fb      	adds	r3, r7, r3
 80035ee:	2201      	movs	r2, #1
 80035f0:	701a      	strb	r2, [r3, #0]
    goto error;
 80035f2:	e11a      	b.n	800382a <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2251      	movs	r2, #81	; 0x51
 80035f8:	2103      	movs	r1, #3
 80035fa:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	1dba      	adds	r2, r7, #6
 800360c:	8812      	ldrh	r2, [r2, #0]
 800360e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	1dba      	adds	r2, r7, #6
 8003614:	8812      	ldrh	r2, [r2, #0]
 8003616:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	2380      	movs	r3, #128	; 0x80
 800363c:	021b      	lsls	r3, r3, #8
 800363e:	429a      	cmp	r2, r3
 8003640:	d110      	bne.n	8003664 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2140      	movs	r1, #64	; 0x40
 800364e:	438a      	bics	r2, r1
 8003650:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2180      	movs	r1, #128	; 0x80
 800365e:	01c9      	lsls	r1, r1, #7
 8003660:	430a      	orrs	r2, r1
 8003662:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2240      	movs	r2, #64	; 0x40
 800366c:	4013      	ands	r3, r2
 800366e:	2b40      	cmp	r3, #64	; 0x40
 8003670:	d007      	beq.n	8003682 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2140      	movs	r1, #64	; 0x40
 800367e:	430a      	orrs	r2, r1
 8003680:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	2380      	movs	r3, #128	; 0x80
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	429a      	cmp	r2, r3
 800368c:	d152      	bne.n	8003734 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d004      	beq.n	80036a0 <HAL_SPI_Transmit+0x11a>
 8003696:	2316      	movs	r3, #22
 8003698:	18fb      	adds	r3, r7, r3
 800369a:	881b      	ldrh	r3, [r3, #0]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d143      	bne.n	8003728 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a4:	881a      	ldrh	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	1c9a      	adds	r2, r3, #2
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036c4:	e030      	b.n	8003728 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2202      	movs	r2, #2
 80036ce:	4013      	ands	r3, r2
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d112      	bne.n	80036fa <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	881a      	ldrh	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e4:	1c9a      	adds	r2, r3, #2
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80036f8:	e016      	b.n	8003728 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036fa:	f7fe fa77 	bl	8001bec <HAL_GetTick>
 80036fe:	0002      	movs	r2, r0
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	429a      	cmp	r2, r3
 8003708:	d802      	bhi.n	8003710 <HAL_SPI_Transmit+0x18a>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	3301      	adds	r3, #1
 800370e:	d102      	bne.n	8003716 <HAL_SPI_Transmit+0x190>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d108      	bne.n	8003728 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8003716:	231f      	movs	r3, #31
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	2203      	movs	r2, #3
 800371c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2251      	movs	r2, #81	; 0x51
 8003722:	2101      	movs	r1, #1
 8003724:	5499      	strb	r1, [r3, r2]
          goto error;
 8003726:	e080      	b.n	800382a <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1c9      	bne.n	80036c6 <HAL_SPI_Transmit+0x140>
 8003732:	e053      	b.n	80037dc <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d004      	beq.n	8003746 <HAL_SPI_Transmit+0x1c0>
 800373c:	2316      	movs	r3, #22
 800373e:	18fb      	adds	r3, r7, r3
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d145      	bne.n	80037d2 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	330c      	adds	r3, #12
 8003750:	7812      	ldrb	r2, [r2, #0]
 8003752:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003762:	b29b      	uxth	r3, r3
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800376c:	e031      	b.n	80037d2 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	2202      	movs	r2, #2
 8003776:	4013      	ands	r3, r2
 8003778:	2b02      	cmp	r3, #2
 800377a:	d113      	bne.n	80037a4 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	330c      	adds	r3, #12
 8003786:	7812      	ldrb	r2, [r2, #0]
 8003788:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	86da      	strh	r2, [r3, #54]	; 0x36
 80037a2:	e016      	b.n	80037d2 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037a4:	f7fe fa22 	bl	8001bec <HAL_GetTick>
 80037a8:	0002      	movs	r2, r0
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d802      	bhi.n	80037ba <HAL_SPI_Transmit+0x234>
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	3301      	adds	r3, #1
 80037b8:	d102      	bne.n	80037c0 <HAL_SPI_Transmit+0x23a>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d108      	bne.n	80037d2 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 80037c0:	231f      	movs	r3, #31
 80037c2:	18fb      	adds	r3, r7, r3
 80037c4:	2203      	movs	r2, #3
 80037c6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2251      	movs	r2, #81	; 0x51
 80037cc:	2101      	movs	r1, #1
 80037ce:	5499      	strb	r1, [r3, r2]
          goto error;
 80037d0:	e02b      	b.n	800382a <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1c8      	bne.n	800376e <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	6839      	ldr	r1, [r7, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	0018      	movs	r0, r3
 80037e4:	f000 fc1e 	bl	8004024 <SPI_EndRxTxTransaction>
 80037e8:	1e03      	subs	r3, r0, #0
 80037ea:	d002      	beq.n	80037f2 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2220      	movs	r2, #32
 80037f0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10a      	bne.n	8003810 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037fa:	2300      	movs	r3, #0
 80037fc:	613b      	str	r3, [r7, #16]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	613b      	str	r3, [r7, #16]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	613b      	str	r3, [r7, #16]
 800380e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003814:	2b00      	cmp	r3, #0
 8003816:	d004      	beq.n	8003822 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8003818:	231f      	movs	r3, #31
 800381a:	18fb      	adds	r3, r7, r3
 800381c:	2201      	movs	r2, #1
 800381e:	701a      	strb	r2, [r3, #0]
 8003820:	e003      	b.n	800382a <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2251      	movs	r2, #81	; 0x51
 8003826:	2101      	movs	r1, #1
 8003828:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2250      	movs	r2, #80	; 0x50
 800382e:	2100      	movs	r1, #0
 8003830:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003832:	231f      	movs	r3, #31
 8003834:	18fb      	adds	r3, r7, r3
 8003836:	781b      	ldrb	r3, [r3, #0]
}
 8003838:	0018      	movs	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	b008      	add	sp, #32
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003840:	b590      	push	{r4, r7, lr}
 8003842:	b089      	sub	sp, #36	; 0x24
 8003844:	af02      	add	r7, sp, #8
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	603b      	str	r3, [r7, #0]
 800384c:	1dbb      	adds	r3, r7, #6
 800384e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003850:	2117      	movs	r1, #23
 8003852:	187b      	adds	r3, r7, r1
 8003854:	2200      	movs	r2, #0
 8003856:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2251      	movs	r2, #81	; 0x51
 800385c:	5c9b      	ldrb	r3, [r3, r2]
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b01      	cmp	r3, #1
 8003862:	d003      	beq.n	800386c <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8003864:	187b      	adds	r3, r7, r1
 8003866:	2202      	movs	r2, #2
 8003868:	701a      	strb	r2, [r3, #0]
    goto error;
 800386a:	e109      	b.n	8003a80 <HAL_SPI_Receive+0x240>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	2382      	movs	r3, #130	; 0x82
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	429a      	cmp	r2, r3
 8003876:	d113      	bne.n	80038a0 <HAL_SPI_Receive+0x60>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10f      	bne.n	80038a0 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2251      	movs	r2, #81	; 0x51
 8003884:	2104      	movs	r1, #4
 8003886:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003888:	1dbb      	adds	r3, r7, #6
 800388a:	881c      	ldrh	r4, [r3, #0]
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	68b9      	ldr	r1, [r7, #8]
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	0023      	movs	r3, r4
 8003898:	f000 f900 	bl	8003a9c <HAL_SPI_TransmitReceive>
 800389c:	0003      	movs	r3, r0
 800389e:	e0f6      	b.n	8003a8e <HAL_SPI_Receive+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2250      	movs	r2, #80	; 0x50
 80038a4:	5c9b      	ldrb	r3, [r3, r2]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_SPI_Receive+0x6e>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e0ef      	b.n	8003a8e <HAL_SPI_Receive+0x24e>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2250      	movs	r2, #80	; 0x50
 80038b2:	2101      	movs	r1, #1
 80038b4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038b6:	f7fe f999 	bl	8001bec <HAL_GetTick>
 80038ba:	0003      	movs	r3, r0
 80038bc:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <HAL_SPI_Receive+0x8c>
 80038c4:	1dbb      	adds	r3, r7, #6
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d104      	bne.n	80038d6 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 80038cc:	2317      	movs	r3, #23
 80038ce:	18fb      	adds	r3, r7, r3
 80038d0:	2201      	movs	r2, #1
 80038d2:	701a      	strb	r2, [r3, #0]
    goto error;
 80038d4:	e0d4      	b.n	8003a80 <HAL_SPI_Receive+0x240>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2251      	movs	r2, #81	; 0x51
 80038da:	2104      	movs	r1, #4
 80038dc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	1dba      	adds	r2, r7, #6
 80038ee:	8812      	ldrh	r2, [r2, #0]
 80038f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	1dba      	adds	r2, r7, #6
 80038f6:	8812      	ldrh	r2, [r2, #0]
 80038f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	2380      	movs	r3, #128	; 0x80
 800391e:	021b      	lsls	r3, r3, #8
 8003920:	429a      	cmp	r2, r3
 8003922:	d10f      	bne.n	8003944 <HAL_SPI_Receive+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2140      	movs	r1, #64	; 0x40
 8003930:	438a      	bics	r2, r1
 8003932:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4956      	ldr	r1, [pc, #344]	; (8003a98 <HAL_SPI_Receive+0x258>)
 8003940:	400a      	ands	r2, r1
 8003942:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2240      	movs	r2, #64	; 0x40
 800394c:	4013      	ands	r3, r2
 800394e:	2b40      	cmp	r3, #64	; 0x40
 8003950:	d007      	beq.n	8003962 <HAL_SPI_Receive+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2140      	movs	r1, #64	; 0x40
 800395e:	430a      	orrs	r2, r1
 8003960:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d000      	beq.n	800396c <HAL_SPI_Receive+0x12c>
 800396a:	e06c      	b.n	8003a46 <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800396c:	e033      	b.n	80039d6 <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	2201      	movs	r2, #1
 8003976:	4013      	ands	r3, r2
 8003978:	2b01      	cmp	r3, #1
 800397a:	d115      	bne.n	80039a8 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	330c      	adds	r3, #12
 8003982:	001a      	movs	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003988:	7812      	ldrb	r2, [r2, #0]
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039a6:	e016      	b.n	80039d6 <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039a8:	f7fe f920 	bl	8001bec <HAL_GetTick>
 80039ac:	0002      	movs	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d802      	bhi.n	80039be <HAL_SPI_Receive+0x17e>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	3301      	adds	r3, #1
 80039bc:	d102      	bne.n	80039c4 <HAL_SPI_Receive+0x184>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d108      	bne.n	80039d6 <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 80039c4:	2317      	movs	r3, #23
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	2203      	movs	r2, #3
 80039ca:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2251      	movs	r2, #81	; 0x51
 80039d0:	2101      	movs	r1, #1
 80039d2:	5499      	strb	r1, [r3, r2]
          goto error;
 80039d4:	e054      	b.n	8003a80 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039da:	b29b      	uxth	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1c6      	bne.n	800396e <HAL_SPI_Receive+0x12e>
 80039e0:	e036      	b.n	8003a50 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	2201      	movs	r2, #1
 80039ea:	4013      	ands	r3, r2
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d113      	bne.n	8003a18 <HAL_SPI_Receive+0x1d8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fa:	b292      	uxth	r2, r2
 80039fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a02:	1c9a      	adds	r2, r3, #2
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a16:	e016      	b.n	8003a46 <HAL_SPI_Receive+0x206>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a18:	f7fe f8e8 	bl	8001bec <HAL_GetTick>
 8003a1c:	0002      	movs	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d802      	bhi.n	8003a2e <HAL_SPI_Receive+0x1ee>
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	d102      	bne.n	8003a34 <HAL_SPI_Receive+0x1f4>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d108      	bne.n	8003a46 <HAL_SPI_Receive+0x206>
        {
          errorcode = HAL_TIMEOUT;
 8003a34:	2317      	movs	r3, #23
 8003a36:	18fb      	adds	r3, r7, r3
 8003a38:	2203      	movs	r2, #3
 8003a3a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2251      	movs	r2, #81	; 0x51
 8003a40:	2101      	movs	r1, #1
 8003a42:	5499      	strb	r1, [r3, r2]
          goto error;
 8003a44:	e01c      	b.n	8003a80 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1c8      	bne.n	80039e2 <HAL_SPI_Receive+0x1a2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	6839      	ldr	r1, [r7, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	0018      	movs	r0, r3
 8003a58:	f000 fa7a 	bl	8003f50 <SPI_EndRxTransaction>
 8003a5c:	1e03      	subs	r3, r0, #0
 8003a5e:	d002      	beq.n	8003a66 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2220      	movs	r2, #32
 8003a64:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d004      	beq.n	8003a78 <HAL_SPI_Receive+0x238>
  {
    errorcode = HAL_ERROR;
 8003a6e:	2317      	movs	r3, #23
 8003a70:	18fb      	adds	r3, r7, r3
 8003a72:	2201      	movs	r2, #1
 8003a74:	701a      	strb	r2, [r3, #0]
 8003a76:	e003      	b.n	8003a80 <HAL_SPI_Receive+0x240>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2251      	movs	r2, #81	; 0x51
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2250      	movs	r2, #80	; 0x50
 8003a84:	2100      	movs	r1, #0
 8003a86:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003a88:	2317      	movs	r3, #23
 8003a8a:	18fb      	adds	r3, r7, r3
 8003a8c:	781b      	ldrb	r3, [r3, #0]
}
 8003a8e:	0018      	movs	r0, r3
 8003a90:	46bd      	mov	sp, r7
 8003a92:	b007      	add	sp, #28
 8003a94:	bd90      	pop	{r4, r7, pc}
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	ffffbfff 	.word	0xffffbfff

08003a9c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b08c      	sub	sp, #48	; 0x30
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
 8003aa8:	001a      	movs	r2, r3
 8003aaa:	1cbb      	adds	r3, r7, #2
 8003aac:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ab2:	232b      	movs	r3, #43	; 0x2b
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2250      	movs	r2, #80	; 0x50
 8003abe:	5c9b      	ldrb	r3, [r3, r2]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_SPI_TransmitReceive+0x2c>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e1b0      	b.n	8003e2a <HAL_SPI_TransmitReceive+0x38e>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2250      	movs	r2, #80	; 0x50
 8003acc:	2101      	movs	r1, #1
 8003ace:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ad0:	f7fe f88c 	bl	8001bec <HAL_GetTick>
 8003ad4:	0003      	movs	r3, r0
 8003ad6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ad8:	2023      	movs	r0, #35	; 0x23
 8003ada:	183b      	adds	r3, r7, r0
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	2151      	movs	r1, #81	; 0x51
 8003ae0:	5c52      	ldrb	r2, [r2, r1]
 8003ae2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003aea:	231a      	movs	r3, #26
 8003aec:	18fb      	adds	r3, r7, r3
 8003aee:	1cba      	adds	r2, r7, #2
 8003af0:	8812      	ldrh	r2, [r2, #0]
 8003af2:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003af4:	183b      	adds	r3, r7, r0
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d011      	beq.n	8003b20 <HAL_SPI_TransmitReceive+0x84>
 8003afc:	69fa      	ldr	r2, [r7, #28]
 8003afe:	2382      	movs	r3, #130	; 0x82
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d107      	bne.n	8003b16 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d103      	bne.n	8003b16 <HAL_SPI_TransmitReceive+0x7a>
 8003b0e:	183b      	adds	r3, r7, r0
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d004      	beq.n	8003b20 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003b16:	232b      	movs	r3, #43	; 0x2b
 8003b18:	18fb      	adds	r3, r7, r3
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	701a      	strb	r2, [r3, #0]
    goto error;
 8003b1e:	e17d      	b.n	8003e1c <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d006      	beq.n	8003b34 <HAL_SPI_TransmitReceive+0x98>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_SPI_TransmitReceive+0x98>
 8003b2c:	1cbb      	adds	r3, r7, #2
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d104      	bne.n	8003b3e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003b34:	232b      	movs	r3, #43	; 0x2b
 8003b36:	18fb      	adds	r3, r7, r3
 8003b38:	2201      	movs	r2, #1
 8003b3a:	701a      	strb	r2, [r3, #0]
    goto error;
 8003b3c:	e16e      	b.n	8003e1c <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2251      	movs	r2, #81	; 0x51
 8003b42:	5c9b      	ldrb	r3, [r3, r2]
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d003      	beq.n	8003b52 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2251      	movs	r2, #81	; 0x51
 8003b4e:	2105      	movs	r1, #5
 8003b50:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	1cba      	adds	r2, r7, #2
 8003b62:	8812      	ldrh	r2, [r2, #0]
 8003b64:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	1cba      	adds	r2, r7, #2
 8003b6a:	8812      	ldrh	r2, [r2, #0]
 8003b6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	1cba      	adds	r2, r7, #2
 8003b78:	8812      	ldrh	r2, [r2, #0]
 8003b7a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	1cba      	adds	r2, r7, #2
 8003b80:	8812      	ldrh	r2, [r2, #0]
 8003b82:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2240      	movs	r2, #64	; 0x40
 8003b98:	4013      	ands	r3, r2
 8003b9a:	2b40      	cmp	r3, #64	; 0x40
 8003b9c:	d007      	beq.n	8003bae <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2140      	movs	r1, #64	; 0x40
 8003baa:	430a      	orrs	r2, r1
 8003bac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	2380      	movs	r3, #128	; 0x80
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d000      	beq.n	8003bbc <HAL_SPI_TransmitReceive+0x120>
 8003bba:	e07f      	b.n	8003cbc <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d005      	beq.n	8003bd0 <HAL_SPI_TransmitReceive+0x134>
 8003bc4:	231a      	movs	r3, #26
 8003bc6:	18fb      	adds	r3, r7, r3
 8003bc8:	881b      	ldrh	r3, [r3, #0]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d000      	beq.n	8003bd0 <HAL_SPI_TransmitReceive+0x134>
 8003bce:	e06a      	b.n	8003ca6 <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd4:	881a      	ldrh	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	1c9a      	adds	r2, r3, #2
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bf4:	e057      	b.n	8003ca6 <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	4013      	ands	r3, r2
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d11b      	bne.n	8003c3c <HAL_SPI_TransmitReceive+0x1a0>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d016      	beq.n	8003c3c <HAL_SPI_TransmitReceive+0x1a0>
 8003c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d113      	bne.n	8003c3c <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c18:	881a      	ldrh	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c24:	1c9a      	adds	r2, r3, #2
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	2201      	movs	r2, #1
 8003c44:	4013      	ands	r3, r2
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d119      	bne.n	8003c7e <HAL_SPI_TransmitReceive+0x1e2>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d014      	beq.n	8003c7e <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5e:	b292      	uxth	r2, r2
 8003c60:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c66:	1c9a      	adds	r2, r3, #2
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c7e:	f7fd ffb5 	bl	8001bec <HAL_GetTick>
 8003c82:	0002      	movs	r2, r0
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d80b      	bhi.n	8003ca6 <HAL_SPI_TransmitReceive+0x20a>
 8003c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c90:	3301      	adds	r3, #1
 8003c92:	d008      	beq.n	8003ca6 <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8003c94:	232b      	movs	r3, #43	; 0x2b
 8003c96:	18fb      	adds	r3, r7, r3
 8003c98:	2203      	movs	r2, #3
 8003c9a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2251      	movs	r2, #81	; 0x51
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	5499      	strb	r1, [r3, r2]
        goto error;
 8003ca4:	e0ba      	b.n	8003e1c <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1a2      	bne.n	8003bf6 <HAL_SPI_TransmitReceive+0x15a>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d19d      	bne.n	8003bf6 <HAL_SPI_TransmitReceive+0x15a>
 8003cba:	e083      	b.n	8003dc4 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_SPI_TransmitReceive+0x234>
 8003cc4:	231a      	movs	r3, #26
 8003cc6:	18fb      	adds	r3, r7, r3
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d000      	beq.n	8003cd0 <HAL_SPI_TransmitReceive+0x234>
 8003cce:	e06f      	b.n	8003db0 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	330c      	adds	r3, #12
 8003cda:	7812      	ldrb	r2, [r2, #0]
 8003cdc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cf6:	e05b      	b.n	8003db0 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	4013      	ands	r3, r2
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d11c      	bne.n	8003d40 <HAL_SPI_TransmitReceive+0x2a4>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d017      	beq.n	8003d40 <HAL_SPI_TransmitReceive+0x2a4>
 8003d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d114      	bne.n	8003d40 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	330c      	adds	r3, #12
 8003d20:	7812      	ldrb	r2, [r2, #0]
 8003d22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	2201      	movs	r2, #1
 8003d48:	4013      	ands	r3, r2
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d119      	bne.n	8003d82 <HAL_SPI_TransmitReceive+0x2e6>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d014      	beq.n	8003d82 <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d82:	f7fd ff33 	bl	8001bec <HAL_GetTick>
 8003d86:	0002      	movs	r2, r0
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d802      	bhi.n	8003d98 <HAL_SPI_TransmitReceive+0x2fc>
 8003d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d94:	3301      	adds	r3, #1
 8003d96:	d102      	bne.n	8003d9e <HAL_SPI_TransmitReceive+0x302>
 8003d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d108      	bne.n	8003db0 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 8003d9e:	232b      	movs	r3, #43	; 0x2b
 8003da0:	18fb      	adds	r3, r7, r3
 8003da2:	2203      	movs	r2, #3
 8003da4:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2251      	movs	r2, #81	; 0x51
 8003daa:	2101      	movs	r1, #1
 8003dac:	5499      	strb	r1, [r3, r2]
        goto error;
 8003dae:	e035      	b.n	8003e1c <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d19e      	bne.n	8003cf8 <HAL_SPI_TransmitReceive+0x25c>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d199      	bne.n	8003cf8 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	0018      	movs	r0, r3
 8003dcc:	f000 f92a 	bl	8004024 <SPI_EndRxTxTransaction>
 8003dd0:	1e03      	subs	r3, r0, #0
 8003dd2:	d007      	beq.n	8003de4 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8003dd4:	232b      	movs	r3, #43	; 0x2b
 8003dd6:	18fb      	adds	r3, r7, r3
 8003dd8:	2201      	movs	r2, #1
 8003dda:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2220      	movs	r2, #32
 8003de0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003de2:	e01b      	b.n	8003e1c <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10a      	bne.n	8003e02 <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d004      	beq.n	8003e14 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 8003e0a:	232b      	movs	r3, #43	; 0x2b
 8003e0c:	18fb      	adds	r3, r7, r3
 8003e0e:	2201      	movs	r2, #1
 8003e10:	701a      	strb	r2, [r3, #0]
 8003e12:	e003      	b.n	8003e1c <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2251      	movs	r2, #81	; 0x51
 8003e18:	2101      	movs	r1, #1
 8003e1a:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2250      	movs	r2, #80	; 0x50
 8003e20:	2100      	movs	r1, #0
 8003e22:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003e24:	232b      	movs	r3, #43	; 0x2b
 8003e26:	18fb      	adds	r3, r7, r3
 8003e28:	781b      	ldrb	r3, [r3, #0]
}
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	b00c      	add	sp, #48	; 0x30
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	603b      	str	r3, [r7, #0]
 8003e40:	1dfb      	adds	r3, r7, #7
 8003e42:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e44:	f7fd fed2 	bl	8001bec <HAL_GetTick>
 8003e48:	0002      	movs	r2, r0
 8003e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4c:	1a9b      	subs	r3, r3, r2
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	18d3      	adds	r3, r2, r3
 8003e52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e54:	f7fd feca 	bl	8001bec <HAL_GetTick>
 8003e58:	0003      	movs	r3, r0
 8003e5a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e5c:	4b3a      	ldr	r3, [pc, #232]	; (8003f48 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	015b      	lsls	r3, r3, #5
 8003e62:	0d1b      	lsrs	r3, r3, #20
 8003e64:	69fa      	ldr	r2, [r7, #28]
 8003e66:	4353      	muls	r3, r2
 8003e68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e6a:	e058      	b.n	8003f1e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	d055      	beq.n	8003f1e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e72:	f7fd febb 	bl	8001bec <HAL_GetTick>
 8003e76:	0002      	movs	r2, r0
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	69fa      	ldr	r2, [r7, #28]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d902      	bls.n	8003e88 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d142      	bne.n	8003f0e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	21e0      	movs	r1, #224	; 0xe0
 8003e94:	438a      	bics	r2, r1
 8003e96:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	2382      	movs	r3, #130	; 0x82
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d113      	bne.n	8003ecc <SPI_WaitFlagStateUntilTimeout+0x98>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	2380      	movs	r3, #128	; 0x80
 8003eaa:	021b      	lsls	r3, r3, #8
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d005      	beq.n	8003ebc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	2380      	movs	r3, #128	; 0x80
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d107      	bne.n	8003ecc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2140      	movs	r1, #64	; 0x40
 8003ec8:	438a      	bics	r2, r1
 8003eca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ed0:	2380      	movs	r3, #128	; 0x80
 8003ed2:	019b      	lsls	r3, r3, #6
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d110      	bne.n	8003efa <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	491a      	ldr	r1, [pc, #104]	; (8003f4c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003ee4:	400a      	ands	r2, r1
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2180      	movs	r1, #128	; 0x80
 8003ef4:	0189      	lsls	r1, r1, #6
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2251      	movs	r2, #81	; 0x51
 8003efe:	2101      	movs	r1, #1
 8003f00:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2250      	movs	r2, #80	; 0x50
 8003f06:	2100      	movs	r1, #0
 8003f08:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e017      	b.n	8003f3e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	4013      	ands	r3, r2
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	425a      	negs	r2, r3
 8003f2e:	4153      	adcs	r3, r2
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	001a      	movs	r2, r3
 8003f34:	1dfb      	adds	r3, r7, #7
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d197      	bne.n	8003e6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	0018      	movs	r0, r3
 8003f40:	46bd      	mov	sp, r7
 8003f42:	b008      	add	sp, #32
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	46c0      	nop			; (mov r8, r8)
 8003f48:	20000000 	.word	0x20000000
 8003f4c:	ffffdfff 	.word	0xffffdfff

08003f50 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af02      	add	r7, sp, #8
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	2382      	movs	r3, #130	; 0x82
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d113      	bne.n	8003f90 <SPI_EndRxTransaction+0x40>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	2380      	movs	r3, #128	; 0x80
 8003f6e:	021b      	lsls	r3, r3, #8
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d005      	beq.n	8003f80 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	2380      	movs	r3, #128	; 0x80
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d107      	bne.n	8003f90 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2140      	movs	r1, #64	; 0x40
 8003f8c:	438a      	bics	r2, r1
 8003f8e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	2382      	movs	r3, #130	; 0x82
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d12b      	bne.n	8003ff4 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	689a      	ldr	r2, [r3, #8]
 8003fa0:	2380      	movs	r3, #128	; 0x80
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d012      	beq.n	8003fce <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	0013      	movs	r3, r2
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	2180      	movs	r1, #128	; 0x80
 8003fb6:	f7ff ff3d 	bl	8003e34 <SPI_WaitFlagStateUntilTimeout>
 8003fba:	1e03      	subs	r3, r0, #0
 8003fbc:	d02d      	beq.n	800401a <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e026      	b.n	800401c <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	0013      	movs	r3, r2
 8003fd8:	2200      	movs	r2, #0
 8003fda:	2101      	movs	r1, #1
 8003fdc:	f7ff ff2a 	bl	8003e34 <SPI_WaitFlagStateUntilTimeout>
 8003fe0:	1e03      	subs	r3, r0, #0
 8003fe2:	d01a      	beq.n	800401a <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe8:	2220      	movs	r2, #32
 8003fea:	431a      	orrs	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e013      	b.n	800401c <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	0013      	movs	r3, r2
 8003ffe:	2200      	movs	r2, #0
 8004000:	2101      	movs	r1, #1
 8004002:	f7ff ff17 	bl	8003e34 <SPI_WaitFlagStateUntilTimeout>
 8004006:	1e03      	subs	r3, r0, #0
 8004008:	d007      	beq.n	800401a <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400e:	2220      	movs	r2, #32
 8004010:	431a      	orrs	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e000      	b.n	800401c <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	0018      	movs	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	b004      	add	sp, #16
 8004022:	bd80      	pop	{r7, pc}

08004024 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af02      	add	r7, sp, #8
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004030:	4b1d      	ldr	r3, [pc, #116]	; (80040a8 <SPI_EndRxTxTransaction+0x84>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	491d      	ldr	r1, [pc, #116]	; (80040ac <SPI_EndRxTxTransaction+0x88>)
 8004036:	0018      	movs	r0, r3
 8004038:	f7fc f866 	bl	8000108 <__udivsi3>
 800403c:	0003      	movs	r3, r0
 800403e:	001a      	movs	r2, r3
 8004040:	0013      	movs	r3, r2
 8004042:	015b      	lsls	r3, r3, #5
 8004044:	1a9b      	subs	r3, r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	189b      	adds	r3, r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	2382      	movs	r3, #130	; 0x82
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	429a      	cmp	r2, r3
 8004058:	d112      	bne.n	8004080 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	0013      	movs	r3, r2
 8004064:	2200      	movs	r2, #0
 8004066:	2180      	movs	r1, #128	; 0x80
 8004068:	f7ff fee4 	bl	8003e34 <SPI_WaitFlagStateUntilTimeout>
 800406c:	1e03      	subs	r3, r0, #0
 800406e:	d016      	beq.n	800409e <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004074:	2220      	movs	r2, #32
 8004076:	431a      	orrs	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e00f      	b.n	80040a0 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	3b01      	subs	r3, #1
 800408a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	2280      	movs	r2, #128	; 0x80
 8004094:	4013      	ands	r3, r2
 8004096:	2b80      	cmp	r3, #128	; 0x80
 8004098:	d0f2      	beq.n	8004080 <SPI_EndRxTxTransaction+0x5c>
 800409a:	e000      	b.n	800409e <SPI_EndRxTxTransaction+0x7a>
        break;
 800409c:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	0018      	movs	r0, r3
 80040a2:	46bd      	mov	sp, r7
 80040a4:	b006      	add	sp, #24
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	20000000 	.word	0x20000000
 80040ac:	016e3600 	.word	0x016e3600

080040b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e032      	b.n	8004128 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2239      	movs	r2, #57	; 0x39
 80040c6:	5c9b      	ldrb	r3, [r3, r2]
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d107      	bne.n	80040de <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2238      	movs	r2, #56	; 0x38
 80040d2:	2100      	movs	r1, #0
 80040d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	0018      	movs	r0, r3
 80040da:	f7fd fc2d 	bl	8001938 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2239      	movs	r2, #57	; 0x39
 80040e2:	2102      	movs	r1, #2
 80040e4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3304      	adds	r3, #4
 80040ee:	0019      	movs	r1, r3
 80040f0:	0010      	movs	r0, r2
 80040f2:	f000 f9ff 	bl	80044f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	223e      	movs	r2, #62	; 0x3e
 80040fa:	2101      	movs	r1, #1
 80040fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	223a      	movs	r2, #58	; 0x3a
 8004102:	2101      	movs	r1, #1
 8004104:	5499      	strb	r1, [r3, r2]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	223b      	movs	r2, #59	; 0x3b
 800410a:	2101      	movs	r1, #1
 800410c:	5499      	strb	r1, [r3, r2]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	223c      	movs	r2, #60	; 0x3c
 8004112:	2101      	movs	r1, #1
 8004114:	5499      	strb	r1, [r3, r2]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	223d      	movs	r2, #61	; 0x3d
 800411a:	2101      	movs	r1, #1
 800411c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2239      	movs	r2, #57	; 0x39
 8004122:	2101      	movs	r1, #1
 8004124:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	0018      	movs	r0, r3
 800412a:	46bd      	mov	sp, r7
 800412c:	b002      	add	sp, #8
 800412e:	bd80      	pop	{r7, pc}

08004130 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e032      	b.n	80041a8 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2239      	movs	r2, #57	; 0x39
 8004146:	5c9b      	ldrb	r3, [r3, r2]
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d107      	bne.n	800415e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2238      	movs	r2, #56	; 0x38
 8004152:	2100      	movs	r1, #0
 8004154:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	0018      	movs	r0, r3
 800415a:	f000 f829 	bl	80041b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2239      	movs	r2, #57	; 0x39
 8004162:	2102      	movs	r1, #2
 8004164:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	3304      	adds	r3, #4
 800416e:	0019      	movs	r1, r3
 8004170:	0010      	movs	r0, r2
 8004172:	f000 f9bf 	bl	80044f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	223e      	movs	r2, #62	; 0x3e
 800417a:	2101      	movs	r1, #1
 800417c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	223a      	movs	r2, #58	; 0x3a
 8004182:	2101      	movs	r1, #1
 8004184:	5499      	strb	r1, [r3, r2]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	223b      	movs	r2, #59	; 0x3b
 800418a:	2101      	movs	r1, #1
 800418c:	5499      	strb	r1, [r3, r2]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	223c      	movs	r2, #60	; 0x3c
 8004192:	2101      	movs	r1, #1
 8004194:	5499      	strb	r1, [r3, r2]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	223d      	movs	r2, #61	; 0x3d
 800419a:	2101      	movs	r1, #1
 800419c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2239      	movs	r2, #57	; 0x39
 80041a2:	2101      	movs	r1, #1
 80041a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	0018      	movs	r0, r3
 80041aa:	46bd      	mov	sp, r7
 80041ac:	b002      	add	sp, #8
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041b8:	46c0      	nop			; (mov r8, r8)
 80041ba:	46bd      	mov	sp, r7
 80041bc:	b002      	add	sp, #8
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041cc:	2317      	movs	r3, #23
 80041ce:	18fb      	adds	r3, r7, r3
 80041d0:	2200      	movs	r2, #0
 80041d2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2238      	movs	r2, #56	; 0x38
 80041d8:	5c9b      	ldrb	r3, [r3, r2]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d101      	bne.n	80041e2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80041de:	2302      	movs	r3, #2
 80041e0:	e0ad      	b.n	800433e <HAL_TIM_PWM_ConfigChannel+0x17e>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2238      	movs	r2, #56	; 0x38
 80041e6:	2101      	movs	r1, #1
 80041e8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b0c      	cmp	r3, #12
 80041ee:	d100      	bne.n	80041f2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80041f0:	e076      	b.n	80042e0 <HAL_TIM_PWM_ConfigChannel+0x120>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b0c      	cmp	r3, #12
 80041f6:	d900      	bls.n	80041fa <HAL_TIM_PWM_ConfigChannel+0x3a>
 80041f8:	e095      	b.n	8004326 <HAL_TIM_PWM_ConfigChannel+0x166>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b08      	cmp	r3, #8
 80041fe:	d04e      	beq.n	800429e <HAL_TIM_PWM_ConfigChannel+0xde>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b08      	cmp	r3, #8
 8004204:	d900      	bls.n	8004208 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004206:	e08e      	b.n	8004326 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_TIM_PWM_ConfigChannel+0x56>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b04      	cmp	r3, #4
 8004212:	d021      	beq.n	8004258 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004214:	e087      	b.n	8004326 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	0011      	movs	r1, r2
 800421e:	0018      	movs	r0, r3
 8004220:	f000 f9b2 	bl	8004588 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	699a      	ldr	r2, [r3, #24]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2108      	movs	r1, #8
 8004230:	430a      	orrs	r2, r1
 8004232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2104      	movs	r1, #4
 8004240:	438a      	bics	r2, r1
 8004242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6999      	ldr	r1, [r3, #24]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	619a      	str	r2, [r3, #24]
      break;
 8004256:	e06b      	b.n	8004330 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	0011      	movs	r1, r2
 8004260:	0018      	movs	r0, r3
 8004262:	f000 f9cd 	bl	8004600 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	699a      	ldr	r2, [r3, #24]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2180      	movs	r1, #128	; 0x80
 8004272:	0109      	lsls	r1, r1, #4
 8004274:	430a      	orrs	r2, r1
 8004276:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699a      	ldr	r2, [r3, #24]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4931      	ldr	r1, [pc, #196]	; (8004348 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004284:	400a      	ands	r2, r1
 8004286:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6999      	ldr	r1, [r3, #24]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	021a      	lsls	r2, r3, #8
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	619a      	str	r2, [r3, #24]
      break;
 800429c:	e048      	b.n	8004330 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	0011      	movs	r1, r2
 80042a6:	0018      	movs	r0, r3
 80042a8:	f000 f9ec 	bl	8004684 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	69da      	ldr	r2, [r3, #28]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2108      	movs	r1, #8
 80042b8:	430a      	orrs	r2, r1
 80042ba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	69da      	ldr	r2, [r3, #28]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2104      	movs	r1, #4
 80042c8:	438a      	bics	r2, r1
 80042ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	69d9      	ldr	r1, [r3, #28]
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	61da      	str	r2, [r3, #28]
      break;
 80042de:	e027      	b.n	8004330 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	0011      	movs	r1, r2
 80042e8:	0018      	movs	r0, r3
 80042ea:	f000 fa0b 	bl	8004704 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	69da      	ldr	r2, [r3, #28]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2180      	movs	r1, #128	; 0x80
 80042fa:	0109      	lsls	r1, r1, #4
 80042fc:	430a      	orrs	r2, r1
 80042fe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	69da      	ldr	r2, [r3, #28]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	490f      	ldr	r1, [pc, #60]	; (8004348 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800430c:	400a      	ands	r2, r1
 800430e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	69d9      	ldr	r1, [r3, #28]
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	021a      	lsls	r2, r3, #8
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	61da      	str	r2, [r3, #28]
      break;
 8004324:	e004      	b.n	8004330 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004326:	2317      	movs	r3, #23
 8004328:	18fb      	adds	r3, r7, r3
 800432a:	2201      	movs	r2, #1
 800432c:	701a      	strb	r2, [r3, #0]
      break;
 800432e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2238      	movs	r2, #56	; 0x38
 8004334:	2100      	movs	r1, #0
 8004336:	5499      	strb	r1, [r3, r2]

  return status;
 8004338:	2317      	movs	r3, #23
 800433a:	18fb      	adds	r3, r7, r3
 800433c:	781b      	ldrb	r3, [r3, #0]
}
 800433e:	0018      	movs	r0, r3
 8004340:	46bd      	mov	sp, r7
 8004342:	b006      	add	sp, #24
 8004344:	bd80      	pop	{r7, pc}
 8004346:	46c0      	nop			; (mov r8, r8)
 8004348:	fffffbff 	.word	0xfffffbff

0800434c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004356:	230f      	movs	r3, #15
 8004358:	18fb      	adds	r3, r7, r3
 800435a:	2200      	movs	r2, #0
 800435c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2238      	movs	r2, #56	; 0x38
 8004362:	5c9b      	ldrb	r3, [r3, r2]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_TIM_ConfigClockSource+0x20>
 8004368:	2302      	movs	r3, #2
 800436a:	e0bc      	b.n	80044e6 <HAL_TIM_ConfigClockSource+0x19a>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2238      	movs	r2, #56	; 0x38
 8004370:	2101      	movs	r1, #1
 8004372:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2239      	movs	r2, #57	; 0x39
 8004378:	2102      	movs	r1, #2
 800437a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2277      	movs	r2, #119	; 0x77
 8004388:	4393      	bics	r3, r2
 800438a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4a58      	ldr	r2, [pc, #352]	; (80044f0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004390:	4013      	ands	r3, r2
 8004392:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2280      	movs	r2, #128	; 0x80
 80043a2:	0192      	lsls	r2, r2, #6
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d040      	beq.n	800442a <HAL_TIM_ConfigClockSource+0xde>
 80043a8:	2280      	movs	r2, #128	; 0x80
 80043aa:	0192      	lsls	r2, r2, #6
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d900      	bls.n	80043b2 <HAL_TIM_ConfigClockSource+0x66>
 80043b0:	e088      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x178>
 80043b2:	2280      	movs	r2, #128	; 0x80
 80043b4:	0152      	lsls	r2, r2, #5
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d100      	bne.n	80043bc <HAL_TIM_ConfigClockSource+0x70>
 80043ba:	e088      	b.n	80044ce <HAL_TIM_ConfigClockSource+0x182>
 80043bc:	2280      	movs	r2, #128	; 0x80
 80043be:	0152      	lsls	r2, r2, #5
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d900      	bls.n	80043c6 <HAL_TIM_ConfigClockSource+0x7a>
 80043c4:	e07e      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x178>
 80043c6:	2b70      	cmp	r3, #112	; 0x70
 80043c8:	d018      	beq.n	80043fc <HAL_TIM_ConfigClockSource+0xb0>
 80043ca:	d900      	bls.n	80043ce <HAL_TIM_ConfigClockSource+0x82>
 80043cc:	e07a      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x178>
 80043ce:	2b60      	cmp	r3, #96	; 0x60
 80043d0:	d04f      	beq.n	8004472 <HAL_TIM_ConfigClockSource+0x126>
 80043d2:	d900      	bls.n	80043d6 <HAL_TIM_ConfigClockSource+0x8a>
 80043d4:	e076      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x178>
 80043d6:	2b50      	cmp	r3, #80	; 0x50
 80043d8:	d03b      	beq.n	8004452 <HAL_TIM_ConfigClockSource+0x106>
 80043da:	d900      	bls.n	80043de <HAL_TIM_ConfigClockSource+0x92>
 80043dc:	e072      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x178>
 80043de:	2b40      	cmp	r3, #64	; 0x40
 80043e0:	d057      	beq.n	8004492 <HAL_TIM_ConfigClockSource+0x146>
 80043e2:	d900      	bls.n	80043e6 <HAL_TIM_ConfigClockSource+0x9a>
 80043e4:	e06e      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x178>
 80043e6:	2b30      	cmp	r3, #48	; 0x30
 80043e8:	d063      	beq.n	80044b2 <HAL_TIM_ConfigClockSource+0x166>
 80043ea:	d86b      	bhi.n	80044c4 <HAL_TIM_ConfigClockSource+0x178>
 80043ec:	2b20      	cmp	r3, #32
 80043ee:	d060      	beq.n	80044b2 <HAL_TIM_ConfigClockSource+0x166>
 80043f0:	d868      	bhi.n	80044c4 <HAL_TIM_ConfigClockSource+0x178>
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d05d      	beq.n	80044b2 <HAL_TIM_ConfigClockSource+0x166>
 80043f6:	2b10      	cmp	r3, #16
 80043f8:	d05b      	beq.n	80044b2 <HAL_TIM_ConfigClockSource+0x166>
 80043fa:	e063      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800440c:	f000 fa3a 	bl	8004884 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2277      	movs	r2, #119	; 0x77
 800441c:	4313      	orrs	r3, r2
 800441e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	609a      	str	r2, [r3, #8]
      break;
 8004428:	e052      	b.n	80044d0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800443a:	f000 fa23 	bl	8004884 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2180      	movs	r1, #128	; 0x80
 800444a:	01c9      	lsls	r1, r1, #7
 800444c:	430a      	orrs	r2, r1
 800444e:	609a      	str	r2, [r3, #8]
      break;
 8004450:	e03e      	b.n	80044d0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800445e:	001a      	movs	r2, r3
 8004460:	f000 f996 	bl	8004790 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2150      	movs	r1, #80	; 0x50
 800446a:	0018      	movs	r0, r3
 800446c:	f000 f9f0 	bl	8004850 <TIM_ITRx_SetConfig>
      break;
 8004470:	e02e      	b.n	80044d0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800447e:	001a      	movs	r2, r3
 8004480:	f000 f9b4 	bl	80047ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2160      	movs	r1, #96	; 0x60
 800448a:	0018      	movs	r0, r3
 800448c:	f000 f9e0 	bl	8004850 <TIM_ITRx_SetConfig>
      break;
 8004490:	e01e      	b.n	80044d0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800449e:	001a      	movs	r2, r3
 80044a0:	f000 f976 	bl	8004790 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2140      	movs	r1, #64	; 0x40
 80044aa:	0018      	movs	r0, r3
 80044ac:	f000 f9d0 	bl	8004850 <TIM_ITRx_SetConfig>
      break;
 80044b0:	e00e      	b.n	80044d0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	0019      	movs	r1, r3
 80044bc:	0010      	movs	r0, r2
 80044be:	f000 f9c7 	bl	8004850 <TIM_ITRx_SetConfig>
      break;
 80044c2:	e005      	b.n	80044d0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80044c4:	230f      	movs	r3, #15
 80044c6:	18fb      	adds	r3, r7, r3
 80044c8:	2201      	movs	r2, #1
 80044ca:	701a      	strb	r2, [r3, #0]
      break;
 80044cc:	e000      	b.n	80044d0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80044ce:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2239      	movs	r2, #57	; 0x39
 80044d4:	2101      	movs	r1, #1
 80044d6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2238      	movs	r2, #56	; 0x38
 80044dc:	2100      	movs	r1, #0
 80044de:	5499      	strb	r1, [r3, r2]

  return status;
 80044e0:	230f      	movs	r3, #15
 80044e2:	18fb      	adds	r3, r7, r3
 80044e4:	781b      	ldrb	r3, [r3, #0]
}
 80044e6:	0018      	movs	r0, r3
 80044e8:	46bd      	mov	sp, r7
 80044ea:	b004      	add	sp, #16
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	46c0      	nop			; (mov r8, r8)
 80044f0:	ffff00ff 	.word	0xffff00ff

080044f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	2380      	movs	r3, #128	; 0x80
 8004508:	05db      	lsls	r3, r3, #23
 800450a:	429a      	cmp	r2, r3
 800450c:	d003      	beq.n	8004516 <TIM_Base_SetConfig+0x22>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a1b      	ldr	r2, [pc, #108]	; (8004580 <TIM_Base_SetConfig+0x8c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d108      	bne.n	8004528 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2270      	movs	r2, #112	; 0x70
 800451a:	4393      	bics	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	4313      	orrs	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	2380      	movs	r3, #128	; 0x80
 800452c:	05db      	lsls	r3, r3, #23
 800452e:	429a      	cmp	r2, r3
 8004530:	d003      	beq.n	800453a <TIM_Base_SetConfig+0x46>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a12      	ldr	r2, [pc, #72]	; (8004580 <TIM_Base_SetConfig+0x8c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d108      	bne.n	800454c <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4a11      	ldr	r2, [pc, #68]	; (8004584 <TIM_Base_SetConfig+0x90>)
 800453e:	4013      	ands	r3, r2
 8004540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	4313      	orrs	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2280      	movs	r2, #128	; 0x80
 8004550:	4393      	bics	r3, r2
 8004552:	001a      	movs	r2, r3
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	689a      	ldr	r2, [r3, #8]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	615a      	str	r2, [r3, #20]
}
 8004578:	46c0      	nop			; (mov r8, r8)
 800457a:	46bd      	mov	sp, r7
 800457c:	b004      	add	sp, #16
 800457e:	bd80      	pop	{r7, pc}
 8004580:	40010800 	.word	0x40010800
 8004584:	fffffcff 	.word	0xfffffcff

08004588 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	2201      	movs	r2, #1
 8004598:	4393      	bics	r3, r2
 800459a:	001a      	movs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2270      	movs	r2, #112	; 0x70
 80045b6:	4393      	bics	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2203      	movs	r2, #3
 80045be:	4393      	bics	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	2202      	movs	r2, #2
 80045d0:	4393      	bics	r3, r2
 80045d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	4313      	orrs	r3, r2
 80045dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	621a      	str	r2, [r3, #32]
}
 80045f8:	46c0      	nop			; (mov r8, r8)
 80045fa:	46bd      	mov	sp, r7
 80045fc:	b006      	add	sp, #24
 80045fe:	bd80      	pop	{r7, pc}

08004600 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	2210      	movs	r2, #16
 8004610:	4393      	bics	r3, r2
 8004612:	001a      	movs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4a13      	ldr	r2, [pc, #76]	; (800467c <TIM_OC2_SetConfig+0x7c>)
 800462e:	4013      	ands	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4a12      	ldr	r2, [pc, #72]	; (8004680 <TIM_OC2_SetConfig+0x80>)
 8004636:	4013      	ands	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	021b      	lsls	r3, r3, #8
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	2220      	movs	r2, #32
 800464a:	4393      	bics	r3, r2
 800464c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	4313      	orrs	r3, r2
 8004658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	621a      	str	r2, [r3, #32]
}
 8004674:	46c0      	nop			; (mov r8, r8)
 8004676:	46bd      	mov	sp, r7
 8004678:	b006      	add	sp, #24
 800467a:	bd80      	pop	{r7, pc}
 800467c:	ffff8fff 	.word	0xffff8fff
 8004680:	fffffcff 	.word	0xfffffcff

08004684 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	4a1a      	ldr	r2, [pc, #104]	; (80046fc <TIM_OC3_SetConfig+0x78>)
 8004694:	401a      	ands	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2270      	movs	r2, #112	; 0x70
 80046b0:	4393      	bics	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2203      	movs	r2, #3
 80046b8:	4393      	bics	r3, r2
 80046ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	4a0d      	ldr	r2, [pc, #52]	; (8004700 <TIM_OC3_SetConfig+0x7c>)
 80046ca:	4013      	ands	r3, r2
 80046cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	021b      	lsls	r3, r3, #8
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	621a      	str	r2, [r3, #32]
}
 80046f4:	46c0      	nop			; (mov r8, r8)
 80046f6:	46bd      	mov	sp, r7
 80046f8:	b006      	add	sp, #24
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	fffffeff 	.word	0xfffffeff
 8004700:	fffffdff 	.word	0xfffffdff

08004704 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	4a1b      	ldr	r2, [pc, #108]	; (8004780 <TIM_OC4_SetConfig+0x7c>)
 8004714:	401a      	ands	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4a15      	ldr	r2, [pc, #84]	; (8004784 <TIM_OC4_SetConfig+0x80>)
 8004730:	4013      	ands	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4a14      	ldr	r2, [pc, #80]	; (8004788 <TIM_OC4_SetConfig+0x84>)
 8004738:	4013      	ands	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	021b      	lsls	r3, r3, #8
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	4313      	orrs	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	4a10      	ldr	r2, [pc, #64]	; (800478c <TIM_OC4_SetConfig+0x88>)
 800474c:	4013      	ands	r3, r2
 800474e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	031b      	lsls	r3, r3, #12
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	4313      	orrs	r3, r2
 800475a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	621a      	str	r2, [r3, #32]
}
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	46bd      	mov	sp, r7
 800477a:	b006      	add	sp, #24
 800477c:	bd80      	pop	{r7, pc}
 800477e:	46c0      	nop			; (mov r8, r8)
 8004780:	ffffefff 	.word	0xffffefff
 8004784:	ffff8fff 	.word	0xffff8fff
 8004788:	fffffcff 	.word	0xfffffcff
 800478c:	ffffdfff 	.word	0xffffdfff

08004790 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	2201      	movs	r2, #1
 80047a8:	4393      	bics	r3, r2
 80047aa:	001a      	movs	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	22f0      	movs	r2, #240	; 0xf0
 80047ba:	4393      	bics	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	220a      	movs	r2, #10
 80047cc:	4393      	bics	r3, r2
 80047ce:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	621a      	str	r2, [r3, #32]
}
 80047e4:	46c0      	nop			; (mov r8, r8)
 80047e6:	46bd      	mov	sp, r7
 80047e8:	b006      	add	sp, #24
 80047ea:	bd80      	pop	{r7, pc}

080047ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	2210      	movs	r2, #16
 80047fe:	4393      	bics	r3, r2
 8004800:	001a      	movs	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	4a0d      	ldr	r2, [pc, #52]	; (800484c <TIM_TI2_ConfigInputStage+0x60>)
 8004816:	4013      	ands	r3, r2
 8004818:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	031b      	lsls	r3, r3, #12
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	4313      	orrs	r3, r2
 8004822:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	22a0      	movs	r2, #160	; 0xa0
 8004828:	4393      	bics	r3, r2
 800482a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	011b      	lsls	r3, r3, #4
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	4313      	orrs	r3, r2
 8004834:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	621a      	str	r2, [r3, #32]
}
 8004842:	46c0      	nop			; (mov r8, r8)
 8004844:	46bd      	mov	sp, r7
 8004846:	b006      	add	sp, #24
 8004848:	bd80      	pop	{r7, pc}
 800484a:	46c0      	nop			; (mov r8, r8)
 800484c:	ffff0fff 	.word	0xffff0fff

08004850 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2270      	movs	r2, #112	; 0x70
 8004864:	4393      	bics	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4313      	orrs	r3, r2
 800486e:	2207      	movs	r2, #7
 8004870:	4313      	orrs	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	609a      	str	r2, [r3, #8]
}
 800487a:	46c0      	nop			; (mov r8, r8)
 800487c:	46bd      	mov	sp, r7
 800487e:	b004      	add	sp, #16
 8004880:	bd80      	pop	{r7, pc}
	...

08004884 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
 8004890:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	4a09      	ldr	r2, [pc, #36]	; (80048c0 <TIM_ETR_SetConfig+0x3c>)
 800489c:	4013      	ands	r3, r2
 800489e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	021a      	lsls	r2, r3, #8
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	431a      	orrs	r2, r3
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	609a      	str	r2, [r3, #8]
}
 80048b8:	46c0      	nop			; (mov r8, r8)
 80048ba:	46bd      	mov	sp, r7
 80048bc:	b006      	add	sp, #24
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	ffff00ff 	.word	0xffff00ff

080048c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2238      	movs	r2, #56	; 0x38
 80048d2:	5c9b      	ldrb	r3, [r3, r2]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048d8:	2302      	movs	r3, #2
 80048da:	e03d      	b.n	8004958 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2238      	movs	r2, #56	; 0x38
 80048e0:	2101      	movs	r1, #1
 80048e2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2239      	movs	r2, #57	; 0x39
 80048e8:	2102      	movs	r1, #2
 80048ea:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2270      	movs	r2, #112	; 0x70
 8004900:	4393      	bics	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	4313      	orrs	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	2380      	movs	r3, #128	; 0x80
 800491c:	05db      	lsls	r3, r3, #23
 800491e:	429a      	cmp	r2, r3
 8004920:	d004      	beq.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a0e      	ldr	r2, [pc, #56]	; (8004960 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d10c      	bne.n	8004946 <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2280      	movs	r2, #128	; 0x80
 8004930:	4393      	bics	r3, r2
 8004932:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	4313      	orrs	r3, r2
 800493c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2239      	movs	r2, #57	; 0x39
 800494a:	2101      	movs	r1, #1
 800494c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2238      	movs	r2, #56	; 0x38
 8004952:	2100      	movs	r1, #0
 8004954:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	0018      	movs	r0, r3
 800495a:	46bd      	mov	sp, r7
 800495c:	b004      	add	sp, #16
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40010800 	.word	0x40010800

08004964 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e044      	b.n	8004a00 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800497a:	2b00      	cmp	r3, #0
 800497c:	d107      	bne.n	800498e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2278      	movs	r2, #120	; 0x78
 8004982:	2100      	movs	r1, #0
 8004984:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	0018      	movs	r0, r3
 800498a:	f7fd f827 	bl	80019dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2224      	movs	r2, #36	; 0x24
 8004992:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2101      	movs	r1, #1
 80049a0:	438a      	bics	r2, r1
 80049a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	0018      	movs	r0, r3
 80049a8:	f000 f830 	bl	8004a0c <UART_SetConfig>
 80049ac:	0003      	movs	r3, r0
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d101      	bne.n	80049b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e024      	b.n	8004a00 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	0018      	movs	r0, r3
 80049c2:	f000 fa6d 	bl	8004ea0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	490d      	ldr	r1, [pc, #52]	; (8004a08 <HAL_UART_Init+0xa4>)
 80049d2:	400a      	ands	r2, r1
 80049d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	212a      	movs	r1, #42	; 0x2a
 80049e2:	438a      	bics	r2, r1
 80049e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2101      	movs	r1, #1
 80049f2:	430a      	orrs	r2, r1
 80049f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	0018      	movs	r0, r3
 80049fa:	f000 fb05 	bl	8005008 <UART_CheckIdleState>
 80049fe:	0003      	movs	r3, r0
}
 8004a00:	0018      	movs	r0, r3
 8004a02:	46bd      	mov	sp, r7
 8004a04:	b002      	add	sp, #8
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	ffffb7ff 	.word	0xffffb7ff

08004a0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a0c:	b5b0      	push	{r4, r5, r7, lr}
 8004a0e:	b08e      	sub	sp, #56	; 0x38
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a14:	231a      	movs	r3, #26
 8004a16:	2218      	movs	r2, #24
 8004a18:	189b      	adds	r3, r3, r2
 8004a1a:	19db      	adds	r3, r3, r7
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4ab4      	ldr	r2, [pc, #720]	; (8004d10 <UART_SetConfig+0x304>)
 8004a40:	4013      	ands	r3, r2
 8004a42:	0019      	movs	r1, r3
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	4aaf      	ldr	r2, [pc, #700]	; (8004d14 <UART_SetConfig+0x308>)
 8004a56:	4013      	ands	r3, r2
 8004a58:	0019      	movs	r1, r3
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4aa9      	ldr	r2, [pc, #676]	; (8004d18 <UART_SetConfig+0x30c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d004      	beq.n	8004a80 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	4aa5      	ldr	r2, [pc, #660]	; (8004d1c <UART_SetConfig+0x310>)
 8004a88:	4013      	ands	r3, r2
 8004a8a:	0019      	movs	r1, r3
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a92:	430a      	orrs	r2, r1
 8004a94:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4aa1      	ldr	r2, [pc, #644]	; (8004d20 <UART_SetConfig+0x314>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d131      	bne.n	8004b04 <UART_SetConfig+0xf8>
 8004aa0:	4ba0      	ldr	r3, [pc, #640]	; (8004d24 <UART_SetConfig+0x318>)
 8004aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aa4:	220c      	movs	r2, #12
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	2b0c      	cmp	r3, #12
 8004aaa:	d01d      	beq.n	8004ae8 <UART_SetConfig+0xdc>
 8004aac:	d823      	bhi.n	8004af6 <UART_SetConfig+0xea>
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	d00c      	beq.n	8004acc <UART_SetConfig+0xc0>
 8004ab2:	d820      	bhi.n	8004af6 <UART_SetConfig+0xea>
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d002      	beq.n	8004abe <UART_SetConfig+0xb2>
 8004ab8:	2b04      	cmp	r3, #4
 8004aba:	d00e      	beq.n	8004ada <UART_SetConfig+0xce>
 8004abc:	e01b      	b.n	8004af6 <UART_SetConfig+0xea>
 8004abe:	231b      	movs	r3, #27
 8004ac0:	2218      	movs	r2, #24
 8004ac2:	189b      	adds	r3, r3, r2
 8004ac4:	19db      	adds	r3, r3, r7
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	701a      	strb	r2, [r3, #0]
 8004aca:	e065      	b.n	8004b98 <UART_SetConfig+0x18c>
 8004acc:	231b      	movs	r3, #27
 8004ace:	2218      	movs	r2, #24
 8004ad0:	189b      	adds	r3, r3, r2
 8004ad2:	19db      	adds	r3, r3, r7
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	701a      	strb	r2, [r3, #0]
 8004ad8:	e05e      	b.n	8004b98 <UART_SetConfig+0x18c>
 8004ada:	231b      	movs	r3, #27
 8004adc:	2218      	movs	r2, #24
 8004ade:	189b      	adds	r3, r3, r2
 8004ae0:	19db      	adds	r3, r3, r7
 8004ae2:	2204      	movs	r2, #4
 8004ae4:	701a      	strb	r2, [r3, #0]
 8004ae6:	e057      	b.n	8004b98 <UART_SetConfig+0x18c>
 8004ae8:	231b      	movs	r3, #27
 8004aea:	2218      	movs	r2, #24
 8004aec:	189b      	adds	r3, r3, r2
 8004aee:	19db      	adds	r3, r3, r7
 8004af0:	2208      	movs	r2, #8
 8004af2:	701a      	strb	r2, [r3, #0]
 8004af4:	e050      	b.n	8004b98 <UART_SetConfig+0x18c>
 8004af6:	231b      	movs	r3, #27
 8004af8:	2218      	movs	r2, #24
 8004afa:	189b      	adds	r3, r3, r2
 8004afc:	19db      	adds	r3, r3, r7
 8004afe:	2210      	movs	r2, #16
 8004b00:	701a      	strb	r2, [r3, #0]
 8004b02:	e049      	b.n	8004b98 <UART_SetConfig+0x18c>
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a83      	ldr	r2, [pc, #524]	; (8004d18 <UART_SetConfig+0x30c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d13e      	bne.n	8004b8c <UART_SetConfig+0x180>
 8004b0e:	4b85      	ldr	r3, [pc, #532]	; (8004d24 <UART_SetConfig+0x318>)
 8004b10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b12:	23c0      	movs	r3, #192	; 0xc0
 8004b14:	011b      	lsls	r3, r3, #4
 8004b16:	4013      	ands	r3, r2
 8004b18:	22c0      	movs	r2, #192	; 0xc0
 8004b1a:	0112      	lsls	r2, r2, #4
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d027      	beq.n	8004b70 <UART_SetConfig+0x164>
 8004b20:	22c0      	movs	r2, #192	; 0xc0
 8004b22:	0112      	lsls	r2, r2, #4
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d82a      	bhi.n	8004b7e <UART_SetConfig+0x172>
 8004b28:	2280      	movs	r2, #128	; 0x80
 8004b2a:	0112      	lsls	r2, r2, #4
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d011      	beq.n	8004b54 <UART_SetConfig+0x148>
 8004b30:	2280      	movs	r2, #128	; 0x80
 8004b32:	0112      	lsls	r2, r2, #4
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d822      	bhi.n	8004b7e <UART_SetConfig+0x172>
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d004      	beq.n	8004b46 <UART_SetConfig+0x13a>
 8004b3c:	2280      	movs	r2, #128	; 0x80
 8004b3e:	00d2      	lsls	r2, r2, #3
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d00e      	beq.n	8004b62 <UART_SetConfig+0x156>
 8004b44:	e01b      	b.n	8004b7e <UART_SetConfig+0x172>
 8004b46:	231b      	movs	r3, #27
 8004b48:	2218      	movs	r2, #24
 8004b4a:	189b      	adds	r3, r3, r2
 8004b4c:	19db      	adds	r3, r3, r7
 8004b4e:	2200      	movs	r2, #0
 8004b50:	701a      	strb	r2, [r3, #0]
 8004b52:	e021      	b.n	8004b98 <UART_SetConfig+0x18c>
 8004b54:	231b      	movs	r3, #27
 8004b56:	2218      	movs	r2, #24
 8004b58:	189b      	adds	r3, r3, r2
 8004b5a:	19db      	adds	r3, r3, r7
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	701a      	strb	r2, [r3, #0]
 8004b60:	e01a      	b.n	8004b98 <UART_SetConfig+0x18c>
 8004b62:	231b      	movs	r3, #27
 8004b64:	2218      	movs	r2, #24
 8004b66:	189b      	adds	r3, r3, r2
 8004b68:	19db      	adds	r3, r3, r7
 8004b6a:	2204      	movs	r2, #4
 8004b6c:	701a      	strb	r2, [r3, #0]
 8004b6e:	e013      	b.n	8004b98 <UART_SetConfig+0x18c>
 8004b70:	231b      	movs	r3, #27
 8004b72:	2218      	movs	r2, #24
 8004b74:	189b      	adds	r3, r3, r2
 8004b76:	19db      	adds	r3, r3, r7
 8004b78:	2208      	movs	r2, #8
 8004b7a:	701a      	strb	r2, [r3, #0]
 8004b7c:	e00c      	b.n	8004b98 <UART_SetConfig+0x18c>
 8004b7e:	231b      	movs	r3, #27
 8004b80:	2218      	movs	r2, #24
 8004b82:	189b      	adds	r3, r3, r2
 8004b84:	19db      	adds	r3, r3, r7
 8004b86:	2210      	movs	r2, #16
 8004b88:	701a      	strb	r2, [r3, #0]
 8004b8a:	e005      	b.n	8004b98 <UART_SetConfig+0x18c>
 8004b8c:	231b      	movs	r3, #27
 8004b8e:	2218      	movs	r2, #24
 8004b90:	189b      	adds	r3, r3, r2
 8004b92:	19db      	adds	r3, r3, r7
 8004b94:	2210      	movs	r2, #16
 8004b96:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a5e      	ldr	r2, [pc, #376]	; (8004d18 <UART_SetConfig+0x30c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d000      	beq.n	8004ba4 <UART_SetConfig+0x198>
 8004ba2:	e084      	b.n	8004cae <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ba4:	231b      	movs	r3, #27
 8004ba6:	2218      	movs	r2, #24
 8004ba8:	189b      	adds	r3, r3, r2
 8004baa:	19db      	adds	r3, r3, r7
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	d01d      	beq.n	8004bee <UART_SetConfig+0x1e2>
 8004bb2:	dc20      	bgt.n	8004bf6 <UART_SetConfig+0x1ea>
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d015      	beq.n	8004be4 <UART_SetConfig+0x1d8>
 8004bb8:	dc1d      	bgt.n	8004bf6 <UART_SetConfig+0x1ea>
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <UART_SetConfig+0x1b8>
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d005      	beq.n	8004bce <UART_SetConfig+0x1c2>
 8004bc2:	e018      	b.n	8004bf6 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bc4:	f7fe fafe 	bl	80031c4 <HAL_RCC_GetPCLK1Freq>
 8004bc8:	0003      	movs	r3, r0
 8004bca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004bcc:	e01c      	b.n	8004c08 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bce:	4b55      	ldr	r3, [pc, #340]	; (8004d24 <UART_SetConfig+0x318>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2210      	movs	r2, #16
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	d002      	beq.n	8004bde <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004bd8:	4b53      	ldr	r3, [pc, #332]	; (8004d28 <UART_SetConfig+0x31c>)
 8004bda:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004bdc:	e014      	b.n	8004c08 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8004bde:	4b53      	ldr	r3, [pc, #332]	; (8004d2c <UART_SetConfig+0x320>)
 8004be0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004be2:	e011      	b.n	8004c08 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004be4:	f7fe fa3e 	bl	8003064 <HAL_RCC_GetSysClockFreq>
 8004be8:	0003      	movs	r3, r0
 8004bea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004bec:	e00c      	b.n	8004c08 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bee:	2380      	movs	r3, #128	; 0x80
 8004bf0:	021b      	lsls	r3, r3, #8
 8004bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004bf4:	e008      	b.n	8004c08 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004bfa:	231a      	movs	r3, #26
 8004bfc:	2218      	movs	r2, #24
 8004bfe:	189b      	adds	r3, r3, r2
 8004c00:	19db      	adds	r3, r3, r7
 8004c02:	2201      	movs	r2, #1
 8004c04:	701a      	strb	r2, [r3, #0]
        break;
 8004c06:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d100      	bne.n	8004c10 <UART_SetConfig+0x204>
 8004c0e:	e12f      	b.n	8004e70 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	0013      	movs	r3, r2
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	189b      	adds	r3, r3, r2
 8004c1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d305      	bcc.n	8004c2c <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d906      	bls.n	8004c3a <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8004c2c:	231a      	movs	r3, #26
 8004c2e:	2218      	movs	r2, #24
 8004c30:	189b      	adds	r3, r3, r2
 8004c32:	19db      	adds	r3, r3, r7
 8004c34:	2201      	movs	r2, #1
 8004c36:	701a      	strb	r2, [r3, #0]
 8004c38:	e11a      	b.n	8004e70 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3c:	613b      	str	r3, [r7, #16]
 8004c3e:	2300      	movs	r3, #0
 8004c40:	617b      	str	r3, [r7, #20]
 8004c42:	6939      	ldr	r1, [r7, #16]
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	000b      	movs	r3, r1
 8004c48:	0e1b      	lsrs	r3, r3, #24
 8004c4a:	0010      	movs	r0, r2
 8004c4c:	0205      	lsls	r5, r0, #8
 8004c4e:	431d      	orrs	r5, r3
 8004c50:	000b      	movs	r3, r1
 8004c52:	021c      	lsls	r4, r3, #8
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	085b      	lsrs	r3, r3, #1
 8004c5a:	60bb      	str	r3, [r7, #8]
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	68b8      	ldr	r0, [r7, #8]
 8004c62:	68f9      	ldr	r1, [r7, #12]
 8004c64:	1900      	adds	r0, r0, r4
 8004c66:	4169      	adcs	r1, r5
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	603b      	str	r3, [r7, #0]
 8004c6e:	2300      	movs	r3, #0
 8004c70:	607b      	str	r3, [r7, #4]
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f7fb fad3 	bl	8000220 <__aeabi_uldivmod>
 8004c7a:	0002      	movs	r2, r0
 8004c7c:	000b      	movs	r3, r1
 8004c7e:	0013      	movs	r3, r2
 8004c80:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c84:	23c0      	movs	r3, #192	; 0xc0
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d309      	bcc.n	8004ca0 <UART_SetConfig+0x294>
 8004c8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c8e:	2380      	movs	r3, #128	; 0x80
 8004c90:	035b      	lsls	r3, r3, #13
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d204      	bcs.n	8004ca0 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c9c:	60da      	str	r2, [r3, #12]
 8004c9e:	e0e7      	b.n	8004e70 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8004ca0:	231a      	movs	r3, #26
 8004ca2:	2218      	movs	r2, #24
 8004ca4:	189b      	adds	r3, r3, r2
 8004ca6:	19db      	adds	r3, r3, r7
 8004ca8:	2201      	movs	r2, #1
 8004caa:	701a      	strb	r2, [r3, #0]
 8004cac:	e0e0      	b.n	8004e70 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	69da      	ldr	r2, [r3, #28]
 8004cb2:	2380      	movs	r3, #128	; 0x80
 8004cb4:	021b      	lsls	r3, r3, #8
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d000      	beq.n	8004cbc <UART_SetConfig+0x2b0>
 8004cba:	e082      	b.n	8004dc2 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8004cbc:	231b      	movs	r3, #27
 8004cbe:	2218      	movs	r2, #24
 8004cc0:	189b      	adds	r3, r3, r2
 8004cc2:	19db      	adds	r3, r3, r7
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	2b08      	cmp	r3, #8
 8004cc8:	d834      	bhi.n	8004d34 <UART_SetConfig+0x328>
 8004cca:	009a      	lsls	r2, r3, #2
 8004ccc:	4b18      	ldr	r3, [pc, #96]	; (8004d30 <UART_SetConfig+0x324>)
 8004cce:	18d3      	adds	r3, r2, r3
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cd4:	f7fe fa76 	bl	80031c4 <HAL_RCC_GetPCLK1Freq>
 8004cd8:	0003      	movs	r3, r0
 8004cda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004cdc:	e033      	b.n	8004d46 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cde:	f7fe fa87 	bl	80031f0 <HAL_RCC_GetPCLK2Freq>
 8004ce2:	0003      	movs	r3, r0
 8004ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ce6:	e02e      	b.n	8004d46 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ce8:	4b0e      	ldr	r3, [pc, #56]	; (8004d24 <UART_SetConfig+0x318>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2210      	movs	r2, #16
 8004cee:	4013      	ands	r3, r2
 8004cf0:	d002      	beq.n	8004cf8 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004cf2:	4b0d      	ldr	r3, [pc, #52]	; (8004d28 <UART_SetConfig+0x31c>)
 8004cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004cf6:	e026      	b.n	8004d46 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8004cf8:	4b0c      	ldr	r3, [pc, #48]	; (8004d2c <UART_SetConfig+0x320>)
 8004cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004cfc:	e023      	b.n	8004d46 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cfe:	f7fe f9b1 	bl	8003064 <HAL_RCC_GetSysClockFreq>
 8004d02:	0003      	movs	r3, r0
 8004d04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d06:	e01e      	b.n	8004d46 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d08:	2380      	movs	r3, #128	; 0x80
 8004d0a:	021b      	lsls	r3, r3, #8
 8004d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d0e:	e01a      	b.n	8004d46 <UART_SetConfig+0x33a>
 8004d10:	efff69f3 	.word	0xefff69f3
 8004d14:	ffffcfff 	.word	0xffffcfff
 8004d18:	40004800 	.word	0x40004800
 8004d1c:	fffff4ff 	.word	0xfffff4ff
 8004d20:	40004400 	.word	0x40004400
 8004d24:	40021000 	.word	0x40021000
 8004d28:	003d0900 	.word	0x003d0900
 8004d2c:	00f42400 	.word	0x00f42400
 8004d30:	080053c8 	.word	0x080053c8
      default:
        pclk = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004d38:	231a      	movs	r3, #26
 8004d3a:	2218      	movs	r2, #24
 8004d3c:	189b      	adds	r3, r3, r2
 8004d3e:	19db      	adds	r3, r3, r7
 8004d40:	2201      	movs	r2, #1
 8004d42:	701a      	strb	r2, [r3, #0]
        break;
 8004d44:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d100      	bne.n	8004d4e <UART_SetConfig+0x342>
 8004d4c:	e090      	b.n	8004e70 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d50:	005a      	lsls	r2, r3, #1
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	085b      	lsrs	r3, r3, #1
 8004d58:	18d2      	adds	r2, r2, r3
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	0019      	movs	r1, r3
 8004d60:	0010      	movs	r0, r2
 8004d62:	f7fb f9d1 	bl	8000108 <__udivsi3>
 8004d66:	0003      	movs	r3, r0
 8004d68:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6c:	2b0f      	cmp	r3, #15
 8004d6e:	d921      	bls.n	8004db4 <UART_SetConfig+0x3a8>
 8004d70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d72:	2380      	movs	r3, #128	; 0x80
 8004d74:	025b      	lsls	r3, r3, #9
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d21c      	bcs.n	8004db4 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	200e      	movs	r0, #14
 8004d80:	2418      	movs	r4, #24
 8004d82:	1903      	adds	r3, r0, r4
 8004d84:	19db      	adds	r3, r3, r7
 8004d86:	210f      	movs	r1, #15
 8004d88:	438a      	bics	r2, r1
 8004d8a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8e:	085b      	lsrs	r3, r3, #1
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	2207      	movs	r2, #7
 8004d94:	4013      	ands	r3, r2
 8004d96:	b299      	uxth	r1, r3
 8004d98:	1903      	adds	r3, r0, r4
 8004d9a:	19db      	adds	r3, r3, r7
 8004d9c:	1902      	adds	r2, r0, r4
 8004d9e:	19d2      	adds	r2, r2, r7
 8004da0:	8812      	ldrh	r2, [r2, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	1902      	adds	r2, r0, r4
 8004dac:	19d2      	adds	r2, r2, r7
 8004dae:	8812      	ldrh	r2, [r2, #0]
 8004db0:	60da      	str	r2, [r3, #12]
 8004db2:	e05d      	b.n	8004e70 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8004db4:	231a      	movs	r3, #26
 8004db6:	2218      	movs	r2, #24
 8004db8:	189b      	adds	r3, r3, r2
 8004dba:	19db      	adds	r3, r3, r7
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	701a      	strb	r2, [r3, #0]
 8004dc0:	e056      	b.n	8004e70 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004dc2:	231b      	movs	r3, #27
 8004dc4:	2218      	movs	r2, #24
 8004dc6:	189b      	adds	r3, r3, r2
 8004dc8:	19db      	adds	r3, r3, r7
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d822      	bhi.n	8004e16 <UART_SetConfig+0x40a>
 8004dd0:	009a      	lsls	r2, r3, #2
 8004dd2:	4b2f      	ldr	r3, [pc, #188]	; (8004e90 <UART_SetConfig+0x484>)
 8004dd4:	18d3      	adds	r3, r2, r3
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dda:	f7fe f9f3 	bl	80031c4 <HAL_RCC_GetPCLK1Freq>
 8004dde:	0003      	movs	r3, r0
 8004de0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004de2:	e021      	b.n	8004e28 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004de4:	f7fe fa04 	bl	80031f0 <HAL_RCC_GetPCLK2Freq>
 8004de8:	0003      	movs	r3, r0
 8004dea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004dec:	e01c      	b.n	8004e28 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dee:	4b29      	ldr	r3, [pc, #164]	; (8004e94 <UART_SetConfig+0x488>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2210      	movs	r2, #16
 8004df4:	4013      	ands	r3, r2
 8004df6:	d002      	beq.n	8004dfe <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004df8:	4b27      	ldr	r3, [pc, #156]	; (8004e98 <UART_SetConfig+0x48c>)
 8004dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004dfc:	e014      	b.n	8004e28 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8004dfe:	4b27      	ldr	r3, [pc, #156]	; (8004e9c <UART_SetConfig+0x490>)
 8004e00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e02:	e011      	b.n	8004e28 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e04:	f7fe f92e 	bl	8003064 <HAL_RCC_GetSysClockFreq>
 8004e08:	0003      	movs	r3, r0
 8004e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e0c:	e00c      	b.n	8004e28 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e0e:	2380      	movs	r3, #128	; 0x80
 8004e10:	021b      	lsls	r3, r3, #8
 8004e12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e14:	e008      	b.n	8004e28 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8004e16:	2300      	movs	r3, #0
 8004e18:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004e1a:	231a      	movs	r3, #26
 8004e1c:	2218      	movs	r2, #24
 8004e1e:	189b      	adds	r3, r3, r2
 8004e20:	19db      	adds	r3, r3, r7
 8004e22:	2201      	movs	r2, #1
 8004e24:	701a      	strb	r2, [r3, #0]
        break;
 8004e26:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d020      	beq.n	8004e70 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	085a      	lsrs	r2, r3, #1
 8004e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e36:	18d2      	adds	r2, r2, r3
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	0019      	movs	r1, r3
 8004e3e:	0010      	movs	r0, r2
 8004e40:	f7fb f962 	bl	8000108 <__udivsi3>
 8004e44:	0003      	movs	r3, r0
 8004e46:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4a:	2b0f      	cmp	r3, #15
 8004e4c:	d90a      	bls.n	8004e64 <UART_SetConfig+0x458>
 8004e4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e50:	2380      	movs	r3, #128	; 0x80
 8004e52:	025b      	lsls	r3, r3, #9
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d205      	bcs.n	8004e64 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	60da      	str	r2, [r3, #12]
 8004e62:	e005      	b.n	8004e70 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8004e64:	231a      	movs	r3, #26
 8004e66:	2218      	movs	r2, #24
 8004e68:	189b      	adds	r3, r3, r2
 8004e6a:	19db      	adds	r3, r3, r7
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	2200      	movs	r2, #0
 8004e74:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004e7c:	231a      	movs	r3, #26
 8004e7e:	2218      	movs	r2, #24
 8004e80:	189b      	adds	r3, r3, r2
 8004e82:	19db      	adds	r3, r3, r7
 8004e84:	781b      	ldrb	r3, [r3, #0]
}
 8004e86:	0018      	movs	r0, r3
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	b00e      	add	sp, #56	; 0x38
 8004e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8004e8e:	46c0      	nop			; (mov r8, r8)
 8004e90:	080053ec 	.word	0x080053ec
 8004e94:	40021000 	.word	0x40021000
 8004e98:	003d0900 	.word	0x003d0900
 8004e9c:	00f42400 	.word	0x00f42400

08004ea0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	2201      	movs	r2, #1
 8004eae:	4013      	ands	r3, r2
 8004eb0:	d00b      	beq.n	8004eca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	4a4a      	ldr	r2, [pc, #296]	; (8004fe4 <UART_AdvFeatureConfig+0x144>)
 8004eba:	4013      	ands	r3, r2
 8004ebc:	0019      	movs	r1, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	2202      	movs	r2, #2
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	d00b      	beq.n	8004eec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	4a43      	ldr	r2, [pc, #268]	; (8004fe8 <UART_AdvFeatureConfig+0x148>)
 8004edc:	4013      	ands	r3, r2
 8004ede:	0019      	movs	r1, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	2204      	movs	r2, #4
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	d00b      	beq.n	8004f0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	4a3b      	ldr	r2, [pc, #236]	; (8004fec <UART_AdvFeatureConfig+0x14c>)
 8004efe:	4013      	ands	r3, r2
 8004f00:	0019      	movs	r1, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	2208      	movs	r2, #8
 8004f14:	4013      	ands	r3, r2
 8004f16:	d00b      	beq.n	8004f30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	4a34      	ldr	r2, [pc, #208]	; (8004ff0 <UART_AdvFeatureConfig+0x150>)
 8004f20:	4013      	ands	r3, r2
 8004f22:	0019      	movs	r1, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	2210      	movs	r2, #16
 8004f36:	4013      	ands	r3, r2
 8004f38:	d00b      	beq.n	8004f52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	4a2c      	ldr	r2, [pc, #176]	; (8004ff4 <UART_AdvFeatureConfig+0x154>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	0019      	movs	r1, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	2220      	movs	r2, #32
 8004f58:	4013      	ands	r3, r2
 8004f5a:	d00b      	beq.n	8004f74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	4a25      	ldr	r2, [pc, #148]	; (8004ff8 <UART_AdvFeatureConfig+0x158>)
 8004f64:	4013      	ands	r3, r2
 8004f66:	0019      	movs	r1, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	2240      	movs	r2, #64	; 0x40
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	d01d      	beq.n	8004fba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	4a1d      	ldr	r2, [pc, #116]	; (8004ffc <UART_AdvFeatureConfig+0x15c>)
 8004f86:	4013      	ands	r3, r2
 8004f88:	0019      	movs	r1, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f9a:	2380      	movs	r3, #128	; 0x80
 8004f9c:	035b      	lsls	r3, r3, #13
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d10b      	bne.n	8004fba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	4a15      	ldr	r2, [pc, #84]	; (8005000 <UART_AdvFeatureConfig+0x160>)
 8004faa:	4013      	ands	r3, r2
 8004fac:	0019      	movs	r1, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	2280      	movs	r2, #128	; 0x80
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	d00b      	beq.n	8004fdc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	4a0e      	ldr	r2, [pc, #56]	; (8005004 <UART_AdvFeatureConfig+0x164>)
 8004fcc:	4013      	ands	r3, r2
 8004fce:	0019      	movs	r1, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	605a      	str	r2, [r3, #4]
  }
}
 8004fdc:	46c0      	nop			; (mov r8, r8)
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	b002      	add	sp, #8
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	fffdffff 	.word	0xfffdffff
 8004fe8:	fffeffff 	.word	0xfffeffff
 8004fec:	fffbffff 	.word	0xfffbffff
 8004ff0:	ffff7fff 	.word	0xffff7fff
 8004ff4:	ffffefff 	.word	0xffffefff
 8004ff8:	ffffdfff 	.word	0xffffdfff
 8004ffc:	ffefffff 	.word	0xffefffff
 8005000:	ff9fffff 	.word	0xff9fffff
 8005004:	fff7ffff 	.word	0xfff7ffff

08005008 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b092      	sub	sp, #72	; 0x48
 800500c:	af02      	add	r7, sp, #8
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2284      	movs	r2, #132	; 0x84
 8005014:	2100      	movs	r1, #0
 8005016:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005018:	f7fc fde8 	bl	8001bec <HAL_GetTick>
 800501c:	0003      	movs	r3, r0
 800501e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2208      	movs	r2, #8
 8005028:	4013      	ands	r3, r2
 800502a:	2b08      	cmp	r3, #8
 800502c:	d12c      	bne.n	8005088 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800502e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005030:	2280      	movs	r2, #128	; 0x80
 8005032:	0391      	lsls	r1, r2, #14
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	4a46      	ldr	r2, [pc, #280]	; (8005150 <UART_CheckIdleState+0x148>)
 8005038:	9200      	str	r2, [sp, #0]
 800503a:	2200      	movs	r2, #0
 800503c:	f000 f88c 	bl	8005158 <UART_WaitOnFlagUntilTimeout>
 8005040:	1e03      	subs	r3, r0, #0
 8005042:	d021      	beq.n	8005088 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005044:	f3ef 8310 	mrs	r3, PRIMASK
 8005048:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800504c:	63bb      	str	r3, [r7, #56]	; 0x38
 800504e:	2301      	movs	r3, #1
 8005050:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005054:	f383 8810 	msr	PRIMASK, r3
}
 8005058:	46c0      	nop			; (mov r8, r8)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2180      	movs	r1, #128	; 0x80
 8005066:	438a      	bics	r2, r1
 8005068:	601a      	str	r2, [r3, #0]
 800506a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800506e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005070:	f383 8810 	msr	PRIMASK, r3
}
 8005074:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2220      	movs	r2, #32
 800507a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2278      	movs	r2, #120	; 0x78
 8005080:	2100      	movs	r1, #0
 8005082:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e05f      	b.n	8005148 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2204      	movs	r2, #4
 8005090:	4013      	ands	r3, r2
 8005092:	2b04      	cmp	r3, #4
 8005094:	d146      	bne.n	8005124 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005098:	2280      	movs	r2, #128	; 0x80
 800509a:	03d1      	lsls	r1, r2, #15
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	4a2c      	ldr	r2, [pc, #176]	; (8005150 <UART_CheckIdleState+0x148>)
 80050a0:	9200      	str	r2, [sp, #0]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f000 f858 	bl	8005158 <UART_WaitOnFlagUntilTimeout>
 80050a8:	1e03      	subs	r3, r0, #0
 80050aa:	d03b      	beq.n	8005124 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050ac:	f3ef 8310 	mrs	r3, PRIMASK
 80050b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80050b2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050b4:	637b      	str	r3, [r7, #52]	; 0x34
 80050b6:	2301      	movs	r3, #1
 80050b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	f383 8810 	msr	PRIMASK, r3
}
 80050c0:	46c0      	nop			; (mov r8, r8)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4921      	ldr	r1, [pc, #132]	; (8005154 <UART_CheckIdleState+0x14c>)
 80050ce:	400a      	ands	r2, r1
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f383 8810 	msr	PRIMASK, r3
}
 80050dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050de:	f3ef 8310 	mrs	r3, PRIMASK
 80050e2:	61bb      	str	r3, [r7, #24]
  return(result);
 80050e4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e6:	633b      	str	r3, [r7, #48]	; 0x30
 80050e8:	2301      	movs	r3, #1
 80050ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	f383 8810 	msr	PRIMASK, r3
}
 80050f2:	46c0      	nop			; (mov r8, r8)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689a      	ldr	r2, [r3, #8]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2101      	movs	r1, #1
 8005100:	438a      	bics	r2, r1
 8005102:	609a      	str	r2, [r3, #8]
 8005104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005106:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	f383 8810 	msr	PRIMASK, r3
}
 800510e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2280      	movs	r2, #128	; 0x80
 8005114:	2120      	movs	r1, #32
 8005116:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2278      	movs	r2, #120	; 0x78
 800511c:	2100      	movs	r1, #0
 800511e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e011      	b.n	8005148 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2220      	movs	r2, #32
 8005128:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2280      	movs	r2, #128	; 0x80
 800512e:	2120      	movs	r1, #32
 8005130:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2278      	movs	r2, #120	; 0x78
 8005142:	2100      	movs	r1, #0
 8005144:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	0018      	movs	r0, r3
 800514a:	46bd      	mov	sp, r7
 800514c:	b010      	add	sp, #64	; 0x40
 800514e:	bd80      	pop	{r7, pc}
 8005150:	01ffffff 	.word	0x01ffffff
 8005154:	fffffedf 	.word	0xfffffedf

08005158 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	603b      	str	r3, [r7, #0]
 8005164:	1dfb      	adds	r3, r7, #7
 8005166:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005168:	e04b      	b.n	8005202 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	3301      	adds	r3, #1
 800516e:	d048      	beq.n	8005202 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005170:	f7fc fd3c 	bl	8001bec <HAL_GetTick>
 8005174:	0002      	movs	r2, r0
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	429a      	cmp	r2, r3
 800517e:	d302      	bcc.n	8005186 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e04b      	b.n	8005222 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2204      	movs	r2, #4
 8005192:	4013      	ands	r3, r2
 8005194:	d035      	beq.n	8005202 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	2208      	movs	r2, #8
 800519e:	4013      	ands	r3, r2
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d111      	bne.n	80051c8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2208      	movs	r2, #8
 80051aa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	0018      	movs	r0, r3
 80051b0:	f000 f83c 	bl	800522c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2284      	movs	r2, #132	; 0x84
 80051b8:	2108      	movs	r1, #8
 80051ba:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2278      	movs	r2, #120	; 0x78
 80051c0:	2100      	movs	r1, #0
 80051c2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e02c      	b.n	8005222 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	69da      	ldr	r2, [r3, #28]
 80051ce:	2380      	movs	r3, #128	; 0x80
 80051d0:	011b      	lsls	r3, r3, #4
 80051d2:	401a      	ands	r2, r3
 80051d4:	2380      	movs	r3, #128	; 0x80
 80051d6:	011b      	lsls	r3, r3, #4
 80051d8:	429a      	cmp	r2, r3
 80051da:	d112      	bne.n	8005202 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2280      	movs	r2, #128	; 0x80
 80051e2:	0112      	lsls	r2, r2, #4
 80051e4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	0018      	movs	r0, r3
 80051ea:	f000 f81f 	bl	800522c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2284      	movs	r2, #132	; 0x84
 80051f2:	2120      	movs	r1, #32
 80051f4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2278      	movs	r2, #120	; 0x78
 80051fa:	2100      	movs	r1, #0
 80051fc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e00f      	b.n	8005222 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	69db      	ldr	r3, [r3, #28]
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	4013      	ands	r3, r2
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	425a      	negs	r2, r3
 8005212:	4153      	adcs	r3, r2
 8005214:	b2db      	uxtb	r3, r3
 8005216:	001a      	movs	r2, r3
 8005218:	1dfb      	adds	r3, r7, #7
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	429a      	cmp	r2, r3
 800521e:	d0a4      	beq.n	800516a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	0018      	movs	r0, r3
 8005224:	46bd      	mov	sp, r7
 8005226:	b004      	add	sp, #16
 8005228:	bd80      	pop	{r7, pc}
	...

0800522c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b08e      	sub	sp, #56	; 0x38
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005234:	f3ef 8310 	mrs	r3, PRIMASK
 8005238:	617b      	str	r3, [r7, #20]
  return(result);
 800523a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800523c:	637b      	str	r3, [r7, #52]	; 0x34
 800523e:	2301      	movs	r3, #1
 8005240:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	f383 8810 	msr	PRIMASK, r3
}
 8005248:	46c0      	nop			; (mov r8, r8)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4926      	ldr	r1, [pc, #152]	; (80052f0 <UART_EndRxTransfer+0xc4>)
 8005256:	400a      	ands	r2, r1
 8005258:	601a      	str	r2, [r3, #0]
 800525a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800525c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	f383 8810 	msr	PRIMASK, r3
}
 8005264:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005266:	f3ef 8310 	mrs	r3, PRIMASK
 800526a:	623b      	str	r3, [r7, #32]
  return(result);
 800526c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800526e:	633b      	str	r3, [r7, #48]	; 0x30
 8005270:	2301      	movs	r3, #1
 8005272:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	f383 8810 	msr	PRIMASK, r3
}
 800527a:	46c0      	nop			; (mov r8, r8)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	689a      	ldr	r2, [r3, #8]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2101      	movs	r1, #1
 8005288:	438a      	bics	r2, r1
 800528a:	609a      	str	r2, [r3, #8]
 800528c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005292:	f383 8810 	msr	PRIMASK, r3
}
 8005296:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800529c:	2b01      	cmp	r3, #1
 800529e:	d118      	bne.n	80052d2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052a0:	f3ef 8310 	mrs	r3, PRIMASK
 80052a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80052a6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052aa:	2301      	movs	r3, #1
 80052ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f383 8810 	msr	PRIMASK, r3
}
 80052b4:	46c0      	nop			; (mov r8, r8)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2110      	movs	r1, #16
 80052c2:	438a      	bics	r2, r1
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	f383 8810 	msr	PRIMASK, r3
}
 80052d0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2280      	movs	r2, #128	; 0x80
 80052d6:	2120      	movs	r1, #32
 80052d8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80052e6:	46c0      	nop			; (mov r8, r8)
 80052e8:	46bd      	mov	sp, r7
 80052ea:	b00e      	add	sp, #56	; 0x38
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	46c0      	nop			; (mov r8, r8)
 80052f0:	fffffedf 	.word	0xfffffedf

080052f4 <memset>:
 80052f4:	0003      	movs	r3, r0
 80052f6:	1882      	adds	r2, r0, r2
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d100      	bne.n	80052fe <memset+0xa>
 80052fc:	4770      	bx	lr
 80052fe:	7019      	strb	r1, [r3, #0]
 8005300:	3301      	adds	r3, #1
 8005302:	e7f9      	b.n	80052f8 <memset+0x4>

08005304 <__libc_init_array>:
 8005304:	b570      	push	{r4, r5, r6, lr}
 8005306:	2600      	movs	r6, #0
 8005308:	4c0c      	ldr	r4, [pc, #48]	; (800533c <__libc_init_array+0x38>)
 800530a:	4d0d      	ldr	r5, [pc, #52]	; (8005340 <__libc_init_array+0x3c>)
 800530c:	1b64      	subs	r4, r4, r5
 800530e:	10a4      	asrs	r4, r4, #2
 8005310:	42a6      	cmp	r6, r4
 8005312:	d109      	bne.n	8005328 <__libc_init_array+0x24>
 8005314:	2600      	movs	r6, #0
 8005316:	f000 f819 	bl	800534c <_init>
 800531a:	4c0a      	ldr	r4, [pc, #40]	; (8005344 <__libc_init_array+0x40>)
 800531c:	4d0a      	ldr	r5, [pc, #40]	; (8005348 <__libc_init_array+0x44>)
 800531e:	1b64      	subs	r4, r4, r5
 8005320:	10a4      	asrs	r4, r4, #2
 8005322:	42a6      	cmp	r6, r4
 8005324:	d105      	bne.n	8005332 <__libc_init_array+0x2e>
 8005326:	bd70      	pop	{r4, r5, r6, pc}
 8005328:	00b3      	lsls	r3, r6, #2
 800532a:	58eb      	ldr	r3, [r5, r3]
 800532c:	4798      	blx	r3
 800532e:	3601      	adds	r6, #1
 8005330:	e7ee      	b.n	8005310 <__libc_init_array+0xc>
 8005332:	00b3      	lsls	r3, r6, #2
 8005334:	58eb      	ldr	r3, [r5, r3]
 8005336:	4798      	blx	r3
 8005338:	3601      	adds	r6, #1
 800533a:	e7f2      	b.n	8005322 <__libc_init_array+0x1e>
 800533c:	08005418 	.word	0x08005418
 8005340:	08005418 	.word	0x08005418
 8005344:	0800541c 	.word	0x0800541c
 8005348:	08005418 	.word	0x08005418

0800534c <_init>:
 800534c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534e:	46c0      	nop			; (mov r8, r8)
 8005350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005352:	bc08      	pop	{r3}
 8005354:	469e      	mov	lr, r3
 8005356:	4770      	bx	lr

08005358 <_fini>:
 8005358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535a:	46c0      	nop			; (mov r8, r8)
 800535c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800535e:	bc08      	pop	{r3}
 8005360:	469e      	mov	lr, r3
 8005362:	4770      	bx	lr


22-008_Voiture_RC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007890  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  08007950  08007950  00008950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bec  08007bec  0000908c  2**0
                  CONTENTS
  4 .ARM          00000008  08007bec  08007bec  00008bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bf4  08007bf4  0000908c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bf4  08007bf4  00008bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bf8  08007bf8  00008bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08007bfc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e4  2000008c  08007c88  0000908c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000770  08007c88  00009770  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000169ef  00000000  00000000  000090b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003541  00000000  00000000  0001faa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  00022fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010e4  00000000  00000000  00024590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001403d  00000000  00000000  00025674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ba4c  00000000  00000000  000396b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079719  00000000  00000000  000550fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce816  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005374  00000000  00000000  000ce85c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000d3bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000008c 	.word	0x2000008c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007938 	.word	0x08007938

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000090 	.word	0x20000090
 8000104:	08007938 	.word	0x08007938

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	@ (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4699      	mov	r9, r3
 800028a:	0c03      	lsrs	r3, r0, #16
 800028c:	469c      	mov	ip, r3
 800028e:	0413      	lsls	r3, r2, #16
 8000290:	4647      	mov	r7, r8
 8000292:	0c1b      	lsrs	r3, r3, #16
 8000294:	001d      	movs	r5, r3
 8000296:	000e      	movs	r6, r1
 8000298:	4661      	mov	r1, ip
 800029a:	0404      	lsls	r4, r0, #16
 800029c:	0c24      	lsrs	r4, r4, #16
 800029e:	b580      	push	{r7, lr}
 80002a0:	0007      	movs	r7, r0
 80002a2:	0c10      	lsrs	r0, r2, #16
 80002a4:	434b      	muls	r3, r1
 80002a6:	4365      	muls	r5, r4
 80002a8:	4341      	muls	r1, r0
 80002aa:	4360      	muls	r0, r4
 80002ac:	0c2c      	lsrs	r4, r5, #16
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	1824      	adds	r4, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	42a3      	cmp	r3, r4
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	@ 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4356      	muls	r6, r2
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	042d      	lsls	r5, r5, #16
 80002ca:	0c2d      	lsrs	r5, r5, #16
 80002cc:	1989      	adds	r1, r1, r6
 80002ce:	4463      	add	r3, ip
 80002d0:	0424      	lsls	r4, r4, #16
 80002d2:	1960      	adds	r0, r4, r5
 80002d4:	18c9      	adds	r1, r1, r3
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			@ (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8ba 	bl	8000478 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8b5 	bl	8000478 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	d434      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000316:	469b      	mov	fp, r3
 8000318:	4653      	mov	r3, sl
 800031a:	465a      	mov	r2, fp
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83b      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e079      	b.n	8000426 <__udivmoddi4+0x146>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e076      	b.n	800042c <__udivmoddi4+0x14c>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e029      	b.n	80003ac <__udivmoddi4+0xcc>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	469b      	mov	fp, r3
 8000384:	2320      	movs	r3, #32
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	4652      	mov	r2, sl
 800038a:	40da      	lsrs	r2, r3
 800038c:	4641      	mov	r1, r8
 800038e:	0013      	movs	r3, r2
 8000390:	464a      	mov	r2, r9
 8000392:	408a      	lsls	r2, r1
 8000394:	0017      	movs	r7, r2
 8000396:	4642      	mov	r2, r8
 8000398:	431f      	orrs	r7, r3
 800039a:	4653      	mov	r3, sl
 800039c:	4093      	lsls	r3, r2
 800039e:	001e      	movs	r6, r3
 80003a0:	42af      	cmp	r7, r5
 80003a2:	d9c3      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a4:	2200      	movs	r2, #0
 80003a6:	2300      	movs	r3, #0
 80003a8:	9200      	str	r2, [sp, #0]
 80003aa:	9301      	str	r3, [sp, #4]
 80003ac:	4643      	mov	r3, r8
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0d8      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b2:	07fb      	lsls	r3, r7, #31
 80003b4:	0872      	lsrs	r2, r6, #1
 80003b6:	431a      	orrs	r2, r3
 80003b8:	4646      	mov	r6, r8
 80003ba:	087b      	lsrs	r3, r7, #1
 80003bc:	e00e      	b.n	80003dc <__udivmoddi4+0xfc>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d101      	bne.n	80003c6 <__udivmoddi4+0xe6>
 80003c2:	42a2      	cmp	r2, r4
 80003c4:	d80c      	bhi.n	80003e0 <__udivmoddi4+0x100>
 80003c6:	1aa4      	subs	r4, r4, r2
 80003c8:	419d      	sbcs	r5, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2100      	movs	r1, #0
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1824      	adds	r4, r4, r0
 80003d6:	414d      	adcs	r5, r1
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d006      	beq.n	80003ea <__udivmoddi4+0x10a>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d9ee      	bls.n	80003be <__udivmoddi4+0xde>
 80003e0:	3e01      	subs	r6, #1
 80003e2:	1924      	adds	r4, r4, r4
 80003e4:	416d      	adcs	r5, r5
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d1f8      	bne.n	80003dc <__udivmoddi4+0xfc>
 80003ea:	9800      	ldr	r0, [sp, #0]
 80003ec:	9901      	ldr	r1, [sp, #4]
 80003ee:	465b      	mov	r3, fp
 80003f0:	1900      	adds	r0, r0, r4
 80003f2:	4169      	adcs	r1, r5
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db24      	blt.n	8000442 <__udivmoddi4+0x162>
 80003f8:	002b      	movs	r3, r5
 80003fa:	465a      	mov	r2, fp
 80003fc:	4644      	mov	r4, r8
 80003fe:	40d3      	lsrs	r3, r2
 8000400:	002a      	movs	r2, r5
 8000402:	40e2      	lsrs	r2, r4
 8000404:	001c      	movs	r4, r3
 8000406:	465b      	mov	r3, fp
 8000408:	0015      	movs	r5, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	db2a      	blt.n	8000464 <__udivmoddi4+0x184>
 800040e:	0026      	movs	r6, r4
 8000410:	409e      	lsls	r6, r3
 8000412:	0033      	movs	r3, r6
 8000414:	0026      	movs	r6, r4
 8000416:	4647      	mov	r7, r8
 8000418:	40be      	lsls	r6, r7
 800041a:	0032      	movs	r2, r6
 800041c:	1a80      	subs	r0, r0, r2
 800041e:	4199      	sbcs	r1, r3
 8000420:	9000      	str	r0, [sp, #0]
 8000422:	9101      	str	r1, [sp, #4]
 8000424:	e79e      	b.n	8000364 <__udivmoddi4+0x84>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d8bc      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800042a:	e782      	b.n	8000332 <__udivmoddi4+0x52>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	2100      	movs	r1, #0
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	2200      	movs	r2, #0
 8000436:	9100      	str	r1, [sp, #0]
 8000438:	9201      	str	r2, [sp, #4]
 800043a:	2201      	movs	r2, #1
 800043c:	40da      	lsrs	r2, r3
 800043e:	9201      	str	r2, [sp, #4]
 8000440:	e785      	b.n	800034e <__udivmoddi4+0x6e>
 8000442:	4642      	mov	r2, r8
 8000444:	2320      	movs	r3, #32
 8000446:	1a9b      	subs	r3, r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	4646      	mov	r6, r8
 800044c:	409a      	lsls	r2, r3
 800044e:	0023      	movs	r3, r4
 8000450:	40f3      	lsrs	r3, r6
 8000452:	4644      	mov	r4, r8
 8000454:	4313      	orrs	r3, r2
 8000456:	002a      	movs	r2, r5
 8000458:	40e2      	lsrs	r2, r4
 800045a:	001c      	movs	r4, r3
 800045c:	465b      	mov	r3, fp
 800045e:	0015      	movs	r5, r2
 8000460:	2b00      	cmp	r3, #0
 8000462:	dad4      	bge.n	800040e <__udivmoddi4+0x12e>
 8000464:	4642      	mov	r2, r8
 8000466:	002f      	movs	r7, r5
 8000468:	2320      	movs	r3, #32
 800046a:	0026      	movs	r6, r4
 800046c:	4097      	lsls	r7, r2
 800046e:	1a9b      	subs	r3, r3, r2
 8000470:	40de      	lsrs	r6, r3
 8000472:	003b      	movs	r3, r7
 8000474:	4333      	orrs	r3, r6
 8000476:	e7cd      	b.n	8000414 <__udivmoddi4+0x134>

08000478 <__clzdi2>:
 8000478:	b510      	push	{r4, lr}
 800047a:	2900      	cmp	r1, #0
 800047c:	d103      	bne.n	8000486 <__clzdi2+0xe>
 800047e:	f000 f807 	bl	8000490 <__clzsi2>
 8000482:	3020      	adds	r0, #32
 8000484:	e002      	b.n	800048c <__clzdi2+0x14>
 8000486:	0008      	movs	r0, r1
 8000488:	f000 f802 	bl	8000490 <__clzsi2>
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__clzsi2>:
 8000490:	211c      	movs	r1, #28
 8000492:	2301      	movs	r3, #1
 8000494:	041b      	lsls	r3, r3, #16
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0xe>
 800049a:	0c00      	lsrs	r0, r0, #16
 800049c:	3910      	subs	r1, #16
 800049e:	0a1b      	lsrs	r3, r3, #8
 80004a0:	4298      	cmp	r0, r3
 80004a2:	d301      	bcc.n	80004a8 <__clzsi2+0x18>
 80004a4:	0a00      	lsrs	r0, r0, #8
 80004a6:	3908      	subs	r1, #8
 80004a8:	091b      	lsrs	r3, r3, #4
 80004aa:	4298      	cmp	r0, r3
 80004ac:	d301      	bcc.n	80004b2 <__clzsi2+0x22>
 80004ae:	0900      	lsrs	r0, r0, #4
 80004b0:	3904      	subs	r1, #4
 80004b2:	a202      	add	r2, pc, #8	@ (adr r2, 80004bc <__clzsi2+0x2c>)
 80004b4:	5c10      	ldrb	r0, [r2, r0]
 80004b6:	1840      	adds	r0, r0, r1
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			@ (mov r8, r8)
 80004bc:	02020304 	.word	0x02020304
 80004c0:	01010101 	.word	0x01010101
	...

080004cc <MD_setLight>:
{
  // Set the angle of the bride
}

void MD_setLight(bool flag_B)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	0002      	movs	r2, r0
 80004d4:	1dfb      	adds	r3, r7, #7
 80004d6:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(cmd_pleins_phares_GPIO_Port, cmd_pleins_phares_Pin, flag_B);
 80004d8:	1dfb      	adds	r3, r7, #7
 80004da:	781a      	ldrb	r2, [r3, #0]
 80004dc:	2380      	movs	r3, #128	@ 0x80
 80004de:	00db      	lsls	r3, r3, #3
 80004e0:	4803      	ldr	r0, [pc, #12]	@ (80004f0 <MD_setLight+0x24>)
 80004e2:	0019      	movs	r1, r3
 80004e4:	f001 fc6c 	bl	8001dc0 <HAL_GPIO_WritePin>
}
 80004e8:	46c0      	nop			@ (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b002      	add	sp, #8
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	50000400 	.word	0x50000400

080004f4 <APP_process>:
	.Millis_U32 = HAL_millis_U32
};


void APP_process(void)
{
 80004f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004f6:	b087      	sub	sp, #28
 80004f8:	af06      	add	r7, sp, #24
	RADIO_Init_B(treatment_function_B_PF, NRF_HAL_function_STR,NUMERO_VERSION_PROTOCOLE_RADIO_U8,NUMERO_RESEAU_U8,DEFAULT_ADDRESS_U8);
 80004fa:	4b16      	ldr	r3, [pc, #88]	@ (8000554 <APP_process+0x60>)
 80004fc:	4816      	ldr	r0, [pc, #88]	@ (8000558 <APP_process+0x64>)
 80004fe:	2269      	movs	r2, #105	@ 0x69
 8000500:	9205      	str	r2, [sp, #20]
 8000502:	2201      	movs	r2, #1
 8000504:	9204      	str	r2, [sp, #16]
 8000506:	2201      	movs	r2, #1
 8000508:	9203      	str	r2, [sp, #12]
 800050a:	466a      	mov	r2, sp
 800050c:	0011      	movs	r1, r2
 800050e:	001a      	movs	r2, r3
 8000510:	320c      	adds	r2, #12
 8000512:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000514:	c170      	stmia	r1!, {r4, r5, r6}
 8000516:	6819      	ldr	r1, [r3, #0]
 8000518:	685a      	ldr	r2, [r3, #4]
 800051a:	689b      	ldr	r3, [r3, #8]
 800051c:	f006 f924 	bl	8006768 <RADIO_Init_B>
	LOG_Init(&LOG_HAL_functions_STR, cSIZE_BUFFER_UART_2_RX_U16);
 8000520:	4b0e      	ldr	r3, [pc, #56]	@ (800055c <APP_process+0x68>)
 8000522:	2132      	movs	r1, #50	@ 0x32
 8000524:	0018      	movs	r0, r3
 8000526:	f005 ffd3 	bl	80064d0 <LOG_Init>
	while (1)
	{
		RADIO_process();
 800052a:	f006 fcd9 	bl	8006ee0 <RADIO_process>
		if (HAL_millis_U32() - APP_last_send_time_U32 > 5000)
 800052e:	f000 f84f 	bl	80005d0 <HAL_millis_U32>
 8000532:	0002      	movs	r2, r0
 8000534:	4b0a      	ldr	r3, [pc, #40]	@ (8000560 <APP_process+0x6c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	1ad3      	subs	r3, r2, r3
 800053a:	4a0a      	ldr	r2, [pc, #40]	@ (8000564 <APP_process+0x70>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d9f4      	bls.n	800052a <APP_process+0x36>
		{
			APP_last_send_time_U32 = HAL_millis_U32();
 8000540:	f000 f846 	bl	80005d0 <HAL_millis_U32>
 8000544:	0002      	movs	r2, r0
 8000546:	4b06      	ldr	r3, [pc, #24]	@ (8000560 <APP_process+0x6c>)
 8000548:	601a      	str	r2, [r3, #0]
			RADIO_SendPing(0x18);
 800054a:	2018      	movs	r0, #24
 800054c:	f006 fcd2 	bl	8006ef4 <RADIO_SendPing>
		RADIO_process();
 8000550:	e7eb      	b.n	800052a <APP_process+0x36>
 8000552:	46c0      	nop			@ (mov r8, r8)
 8000554:	20000000 	.word	0x20000000
 8000558:	08000569 	.word	0x08000569
 800055c:	20000018 	.word	0x20000018
 8000560:	200000a8 	.word	0x200000a8
 8000564:	00001388 	.word	0x00001388

08000568 <treatment_function_B_PF>:
		}
	}
}

bool treatment_function_B_PF(RADIO_trame_UN RADIO_trame_UN)
{
 8000568:	b084      	sub	sp, #16
 800056a:	b5b0      	push	{r4, r5, r7, lr}
 800056c:	af00      	add	r7, sp, #0
 800056e:	2510      	movs	r5, #16
 8000570:	197c      	adds	r4, r7, r5
 8000572:	6020      	str	r0, [r4, #0]
 8000574:	6061      	str	r1, [r4, #4]
 8000576:	60a2      	str	r2, [r4, #8]
 8000578:	60e3      	str	r3, [r4, #12]
    switch (RADIO_trame_UN.trame_str.cerced_data_UN.cerced_data_str.trame_type_EN_6)
 800057a:	197b      	adds	r3, r7, r5
 800057c:	78db      	ldrb	r3, [r3, #3]
 800057e:	069b      	lsls	r3, r3, #26
 8000580:	0e9b      	lsrs	r3, r3, #26
 8000582:	b2db      	uxtb	r3, r3
 8000584:	2b14      	cmp	r3, #20
 8000586:	d008      	beq.n	800059a <treatment_function_B_PF+0x32>
 8000588:	dc14      	bgt.n	80005b4 <treatment_function_B_PF+0x4c>
 800058a:	2b0f      	cmp	r3, #15
 800058c:	d014      	beq.n	80005b8 <treatment_function_B_PF+0x50>
 800058e:	dc11      	bgt.n	80005b4 <treatment_function_B_PF+0x4c>
 8000590:	2b0d      	cmp	r3, #13
 8000592:	d013      	beq.n	80005bc <treatment_function_B_PF+0x54>
 8000594:	2b0e      	cmp	r3, #14
 8000596:	d013      	beq.n	80005c0 <treatment_function_B_PF+0x58>
 8000598:	e00c      	b.n	80005b4 <treatment_function_B_PF+0x4c>
        break;
    case RADIO_COMMAND_BRAKING_EN: 
        // Set the brake of the bride
        break;
    case RADIO_COMMAND_LIGHT_EN:   
    if(RADIO_trame_UN.trame_str.cerced_data_UN.cerced_data_str.payload_U8A[0] == 0xFF)
 800059a:	2310      	movs	r3, #16
 800059c:	18fb      	adds	r3, r7, r3
 800059e:	7b1b      	ldrb	r3, [r3, #12]
 80005a0:	2bff      	cmp	r3, #255	@ 0xff
 80005a2:	d103      	bne.n	80005ac <treatment_function_B_PF+0x44>
    {
        MD_setLight(true);
 80005a4:	2001      	movs	r0, #1
 80005a6:	f7ff ff91 	bl	80004cc <MD_setLight>
    }
    else
    {
        MD_setLight(false);
    }
        break;
 80005aa:	e00a      	b.n	80005c2 <treatment_function_B_PF+0x5a>
        MD_setLight(false);
 80005ac:	2000      	movs	r0, #0
 80005ae:	f7ff ff8d 	bl	80004cc <MD_setLight>
        break;
 80005b2:	e006      	b.n	80005c2 <treatment_function_B_PF+0x5a>
    default:
        return false;
 80005b4:	2300      	movs	r3, #0
 80005b6:	e005      	b.n	80005c4 <treatment_function_B_PF+0x5c>
        break;
 80005b8:	46c0      	nop			@ (mov r8, r8)
 80005ba:	e002      	b.n	80005c2 <treatment_function_B_PF+0x5a>
        break;
 80005bc:	46c0      	nop			@ (mov r8, r8)
 80005be:	e000      	b.n	80005c2 <treatment_function_B_PF+0x5a>
        break;
 80005c0:	46c0      	nop			@ (mov r8, r8)
    }
    return true;
 80005c2:	2301      	movs	r3, #1
}
 80005c4:	0018      	movs	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bcb0      	pop	{r4, r5, r7}
 80005ca:	bc08      	pop	{r3}
 80005cc:	b004      	add	sp, #16
 80005ce:	4718      	bx	r3

080005d0 <HAL_millis_U32>:
extern RTC_HandleTypeDef hrtc;
static bool HAL_spiIsInit = false;
uint8_t rx_buffer_U8A[cSIZE_BUFFER_UART_2_RX_U16];

uint32_t HAL_millis_U32(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80005d4:	f000 ff34 	bl	8001440 <HAL_GetTick>
 80005d8:	0003      	movs	r3, r0
}
 80005da:	0018      	movs	r0, r3
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <HAL_setCE>:
			return HAL_LED_SET_ERROR;
	}
}

void HAL_setCE(bool state_B)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	0002      	movs	r2, r0
 80005e8:	1dfb      	adds	r3, r7, #7
 80005ea:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, state_B);
 80005ec:	1dfb      	adds	r3, r7, #7
 80005ee:	781a      	ldrb	r2, [r3, #0]
 80005f0:	2380      	movs	r3, #128	@ 0x80
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	4803      	ldr	r0, [pc, #12]	@ (8000604 <HAL_setCE+0x24>)
 80005f6:	0019      	movs	r1, r3
 80005f8:	f001 fbe2 	bl	8001dc0 <HAL_GPIO_WritePin>
}
 80005fc:	46c0      	nop			@ (mov r8, r8)
 80005fe:	46bd      	mov	sp, r7
 8000600:	b002      	add	sp, #8
 8000602:	bd80      	pop	{r7, pc}
 8000604:	50000400 	.word	0x50000400

08000608 <HAL_writeSpiValue_EN>:
{
	HAL_GPIO_WritePin(GPIOB, IRQ_Pin, state_B);
}*/

HAL_ret_val_en HAL_writeSpiValue_EN(uint8_t* value_U8A, uint16_t size_value_U16)
{
 8000608:	b5b0      	push	{r4, r5, r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	000a      	movs	r2, r1
 8000612:	1cbb      	adds	r3, r7, #2
 8000614:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef ret_val;
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 8000616:	2380      	movs	r3, #128	@ 0x80
 8000618:	0219      	lsls	r1, r3, #8
 800061a:	23a0      	movs	r3, #160	@ 0xa0
 800061c:	05db      	lsls	r3, r3, #23
 800061e:	2200      	movs	r2, #0
 8000620:	0018      	movs	r0, r3
 8000622:	f001 fbcd 	bl	8001dc0 <HAL_GPIO_WritePin>
	ret_val = HAL_SPI_Transmit(&hspi1, value_U8A, size_value_U16, 100);
 8000626:	250f      	movs	r5, #15
 8000628:	197c      	adds	r4, r7, r5
 800062a:	1cbb      	adds	r3, r7, #2
 800062c:	881a      	ldrh	r2, [r3, #0]
 800062e:	6879      	ldr	r1, [r7, #4]
 8000630:	480c      	ldr	r0, [pc, #48]	@ (8000664 <HAL_writeSpiValue_EN+0x5c>)
 8000632:	2364      	movs	r3, #100	@ 0x64
 8000634:	f002 ffd5 	bl	80035e2 <HAL_SPI_Transmit>
 8000638:	0003      	movs	r3, r0
 800063a:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 800063c:	2380      	movs	r3, #128	@ 0x80
 800063e:	0219      	lsls	r1, r3, #8
 8000640:	23a0      	movs	r3, #160	@ 0xa0
 8000642:	05db      	lsls	r3, r3, #23
 8000644:	2201      	movs	r2, #1
 8000646:	0018      	movs	r0, r3
 8000648:	f001 fbba 	bl	8001dc0 <HAL_GPIO_WritePin>
	if (ret_val != HAL_OK)
 800064c:	197b      	adds	r3, r7, r5
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <HAL_writeSpiValue_EN+0x50>
	{
		return HAL_SPI_WRITE_ERROR_EN;
 8000654:	2302      	movs	r3, #2
 8000656:	e000      	b.n	800065a <HAL_writeSpiValue_EN+0x52>
	}
	else
	{
		return HAL_SPI_WRITE_OK_EN;
 8000658:	2303      	movs	r3, #3
	}
}
 800065a:	0018      	movs	r0, r3
 800065c:	46bd      	mov	sp, r7
 800065e:	b004      	add	sp, #16
 8000660:	bdb0      	pop	{r4, r5, r7, pc}
 8000662:	46c0      	nop			@ (mov r8, r8)
 8000664:	200001b4 	.word	0x200001b4

08000668 <HAL_readSpiValue_EN>:

HAL_ret_val_en HAL_readSpiValue_EN(uint8_t reg_U8, uint8_t* read_value_U8A,uint16_t size_read_value_U16)
{
 8000668:	b5b0      	push	{r4, r5, r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6039      	str	r1, [r7, #0]
 8000670:	0011      	movs	r1, r2
 8000672:	1dfb      	adds	r3, r7, #7
 8000674:	1c02      	adds	r2, r0, #0
 8000676:	701a      	strb	r2, [r3, #0]
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	1c0a      	adds	r2, r1, #0
 800067c:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef ret_val;
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 800067e:	2380      	movs	r3, #128	@ 0x80
 8000680:	0219      	lsls	r1, r3, #8
 8000682:	23a0      	movs	r3, #160	@ 0xa0
 8000684:	05db      	lsls	r3, r3, #23
 8000686:	2200      	movs	r2, #0
 8000688:	0018      	movs	r0, r3
 800068a:	f001 fb99 	bl	8001dc0 <HAL_GPIO_WritePin>
	ret_val = HAL_SPI_Transmit(&hspi1, &reg_U8, 1, 100);
 800068e:	250f      	movs	r5, #15
 8000690:	197c      	adds	r4, r7, r5
 8000692:	1df9      	adds	r1, r7, #7
 8000694:	4817      	ldr	r0, [pc, #92]	@ (80006f4 <HAL_readSpiValue_EN+0x8c>)
 8000696:	2364      	movs	r3, #100	@ 0x64
 8000698:	2201      	movs	r2, #1
 800069a:	f002 ffa2 	bl	80035e2 <HAL_SPI_Transmit>
 800069e:	0003      	movs	r3, r0
 80006a0:	7023      	strb	r3, [r4, #0]
	if (ret_val != HAL_OK)
 80006a2:	197b      	adds	r3, r7, r5
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d009      	beq.n	80006be <HAL_readSpiValue_EN+0x56>
	{
		HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 80006aa:	2380      	movs	r3, #128	@ 0x80
 80006ac:	0219      	lsls	r1, r3, #8
 80006ae:	23a0      	movs	r3, #160	@ 0xa0
 80006b0:	05db      	lsls	r3, r3, #23
 80006b2:	2201      	movs	r2, #1
 80006b4:	0018      	movs	r0, r3
 80006b6:	f001 fb83 	bl	8001dc0 <HAL_GPIO_WritePin>
		return HAL_SPI_READ_ERROR_EN;
 80006ba:	2304      	movs	r3, #4
 80006bc:	e016      	b.n	80006ec <HAL_readSpiValue_EN+0x84>
	}
	HAL_SPI_Receive(&hspi1, read_value_U8A, size_read_value_U16, 100);
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	881a      	ldrh	r2, [r3, #0]
 80006c2:	6839      	ldr	r1, [r7, #0]
 80006c4:	480b      	ldr	r0, [pc, #44]	@ (80006f4 <HAL_readSpiValue_EN+0x8c>)
 80006c6:	2364      	movs	r3, #100	@ 0x64
 80006c8:	f003 f8e8 	bl	800389c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 80006cc:	2380      	movs	r3, #128	@ 0x80
 80006ce:	0219      	lsls	r1, r3, #8
 80006d0:	23a0      	movs	r3, #160	@ 0xa0
 80006d2:	05db      	lsls	r3, r3, #23
 80006d4:	2201      	movs	r2, #1
 80006d6:	0018      	movs	r0, r3
 80006d8:	f001 fb72 	bl	8001dc0 <HAL_GPIO_WritePin>
	if (ret_val != HAL_OK)
 80006dc:	230f      	movs	r3, #15
 80006de:	18fb      	adds	r3, r7, r3
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <HAL_readSpiValue_EN+0x82>
	{
		return HAL_SPI_READ_ERROR_EN;
 80006e6:	2304      	movs	r3, #4
 80006e8:	e000      	b.n	80006ec <HAL_readSpiValue_EN+0x84>
	}
	else
	{
		return HAL_SPI_READ_OK_EN;
 80006ea:	2305      	movs	r3, #5
	}


}
 80006ec:	0018      	movs	r0, r3
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b004      	add	sp, #16
 80006f2:	bdb0      	pop	{r4, r5, r7, pc}
 80006f4:	200001b4 	.word	0x200001b4

080006f8 <HAL_PrintString>:

void HAL_PrintString(char* string)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	 HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), 1000);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	0018      	movs	r0, r3
 8000704:	f7ff fd00 	bl	8000108 <strlen>
 8000708:	0003      	movs	r3, r0
 800070a:	b29a      	uxth	r2, r3
 800070c:	23fa      	movs	r3, #250	@ 0xfa
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	6879      	ldr	r1, [r7, #4]
 8000712:	4803      	ldr	r0, [pc, #12]	@ (8000720 <HAL_PrintString+0x28>)
 8000714:	f004 f9a8 	bl	8004a68 <HAL_UART_Transmit>
}
 8000718:	46c0      	nop			@ (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	b002      	add	sp, #8
 800071e:	bd80      	pop	{r7, pc}
 8000720:	2000024c 	.word	0x2000024c

08000724 <HAL_enableRxDmaUart2>:

void HAL_enableRxDmaUart2(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart2, rx_buffer_U8A, cSIZE_BUFFER_UART_2_RX_U16);
 8000728:	4904      	ldr	r1, [pc, #16]	@ (800073c <HAL_enableRxDmaUart2+0x18>)
 800072a:	4b05      	ldr	r3, [pc, #20]	@ (8000740 <HAL_enableRxDmaUart2+0x1c>)
 800072c:	2232      	movs	r2, #50	@ 0x32
 800072e:	0018      	movs	r0, r3
 8000730:	f004 fa3a 	bl	8004ba8 <HAL_UART_Receive_DMA>
}
 8000734:	46c0      	nop			@ (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	46c0      	nop			@ (mov r8, r8)
 800073c:	200000ac 	.word	0x200000ac
 8000740:	2000024c 	.word	0x2000024c

08000744 <HAL_GetUart2Buffer>:

void HAL_GetUart2Buffer(char* buffer_CA)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	for (uint8_t index_U8=0 ; index_U8<cSIZE_BUFFER_UART_2_RX_U16 ; index_U8++)
 800074c:	230f      	movs	r3, #15
 800074e:	18fb      	adds	r3, r7, r3
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
 8000754:	e00e      	b.n	8000774 <HAL_GetUart2Buffer+0x30>
	{
		buffer_CA[index_U8] = (char)rx_buffer_U8A[index_U8];
 8000756:	200f      	movs	r0, #15
 8000758:	183b      	adds	r3, r7, r0
 800075a:	781a      	ldrb	r2, [r3, #0]
 800075c:	183b      	adds	r3, r7, r0
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	6879      	ldr	r1, [r7, #4]
 8000762:	18cb      	adds	r3, r1, r3
 8000764:	4908      	ldr	r1, [pc, #32]	@ (8000788 <HAL_GetUart2Buffer+0x44>)
 8000766:	5c8a      	ldrb	r2, [r1, r2]
 8000768:	701a      	strb	r2, [r3, #0]
	for (uint8_t index_U8=0 ; index_U8<cSIZE_BUFFER_UART_2_RX_U16 ; index_U8++)
 800076a:	183b      	adds	r3, r7, r0
 800076c:	781a      	ldrb	r2, [r3, #0]
 800076e:	183b      	adds	r3, r7, r0
 8000770:	3201      	adds	r2, #1
 8000772:	701a      	strb	r2, [r3, #0]
 8000774:	230f      	movs	r3, #15
 8000776:	18fb      	adds	r3, r7, r3
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b31      	cmp	r3, #49	@ 0x31
 800077c:	d9eb      	bls.n	8000756 <HAL_GetUart2Buffer+0x12>
	}
}
 800077e:	46c0      	nop			@ (mov r8, r8)
 8000780:	46c0      	nop			@ (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	b004      	add	sp, #16
 8000786:	bd80      	pop	{r7, pc}
 8000788:	200000ac 	.word	0x200000ac

0800078c <HAL_FlushUart2Buffer>:
void HAL_FlushUart2Buffer(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
	for (uint8_t index_U8=0 ; index_U8<cSIZE_BUFFER_UART_2_RX_U16 ; index_U8++)
 8000792:	1dfb      	adds	r3, r7, #7
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
 8000798:	e009      	b.n	80007ae <HAL_FlushUart2Buffer+0x22>
	{
		rx_buffer_U8A[index_U8] = '0';
 800079a:	1dfb      	adds	r3, r7, #7
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	4a08      	ldr	r2, [pc, #32]	@ (80007c0 <HAL_FlushUart2Buffer+0x34>)
 80007a0:	2130      	movs	r1, #48	@ 0x30
 80007a2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t index_U8=0 ; index_U8<cSIZE_BUFFER_UART_2_RX_U16 ; index_U8++)
 80007a4:	1dfb      	adds	r3, r7, #7
 80007a6:	781a      	ldrb	r2, [r3, #0]
 80007a8:	1dfb      	adds	r3, r7, #7
 80007aa:	3201      	adds	r2, #1
 80007ac:	701a      	strb	r2, [r3, #0]
 80007ae:	1dfb      	adds	r3, r7, #7
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b31      	cmp	r3, #49	@ 0x31
 80007b4:	d9f1      	bls.n	800079a <HAL_FlushUart2Buffer+0xe>
	}
}
 80007b6:	46c0      	nop			@ (mov r8, r8)
 80007b8:	46c0      	nop			@ (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	b002      	add	sp, #8
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200000ac 	.word	0x200000ac

080007c4 <HAL_GetTime>:

void HAL_GetTime(HAL_RTC_values_str* HAL_RTC_values_STR)
{ //Gerer la valeur de retour de HAL_RTC_getTime
 80007c4:	b590      	push	{r4, r7, lr}
 80007c6:	b089      	sub	sp, #36	@ 0x24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime_EN;
	HAL_RTC_GetTime(&hrtc, &sTime_EN, RTC_FORMAT_BIN);
 80007cc:	240c      	movs	r4, #12
 80007ce:	1939      	adds	r1, r7, r4
 80007d0:	4b0a      	ldr	r3, [pc, #40]	@ (80007fc <HAL_GetTime+0x38>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	0018      	movs	r0, r3
 80007d6:	f002 fc51 	bl	800307c <HAL_RTC_GetTime>
	HAL_RTC_values_STR->hours_U8 = sTime_EN.Hours;
 80007da:	0021      	movs	r1, r4
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	781a      	ldrb	r2, [r3, #0]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	709a      	strb	r2, [r3, #2]
	HAL_RTC_values_STR->minutes_U8 = sTime_EN.Minutes;
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	785a      	ldrb	r2, [r3, #1]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	705a      	strb	r2, [r3, #1]
	HAL_RTC_values_STR->seconds_U8 = sTime_EN.Seconds;
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	789a      	ldrb	r2, [r3, #2]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	701a      	strb	r2, [r3, #0]
}
 80007f4:	46c0      	nop			@ (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b009      	add	sp, #36	@ 0x24
 80007fa:	bd90      	pop	{r4, r7, pc}
 80007fc:	20000190 	.word	0x20000190

08000800 <HAL_InitDebugUart>:
	HAL_RTC_GetDate(&hrtc, &sDate_EN, RTC_FORMAT_BIN);
	return (uint32_t)sTime_EN.Seconds + (uint32_t)sTime_EN.Minutes*60 + (uint32_t)sTime_EN.Hours*3600 + (uint32_t)sDate_EN.Date*86400 + (uint32_t)sDate_EN.Month*2592000 + (uint32_t)(sDate_EN.Year-1970)*31536000;
}

void HAL_InitDebugUart(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8000804:	4b15      	ldr	r3, [pc, #84]	@ (800085c <HAL_InitDebugUart+0x5c>)
 8000806:	4a16      	ldr	r2, [pc, #88]	@ (8000860 <HAL_InitDebugUart+0x60>)
 8000808:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800080a:	4b14      	ldr	r3, [pc, #80]	@ (800085c <HAL_InitDebugUart+0x5c>)
 800080c:	22e1      	movs	r2, #225	@ 0xe1
 800080e:	0252      	lsls	r2, r2, #9
 8000810:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000812:	4b12      	ldr	r3, [pc, #72]	@ (800085c <HAL_InitDebugUart+0x5c>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000818:	4b10      	ldr	r3, [pc, #64]	@ (800085c <HAL_InitDebugUart+0x5c>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800081e:	4b0f      	ldr	r3, [pc, #60]	@ (800085c <HAL_InitDebugUart+0x5c>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000824:	4b0d      	ldr	r3, [pc, #52]	@ (800085c <HAL_InitDebugUart+0x5c>)
 8000826:	220c      	movs	r2, #12
 8000828:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082a:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <HAL_InitDebugUart+0x5c>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000830:	4b0a      	ldr	r3, [pc, #40]	@ (800085c <HAL_InitDebugUart+0x5c>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000836:	4b09      	ldr	r3, [pc, #36]	@ (800085c <HAL_InitDebugUart+0x5c>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800083c:	4b07      	ldr	r3, [pc, #28]	@ (800085c <HAL_InitDebugUart+0x5c>)
 800083e:	2200      	movs	r2, #0
 8000840:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000842:	4b06      	ldr	r3, [pc, #24]	@ (800085c <HAL_InitDebugUart+0x5c>)
 8000844:	0018      	movs	r0, r3
 8000846:	f004 f8bb 	bl	80049c0 <HAL_UART_Init>
 800084a:	1e03      	subs	r3, r0, #0
 800084c:	d001      	beq.n	8000852 <HAL_InitDebugUart+0x52>
	{
		Error_Handler();
 800084e:	f000 fb4f 	bl	8000ef0 <Error_Handler>
	}
	HAL_enableRxDmaUart2();
 8000852:	f7ff ff67 	bl	8000724 <HAL_enableRxDmaUart2>
}
 8000856:	46c0      	nop			@ (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	2000024c 	.word	0x2000024c
 8000860:	40004400 	.word	0x40004400

08000864 <HAL_delay_ms>:


void HAL_delay_ms (uint32_t delay)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	0018      	movs	r0, r3
 8000870:	f000 fdf0 	bl	8001454 <HAL_Delay>
}
 8000874:	46c0      	nop			@ (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	b002      	add	sp, #8
 800087a:	bd80      	pop	{r7, pc}

0800087c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000880:	f000 fd78 	bl	8001374 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000884:	f000 f812 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000888:	f000 fa98 	bl	8000dbc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800088c:	f000 fa66 	bl	8000d5c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000890:	f000 f9da 	bl	8000c48 <MX_TIM2_Init>
  MX_ADC_Init();
 8000894:	f000 f880 	bl	8000998 <MX_ADC_Init>
  MX_SPI1_Init();
 8000898:	f000 f99e 	bl	8000bd8 <MX_SPI1_Init>
  MX_I2C1_Init();
 800089c:	f000 f8f0 	bl	8000a80 <MX_I2C1_Init>
  MX_RTC_Init();
 80008a0:	f000 f92c 	bl	8000afc <MX_RTC_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    //test du debug avec un toggle de la led
    APP_process();
 80008a4:	f7ff fe26 	bl	80004f4 <APP_process>
 80008a8:	e7fc      	b.n	80008a4 <main+0x28>
	...

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b590      	push	{r4, r7, lr}
 80008ae:	b099      	sub	sp, #100	@ 0x64
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	242c      	movs	r4, #44	@ 0x2c
 80008b4:	193b      	adds	r3, r7, r4
 80008b6:	0018      	movs	r0, r3
 80008b8:	2334      	movs	r3, #52	@ 0x34
 80008ba:	001a      	movs	r2, r3
 80008bc:	2100      	movs	r1, #0
 80008be:	f006 fbb5 	bl	800702c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c2:	2318      	movs	r3, #24
 80008c4:	18fb      	adds	r3, r7, r3
 80008c6:	0018      	movs	r0, r3
 80008c8:	2314      	movs	r3, #20
 80008ca:	001a      	movs	r2, r3
 80008cc:	2100      	movs	r1, #0
 80008ce:	f006 fbad 	bl	800702c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d2:	003b      	movs	r3, r7
 80008d4:	0018      	movs	r0, r3
 80008d6:	2318      	movs	r3, #24
 80008d8:	001a      	movs	r2, r3
 80008da:	2100      	movs	r1, #0
 80008dc:	f006 fba6 	bl	800702c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000990 <SystemClock_Config+0xe4>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a2b      	ldr	r2, [pc, #172]	@ (8000994 <SystemClock_Config+0xe8>)
 80008e6:	401a      	ands	r2, r3
 80008e8:	4b29      	ldr	r3, [pc, #164]	@ (8000990 <SystemClock_Config+0xe4>)
 80008ea:	2180      	movs	r1, #128	@ 0x80
 80008ec:	0109      	lsls	r1, r1, #4
 80008ee:	430a      	orrs	r2, r1
 80008f0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80008f2:	0021      	movs	r1, r4
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	2218      	movs	r2, #24
 80008f8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2201      	movs	r2, #1
 80008fe:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000900:	187b      	adds	r3, r7, r1
 8000902:	2201      	movs	r2, #1
 8000904:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000906:	187b      	adds	r3, r7, r1
 8000908:	2200      	movs	r2, #0
 800090a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800090c:	187b      	adds	r3, r7, r1
 800090e:	22a0      	movs	r2, #160	@ 0xa0
 8000910:	0212      	lsls	r2, r2, #8
 8000912:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2200      	movs	r2, #0
 8000918:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091a:	187b      	adds	r3, r7, r1
 800091c:	0018      	movs	r0, r3
 800091e:	f001 fb9b 	bl	8002058 <HAL_RCC_OscConfig>
 8000922:	1e03      	subs	r3, r0, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000926:	f000 fae3 	bl	8000ef0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092a:	2118      	movs	r1, #24
 800092c:	187b      	adds	r3, r7, r1
 800092e:	220f      	movs	r2, #15
 8000930:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2200      	movs	r2, #0
 8000936:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800093e:	187b      	adds	r3, r7, r1
 8000940:	2200      	movs	r2, #0
 8000942:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800094a:	187b      	adds	r3, r7, r1
 800094c:	2100      	movs	r1, #0
 800094e:	0018      	movs	r0, r3
 8000950:	f001 fefe 	bl	8002750 <HAL_RCC_ClockConfig>
 8000954:	1e03      	subs	r3, r0, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000958:	f000 faca 	bl	8000ef0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800095c:	003b      	movs	r3, r7
 800095e:	222a      	movs	r2, #42	@ 0x2a
 8000960:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000962:	003b      	movs	r3, r7
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000968:	003b      	movs	r3, r7
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800096e:	003b      	movs	r3, r7
 8000970:	2280      	movs	r2, #128	@ 0x80
 8000972:	0292      	lsls	r2, r2, #10
 8000974:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000976:	003b      	movs	r3, r7
 8000978:	0018      	movs	r0, r3
 800097a:	f002 f90d 	bl	8002b98 <HAL_RCCEx_PeriphCLKConfig>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000982:	f000 fab5 	bl	8000ef0 <Error_Handler>
  }
}
 8000986:	46c0      	nop			@ (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	b019      	add	sp, #100	@ 0x64
 800098c:	bd90      	pop	{r4, r7, pc}
 800098e:	46c0      	nop			@ (mov r8, r8)
 8000990:	40007000 	.word	0x40007000
 8000994:	ffffe7ff 	.word	0xffffe7ff

08000998 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800099e:	003b      	movs	r3, r7
 80009a0:	0018      	movs	r0, r3
 80009a2:	2308      	movs	r3, #8
 80009a4:	001a      	movs	r2, r3
 80009a6:	2100      	movs	r1, #0
 80009a8:	f006 fb40 	bl	800702c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80009ac:	4b30      	ldr	r3, [pc, #192]	@ (8000a70 <MX_ADC_Init+0xd8>)
 80009ae:	4a31      	ldr	r2, [pc, #196]	@ (8000a74 <MX_ADC_Init+0xdc>)
 80009b0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80009b2:	4b2f      	ldr	r3, [pc, #188]	@ (8000a70 <MX_ADC_Init+0xd8>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80009b8:	4b2d      	ldr	r3, [pc, #180]	@ (8000a70 <MX_ADC_Init+0xd8>)
 80009ba:	22c0      	movs	r2, #192	@ 0xc0
 80009bc:	0612      	lsls	r2, r2, #24
 80009be:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80009c0:	4b2b      	ldr	r3, [pc, #172]	@ (8000a70 <MX_ADC_Init+0xd8>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000a70 <MX_ADC_Init+0xd8>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80009cc:	4b28      	ldr	r3, [pc, #160]	@ (8000a70 <MX_ADC_Init+0xd8>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009d2:	4b27      	ldr	r3, [pc, #156]	@ (8000a70 <MX_ADC_Init+0xd8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80009d8:	4b25      	ldr	r3, [pc, #148]	@ (8000a70 <MX_ADC_Init+0xd8>)
 80009da:	2220      	movs	r2, #32
 80009dc:	2100      	movs	r1, #0
 80009de:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80009e0:	4b23      	ldr	r3, [pc, #140]	@ (8000a70 <MX_ADC_Init+0xd8>)
 80009e2:	2221      	movs	r2, #33	@ 0x21
 80009e4:	2100      	movs	r1, #0
 80009e6:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009e8:	4b21      	ldr	r3, [pc, #132]	@ (8000a70 <MX_ADC_Init+0xd8>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009ee:	4b20      	ldr	r3, [pc, #128]	@ (8000a70 <MX_ADC_Init+0xd8>)
 80009f0:	22c2      	movs	r2, #194	@ 0xc2
 80009f2:	32ff      	adds	r2, #255	@ 0xff
 80009f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80009f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a70 <MX_ADC_Init+0xd8>)
 80009f8:	222c      	movs	r2, #44	@ 0x2c
 80009fa:	2100      	movs	r1, #0
 80009fc:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000a70 <MX_ADC_Init+0xd8>)
 8000a00:	2204      	movs	r2, #4
 8000a02:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a04:	4b1a      	ldr	r3, [pc, #104]	@ (8000a70 <MX_ADC_Init+0xd8>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000a0a:	4b19      	ldr	r3, [pc, #100]	@ (8000a70 <MX_ADC_Init+0xd8>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8000a10:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <MX_ADC_Init+0xd8>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000a16:	4b16      	ldr	r3, [pc, #88]	@ (8000a70 <MX_ADC_Init+0xd8>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000a1c:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <MX_ADC_Init+0xd8>)
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f000 fd3c 	bl	800149c <HAL_ADC_Init>
 8000a24:	1e03      	subs	r3, r0, #0
 8000a26:	d001      	beq.n	8000a2c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000a28:	f000 fa62 	bl	8000ef0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a2c:	003b      	movs	r3, r7
 8000a2e:	4a12      	ldr	r2, [pc, #72]	@ (8000a78 <MX_ADC_Init+0xe0>)
 8000a30:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000a32:	003b      	movs	r3, r7
 8000a34:	2280      	movs	r2, #128	@ 0x80
 8000a36:	0152      	lsls	r2, r2, #5
 8000a38:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a3a:	003a      	movs	r2, r7
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a70 <MX_ADC_Init+0xd8>)
 8000a3e:	0011      	movs	r1, r2
 8000a40:	0018      	movs	r0, r3
 8000a42:	f000 fe9f 	bl	8001784 <HAL_ADC_ConfigChannel>
 8000a46:	1e03      	subs	r3, r0, #0
 8000a48:	d001      	beq.n	8000a4e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000a4a:	f000 fa51 	bl	8000ef0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000a4e:	003b      	movs	r3, r7
 8000a50:	4a0a      	ldr	r2, [pc, #40]	@ (8000a7c <MX_ADC_Init+0xe4>)
 8000a52:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a54:	003a      	movs	r2, r7
 8000a56:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <MX_ADC_Init+0xd8>)
 8000a58:	0011      	movs	r1, r2
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f000 fe92 	bl	8001784 <HAL_ADC_ConfigChannel>
 8000a60:	1e03      	subs	r3, r0, #0
 8000a62:	d001      	beq.n	8000a68 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000a64:	f000 fa44 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000a68:	46c0      	nop			@ (mov r8, r8)
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	b002      	add	sp, #8
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200000e0 	.word	0x200000e0
 8000a74:	40012400 	.word	0x40012400
 8000a78:	10000010 	.word	0x10000010
 8000a7c:	24000200 	.word	0x24000200

08000a80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a84:	4b1b      	ldr	r3, [pc, #108]	@ (8000af4 <MX_I2C1_Init+0x74>)
 8000a86:	4a1c      	ldr	r2, [pc, #112]	@ (8000af8 <MX_I2C1_Init+0x78>)
 8000a88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000000;
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000af4 <MX_I2C1_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a90:	4b18      	ldr	r3, [pc, #96]	@ (8000af4 <MX_I2C1_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a96:	4b17      	ldr	r3, [pc, #92]	@ (8000af4 <MX_I2C1_Init+0x74>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a9c:	4b15      	ldr	r3, [pc, #84]	@ (8000af4 <MX_I2C1_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000aa2:	4b14      	ldr	r3, [pc, #80]	@ (8000af4 <MX_I2C1_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	@ (8000af4 <MX_I2C1_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aae:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <MX_I2C1_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8000af4 <MX_I2C1_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aba:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <MX_I2C1_Init+0x74>)
 8000abc:	0018      	movs	r0, r3
 8000abe:	f001 f99d 	bl	8001dfc <HAL_I2C_Init>
 8000ac2:	1e03      	subs	r3, r0, #0
 8000ac4:	d001      	beq.n	8000aca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ac6:	f000 fa13 	bl	8000ef0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aca:	4b0a      	ldr	r3, [pc, #40]	@ (8000af4 <MX_I2C1_Init+0x74>)
 8000acc:	2100      	movs	r1, #0
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f001 fa2a 	bl	8001f28 <HAL_I2CEx_ConfigAnalogFilter>
 8000ad4:	1e03      	subs	r3, r0, #0
 8000ad6:	d001      	beq.n	8000adc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ad8:	f000 fa0a 	bl	8000ef0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000adc:	4b05      	ldr	r3, [pc, #20]	@ (8000af4 <MX_I2C1_Init+0x74>)
 8000ade:	2100      	movs	r1, #0
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f001 fa6d 	bl	8001fc0 <HAL_I2CEx_ConfigDigitalFilter>
 8000ae6:	1e03      	subs	r3, r0, #0
 8000ae8:	d001      	beq.n	8000aee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000aea:	f000 fa01 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aee:	46c0      	nop			@ (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	2000013c 	.word	0x2000013c
 8000af8:	40005400 	.word	0x40005400

08000afc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	0018      	movs	r0, r3
 8000b06:	2314      	movs	r3, #20
 8000b08:	001a      	movs	r2, r3
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	f006 fa8e 	bl	800702c <memset>
  RTC_DateTypeDef sDate = {0};
 8000b10:	003b      	movs	r3, r7
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b16:	4b2e      	ldr	r3, [pc, #184]	@ (8000bd0 <MX_RTC_Init+0xd4>)
 8000b18:	4a2e      	ldr	r2, [pc, #184]	@ (8000bd4 <MX_RTC_Init+0xd8>)
 8000b1a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000bd0 <MX_RTC_Init+0xd4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b22:	4b2b      	ldr	r3, [pc, #172]	@ (8000bd0 <MX_RTC_Init+0xd4>)
 8000b24:	227f      	movs	r2, #127	@ 0x7f
 8000b26:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b28:	4b29      	ldr	r3, [pc, #164]	@ (8000bd0 <MX_RTC_Init+0xd4>)
 8000b2a:	22ff      	movs	r2, #255	@ 0xff
 8000b2c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b2e:	4b28      	ldr	r3, [pc, #160]	@ (8000bd0 <MX_RTC_Init+0xd4>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b34:	4b26      	ldr	r3, [pc, #152]	@ (8000bd0 <MX_RTC_Init+0xd4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b3a:	4b25      	ldr	r3, [pc, #148]	@ (8000bd0 <MX_RTC_Init+0xd4>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b40:	4b23      	ldr	r3, [pc, #140]	@ (8000bd0 <MX_RTC_Init+0xd4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b46:	4b22      	ldr	r3, [pc, #136]	@ (8000bd0 <MX_RTC_Init+0xd4>)
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f002 f951 	bl	8002df0 <HAL_RTC_Init>
 8000b4e:	1e03      	subs	r3, r0, #0
 8000b50:	d001      	beq.n	8000b56 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8000b52:	f000 f9cd 	bl	8000ef0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	2200      	movs	r2, #0
 8000b60:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	2200      	movs	r2, #0
 8000b66:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b74:	1d39      	adds	r1, r7, #4
 8000b76:	4b16      	ldr	r3, [pc, #88]	@ (8000bd0 <MX_RTC_Init+0xd4>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f002 f9d4 	bl	8002f28 <HAL_RTC_SetTime>
 8000b80:	1e03      	subs	r3, r0, #0
 8000b82:	d001      	beq.n	8000b88 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8000b84:	f000 f9b4 	bl	8000ef0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000b88:	003b      	movs	r3, r7
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000b8e:	003b      	movs	r3, r7
 8000b90:	2201      	movs	r2, #1
 8000b92:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000b94:	003b      	movs	r3, r7
 8000b96:	2201      	movs	r2, #1
 8000b98:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x70;
 8000b9a:	003b      	movs	r3, r7
 8000b9c:	2270      	movs	r2, #112	@ 0x70
 8000b9e:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ba0:	0039      	movs	r1, r7
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd0 <MX_RTC_Init+0xd4>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f002 fac6 	bl	8003138 <HAL_RTC_SetDate>
 8000bac:	1e03      	subs	r3, r0, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8000bb0:	f000 f99e 	bl	8000ef0 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_DEFAULT) != HAL_OK)
 8000bb4:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <MX_RTC_Init+0xd4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2100      	movs	r1, #0
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f002 fc26 	bl	800340c <HAL_RTCEx_SetTimeStamp>
 8000bc0:	1e03      	subs	r3, r0, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8000bc4:	f000 f994 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000bc8:	46c0      	nop			@ (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	b006      	add	sp, #24
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000190 	.word	0x20000190
 8000bd4:	40002800 	.word	0x40002800

08000bd8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bdc:	4b18      	ldr	r3, [pc, #96]	@ (8000c40 <MX_SPI1_Init+0x68>)
 8000bde:	4a19      	ldr	r2, [pc, #100]	@ (8000c44 <MX_SPI1_Init+0x6c>)
 8000be0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000be2:	4b17      	ldr	r3, [pc, #92]	@ (8000c40 <MX_SPI1_Init+0x68>)
 8000be4:	2282      	movs	r2, #130	@ 0x82
 8000be6:	0052      	lsls	r2, r2, #1
 8000be8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bea:	4b15      	ldr	r3, [pc, #84]	@ (8000c40 <MX_SPI1_Init+0x68>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bf0:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <MX_SPI1_Init+0x68>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bf6:	4b12      	ldr	r3, [pc, #72]	@ (8000c40 <MX_SPI1_Init+0x68>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bfc:	4b10      	ldr	r3, [pc, #64]	@ (8000c40 <MX_SPI1_Init+0x68>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c02:	4b0f      	ldr	r3, [pc, #60]	@ (8000c40 <MX_SPI1_Init+0x68>)
 8000c04:	2280      	movs	r2, #128	@ 0x80
 8000c06:	0092      	lsls	r2, r2, #2
 8000c08:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c40 <MX_SPI1_Init+0x68>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c10:	4b0b      	ldr	r3, [pc, #44]	@ (8000c40 <MX_SPI1_Init+0x68>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c16:	4b0a      	ldr	r3, [pc, #40]	@ (8000c40 <MX_SPI1_Init+0x68>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c1c:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <MX_SPI1_Init+0x68>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c22:	4b07      	ldr	r3, [pc, #28]	@ (8000c40 <MX_SPI1_Init+0x68>)
 8000c24:	2207      	movs	r2, #7
 8000c26:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c28:	4b05      	ldr	r3, [pc, #20]	@ (8000c40 <MX_SPI1_Init+0x68>)
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f002 fc50 	bl	80034d0 <HAL_SPI_Init>
 8000c30:	1e03      	subs	r3, r0, #0
 8000c32:	d001      	beq.n	8000c38 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c34:	f000 f95c 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c38:	46c0      	nop			@ (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	46c0      	nop			@ (mov r8, r8)
 8000c40:	200001b4 	.word	0x200001b4
 8000c44:	40013000 	.word	0x40013000

08000c48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	@ 0x28
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c4e:	2318      	movs	r3, #24
 8000c50:	18fb      	adds	r3, r7, r3
 8000c52:	0018      	movs	r0, r3
 8000c54:	2310      	movs	r3, #16
 8000c56:	001a      	movs	r2, r3
 8000c58:	2100      	movs	r1, #0
 8000c5a:	f006 f9e7 	bl	800702c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c5e:	2310      	movs	r3, #16
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	0018      	movs	r0, r3
 8000c64:	2308      	movs	r3, #8
 8000c66:	001a      	movs	r2, r3
 8000c68:	2100      	movs	r1, #0
 8000c6a:	f006 f9df 	bl	800702c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c6e:	003b      	movs	r3, r7
 8000c70:	0018      	movs	r0, r3
 8000c72:	2310      	movs	r3, #16
 8000c74:	001a      	movs	r2, r3
 8000c76:	2100      	movs	r1, #0
 8000c78:	f006 f9d8 	bl	800702c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c7c:	4b35      	ldr	r3, [pc, #212]	@ (8000d54 <MX_TIM2_Init+0x10c>)
 8000c7e:	2280      	movs	r2, #128	@ 0x80
 8000c80:	05d2      	lsls	r2, r2, #23
 8000c82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c84:	4b33      	ldr	r3, [pc, #204]	@ (8000d54 <MX_TIM2_Init+0x10c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8a:	4b32      	ldr	r3, [pc, #200]	@ (8000d54 <MX_TIM2_Init+0x10c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c90:	4b30      	ldr	r3, [pc, #192]	@ (8000d54 <MX_TIM2_Init+0x10c>)
 8000c92:	4a31      	ldr	r2, [pc, #196]	@ (8000d58 <MX_TIM2_Init+0x110>)
 8000c94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c96:	4b2f      	ldr	r3, [pc, #188]	@ (8000d54 <MX_TIM2_Init+0x10c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9c:	4b2d      	ldr	r3, [pc, #180]	@ (8000d54 <MX_TIM2_Init+0x10c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ca2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d54 <MX_TIM2_Init+0x10c>)
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f003 fa31 	bl	800410c <HAL_TIM_Base_Init>
 8000caa:	1e03      	subs	r3, r0, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000cae:	f000 f91f 	bl	8000ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cb2:	2118      	movs	r1, #24
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	2280      	movs	r2, #128	@ 0x80
 8000cb8:	0152      	lsls	r2, r2, #5
 8000cba:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cbc:	187a      	adds	r2, r7, r1
 8000cbe:	4b25      	ldr	r3, [pc, #148]	@ (8000d54 <MX_TIM2_Init+0x10c>)
 8000cc0:	0011      	movs	r1, r2
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f003 fb70 	bl	80043a8 <HAL_TIM_ConfigClockSource>
 8000cc8:	1e03      	subs	r3, r0, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000ccc:	f000 f910 	bl	8000ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cd0:	4b20      	ldr	r3, [pc, #128]	@ (8000d54 <MX_TIM2_Init+0x10c>)
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f003 fa5a 	bl	800418c <HAL_TIM_PWM_Init>
 8000cd8:	1e03      	subs	r3, r0, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000cdc:	f000 f908 	bl	8000ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce0:	2110      	movs	r1, #16
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	2200      	movs	r2, #0
 8000cec:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cee:	187a      	adds	r2, r7, r1
 8000cf0:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <MX_TIM2_Init+0x10c>)
 8000cf2:	0011      	movs	r1, r2
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f003 fe13 	bl	8004920 <HAL_TIMEx_MasterConfigSynchronization>
 8000cfa:	1e03      	subs	r3, r0, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000cfe:	f000 f8f7 	bl	8000ef0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d02:	003b      	movs	r3, r7
 8000d04:	2260      	movs	r2, #96	@ 0x60
 8000d06:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000d08:	003b      	movs	r3, r7
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d0e:	003b      	movs	r3, r7
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d14:	003b      	movs	r3, r7
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d1a:	0039      	movs	r1, r7
 8000d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d54 <MX_TIM2_Init+0x10c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	0018      	movs	r0, r3
 8000d22:	f003 fa7b 	bl	800421c <HAL_TIM_PWM_ConfigChannel>
 8000d26:	1e03      	subs	r3, r0, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000d2a:	f000 f8e1 	bl	8000ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d2e:	0039      	movs	r1, r7
 8000d30:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <MX_TIM2_Init+0x10c>)
 8000d32:	2204      	movs	r2, #4
 8000d34:	0018      	movs	r0, r3
 8000d36:	f003 fa71 	bl	800421c <HAL_TIM_PWM_ConfigChannel>
 8000d3a:	1e03      	subs	r3, r0, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8000d3e:	f000 f8d7 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d42:	4b04      	ldr	r3, [pc, #16]	@ (8000d54 <MX_TIM2_Init+0x10c>)
 8000d44:	0018      	movs	r0, r3
 8000d46:	f000 f9fd 	bl	8001144 <HAL_TIM_MspPostInit>

}
 8000d4a:	46c0      	nop			@ (mov r8, r8)
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	b00a      	add	sp, #40	@ 0x28
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	46c0      	nop			@ (mov r8, r8)
 8000d54:	2000020c 	.word	0x2000020c
 8000d58:	0000ffff 	.word	0x0000ffff

08000d5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d60:	4b14      	ldr	r3, [pc, #80]	@ (8000db4 <MX_USART2_UART_Init+0x58>)
 8000d62:	4a15      	ldr	r2, [pc, #84]	@ (8000db8 <MX_USART2_UART_Init+0x5c>)
 8000d64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d66:	4b13      	ldr	r3, [pc, #76]	@ (8000db4 <MX_USART2_UART_Init+0x58>)
 8000d68:	22e1      	movs	r2, #225	@ 0xe1
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	@ (8000db4 <MX_USART2_UART_Init+0x58>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	@ (8000db4 <MX_USART2_UART_Init+0x58>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000db4 <MX_USART2_UART_Init+0x58>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <MX_USART2_UART_Init+0x58>)
 8000d82:	220c      	movs	r2, #12
 8000d84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d86:	4b0b      	ldr	r3, [pc, #44]	@ (8000db4 <MX_USART2_UART_Init+0x58>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d8c:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <MX_USART2_UART_Init+0x58>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d92:	4b08      	ldr	r3, [pc, #32]	@ (8000db4 <MX_USART2_UART_Init+0x58>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d98:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <MX_USART2_UART_Init+0x58>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d9e:	4b05      	ldr	r3, [pc, #20]	@ (8000db4 <MX_USART2_UART_Init+0x58>)
 8000da0:	0018      	movs	r0, r3
 8000da2:	f003 fe0d 	bl	80049c0 <HAL_UART_Init>
 8000da6:	1e03      	subs	r3, r0, #0
 8000da8:	d001      	beq.n	8000dae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000daa:	f000 f8a1 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dae:	46c0      	nop			@ (mov r8, r8)
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	2000024c 	.word	0x2000024c
 8000db8:	40004400 	.word	0x40004400

08000dbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b089      	sub	sp, #36	@ 0x24
 8000dc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc2:	240c      	movs	r4, #12
 8000dc4:	193b      	adds	r3, r7, r4
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	2314      	movs	r3, #20
 8000dca:	001a      	movs	r2, r3
 8000dcc:	2100      	movs	r1, #0
 8000dce:	f006 f92d 	bl	800702c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dd2:	4b44      	ldr	r3, [pc, #272]	@ (8000ee4 <MX_GPIO_Init+0x128>)
 8000dd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000dd6:	4b43      	ldr	r3, [pc, #268]	@ (8000ee4 <MX_GPIO_Init+0x128>)
 8000dd8:	2180      	movs	r1, #128	@ 0x80
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000dde:	4b41      	ldr	r3, [pc, #260]	@ (8000ee4 <MX_GPIO_Init+0x128>)
 8000de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000de2:	2280      	movs	r2, #128	@ 0x80
 8000de4:	4013      	ands	r3, r2
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	4b3e      	ldr	r3, [pc, #248]	@ (8000ee4 <MX_GPIO_Init+0x128>)
 8000dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000dee:	4b3d      	ldr	r3, [pc, #244]	@ (8000ee4 <MX_GPIO_Init+0x128>)
 8000df0:	2101      	movs	r1, #1
 8000df2:	430a      	orrs	r2, r1
 8000df4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000df6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ee4 <MX_GPIO_Init+0x128>)
 8000df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	4b38      	ldr	r3, [pc, #224]	@ (8000ee4 <MX_GPIO_Init+0x128>)
 8000e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e06:	4b37      	ldr	r3, [pc, #220]	@ (8000ee4 <MX_GPIO_Init+0x128>)
 8000e08:	2102      	movs	r1, #2
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e0e:	4b35      	ldr	r3, [pc, #212]	@ (8000ee4 <MX_GPIO_Init+0x128>)
 8000e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e12:	2202      	movs	r2, #2
 8000e14:	4013      	ands	r3, r2
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, offb_Pin|off_Pin, GPIO_PIN_RESET);
 8000e1a:	4b33      	ldr	r3, [pc, #204]	@ (8000ee8 <MX_GPIO_Init+0x12c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2103      	movs	r1, #3
 8000e20:	0018      	movs	r0, r3
 8000e22:	f000 ffcd 	bl	8001dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, cmd_pleins_phares_Pin|direction_Pin|IRQ_Pin|CE_Pin, GPIO_PIN_RESET);
 8000e26:	238e      	movs	r3, #142	@ 0x8e
 8000e28:	01db      	lsls	r3, r3, #7
 8000e2a:	4830      	ldr	r0, [pc, #192]	@ (8000eec <MX_GPIO_Init+0x130>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	0019      	movs	r1, r3
 8000e30:	f000 ffc6 	bl	8001dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_v_GPIO_Port, led_v_Pin, GPIO_PIN_SET);
 8000e34:	2380      	movs	r3, #128	@ 0x80
 8000e36:	019b      	lsls	r3, r3, #6
 8000e38:	482c      	ldr	r0, [pc, #176]	@ (8000eec <MX_GPIO_Init+0x130>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	0019      	movs	r1, r3
 8000e3e:	f000 ffbf 	bl	8001dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_r_GPIO_Port, led_r_Pin, GPIO_PIN_SET);
 8000e42:	2380      	movs	r3, #128	@ 0x80
 8000e44:	0059      	lsls	r1, r3, #1
 8000e46:	23a0      	movs	r3, #160	@ 0xa0
 8000e48:	05db      	lsls	r3, r3, #23
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f000 ffb7 	bl	8001dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 8000e52:	2380      	movs	r3, #128	@ 0x80
 8000e54:	0219      	lsls	r1, r3, #8
 8000e56:	23a0      	movs	r3, #160	@ 0xa0
 8000e58:	05db      	lsls	r3, r3, #23
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f000 ffaf 	bl	8001dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : offb_Pin off_Pin */
  GPIO_InitStruct.Pin = offb_Pin|off_Pin;
 8000e62:	193b      	adds	r3, r7, r4
 8000e64:	2203      	movs	r2, #3
 8000e66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e68:	193b      	adds	r3, r7, r4
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e6e:	193b      	adds	r3, r7, r4
 8000e70:	2202      	movs	r2, #2
 8000e72:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	193b      	adds	r3, r7, r4
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e7a:	193b      	adds	r3, r7, r4
 8000e7c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ee8 <MX_GPIO_Init+0x12c>)
 8000e7e:	0019      	movs	r1, r3
 8000e80:	0010      	movs	r0, r2
 8000e82:	f000 fe2f 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : cmd_pleins_phares_Pin led_v_Pin direction_Pin IRQ_Pin
                           CE_Pin */
  GPIO_InitStruct.Pin = cmd_pleins_phares_Pin|led_v_Pin|direction_Pin|IRQ_Pin
 8000e86:	0021      	movs	r1, r4
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	22ce      	movs	r2, #206	@ 0xce
 8000e8c:	01d2      	lsls	r2, r2, #7
 8000e8e:	601a      	str	r2, [r3, #0]
                          |CE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e90:	000c      	movs	r4, r1
 8000e92:	193b      	adds	r3, r7, r4
 8000e94:	2201      	movs	r2, #1
 8000e96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	193b      	adds	r3, r7, r4
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	193b      	adds	r3, r7, r4
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea4:	193b      	adds	r3, r7, r4
 8000ea6:	4a11      	ldr	r2, [pc, #68]	@ (8000eec <MX_GPIO_Init+0x130>)
 8000ea8:	0019      	movs	r1, r3
 8000eaa:	0010      	movs	r0, r2
 8000eac:	f000 fe1a 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_r_Pin CSN_Pin */
  GPIO_InitStruct.Pin = led_r_Pin|CSN_Pin;
 8000eb0:	0021      	movs	r1, r4
 8000eb2:	187b      	adds	r3, r7, r1
 8000eb4:	2281      	movs	r2, #129	@ 0x81
 8000eb6:	0212      	lsls	r2, r2, #8
 8000eb8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	187b      	adds	r3, r7, r1
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	187b      	adds	r3, r7, r1
 8000ec8:	2200      	movs	r2, #0
 8000eca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ecc:	187a      	adds	r2, r7, r1
 8000ece:	23a0      	movs	r3, #160	@ 0xa0
 8000ed0:	05db      	lsls	r3, r3, #23
 8000ed2:	0011      	movs	r1, r2
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f000 fe05 	bl	8001ae4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eda:	46c0      	nop			@ (mov r8, r8)
 8000edc:	46bd      	mov	sp, r7
 8000ede:	b009      	add	sp, #36	@ 0x24
 8000ee0:	bd90      	pop	{r4, r7, pc}
 8000ee2:	46c0      	nop			@ (mov r8, r8)
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	50001c00 	.word	0x50001c00
 8000eec:	50000400 	.word	0x50000400

08000ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef4:	b672      	cpsid	i
}
 8000ef6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef8:	46c0      	nop			@ (mov r8, r8)
 8000efa:	e7fd      	b.n	8000ef8 <Error_Handler+0x8>

08000efc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f00:	4b07      	ldr	r3, [pc, #28]	@ (8000f20 <HAL_MspInit+0x24>)
 8000f02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f04:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <HAL_MspInit+0x24>)
 8000f06:	2101      	movs	r1, #1
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0c:	4b04      	ldr	r3, [pc, #16]	@ (8000f20 <HAL_MspInit+0x24>)
 8000f0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f10:	4b03      	ldr	r3, [pc, #12]	@ (8000f20 <HAL_MspInit+0x24>)
 8000f12:	2180      	movs	r1, #128	@ 0x80
 8000f14:	0549      	lsls	r1, r1, #21
 8000f16:	430a      	orrs	r2, r1
 8000f18:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1a:	46c0      	nop			@ (mov r8, r8)
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40021000 	.word	0x40021000

08000f24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	b08b      	sub	sp, #44	@ 0x2c
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	2414      	movs	r4, #20
 8000f2e:	193b      	adds	r3, r7, r4
 8000f30:	0018      	movs	r0, r3
 8000f32:	2314      	movs	r3, #20
 8000f34:	001a      	movs	r2, r3
 8000f36:	2100      	movs	r1, #0
 8000f38:	f006 f878 	bl	800702c <memset>
  if(hadc->Instance==ADC1)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a22      	ldr	r2, [pc, #136]	@ (8000fcc <HAL_ADC_MspInit+0xa8>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d13d      	bne.n	8000fc2 <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f46:	4b22      	ldr	r3, [pc, #136]	@ (8000fd0 <HAL_ADC_MspInit+0xac>)
 8000f48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f4a:	4b21      	ldr	r3, [pc, #132]	@ (8000fd0 <HAL_ADC_MspInit+0xac>)
 8000f4c:	2180      	movs	r1, #128	@ 0x80
 8000f4e:	0089      	lsls	r1, r1, #2
 8000f50:	430a      	orrs	r2, r1
 8000f52:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f54:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd0 <HAL_ADC_MspInit+0xac>)
 8000f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f58:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd0 <HAL_ADC_MspInit+0xac>)
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f60:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd0 <HAL_ADC_MspInit+0xac>)
 8000f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f64:	2201      	movs	r2, #1
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6c:	4b18      	ldr	r3, [pc, #96]	@ (8000fd0 <HAL_ADC_MspInit+0xac>)
 8000f6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f70:	4b17      	ldr	r3, [pc, #92]	@ (8000fd0 <HAL_ADC_MspInit+0xac>)
 8000f72:	2102      	movs	r1, #2
 8000f74:	430a      	orrs	r2, r1
 8000f76:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f78:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <HAL_ADC_MspInit+0xac>)
 8000f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	4013      	ands	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = Courant_moteur_Pin;
 8000f84:	193b      	adds	r3, r7, r4
 8000f86:	2210      	movs	r2, #16
 8000f88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f8a:	193b      	adds	r3, r7, r4
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	193b      	adds	r3, r7, r4
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Courant_moteur_GPIO_Port, &GPIO_InitStruct);
 8000f96:	193a      	adds	r2, r7, r4
 8000f98:	23a0      	movs	r3, #160	@ 0xa0
 8000f9a:	05db      	lsls	r3, r3, #23
 8000f9c:	0011      	movs	r1, r2
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f000 fda0 	bl	8001ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Tension_batterie_Pin;
 8000fa4:	193b      	adds	r3, r7, r4
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000faa:	193b      	adds	r3, r7, r4
 8000fac:	2203      	movs	r2, #3
 8000fae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	193b      	adds	r3, r7, r4
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Tension_batterie_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	193b      	adds	r3, r7, r4
 8000fb8:	4a06      	ldr	r2, [pc, #24]	@ (8000fd4 <HAL_ADC_MspInit+0xb0>)
 8000fba:	0019      	movs	r1, r3
 8000fbc:	0010      	movs	r0, r2
 8000fbe:	f000 fd91 	bl	8001ae4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000fc2:	46c0      	nop			@ (mov r8, r8)
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	b00b      	add	sp, #44	@ 0x2c
 8000fc8:	bd90      	pop	{r4, r7, pc}
 8000fca:	46c0      	nop			@ (mov r8, r8)
 8000fcc:	40012400 	.word	0x40012400
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	50000400 	.word	0x50000400

08000fd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b089      	sub	sp, #36	@ 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	240c      	movs	r4, #12
 8000fe2:	193b      	adds	r3, r7, r4
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	2314      	movs	r3, #20
 8000fe8:	001a      	movs	r2, r3
 8000fea:	2100      	movs	r1, #0
 8000fec:	f006 f81e 	bl	800702c <memset>
  if(hi2c->Instance==I2C1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a17      	ldr	r2, [pc, #92]	@ (8001054 <HAL_I2C_MspInit+0x7c>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d128      	bne.n	800104c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	4b17      	ldr	r3, [pc, #92]	@ (8001058 <HAL_I2C_MspInit+0x80>)
 8000ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ffe:	4b16      	ldr	r3, [pc, #88]	@ (8001058 <HAL_I2C_MspInit+0x80>)
 8001000:	2102      	movs	r1, #2
 8001002:	430a      	orrs	r2, r1
 8001004:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001006:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <HAL_I2C_MspInit+0x80>)
 8001008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800100a:	2202      	movs	r2, #2
 800100c:	4013      	ands	r3, r2
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001012:	0021      	movs	r1, r4
 8001014:	187b      	adds	r3, r7, r1
 8001016:	22c0      	movs	r2, #192	@ 0xc0
 8001018:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800101a:	187b      	adds	r3, r7, r1
 800101c:	2212      	movs	r2, #18
 800101e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	187b      	adds	r3, r7, r1
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	187b      	adds	r3, r7, r1
 8001028:	2203      	movs	r2, #3
 800102a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800102c:	187b      	adds	r3, r7, r1
 800102e:	2201      	movs	r2, #1
 8001030:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001032:	187b      	adds	r3, r7, r1
 8001034:	4a09      	ldr	r2, [pc, #36]	@ (800105c <HAL_I2C_MspInit+0x84>)
 8001036:	0019      	movs	r1, r3
 8001038:	0010      	movs	r0, r2
 800103a:	f000 fd53 	bl	8001ae4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800103e:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <HAL_I2C_MspInit+0x80>)
 8001040:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001042:	4b05      	ldr	r3, [pc, #20]	@ (8001058 <HAL_I2C_MspInit+0x80>)
 8001044:	2180      	movs	r1, #128	@ 0x80
 8001046:	0389      	lsls	r1, r1, #14
 8001048:	430a      	orrs	r2, r1
 800104a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800104c:	46c0      	nop			@ (mov r8, r8)
 800104e:	46bd      	mov	sp, r7
 8001050:	b009      	add	sp, #36	@ 0x24
 8001052:	bd90      	pop	{r4, r7, pc}
 8001054:	40005400 	.word	0x40005400
 8001058:	40021000 	.word	0x40021000
 800105c:	50000400 	.word	0x50000400

08001060 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a06      	ldr	r2, [pc, #24]	@ (8001088 <HAL_RTC_MspInit+0x28>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d106      	bne.n	8001080 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HAL_RTC_MspInit+0x2c>)
 8001074:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001076:	4b05      	ldr	r3, [pc, #20]	@ (800108c <HAL_RTC_MspInit+0x2c>)
 8001078:	2180      	movs	r1, #128	@ 0x80
 800107a:	02c9      	lsls	r1, r1, #11
 800107c:	430a      	orrs	r2, r1
 800107e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001080:	46c0      	nop			@ (mov r8, r8)
 8001082:	46bd      	mov	sp, r7
 8001084:	b002      	add	sp, #8
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40002800 	.word	0x40002800
 800108c:	40021000 	.word	0x40021000

08001090 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b089      	sub	sp, #36	@ 0x24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	240c      	movs	r4, #12
 800109a:	193b      	adds	r3, r7, r4
 800109c:	0018      	movs	r0, r3
 800109e:	2314      	movs	r3, #20
 80010a0:	001a      	movs	r2, r3
 80010a2:	2100      	movs	r1, #0
 80010a4:	f005 ffc2 	bl	800702c <memset>
  if(hspi->Instance==SPI1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a17      	ldr	r2, [pc, #92]	@ (800110c <HAL_SPI_MspInit+0x7c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d128      	bne.n	8001104 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010b2:	4b17      	ldr	r3, [pc, #92]	@ (8001110 <HAL_SPI_MspInit+0x80>)
 80010b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010b6:	4b16      	ldr	r3, [pc, #88]	@ (8001110 <HAL_SPI_MspInit+0x80>)
 80010b8:	2180      	movs	r1, #128	@ 0x80
 80010ba:	0149      	lsls	r1, r1, #5
 80010bc:	430a      	orrs	r2, r1
 80010be:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c0:	4b13      	ldr	r3, [pc, #76]	@ (8001110 <HAL_SPI_MspInit+0x80>)
 80010c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010c4:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <HAL_SPI_MspInit+0x80>)
 80010c6:	2102      	movs	r1, #2
 80010c8:	430a      	orrs	r2, r1
 80010ca:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010cc:	4b10      	ldr	r3, [pc, #64]	@ (8001110 <HAL_SPI_MspInit+0x80>)
 80010ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010d0:	2202      	movs	r2, #2
 80010d2:	4013      	ands	r3, r2
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80010d8:	0021      	movs	r1, r4
 80010da:	187b      	adds	r3, r7, r1
 80010dc:	2238      	movs	r2, #56	@ 0x38
 80010de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	187b      	adds	r3, r7, r1
 80010e2:	2202      	movs	r2, #2
 80010e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	187b      	adds	r3, r7, r1
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ec:	187b      	adds	r3, r7, r1
 80010ee:	2203      	movs	r2, #3
 80010f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80010f2:	187b      	adds	r3, r7, r1
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f8:	187b      	adds	r3, r7, r1
 80010fa:	4a06      	ldr	r2, [pc, #24]	@ (8001114 <HAL_SPI_MspInit+0x84>)
 80010fc:	0019      	movs	r1, r3
 80010fe:	0010      	movs	r0, r2
 8001100:	f000 fcf0 	bl	8001ae4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001104:	46c0      	nop			@ (mov r8, r8)
 8001106:	46bd      	mov	sp, r7
 8001108:	b009      	add	sp, #36	@ 0x24
 800110a:	bd90      	pop	{r4, r7, pc}
 800110c:	40013000 	.word	0x40013000
 8001110:	40021000 	.word	0x40021000
 8001114:	50000400 	.word	0x50000400

08001118 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	2380      	movs	r3, #128	@ 0x80
 8001126:	05db      	lsls	r3, r3, #23
 8001128:	429a      	cmp	r2, r3
 800112a:	d105      	bne.n	8001138 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800112c:	4b04      	ldr	r3, [pc, #16]	@ (8001140 <HAL_TIM_Base_MspInit+0x28>)
 800112e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001130:	4b03      	ldr	r3, [pc, #12]	@ (8001140 <HAL_TIM_Base_MspInit+0x28>)
 8001132:	2101      	movs	r1, #1
 8001134:	430a      	orrs	r2, r1
 8001136:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001138:	46c0      	nop			@ (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	b002      	add	sp, #8
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40021000 	.word	0x40021000

08001144 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b089      	sub	sp, #36	@ 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	240c      	movs	r4, #12
 800114e:	193b      	adds	r3, r7, r4
 8001150:	0018      	movs	r0, r3
 8001152:	2314      	movs	r3, #20
 8001154:	001a      	movs	r2, r3
 8001156:	2100      	movs	r1, #0
 8001158:	f005 ff68 	bl	800702c <memset>
  if(htim->Instance==TIM2)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	2380      	movs	r3, #128	@ 0x80
 8001162:	05db      	lsls	r3, r3, #23
 8001164:	429a      	cmp	r2, r3
 8001166:	d122      	bne.n	80011ae <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001168:	4b13      	ldr	r3, [pc, #76]	@ (80011b8 <HAL_TIM_MspPostInit+0x74>)
 800116a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800116c:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <HAL_TIM_MspPostInit+0x74>)
 800116e:	2101      	movs	r1, #1
 8001170:	430a      	orrs	r2, r1
 8001172:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001174:	4b10      	ldr	r3, [pc, #64]	@ (80011b8 <HAL_TIM_MspPostInit+0x74>)
 8001176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001178:	2201      	movs	r2, #1
 800117a:	4013      	ands	r3, r2
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = onb_Pin|on_Pin;
 8001180:	0021      	movs	r1, r4
 8001182:	187b      	adds	r3, r7, r1
 8001184:	2203      	movs	r2, #3
 8001186:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	187b      	adds	r3, r7, r1
 800118a:	2202      	movs	r2, #2
 800118c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800118e:	187b      	adds	r3, r7, r1
 8001190:	2202      	movs	r2, #2
 8001192:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	187b      	adds	r3, r7, r1
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800119a:	187b      	adds	r3, r7, r1
 800119c:	2202      	movs	r2, #2
 800119e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a0:	187a      	adds	r2, r7, r1
 80011a2:	23a0      	movs	r3, #160	@ 0xa0
 80011a4:	05db      	lsls	r3, r3, #23
 80011a6:	0011      	movs	r1, r2
 80011a8:	0018      	movs	r0, r3
 80011aa:	f000 fc9b 	bl	8001ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80011ae:	46c0      	nop			@ (mov r8, r8)
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b009      	add	sp, #36	@ 0x24
 80011b4:	bd90      	pop	{r4, r7, pc}
 80011b6:	46c0      	nop			@ (mov r8, r8)
 80011b8:	40021000 	.word	0x40021000

080011bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b089      	sub	sp, #36	@ 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	240c      	movs	r4, #12
 80011c6:	193b      	adds	r3, r7, r4
 80011c8:	0018      	movs	r0, r3
 80011ca:	2314      	movs	r3, #20
 80011cc:	001a      	movs	r2, r3
 80011ce:	2100      	movs	r1, #0
 80011d0:	f005 ff2c 	bl	800702c <memset>
  if(huart->Instance==USART2)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a18      	ldr	r2, [pc, #96]	@ (800123c <HAL_UART_MspInit+0x80>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d12a      	bne.n	8001234 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011de:	4b18      	ldr	r3, [pc, #96]	@ (8001240 <HAL_UART_MspInit+0x84>)
 80011e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80011e2:	4b17      	ldr	r3, [pc, #92]	@ (8001240 <HAL_UART_MspInit+0x84>)
 80011e4:	2180      	movs	r1, #128	@ 0x80
 80011e6:	0289      	lsls	r1, r1, #10
 80011e8:	430a      	orrs	r2, r1
 80011ea:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ec:	4b14      	ldr	r3, [pc, #80]	@ (8001240 <HAL_UART_MspInit+0x84>)
 80011ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011f0:	4b13      	ldr	r3, [pc, #76]	@ (8001240 <HAL_UART_MspInit+0x84>)
 80011f2:	2101      	movs	r1, #1
 80011f4:	430a      	orrs	r2, r1
 80011f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80011f8:	4b11      	ldr	r3, [pc, #68]	@ (8001240 <HAL_UART_MspInit+0x84>)
 80011fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011fc:	2201      	movs	r2, #1
 80011fe:	4013      	ands	r3, r2
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA9     ------> USART2_TX
    PA10     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001204:	193b      	adds	r3, r7, r4
 8001206:	22c0      	movs	r2, #192	@ 0xc0
 8001208:	00d2      	lsls	r2, r2, #3
 800120a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	0021      	movs	r1, r4
 800120e:	187b      	adds	r3, r7, r1
 8001210:	2202      	movs	r2, #2
 8001212:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	187b      	adds	r3, r7, r1
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121a:	187b      	adds	r3, r7, r1
 800121c:	2203      	movs	r2, #3
 800121e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001220:	187b      	adds	r3, r7, r1
 8001222:	2204      	movs	r2, #4
 8001224:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	187a      	adds	r2, r7, r1
 8001228:	23a0      	movs	r3, #160	@ 0xa0
 800122a:	05db      	lsls	r3, r3, #23
 800122c:	0011      	movs	r1, r2
 800122e:	0018      	movs	r0, r3
 8001230:	f000 fc58 	bl	8001ae4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001234:	46c0      	nop			@ (mov r8, r8)
 8001236:	46bd      	mov	sp, r7
 8001238:	b009      	add	sp, #36	@ 0x24
 800123a:	bd90      	pop	{r4, r7, pc}
 800123c:	40004400 	.word	0x40004400
 8001240:	40021000 	.word	0x40021000

08001244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001248:	46c0      	nop			@ (mov r8, r8)
 800124a:	e7fd      	b.n	8001248 <NMI_Handler+0x4>

0800124c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001250:	46c0      	nop			@ (mov r8, r8)
 8001252:	e7fd      	b.n	8001250 <HardFault_Handler+0x4>

08001254 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001258:	46c0      	nop			@ (mov r8, r8)
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001262:	46c0      	nop			@ (mov r8, r8)
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800126c:	f000 f8d6 	bl	800141c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001270:	46c0      	nop			@ (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001280:	4a14      	ldr	r2, [pc, #80]	@ (80012d4 <_sbrk+0x5c>)
 8001282:	4b15      	ldr	r3, [pc, #84]	@ (80012d8 <_sbrk+0x60>)
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800128c:	4b13      	ldr	r3, [pc, #76]	@ (80012dc <_sbrk+0x64>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d102      	bne.n	800129a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001294:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <_sbrk+0x64>)
 8001296:	4a12      	ldr	r2, [pc, #72]	@ (80012e0 <_sbrk+0x68>)
 8001298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800129a:	4b10      	ldr	r3, [pc, #64]	@ (80012dc <_sbrk+0x64>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	18d3      	adds	r3, r2, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d207      	bcs.n	80012b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a8:	f005 fec8 	bl	800703c <__errno>
 80012ac:	0003      	movs	r3, r0
 80012ae:	220c      	movs	r2, #12
 80012b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012b2:	2301      	movs	r3, #1
 80012b4:	425b      	negs	r3, r3
 80012b6:	e009      	b.n	80012cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b8:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012be:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <_sbrk+0x64>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	18d2      	adds	r2, r2, r3
 80012c6:	4b05      	ldr	r3, [pc, #20]	@ (80012dc <_sbrk+0x64>)
 80012c8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80012ca:	68fb      	ldr	r3, [r7, #12]
}
 80012cc:	0018      	movs	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b006      	add	sp, #24
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20002000 	.word	0x20002000
 80012d8:	00000400 	.word	0x00000400
 80012dc:	200002d4 	.word	0x200002d4
 80012e0:	20000770 	.word	0x20000770

080012e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e8:	46c0      	nop			@ (mov r8, r8)
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80012f0:	4813      	ldr	r0, [pc, #76]	@ (8001340 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80012f2:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012f4:	f7ff fff6 	bl	80012e4 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80012f8:	4812      	ldr	r0, [pc, #72]	@ (8001344 <LoopForever+0x6>)
    LDR R1, [R0]
 80012fa:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80012fc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80012fe:	4a12      	ldr	r2, [pc, #72]	@ (8001348 <LoopForever+0xa>)
    CMP R1, R2
 8001300:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001302:	d105      	bne.n	8001310 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001304:	4811      	ldr	r0, [pc, #68]	@ (800134c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001306:	4912      	ldr	r1, [pc, #72]	@ (8001350 <LoopForever+0x12>)
    STR R1, [R0]
 8001308:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800130a:	4812      	ldr	r0, [pc, #72]	@ (8001354 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800130c:	4912      	ldr	r1, [pc, #72]	@ (8001358 <LoopForever+0x1a>)
    STR R1, [R0]
 800130e:	6001      	str	r1, [r0, #0]

08001310 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001310:	4812      	ldr	r0, [pc, #72]	@ (800135c <LoopForever+0x1e>)
  ldr r1, =_edata
 8001312:	4913      	ldr	r1, [pc, #76]	@ (8001360 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001314:	4a13      	ldr	r2, [pc, #76]	@ (8001364 <LoopForever+0x26>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001318:	e002      	b.n	8001320 <LoopCopyDataInit>

0800131a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800131a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800131c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131e:	3304      	adds	r3, #4

08001320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001324:	d3f9      	bcc.n	800131a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001326:	4a10      	ldr	r2, [pc, #64]	@ (8001368 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001328:	4c10      	ldr	r4, [pc, #64]	@ (800136c <LoopForever+0x2e>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800132c:	e001      	b.n	8001332 <LoopFillZerobss>

0800132e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001330:	3204      	adds	r2, #4

08001332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001334:	d3fb      	bcc.n	800132e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001336:	f005 fe87 	bl	8007048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800133a:	f7ff fa9f 	bl	800087c <main>

0800133e <LoopForever>:

LoopForever:
    b LoopForever
 800133e:	e7fe      	b.n	800133e <LoopForever>
   ldr   r0, =_estack
 8001340:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8001344:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001348:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 800134c:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001350:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001354:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001358:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800135c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001360:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001364:	08007bfc 	.word	0x08007bfc
  ldr r2, =_sbss
 8001368:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800136c:	20000770 	.word	0x20000770

08001370 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001370:	e7fe      	b.n	8001370 <ADC1_IRQHandler>
	...

08001374 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800137a:	1dfb      	adds	r3, r7, #7
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001380:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <HAL_Init+0x3c>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b0a      	ldr	r3, [pc, #40]	@ (80013b0 <HAL_Init+0x3c>)
 8001386:	2140      	movs	r1, #64	@ 0x40
 8001388:	430a      	orrs	r2, r1
 800138a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800138c:	2003      	movs	r0, #3
 800138e:	f000 f811 	bl	80013b4 <HAL_InitTick>
 8001392:	1e03      	subs	r3, r0, #0
 8001394:	d003      	beq.n	800139e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001396:	1dfb      	adds	r3, r7, #7
 8001398:	2201      	movs	r2, #1
 800139a:	701a      	strb	r2, [r3, #0]
 800139c:	e001      	b.n	80013a2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800139e:	f7ff fdad 	bl	8000efc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013a2:	1dfb      	adds	r3, r7, #7
 80013a4:	781b      	ldrb	r3, [r3, #0]
}
 80013a6:	0018      	movs	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	b002      	add	sp, #8
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	46c0      	nop			@ (mov r8, r8)
 80013b0:	40022000 	.word	0x40022000

080013b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b4:	b590      	push	{r4, r7, lr}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013bc:	4b14      	ldr	r3, [pc, #80]	@ (8001410 <HAL_InitTick+0x5c>)
 80013be:	681c      	ldr	r4, [r3, #0]
 80013c0:	4b14      	ldr	r3, [pc, #80]	@ (8001414 <HAL_InitTick+0x60>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	0019      	movs	r1, r3
 80013c6:	23fa      	movs	r3, #250	@ 0xfa
 80013c8:	0098      	lsls	r0, r3, #2
 80013ca:	f7fe feaf 	bl	800012c <__udivsi3>
 80013ce:	0003      	movs	r3, r0
 80013d0:	0019      	movs	r1, r3
 80013d2:	0020      	movs	r0, r4
 80013d4:	f7fe feaa 	bl	800012c <__udivsi3>
 80013d8:	0003      	movs	r3, r0
 80013da:	0018      	movs	r0, r3
 80013dc:	f000 fae1 	bl	80019a2 <HAL_SYSTICK_Config>
 80013e0:	1e03      	subs	r3, r0, #0
 80013e2:	d001      	beq.n	80013e8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e00f      	b.n	8001408 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d80b      	bhi.n	8001406 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	2301      	movs	r3, #1
 80013f2:	425b      	negs	r3, r3
 80013f4:	2200      	movs	r2, #0
 80013f6:	0018      	movs	r0, r3
 80013f8:	f000 fabe 	bl	8001978 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013fc:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <HAL_InitTick+0x64>)
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001402:	2300      	movs	r3, #0
 8001404:	e000      	b.n	8001408 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
}
 8001408:	0018      	movs	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	b003      	add	sp, #12
 800140e:	bd90      	pop	{r4, r7, pc}
 8001410:	20000030 	.word	0x20000030
 8001414:	20000038 	.word	0x20000038
 8001418:	20000034 	.word	0x20000034

0800141c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001420:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <HAL_IncTick+0x1c>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	001a      	movs	r2, r3
 8001426:	4b05      	ldr	r3, [pc, #20]	@ (800143c <HAL_IncTick+0x20>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	18d2      	adds	r2, r2, r3
 800142c:	4b03      	ldr	r3, [pc, #12]	@ (800143c <HAL_IncTick+0x20>)
 800142e:	601a      	str	r2, [r3, #0]
}
 8001430:	46c0      	nop			@ (mov r8, r8)
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	46c0      	nop			@ (mov r8, r8)
 8001438:	20000038 	.word	0x20000038
 800143c:	200002d8 	.word	0x200002d8

08001440 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  return uwTick;
 8001444:	4b02      	ldr	r3, [pc, #8]	@ (8001450 <HAL_GetTick+0x10>)
 8001446:	681b      	ldr	r3, [r3, #0]
}
 8001448:	0018      	movs	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	46c0      	nop			@ (mov r8, r8)
 8001450:	200002d8 	.word	0x200002d8

08001454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800145c:	f7ff fff0 	bl	8001440 <HAL_GetTick>
 8001460:	0003      	movs	r3, r0
 8001462:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	3301      	adds	r3, #1
 800146c:	d005      	beq.n	800147a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800146e:	4b0a      	ldr	r3, [pc, #40]	@ (8001498 <HAL_Delay+0x44>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	001a      	movs	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	189b      	adds	r3, r3, r2
 8001478:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800147a:	46c0      	nop			@ (mov r8, r8)
 800147c:	f7ff ffe0 	bl	8001440 <HAL_GetTick>
 8001480:	0002      	movs	r2, r0
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	429a      	cmp	r2, r3
 800148a:	d8f7      	bhi.n	800147c <HAL_Delay+0x28>
  {
  }
}
 800148c:	46c0      	nop			@ (mov r8, r8)
 800148e:	46c0      	nop			@ (mov r8, r8)
 8001490:	46bd      	mov	sp, r7
 8001492:	b004      	add	sp, #16
 8001494:	bd80      	pop	{r7, pc}
 8001496:	46c0      	nop			@ (mov r8, r8)
 8001498:	20000038 	.word	0x20000038

0800149c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e159      	b.n	8001762 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10a      	bne.n	80014cc <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2250      	movs	r2, #80	@ 0x50
 80014c0:	2100      	movs	r1, #0
 80014c2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	0018      	movs	r0, r3
 80014c8:	f7ff fd2c 	bl	8000f24 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014d0:	2210      	movs	r2, #16
 80014d2:	4013      	ands	r3, r2
 80014d4:	2b10      	cmp	r3, #16
 80014d6:	d005      	beq.n	80014e4 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2204      	movs	r2, #4
 80014e0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80014e2:	d00b      	beq.n	80014fc <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014e8:	2210      	movs	r2, #16
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2250      	movs	r2, #80	@ 0x50
 80014f4:	2100      	movs	r1, #0
 80014f6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e132      	b.n	8001762 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001500:	4a9a      	ldr	r2, [pc, #616]	@ (800176c <HAL_ADC_Init+0x2d0>)
 8001502:	4013      	ands	r3, r2
 8001504:	2202      	movs	r2, #2
 8001506:	431a      	orrs	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2203      	movs	r2, #3
 8001514:	4013      	ands	r3, r2
 8001516:	2b01      	cmp	r3, #1
 8001518:	d108      	bne.n	800152c <HAL_ADC_Init+0x90>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2201      	movs	r2, #1
 8001522:	4013      	ands	r3, r2
 8001524:	2b01      	cmp	r3, #1
 8001526:	d101      	bne.n	800152c <HAL_ADC_Init+0x90>
 8001528:	2301      	movs	r3, #1
 800152a:	e000      	b.n	800152e <HAL_ADC_Init+0x92>
 800152c:	2300      	movs	r3, #0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d149      	bne.n	80015c6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	23c0      	movs	r3, #192	@ 0xc0
 8001538:	061b      	lsls	r3, r3, #24
 800153a:	429a      	cmp	r2, r3
 800153c:	d00b      	beq.n	8001556 <HAL_ADC_Init+0xba>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	2380      	movs	r3, #128	@ 0x80
 8001544:	05db      	lsls	r3, r3, #23
 8001546:	429a      	cmp	r2, r3
 8001548:	d005      	beq.n	8001556 <HAL_ADC_Init+0xba>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	2380      	movs	r3, #128	@ 0x80
 8001550:	061b      	lsls	r3, r3, #24
 8001552:	429a      	cmp	r2, r3
 8001554:	d111      	bne.n	800157a <HAL_ADC_Init+0xde>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	691a      	ldr	r2, [r3, #16]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	0092      	lsls	r2, r2, #2
 8001562:	0892      	lsrs	r2, r2, #2
 8001564:	611a      	str	r2, [r3, #16]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6919      	ldr	r1, [r3, #16]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	430a      	orrs	r2, r1
 8001576:	611a      	str	r2, [r3, #16]
 8001578:	e014      	b.n	80015a4 <HAL_ADC_Init+0x108>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	691a      	ldr	r2, [r3, #16]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	0092      	lsls	r2, r2, #2
 8001586:	0892      	lsrs	r2, r2, #2
 8001588:	611a      	str	r2, [r3, #16]
 800158a:	4b79      	ldr	r3, [pc, #484]	@ (8001770 <HAL_ADC_Init+0x2d4>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4b78      	ldr	r3, [pc, #480]	@ (8001770 <HAL_ADC_Init+0x2d4>)
 8001590:	4978      	ldr	r1, [pc, #480]	@ (8001774 <HAL_ADC_Init+0x2d8>)
 8001592:	400a      	ands	r2, r1
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	4b76      	ldr	r3, [pc, #472]	@ (8001770 <HAL_ADC_Init+0x2d4>)
 8001598:	6819      	ldr	r1, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	4b74      	ldr	r3, [pc, #464]	@ (8001770 <HAL_ADC_Init+0x2d4>)
 80015a0:	430a      	orrs	r2, r1
 80015a2:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68da      	ldr	r2, [r3, #12]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2118      	movs	r1, #24
 80015b0:	438a      	bics	r2, r1
 80015b2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	68d9      	ldr	r1, [r3, #12]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80015c6:	4b6a      	ldr	r3, [pc, #424]	@ (8001770 <HAL_ADC_Init+0x2d4>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4b69      	ldr	r3, [pc, #420]	@ (8001770 <HAL_ADC_Init+0x2d4>)
 80015cc:	496a      	ldr	r1, [pc, #424]	@ (8001778 <HAL_ADC_Init+0x2dc>)
 80015ce:	400a      	ands	r2, r1
 80015d0:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80015d2:	4b67      	ldr	r3, [pc, #412]	@ (8001770 <HAL_ADC_Init+0x2d4>)
 80015d4:	6819      	ldr	r1, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015da:	065a      	lsls	r2, r3, #25
 80015dc:	4b64      	ldr	r3, [pc, #400]	@ (8001770 <HAL_ADC_Init+0x2d4>)
 80015de:	430a      	orrs	r2, r1
 80015e0:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	2380      	movs	r3, #128	@ 0x80
 80015ea:	055b      	lsls	r3, r3, #21
 80015ec:	4013      	ands	r3, r2
 80015ee:	d108      	bne.n	8001602 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2180      	movs	r1, #128	@ 0x80
 80015fc:	0549      	lsls	r1, r1, #21
 80015fe:	430a      	orrs	r2, r1
 8001600:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	68da      	ldr	r2, [r3, #12]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	495b      	ldr	r1, [pc, #364]	@ (800177c <HAL_ADC_Init+0x2e0>)
 800160e:	400a      	ands	r2, r1
 8001610:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68d9      	ldr	r1, [r3, #12]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d101      	bne.n	8001628 <HAL_ADC_Init+0x18c>
 8001624:	2304      	movs	r3, #4
 8001626:	e000      	b.n	800162a <HAL_ADC_Init+0x18e>
 8001628:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800162a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2020      	movs	r0, #32
 8001630:	5c1b      	ldrb	r3, [r3, r0]
 8001632:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001634:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	202c      	movs	r0, #44	@ 0x2c
 800163a:	5c1b      	ldrb	r3, [r3, r0]
 800163c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800163e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001644:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800164c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001654:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001662:	23c2      	movs	r3, #194	@ 0xc2
 8001664:	33ff      	adds	r3, #255	@ 0xff
 8001666:	429a      	cmp	r2, r3
 8001668:	d00b      	beq.n	8001682 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68d9      	ldr	r1, [r3, #12]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001678:	431a      	orrs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	430a      	orrs	r2, r1
 8001680:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2221      	movs	r2, #33	@ 0x21
 8001686:	5c9b      	ldrb	r3, [r3, r2]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d11a      	bne.n	80016c2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2220      	movs	r2, #32
 8001690:	5c9b      	ldrb	r3, [r3, r2]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d109      	bne.n	80016aa <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68da      	ldr	r2, [r3, #12]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2180      	movs	r1, #128	@ 0x80
 80016a2:	0249      	lsls	r1, r1, #9
 80016a4:	430a      	orrs	r2, r1
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	e00b      	b.n	80016c2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ae:	2220      	movs	r2, #32
 80016b0:	431a      	orrs	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ba:	2201      	movs	r2, #1
 80016bc:	431a      	orrs	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d11f      	bne.n	800170a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	691a      	ldr	r2, [r3, #16]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	492a      	ldr	r1, [pc, #168]	@ (8001780 <HAL_ADC_Init+0x2e4>)
 80016d6:	400a      	ands	r2, r1
 80016d8:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6919      	ldr	r1, [r3, #16]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80016e8:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80016ee:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	691a      	ldr	r2, [r3, #16]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2101      	movs	r1, #1
 8001704:	430a      	orrs	r2, r1
 8001706:	611a      	str	r2, [r3, #16]
 8001708:	e00e      	b.n	8001728 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	2201      	movs	r2, #1
 8001712:	4013      	ands	r3, r2
 8001714:	2b01      	cmp	r3, #1
 8001716:	d107      	bne.n	8001728 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	691a      	ldr	r2, [r3, #16]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2101      	movs	r1, #1
 8001724:	438a      	bics	r2, r1
 8001726:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	695a      	ldr	r2, [r3, #20]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2107      	movs	r1, #7
 8001734:	438a      	bics	r2, r1
 8001736:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6959      	ldr	r1, [r3, #20]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001754:	2203      	movs	r2, #3
 8001756:	4393      	bics	r3, r2
 8001758:	2201      	movs	r2, #1
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	0018      	movs	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	b002      	add	sp, #8
 8001768:	bd80      	pop	{r7, pc}
 800176a:	46c0      	nop			@ (mov r8, r8)
 800176c:	fffffefd 	.word	0xfffffefd
 8001770:	40012708 	.word	0x40012708
 8001774:	ffc3ffff 	.word	0xffc3ffff
 8001778:	fdffffff 	.word	0xfdffffff
 800177c:	fffe0219 	.word	0xfffe0219
 8001780:	fffffc03 	.word	0xfffffc03

08001784 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2250      	movs	r2, #80	@ 0x50
 8001792:	5c9b      	ldrb	r3, [r3, r2]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d101      	bne.n	800179c <HAL_ADC_ConfigChannel+0x18>
 8001798:	2302      	movs	r3, #2
 800179a:	e050      	b.n	800183e <HAL_ADC_ConfigChannel+0xba>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2250      	movs	r2, #80	@ 0x50
 80017a0:	2101      	movs	r1, #1
 80017a2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2204      	movs	r2, #4
 80017ac:	4013      	ands	r3, r2
 80017ae:	d00b      	beq.n	80017c8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017b4:	2220      	movs	r2, #32
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2250      	movs	r2, #80	@ 0x50
 80017c0:	2100      	movs	r1, #0
 80017c2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e03a      	b.n	800183e <HAL_ADC_ConfigChannel+0xba>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	4a1e      	ldr	r2, [pc, #120]	@ (8001848 <HAL_ADC_ConfigChannel+0xc4>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d018      	beq.n	8001804 <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	035b      	lsls	r3, r3, #13
 80017de:	0b5a      	lsrs	r2, r3, #13
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	629a      	str	r2, [r3, #40]	@ 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	2380      	movs	r3, #128	@ 0x80
 80017ee:	029b      	lsls	r3, r3, #10
 80017f0:	4013      	ands	r3, r2
 80017f2:	d01f      	beq.n	8001834 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80017f4:	4b15      	ldr	r3, [pc, #84]	@ (800184c <HAL_ADC_ConfigChannel+0xc8>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4b14      	ldr	r3, [pc, #80]	@ (800184c <HAL_ADC_ConfigChannel+0xc8>)
 80017fa:	2180      	movs	r1, #128	@ 0x80
 80017fc:	03c9      	lsls	r1, r1, #15
 80017fe:	430a      	orrs	r2, r1
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	e017      	b.n	8001834 <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	035b      	lsls	r3, r3, #13
 8001810:	0b5b      	lsrs	r3, r3, #13
 8001812:	43d9      	mvns	r1, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	400a      	ands	r2, r1
 800181a:	629a      	str	r2, [r3, #40]	@ 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	2380      	movs	r3, #128	@ 0x80
 8001822:	029b      	lsls	r3, r3, #10
 8001824:	4013      	ands	r3, r2
 8001826:	d005      	beq.n	8001834 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001828:	4b08      	ldr	r3, [pc, #32]	@ (800184c <HAL_ADC_ConfigChannel+0xc8>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b07      	ldr	r3, [pc, #28]	@ (800184c <HAL_ADC_ConfigChannel+0xc8>)
 800182e:	4908      	ldr	r1, [pc, #32]	@ (8001850 <HAL_ADC_ConfigChannel+0xcc>)
 8001830:	400a      	ands	r2, r1
 8001832:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2250      	movs	r2, #80	@ 0x50
 8001838:	2100      	movs	r1, #0
 800183a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	0018      	movs	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	b002      	add	sp, #8
 8001844:	bd80      	pop	{r7, pc}
 8001846:	46c0      	nop			@ (mov r8, r8)
 8001848:	00001001 	.word	0x00001001
 800184c:	40012708 	.word	0x40012708
 8001850:	ffbfffff 	.word	0xffbfffff

08001854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	0002      	movs	r2, r0
 800185c:	6039      	str	r1, [r7, #0]
 800185e:	1dfb      	adds	r3, r7, #7
 8001860:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001862:	1dfb      	adds	r3, r7, #7
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b7f      	cmp	r3, #127	@ 0x7f
 8001868:	d828      	bhi.n	80018bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800186a:	4a2f      	ldr	r2, [pc, #188]	@ (8001928 <__NVIC_SetPriority+0xd4>)
 800186c:	1dfb      	adds	r3, r7, #7
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	b25b      	sxtb	r3, r3
 8001872:	089b      	lsrs	r3, r3, #2
 8001874:	33c0      	adds	r3, #192	@ 0xc0
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	589b      	ldr	r3, [r3, r2]
 800187a:	1dfa      	adds	r2, r7, #7
 800187c:	7812      	ldrb	r2, [r2, #0]
 800187e:	0011      	movs	r1, r2
 8001880:	2203      	movs	r2, #3
 8001882:	400a      	ands	r2, r1
 8001884:	00d2      	lsls	r2, r2, #3
 8001886:	21ff      	movs	r1, #255	@ 0xff
 8001888:	4091      	lsls	r1, r2
 800188a:	000a      	movs	r2, r1
 800188c:	43d2      	mvns	r2, r2
 800188e:	401a      	ands	r2, r3
 8001890:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	019b      	lsls	r3, r3, #6
 8001896:	22ff      	movs	r2, #255	@ 0xff
 8001898:	401a      	ands	r2, r3
 800189a:	1dfb      	adds	r3, r7, #7
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	0018      	movs	r0, r3
 80018a0:	2303      	movs	r3, #3
 80018a2:	4003      	ands	r3, r0
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018a8:	481f      	ldr	r0, [pc, #124]	@ (8001928 <__NVIC_SetPriority+0xd4>)
 80018aa:	1dfb      	adds	r3, r7, #7
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	b25b      	sxtb	r3, r3
 80018b0:	089b      	lsrs	r3, r3, #2
 80018b2:	430a      	orrs	r2, r1
 80018b4:	33c0      	adds	r3, #192	@ 0xc0
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80018ba:	e031      	b.n	8001920 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018bc:	4a1b      	ldr	r2, [pc, #108]	@ (800192c <__NVIC_SetPriority+0xd8>)
 80018be:	1dfb      	adds	r3, r7, #7
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	0019      	movs	r1, r3
 80018c4:	230f      	movs	r3, #15
 80018c6:	400b      	ands	r3, r1
 80018c8:	3b08      	subs	r3, #8
 80018ca:	089b      	lsrs	r3, r3, #2
 80018cc:	3306      	adds	r3, #6
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	18d3      	adds	r3, r2, r3
 80018d2:	3304      	adds	r3, #4
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	1dfa      	adds	r2, r7, #7
 80018d8:	7812      	ldrb	r2, [r2, #0]
 80018da:	0011      	movs	r1, r2
 80018dc:	2203      	movs	r2, #3
 80018de:	400a      	ands	r2, r1
 80018e0:	00d2      	lsls	r2, r2, #3
 80018e2:	21ff      	movs	r1, #255	@ 0xff
 80018e4:	4091      	lsls	r1, r2
 80018e6:	000a      	movs	r2, r1
 80018e8:	43d2      	mvns	r2, r2
 80018ea:	401a      	ands	r2, r3
 80018ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	019b      	lsls	r3, r3, #6
 80018f2:	22ff      	movs	r2, #255	@ 0xff
 80018f4:	401a      	ands	r2, r3
 80018f6:	1dfb      	adds	r3, r7, #7
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	0018      	movs	r0, r3
 80018fc:	2303      	movs	r3, #3
 80018fe:	4003      	ands	r3, r0
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001904:	4809      	ldr	r0, [pc, #36]	@ (800192c <__NVIC_SetPriority+0xd8>)
 8001906:	1dfb      	adds	r3, r7, #7
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	001c      	movs	r4, r3
 800190c:	230f      	movs	r3, #15
 800190e:	4023      	ands	r3, r4
 8001910:	3b08      	subs	r3, #8
 8001912:	089b      	lsrs	r3, r3, #2
 8001914:	430a      	orrs	r2, r1
 8001916:	3306      	adds	r3, #6
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	18c3      	adds	r3, r0, r3
 800191c:	3304      	adds	r3, #4
 800191e:	601a      	str	r2, [r3, #0]
}
 8001920:	46c0      	nop			@ (mov r8, r8)
 8001922:	46bd      	mov	sp, r7
 8001924:	b003      	add	sp, #12
 8001926:	bd90      	pop	{r4, r7, pc}
 8001928:	e000e100 	.word	0xe000e100
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	1e5a      	subs	r2, r3, #1
 800193c:	2380      	movs	r3, #128	@ 0x80
 800193e:	045b      	lsls	r3, r3, #17
 8001940:	429a      	cmp	r2, r3
 8001942:	d301      	bcc.n	8001948 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001944:	2301      	movs	r3, #1
 8001946:	e010      	b.n	800196a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001948:	4b0a      	ldr	r3, [pc, #40]	@ (8001974 <SysTick_Config+0x44>)
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	3a01      	subs	r2, #1
 800194e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001950:	2301      	movs	r3, #1
 8001952:	425b      	negs	r3, r3
 8001954:	2103      	movs	r1, #3
 8001956:	0018      	movs	r0, r3
 8001958:	f7ff ff7c 	bl	8001854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800195c:	4b05      	ldr	r3, [pc, #20]	@ (8001974 <SysTick_Config+0x44>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001962:	4b04      	ldr	r3, [pc, #16]	@ (8001974 <SysTick_Config+0x44>)
 8001964:	2207      	movs	r2, #7
 8001966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001968:	2300      	movs	r3, #0
}
 800196a:	0018      	movs	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	b002      	add	sp, #8
 8001970:	bd80      	pop	{r7, pc}
 8001972:	46c0      	nop			@ (mov r8, r8)
 8001974:	e000e010 	.word	0xe000e010

08001978 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
 8001982:	210f      	movs	r1, #15
 8001984:	187b      	adds	r3, r7, r1
 8001986:	1c02      	adds	r2, r0, #0
 8001988:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	187b      	adds	r3, r7, r1
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	b25b      	sxtb	r3, r3
 8001992:	0011      	movs	r1, r2
 8001994:	0018      	movs	r0, r3
 8001996:	f7ff ff5d 	bl	8001854 <__NVIC_SetPriority>
}
 800199a:	46c0      	nop			@ (mov r8, r8)
 800199c:	46bd      	mov	sp, r7
 800199e:	b004      	add	sp, #16
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	0018      	movs	r0, r3
 80019ae:	f7ff ffbf 	bl	8001930 <SysTick_Config>
 80019b2:	0003      	movs	r3, r0
}
 80019b4:	0018      	movs	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	b002      	add	sp, #8
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
 80019c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019ca:	2317      	movs	r3, #23
 80019cc:	18fb      	adds	r3, r7, r3
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2224      	movs	r2, #36	@ 0x24
 80019d6:	5c9b      	ldrb	r3, [r3, r2]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <HAL_DMA_Start_IT+0x24>
 80019dc:	2302      	movs	r3, #2
 80019de:	e04f      	b.n	8001a80 <HAL_DMA_Start_IT+0xc4>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2224      	movs	r2, #36	@ 0x24
 80019e4:	2101      	movs	r1, #1
 80019e6:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2225      	movs	r2, #37	@ 0x25
 80019ec:	5c9b      	ldrb	r3, [r3, r2]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d13a      	bne.n	8001a6a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2225      	movs	r2, #37	@ 0x25
 80019f8:	2102      	movs	r1, #2
 80019fa:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2200      	movs	r2, #0
 8001a00:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	438a      	bics	r2, r1
 8001a10:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	68b9      	ldr	r1, [r7, #8]
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f000 f835 	bl	8001a88 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d008      	beq.n	8001a38 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	210e      	movs	r1, #14
 8001a32:	430a      	orrs	r2, r1
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	e00f      	b.n	8001a58 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2104      	movs	r1, #4
 8001a44:	438a      	bics	r2, r1
 8001a46:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	210a      	movs	r1, #10
 8001a54:	430a      	orrs	r2, r1
 8001a56:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2101      	movs	r1, #1
 8001a64:	430a      	orrs	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	e007      	b.n	8001a7a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2224      	movs	r2, #36	@ 0x24
 8001a6e:	2100      	movs	r1, #0
 8001a70:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a72:	2317      	movs	r3, #23
 8001a74:	18fb      	adds	r3, r7, r3
 8001a76:	2202      	movs	r2, #2
 8001a78:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001a7a:	2317      	movs	r3, #23
 8001a7c:	18fb      	adds	r3, r7, r3
 8001a7e:	781b      	ldrb	r3, [r3, #0]
}
 8001a80:	0018      	movs	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	b006      	add	sp, #24
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9a:	221c      	movs	r2, #28
 8001a9c:	401a      	ands	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	4091      	lsls	r1, r2
 8001aa6:	000a      	movs	r2, r1
 8001aa8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b10      	cmp	r3, #16
 8001ab8:	d108      	bne.n	8001acc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001aca:	e007      	b.n	8001adc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68ba      	ldr	r2, [r7, #8]
 8001ad2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	60da      	str	r2, [r3, #12]
}
 8001adc:	46c0      	nop			@ (mov r8, r8)
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b004      	add	sp, #16
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001afa:	e149      	b.n	8001d90 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2101      	movs	r1, #1
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	4091      	lsls	r1, r2
 8001b06:	000a      	movs	r2, r1
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d100      	bne.n	8001b14 <HAL_GPIO_Init+0x30>
 8001b12:	e13a      	b.n	8001d8a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2203      	movs	r2, #3
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d005      	beq.n	8001b2c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2203      	movs	r2, #3
 8001b26:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d130      	bne.n	8001b8e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	2203      	movs	r2, #3
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	0013      	movs	r3, r2
 8001b3c:	43da      	mvns	r2, r3
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	68da      	ldr	r2, [r3, #12]
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	409a      	lsls	r2, r3
 8001b4e:	0013      	movs	r3, r2
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b62:	2201      	movs	r2, #1
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	409a      	lsls	r2, r3
 8001b68:	0013      	movs	r3, r2
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	091b      	lsrs	r3, r3, #4
 8001b78:	2201      	movs	r2, #1
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	409a      	lsls	r2, r3
 8001b80:	0013      	movs	r3, r2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2203      	movs	r2, #3
 8001b94:	4013      	ands	r3, r2
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d017      	beq.n	8001bca <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	409a      	lsls	r2, r3
 8001ba8:	0013      	movs	r3, r2
 8001baa:	43da      	mvns	r2, r3
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	409a      	lsls	r2, r3
 8001bbc:	0013      	movs	r3, r2
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2203      	movs	r2, #3
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d123      	bne.n	8001c1e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	08da      	lsrs	r2, r3, #3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3208      	adds	r2, #8
 8001bde:	0092      	lsls	r2, r2, #2
 8001be0:	58d3      	ldr	r3, [r2, r3]
 8001be2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	2207      	movs	r2, #7
 8001be8:	4013      	ands	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	220f      	movs	r2, #15
 8001bee:	409a      	lsls	r2, r3
 8001bf0:	0013      	movs	r3, r2
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	691a      	ldr	r2, [r3, #16]
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2107      	movs	r1, #7
 8001c02:	400b      	ands	r3, r1
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	409a      	lsls	r2, r3
 8001c08:	0013      	movs	r3, r2
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	08da      	lsrs	r2, r3, #3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3208      	adds	r2, #8
 8001c18:	0092      	lsls	r2, r2, #2
 8001c1a:	6939      	ldr	r1, [r7, #16]
 8001c1c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	2203      	movs	r2, #3
 8001c2a:	409a      	lsls	r2, r3
 8001c2c:	0013      	movs	r3, r2
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4013      	ands	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	401a      	ands	r2, r3
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	409a      	lsls	r2, r3
 8001c44:	0013      	movs	r3, r2
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	23c0      	movs	r3, #192	@ 0xc0
 8001c58:	029b      	lsls	r3, r3, #10
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d100      	bne.n	8001c60 <HAL_GPIO_Init+0x17c>
 8001c5e:	e094      	b.n	8001d8a <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c60:	4b51      	ldr	r3, [pc, #324]	@ (8001da8 <HAL_GPIO_Init+0x2c4>)
 8001c62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c64:	4b50      	ldr	r3, [pc, #320]	@ (8001da8 <HAL_GPIO_Init+0x2c4>)
 8001c66:	2101      	movs	r1, #1
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c6c:	4a4f      	ldr	r2, [pc, #316]	@ (8001dac <HAL_GPIO_Init+0x2c8>)
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	089b      	lsrs	r3, r3, #2
 8001c72:	3302      	adds	r3, #2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	589b      	ldr	r3, [r3, r2]
 8001c78:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	4013      	ands	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	220f      	movs	r2, #15
 8001c84:	409a      	lsls	r2, r3
 8001c86:	0013      	movs	r3, r2
 8001c88:	43da      	mvns	r2, r3
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	23a0      	movs	r3, #160	@ 0xa0
 8001c94:	05db      	lsls	r3, r3, #23
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d013      	beq.n	8001cc2 <HAL_GPIO_Init+0x1de>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a44      	ldr	r2, [pc, #272]	@ (8001db0 <HAL_GPIO_Init+0x2cc>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d00d      	beq.n	8001cbe <HAL_GPIO_Init+0x1da>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a43      	ldr	r2, [pc, #268]	@ (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d007      	beq.n	8001cba <HAL_GPIO_Init+0x1d6>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a42      	ldr	r2, [pc, #264]	@ (8001db8 <HAL_GPIO_Init+0x2d4>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d101      	bne.n	8001cb6 <HAL_GPIO_Init+0x1d2>
 8001cb2:	2305      	movs	r3, #5
 8001cb4:	e006      	b.n	8001cc4 <HAL_GPIO_Init+0x1e0>
 8001cb6:	2306      	movs	r3, #6
 8001cb8:	e004      	b.n	8001cc4 <HAL_GPIO_Init+0x1e0>
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e002      	b.n	8001cc4 <HAL_GPIO_Init+0x1e0>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <HAL_GPIO_Init+0x1e0>
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	2103      	movs	r1, #3
 8001cc8:	400a      	ands	r2, r1
 8001cca:	0092      	lsls	r2, r2, #2
 8001ccc:	4093      	lsls	r3, r2
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cd4:	4935      	ldr	r1, [pc, #212]	@ (8001dac <HAL_GPIO_Init+0x2c8>)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	089b      	lsrs	r3, r3, #2
 8001cda:	3302      	adds	r3, #2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ce2:	4b36      	ldr	r3, [pc, #216]	@ (8001dbc <HAL_GPIO_Init+0x2d8>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	43da      	mvns	r2, r3
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	2380      	movs	r3, #128	@ 0x80
 8001cf8:	035b      	lsls	r3, r3, #13
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d06:	4b2d      	ldr	r3, [pc, #180]	@ (8001dbc <HAL_GPIO_Init+0x2d8>)
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001d0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001dbc <HAL_GPIO_Init+0x2d8>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	43da      	mvns	r2, r3
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	2380      	movs	r3, #128	@ 0x80
 8001d22:	039b      	lsls	r3, r3, #14
 8001d24:	4013      	ands	r3, r2
 8001d26:	d003      	beq.n	8001d30 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d30:	4b22      	ldr	r3, [pc, #136]	@ (8001dbc <HAL_GPIO_Init+0x2d8>)
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001d36:	4b21      	ldr	r3, [pc, #132]	@ (8001dbc <HAL_GPIO_Init+0x2d8>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	43da      	mvns	r2, r3
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	4013      	ands	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	2380      	movs	r3, #128	@ 0x80
 8001d4c:	029b      	lsls	r3, r3, #10
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d5a:	4b18      	ldr	r3, [pc, #96]	@ (8001dbc <HAL_GPIO_Init+0x2d8>)
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d60:	4b16      	ldr	r3, [pc, #88]	@ (8001dbc <HAL_GPIO_Init+0x2d8>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	43da      	mvns	r2, r3
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	2380      	movs	r3, #128	@ 0x80
 8001d76:	025b      	lsls	r3, r3, #9
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d84:	4b0d      	ldr	r3, [pc, #52]	@ (8001dbc <HAL_GPIO_Init+0x2d8>)
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	40da      	lsrs	r2, r3
 8001d98:	1e13      	subs	r3, r2, #0
 8001d9a:	d000      	beq.n	8001d9e <HAL_GPIO_Init+0x2ba>
 8001d9c:	e6ae      	b.n	8001afc <HAL_GPIO_Init+0x18>
  }
}
 8001d9e:	46c0      	nop			@ (mov r8, r8)
 8001da0:	46c0      	nop			@ (mov r8, r8)
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b006      	add	sp, #24
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40010000 	.word	0x40010000
 8001db0:	50000400 	.word	0x50000400
 8001db4:	50000800 	.word	0x50000800
 8001db8:	50001c00 	.word	0x50001c00
 8001dbc:	40010400 	.word	0x40010400

08001dc0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	0008      	movs	r0, r1
 8001dca:	0011      	movs	r1, r2
 8001dcc:	1cbb      	adds	r3, r7, #2
 8001dce:	1c02      	adds	r2, r0, #0
 8001dd0:	801a      	strh	r2, [r3, #0]
 8001dd2:	1c7b      	adds	r3, r7, #1
 8001dd4:	1c0a      	adds	r2, r1, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dd8:	1c7b      	adds	r3, r7, #1
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d004      	beq.n	8001dea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001de0:	1cbb      	adds	r3, r7, #2
 8001de2:	881a      	ldrh	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001de8:	e003      	b.n	8001df2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001dea:	1cbb      	adds	r3, r7, #2
 8001dec:	881a      	ldrh	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001df2:	46c0      	nop			@ (mov r8, r8)
 8001df4:	46bd      	mov	sp, r7
 8001df6:	b002      	add	sp, #8
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e082      	b.n	8001f14 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2241      	movs	r2, #65	@ 0x41
 8001e12:	5c9b      	ldrb	r3, [r3, r2]
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d107      	bne.n	8001e2a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2240      	movs	r2, #64	@ 0x40
 8001e1e:	2100      	movs	r1, #0
 8001e20:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	0018      	movs	r0, r3
 8001e26:	f7ff f8d7 	bl	8000fd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2241      	movs	r2, #65	@ 0x41
 8001e2e:	2124      	movs	r1, #36	@ 0x24
 8001e30:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	438a      	bics	r2, r1
 8001e40:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4934      	ldr	r1, [pc, #208]	@ (8001f1c <HAL_I2C_Init+0x120>)
 8001e4c:	400a      	ands	r2, r1
 8001e4e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4931      	ldr	r1, [pc, #196]	@ (8001f20 <HAL_I2C_Init+0x124>)
 8001e5c:	400a      	ands	r2, r1
 8001e5e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d108      	bne.n	8001e7a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2180      	movs	r1, #128	@ 0x80
 8001e72:	0209      	lsls	r1, r1, #8
 8001e74:	430a      	orrs	r2, r1
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	e007      	b.n	8001e8a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2184      	movs	r1, #132	@ 0x84
 8001e84:	0209      	lsls	r1, r1, #8
 8001e86:	430a      	orrs	r2, r1
 8001e88:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d104      	bne.n	8001e9c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2280      	movs	r2, #128	@ 0x80
 8001e98:	0112      	lsls	r2, r2, #4
 8001e9a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	491f      	ldr	r1, [pc, #124]	@ (8001f24 <HAL_I2C_Init+0x128>)
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	491a      	ldr	r1, [pc, #104]	@ (8001f20 <HAL_I2C_Init+0x124>)
 8001eb8:	400a      	ands	r2, r1
 8001eba:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691a      	ldr	r2, [r3, #16]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69d9      	ldr	r1, [r3, #28]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a1a      	ldr	r2, [r3, #32]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2241      	movs	r2, #65	@ 0x41
 8001f00:	2120      	movs	r1, #32
 8001f02:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2242      	movs	r2, #66	@ 0x42
 8001f0e:	2100      	movs	r1, #0
 8001f10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	0018      	movs	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b002      	add	sp, #8
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	f0ffffff 	.word	0xf0ffffff
 8001f20:	ffff7fff 	.word	0xffff7fff
 8001f24:	02008000 	.word	0x02008000

08001f28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2241      	movs	r2, #65	@ 0x41
 8001f36:	5c9b      	ldrb	r3, [r3, r2]
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b20      	cmp	r3, #32
 8001f3c:	d138      	bne.n	8001fb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2240      	movs	r2, #64	@ 0x40
 8001f42:	5c9b      	ldrb	r3, [r3, r2]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d101      	bne.n	8001f4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e032      	b.n	8001fb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2240      	movs	r2, #64	@ 0x40
 8001f50:	2101      	movs	r1, #1
 8001f52:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2241      	movs	r2, #65	@ 0x41
 8001f58:	2124      	movs	r1, #36	@ 0x24
 8001f5a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2101      	movs	r1, #1
 8001f68:	438a      	bics	r2, r1
 8001f6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4911      	ldr	r1, [pc, #68]	@ (8001fbc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001f78:	400a      	ands	r2, r1
 8001f7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6819      	ldr	r1, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2101      	movs	r1, #1
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2241      	movs	r2, #65	@ 0x41
 8001fa0:	2120      	movs	r1, #32
 8001fa2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2240      	movs	r2, #64	@ 0x40
 8001fa8:	2100      	movs	r1, #0
 8001faa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001fac:	2300      	movs	r3, #0
 8001fae:	e000      	b.n	8001fb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fb0:	2302      	movs	r3, #2
  }
}
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	b002      	add	sp, #8
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	46c0      	nop			@ (mov r8, r8)
 8001fbc:	ffffefff 	.word	0xffffefff

08001fc0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2241      	movs	r2, #65	@ 0x41
 8001fce:	5c9b      	ldrb	r3, [r3, r2]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b20      	cmp	r3, #32
 8001fd4:	d139      	bne.n	800204a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2240      	movs	r2, #64	@ 0x40
 8001fda:	5c9b      	ldrb	r3, [r3, r2]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e033      	b.n	800204c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2240      	movs	r2, #64	@ 0x40
 8001fe8:	2101      	movs	r1, #1
 8001fea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2241      	movs	r2, #65	@ 0x41
 8001ff0:	2124      	movs	r1, #36	@ 0x24
 8001ff2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2101      	movs	r1, #1
 8002000:	438a      	bics	r2, r1
 8002002:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4a11      	ldr	r2, [pc, #68]	@ (8002054 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002010:	4013      	ands	r3, r2
 8002012:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	021b      	lsls	r3, r3, #8
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	4313      	orrs	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2101      	movs	r1, #1
 8002032:	430a      	orrs	r2, r1
 8002034:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2241      	movs	r2, #65	@ 0x41
 800203a:	2120      	movs	r1, #32
 800203c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2240      	movs	r2, #64	@ 0x40
 8002042:	2100      	movs	r1, #0
 8002044:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002046:	2300      	movs	r3, #0
 8002048:	e000      	b.n	800204c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800204a:	2302      	movs	r3, #2
  }
}
 800204c:	0018      	movs	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	b004      	add	sp, #16
 8002052:	bd80      	pop	{r7, pc}
 8002054:	fffff0ff 	.word	0xfffff0ff

08002058 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002058:	b5b0      	push	{r4, r5, r7, lr}
 800205a:	b08a      	sub	sp, #40	@ 0x28
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d102      	bne.n	800206c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	f000 fb6c 	bl	8002744 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800206c:	4bc8      	ldr	r3, [pc, #800]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	220c      	movs	r2, #12
 8002072:	4013      	ands	r3, r2
 8002074:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002076:	4bc6      	ldr	r3, [pc, #792]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	2380      	movs	r3, #128	@ 0x80
 800207c:	025b      	lsls	r3, r3, #9
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2201      	movs	r2, #1
 8002088:	4013      	ands	r3, r2
 800208a:	d100      	bne.n	800208e <HAL_RCC_OscConfig+0x36>
 800208c:	e07d      	b.n	800218a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	2b08      	cmp	r3, #8
 8002092:	d007      	beq.n	80020a4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	2b0c      	cmp	r3, #12
 8002098:	d112      	bne.n	80020c0 <HAL_RCC_OscConfig+0x68>
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	2380      	movs	r3, #128	@ 0x80
 800209e:	025b      	lsls	r3, r3, #9
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d10d      	bne.n	80020c0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a4:	4bba      	ldr	r3, [pc, #744]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	2380      	movs	r3, #128	@ 0x80
 80020aa:	029b      	lsls	r3, r3, #10
 80020ac:	4013      	ands	r3, r2
 80020ae:	d100      	bne.n	80020b2 <HAL_RCC_OscConfig+0x5a>
 80020b0:	e06a      	b.n	8002188 <HAL_RCC_OscConfig+0x130>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d166      	bne.n	8002188 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	f000 fb42 	bl	8002744 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	2380      	movs	r3, #128	@ 0x80
 80020c6:	025b      	lsls	r3, r3, #9
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d107      	bne.n	80020dc <HAL_RCC_OscConfig+0x84>
 80020cc:	4bb0      	ldr	r3, [pc, #704]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4baf      	ldr	r3, [pc, #700]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 80020d2:	2180      	movs	r1, #128	@ 0x80
 80020d4:	0249      	lsls	r1, r1, #9
 80020d6:	430a      	orrs	r2, r1
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	e027      	b.n	800212c <HAL_RCC_OscConfig+0xd4>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	23a0      	movs	r3, #160	@ 0xa0
 80020e2:	02db      	lsls	r3, r3, #11
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d10e      	bne.n	8002106 <HAL_RCC_OscConfig+0xae>
 80020e8:	4ba9      	ldr	r3, [pc, #676]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4ba8      	ldr	r3, [pc, #672]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 80020ee:	2180      	movs	r1, #128	@ 0x80
 80020f0:	02c9      	lsls	r1, r1, #11
 80020f2:	430a      	orrs	r2, r1
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	4ba6      	ldr	r3, [pc, #664]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	4ba5      	ldr	r3, [pc, #660]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 80020fc:	2180      	movs	r1, #128	@ 0x80
 80020fe:	0249      	lsls	r1, r1, #9
 8002100:	430a      	orrs	r2, r1
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	e012      	b.n	800212c <HAL_RCC_OscConfig+0xd4>
 8002106:	4ba2      	ldr	r3, [pc, #648]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	4ba1      	ldr	r3, [pc, #644]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 800210c:	49a1      	ldr	r1, [pc, #644]	@ (8002394 <HAL_RCC_OscConfig+0x33c>)
 800210e:	400a      	ands	r2, r1
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	4b9f      	ldr	r3, [pc, #636]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	2380      	movs	r3, #128	@ 0x80
 8002118:	025b      	lsls	r3, r3, #9
 800211a:	4013      	ands	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4b9b      	ldr	r3, [pc, #620]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b9a      	ldr	r3, [pc, #616]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 8002126:	499c      	ldr	r1, [pc, #624]	@ (8002398 <HAL_RCC_OscConfig+0x340>)
 8002128:	400a      	ands	r2, r1
 800212a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d014      	beq.n	800215e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002134:	f7ff f984 	bl	8001440 <HAL_GetTick>
 8002138:	0003      	movs	r3, r0
 800213a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800213e:	f7ff f97f 	bl	8001440 <HAL_GetTick>
 8002142:	0002      	movs	r2, r0
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b64      	cmp	r3, #100	@ 0x64
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e2f9      	b.n	8002744 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002150:	4b8f      	ldr	r3, [pc, #572]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	2380      	movs	r3, #128	@ 0x80
 8002156:	029b      	lsls	r3, r3, #10
 8002158:	4013      	ands	r3, r2
 800215a:	d0f0      	beq.n	800213e <HAL_RCC_OscConfig+0xe6>
 800215c:	e015      	b.n	800218a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215e:	f7ff f96f 	bl	8001440 <HAL_GetTick>
 8002162:	0003      	movs	r3, r0
 8002164:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002168:	f7ff f96a 	bl	8001440 <HAL_GetTick>
 800216c:	0002      	movs	r2, r0
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b64      	cmp	r3, #100	@ 0x64
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e2e4      	b.n	8002744 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800217a:	4b85      	ldr	r3, [pc, #532]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	2380      	movs	r3, #128	@ 0x80
 8002180:	029b      	lsls	r3, r3, #10
 8002182:	4013      	ands	r3, r2
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0x110>
 8002186:	e000      	b.n	800218a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002188:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2202      	movs	r2, #2
 8002190:	4013      	ands	r3, r2
 8002192:	d100      	bne.n	8002196 <HAL_RCC_OscConfig+0x13e>
 8002194:	e099      	b.n	80022ca <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800219c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219e:	2220      	movs	r2, #32
 80021a0:	4013      	ands	r3, r2
 80021a2:	d009      	beq.n	80021b8 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80021a4:	4b7a      	ldr	r3, [pc, #488]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4b79      	ldr	r3, [pc, #484]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 80021aa:	2120      	movs	r1, #32
 80021ac:	430a      	orrs	r2, r1
 80021ae:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80021b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b2:	2220      	movs	r2, #32
 80021b4:	4393      	bics	r3, r2
 80021b6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d005      	beq.n	80021ca <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	2b0c      	cmp	r3, #12
 80021c2:	d13e      	bne.n	8002242 <HAL_RCC_OscConfig+0x1ea>
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d13b      	bne.n	8002242 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80021ca:	4b71      	ldr	r3, [pc, #452]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2204      	movs	r2, #4
 80021d0:	4013      	ands	r3, r2
 80021d2:	d004      	beq.n	80021de <HAL_RCC_OscConfig+0x186>
 80021d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e2b2      	b.n	8002744 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021de:	4b6c      	ldr	r3, [pc, #432]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	4a6e      	ldr	r2, [pc, #440]	@ (800239c <HAL_RCC_OscConfig+0x344>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	0019      	movs	r1, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	021a      	lsls	r2, r3, #8
 80021ee:	4b68      	ldr	r3, [pc, #416]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 80021f0:	430a      	orrs	r2, r1
 80021f2:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80021f4:	4b66      	ldr	r3, [pc, #408]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2209      	movs	r2, #9
 80021fa:	4393      	bics	r3, r2
 80021fc:	0019      	movs	r1, r3
 80021fe:	4b64      	ldr	r3, [pc, #400]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 8002200:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002202:	430a      	orrs	r2, r1
 8002204:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002206:	f000 fbeb 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 800220a:	0001      	movs	r1, r0
 800220c:	4b60      	ldr	r3, [pc, #384]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	091b      	lsrs	r3, r3, #4
 8002212:	220f      	movs	r2, #15
 8002214:	4013      	ands	r3, r2
 8002216:	4a62      	ldr	r2, [pc, #392]	@ (80023a0 <HAL_RCC_OscConfig+0x348>)
 8002218:	5cd3      	ldrb	r3, [r2, r3]
 800221a:	000a      	movs	r2, r1
 800221c:	40da      	lsrs	r2, r3
 800221e:	4b61      	ldr	r3, [pc, #388]	@ (80023a4 <HAL_RCC_OscConfig+0x34c>)
 8002220:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002222:	4b61      	ldr	r3, [pc, #388]	@ (80023a8 <HAL_RCC_OscConfig+0x350>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2513      	movs	r5, #19
 8002228:	197c      	adds	r4, r7, r5
 800222a:	0018      	movs	r0, r3
 800222c:	f7ff f8c2 	bl	80013b4 <HAL_InitTick>
 8002230:	0003      	movs	r3, r0
 8002232:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002234:	197b      	adds	r3, r7, r5
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d046      	beq.n	80022ca <HAL_RCC_OscConfig+0x272>
      {
        return status;
 800223c:	197b      	adds	r3, r7, r5
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	e280      	b.n	8002744 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002244:	2b00      	cmp	r3, #0
 8002246:	d027      	beq.n	8002298 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002248:	4b51      	ldr	r3, [pc, #324]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2209      	movs	r2, #9
 800224e:	4393      	bics	r3, r2
 8002250:	0019      	movs	r1, r3
 8002252:	4b4f      	ldr	r3, [pc, #316]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 8002254:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002256:	430a      	orrs	r2, r1
 8002258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7ff f8f1 	bl	8001440 <HAL_GetTick>
 800225e:	0003      	movs	r3, r0
 8002260:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002264:	f7ff f8ec 	bl	8001440 <HAL_GetTick>
 8002268:	0002      	movs	r2, r0
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e266      	b.n	8002744 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002276:	4b46      	ldr	r3, [pc, #280]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2204      	movs	r2, #4
 800227c:	4013      	ands	r3, r2
 800227e:	d0f1      	beq.n	8002264 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002280:	4b43      	ldr	r3, [pc, #268]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	4a45      	ldr	r2, [pc, #276]	@ (800239c <HAL_RCC_OscConfig+0x344>)
 8002286:	4013      	ands	r3, r2
 8002288:	0019      	movs	r1, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	021a      	lsls	r2, r3, #8
 8002290:	4b3f      	ldr	r3, [pc, #252]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 8002292:	430a      	orrs	r2, r1
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	e018      	b.n	80022ca <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002298:	4b3d      	ldr	r3, [pc, #244]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	4b3c      	ldr	r3, [pc, #240]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 800229e:	2101      	movs	r1, #1
 80022a0:	438a      	bics	r2, r1
 80022a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a4:	f7ff f8cc 	bl	8001440 <HAL_GetTick>
 80022a8:	0003      	movs	r3, r0
 80022aa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ae:	f7ff f8c7 	bl	8001440 <HAL_GetTick>
 80022b2:	0002      	movs	r2, r0
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e241      	b.n	8002744 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80022c0:	4b33      	ldr	r3, [pc, #204]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2204      	movs	r2, #4
 80022c6:	4013      	ands	r3, r2
 80022c8:	d1f1      	bne.n	80022ae <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2210      	movs	r2, #16
 80022d0:	4013      	ands	r3, r2
 80022d2:	d100      	bne.n	80022d6 <HAL_RCC_OscConfig+0x27e>
 80022d4:	e0a1      	b.n	800241a <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d140      	bne.n	800235e <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022dc:	4b2c      	ldr	r3, [pc, #176]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	2380      	movs	r3, #128	@ 0x80
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4013      	ands	r3, r2
 80022e6:	d005      	beq.n	80022f4 <HAL_RCC_OscConfig+0x29c>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e227      	b.n	8002744 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022f4:	4b26      	ldr	r3, [pc, #152]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	4a2c      	ldr	r2, [pc, #176]	@ (80023ac <HAL_RCC_OscConfig+0x354>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	0019      	movs	r1, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1a      	ldr	r2, [r3, #32]
 8002302:	4b23      	ldr	r3, [pc, #140]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 8002304:	430a      	orrs	r2, r1
 8002306:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002308:	4b21      	ldr	r3, [pc, #132]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	021b      	lsls	r3, r3, #8
 800230e:	0a19      	lsrs	r1, r3, #8
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	061a      	lsls	r2, r3, #24
 8002316:	4b1e      	ldr	r3, [pc, #120]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 8002318:	430a      	orrs	r2, r1
 800231a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	0b5b      	lsrs	r3, r3, #13
 8002322:	3301      	adds	r3, #1
 8002324:	2280      	movs	r2, #128	@ 0x80
 8002326:	0212      	lsls	r2, r2, #8
 8002328:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800232a:	4b19      	ldr	r3, [pc, #100]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	091b      	lsrs	r3, r3, #4
 8002330:	210f      	movs	r1, #15
 8002332:	400b      	ands	r3, r1
 8002334:	491a      	ldr	r1, [pc, #104]	@ (80023a0 <HAL_RCC_OscConfig+0x348>)
 8002336:	5ccb      	ldrb	r3, [r1, r3]
 8002338:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800233a:	4b1a      	ldr	r3, [pc, #104]	@ (80023a4 <HAL_RCC_OscConfig+0x34c>)
 800233c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800233e:	4b1a      	ldr	r3, [pc, #104]	@ (80023a8 <HAL_RCC_OscConfig+0x350>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2513      	movs	r5, #19
 8002344:	197c      	adds	r4, r7, r5
 8002346:	0018      	movs	r0, r3
 8002348:	f7ff f834 	bl	80013b4 <HAL_InitTick>
 800234c:	0003      	movs	r3, r0
 800234e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002350:	197b      	adds	r3, r7, r5
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d060      	beq.n	800241a <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002358:	197b      	adds	r3, r7, r5
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	e1f2      	b.n	8002744 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d03f      	beq.n	80023e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002366:	4b0a      	ldr	r3, [pc, #40]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	4b09      	ldr	r3, [pc, #36]	@ (8002390 <HAL_RCC_OscConfig+0x338>)
 800236c:	2180      	movs	r1, #128	@ 0x80
 800236e:	0049      	lsls	r1, r1, #1
 8002370:	430a      	orrs	r2, r1
 8002372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7ff f864 	bl	8001440 <HAL_GetTick>
 8002378:	0003      	movs	r3, r0
 800237a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800237c:	e018      	b.n	80023b0 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800237e:	f7ff f85f 	bl	8001440 <HAL_GetTick>
 8002382:	0002      	movs	r2, r0
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d911      	bls.n	80023b0 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e1d9      	b.n	8002744 <HAL_RCC_OscConfig+0x6ec>
 8002390:	40021000 	.word	0x40021000
 8002394:	fffeffff 	.word	0xfffeffff
 8002398:	fffbffff 	.word	0xfffbffff
 800239c:	ffffe0ff 	.word	0xffffe0ff
 80023a0:	08007b30 	.word	0x08007b30
 80023a4:	20000030 	.word	0x20000030
 80023a8:	20000034 	.word	0x20000034
 80023ac:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80023b0:	4bc9      	ldr	r3, [pc, #804]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	2380      	movs	r3, #128	@ 0x80
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4013      	ands	r3, r2
 80023ba:	d0e0      	beq.n	800237e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023bc:	4bc6      	ldr	r3, [pc, #792]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	4ac6      	ldr	r2, [pc, #792]	@ (80026dc <HAL_RCC_OscConfig+0x684>)
 80023c2:	4013      	ands	r3, r2
 80023c4:	0019      	movs	r1, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a1a      	ldr	r2, [r3, #32]
 80023ca:	4bc3      	ldr	r3, [pc, #780]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 80023cc:	430a      	orrs	r2, r1
 80023ce:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023d0:	4bc1      	ldr	r3, [pc, #772]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	021b      	lsls	r3, r3, #8
 80023d6:	0a19      	lsrs	r1, r3, #8
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	061a      	lsls	r2, r3, #24
 80023de:	4bbe      	ldr	r3, [pc, #760]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 80023e0:	430a      	orrs	r2, r1
 80023e2:	605a      	str	r2, [r3, #4]
 80023e4:	e019      	b.n	800241a <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023e6:	4bbc      	ldr	r3, [pc, #752]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	4bbb      	ldr	r3, [pc, #748]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 80023ec:	49bc      	ldr	r1, [pc, #752]	@ (80026e0 <HAL_RCC_OscConfig+0x688>)
 80023ee:	400a      	ands	r2, r1
 80023f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f2:	f7ff f825 	bl	8001440 <HAL_GetTick>
 80023f6:	0003      	movs	r3, r0
 80023f8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023fc:	f7ff f820 	bl	8001440 <HAL_GetTick>
 8002400:	0002      	movs	r2, r0
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e19a      	b.n	8002744 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800240e:	4bb2      	ldr	r3, [pc, #712]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	2380      	movs	r3, #128	@ 0x80
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4013      	ands	r3, r2
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2208      	movs	r2, #8
 8002420:	4013      	ands	r3, r2
 8002422:	d036      	beq.n	8002492 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d019      	beq.n	8002460 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800242c:	4baa      	ldr	r3, [pc, #680]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 800242e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002430:	4ba9      	ldr	r3, [pc, #676]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 8002432:	2101      	movs	r1, #1
 8002434:	430a      	orrs	r2, r1
 8002436:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002438:	f7ff f802 	bl	8001440 <HAL_GetTick>
 800243c:	0003      	movs	r3, r0
 800243e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002442:	f7fe fffd 	bl	8001440 <HAL_GetTick>
 8002446:	0002      	movs	r2, r0
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e177      	b.n	8002744 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002454:	4ba0      	ldr	r3, [pc, #640]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 8002456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002458:	2202      	movs	r2, #2
 800245a:	4013      	ands	r3, r2
 800245c:	d0f1      	beq.n	8002442 <HAL_RCC_OscConfig+0x3ea>
 800245e:	e018      	b.n	8002492 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002460:	4b9d      	ldr	r3, [pc, #628]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 8002462:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002464:	4b9c      	ldr	r3, [pc, #624]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 8002466:	2101      	movs	r1, #1
 8002468:	438a      	bics	r2, r1
 800246a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246c:	f7fe ffe8 	bl	8001440 <HAL_GetTick>
 8002470:	0003      	movs	r3, r0
 8002472:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002476:	f7fe ffe3 	bl	8001440 <HAL_GetTick>
 800247a:	0002      	movs	r2, r0
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e15d      	b.n	8002744 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002488:	4b93      	ldr	r3, [pc, #588]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 800248a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800248c:	2202      	movs	r2, #2
 800248e:	4013      	ands	r3, r2
 8002490:	d1f1      	bne.n	8002476 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2204      	movs	r2, #4
 8002498:	4013      	ands	r3, r2
 800249a:	d100      	bne.n	800249e <HAL_RCC_OscConfig+0x446>
 800249c:	e0ae      	b.n	80025fc <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800249e:	2023      	movs	r0, #35	@ 0x23
 80024a0:	183b      	adds	r3, r7, r0
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024a6:	4b8c      	ldr	r3, [pc, #560]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 80024a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024aa:	2380      	movs	r3, #128	@ 0x80
 80024ac:	055b      	lsls	r3, r3, #21
 80024ae:	4013      	ands	r3, r2
 80024b0:	d109      	bne.n	80024c6 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b2:	4b89      	ldr	r3, [pc, #548]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 80024b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024b6:	4b88      	ldr	r3, [pc, #544]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 80024b8:	2180      	movs	r1, #128	@ 0x80
 80024ba:	0549      	lsls	r1, r1, #21
 80024bc:	430a      	orrs	r2, r1
 80024be:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80024c0:	183b      	adds	r3, r7, r0
 80024c2:	2201      	movs	r2, #1
 80024c4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c6:	4b87      	ldr	r3, [pc, #540]	@ (80026e4 <HAL_RCC_OscConfig+0x68c>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	2380      	movs	r3, #128	@ 0x80
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4013      	ands	r3, r2
 80024d0:	d11a      	bne.n	8002508 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024d2:	4b84      	ldr	r3, [pc, #528]	@ (80026e4 <HAL_RCC_OscConfig+0x68c>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	4b83      	ldr	r3, [pc, #524]	@ (80026e4 <HAL_RCC_OscConfig+0x68c>)
 80024d8:	2180      	movs	r1, #128	@ 0x80
 80024da:	0049      	lsls	r1, r1, #1
 80024dc:	430a      	orrs	r2, r1
 80024de:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024e0:	f7fe ffae 	bl	8001440 <HAL_GetTick>
 80024e4:	0003      	movs	r3, r0
 80024e6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ea:	f7fe ffa9 	bl	8001440 <HAL_GetTick>
 80024ee:	0002      	movs	r2, r0
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b64      	cmp	r3, #100	@ 0x64
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e123      	b.n	8002744 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fc:	4b79      	ldr	r3, [pc, #484]	@ (80026e4 <HAL_RCC_OscConfig+0x68c>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	2380      	movs	r3, #128	@ 0x80
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	4013      	ands	r3, r2
 8002506:	d0f0      	beq.n	80024ea <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	2380      	movs	r3, #128	@ 0x80
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	429a      	cmp	r2, r3
 8002512:	d107      	bne.n	8002524 <HAL_RCC_OscConfig+0x4cc>
 8002514:	4b70      	ldr	r3, [pc, #448]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 8002516:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002518:	4b6f      	ldr	r3, [pc, #444]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 800251a:	2180      	movs	r1, #128	@ 0x80
 800251c:	0049      	lsls	r1, r1, #1
 800251e:	430a      	orrs	r2, r1
 8002520:	651a      	str	r2, [r3, #80]	@ 0x50
 8002522:	e031      	b.n	8002588 <HAL_RCC_OscConfig+0x530>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10c      	bne.n	8002546 <HAL_RCC_OscConfig+0x4ee>
 800252c:	4b6a      	ldr	r3, [pc, #424]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 800252e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002530:	4b69      	ldr	r3, [pc, #420]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 8002532:	496b      	ldr	r1, [pc, #428]	@ (80026e0 <HAL_RCC_OscConfig+0x688>)
 8002534:	400a      	ands	r2, r1
 8002536:	651a      	str	r2, [r3, #80]	@ 0x50
 8002538:	4b67      	ldr	r3, [pc, #412]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 800253a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800253c:	4b66      	ldr	r3, [pc, #408]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 800253e:	496a      	ldr	r1, [pc, #424]	@ (80026e8 <HAL_RCC_OscConfig+0x690>)
 8002540:	400a      	ands	r2, r1
 8002542:	651a      	str	r2, [r3, #80]	@ 0x50
 8002544:	e020      	b.n	8002588 <HAL_RCC_OscConfig+0x530>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	23a0      	movs	r3, #160	@ 0xa0
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	429a      	cmp	r2, r3
 8002550:	d10e      	bne.n	8002570 <HAL_RCC_OscConfig+0x518>
 8002552:	4b61      	ldr	r3, [pc, #388]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 8002554:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002556:	4b60      	ldr	r3, [pc, #384]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 8002558:	2180      	movs	r1, #128	@ 0x80
 800255a:	00c9      	lsls	r1, r1, #3
 800255c:	430a      	orrs	r2, r1
 800255e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002560:	4b5d      	ldr	r3, [pc, #372]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 8002562:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002564:	4b5c      	ldr	r3, [pc, #368]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 8002566:	2180      	movs	r1, #128	@ 0x80
 8002568:	0049      	lsls	r1, r1, #1
 800256a:	430a      	orrs	r2, r1
 800256c:	651a      	str	r2, [r3, #80]	@ 0x50
 800256e:	e00b      	b.n	8002588 <HAL_RCC_OscConfig+0x530>
 8002570:	4b59      	ldr	r3, [pc, #356]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 8002572:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002574:	4b58      	ldr	r3, [pc, #352]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 8002576:	495a      	ldr	r1, [pc, #360]	@ (80026e0 <HAL_RCC_OscConfig+0x688>)
 8002578:	400a      	ands	r2, r1
 800257a:	651a      	str	r2, [r3, #80]	@ 0x50
 800257c:	4b56      	ldr	r3, [pc, #344]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 800257e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002580:	4b55      	ldr	r3, [pc, #340]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 8002582:	4959      	ldr	r1, [pc, #356]	@ (80026e8 <HAL_RCC_OscConfig+0x690>)
 8002584:	400a      	ands	r2, r1
 8002586:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d015      	beq.n	80025bc <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002590:	f7fe ff56 	bl	8001440 <HAL_GetTick>
 8002594:	0003      	movs	r3, r0
 8002596:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002598:	e009      	b.n	80025ae <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800259a:	f7fe ff51 	bl	8001440 <HAL_GetTick>
 800259e:	0002      	movs	r2, r0
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	4a51      	ldr	r2, [pc, #324]	@ (80026ec <HAL_RCC_OscConfig+0x694>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e0ca      	b.n	8002744 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025ae:	4b4a      	ldr	r3, [pc, #296]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 80025b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80025b2:	2380      	movs	r3, #128	@ 0x80
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4013      	ands	r3, r2
 80025b8:	d0ef      	beq.n	800259a <HAL_RCC_OscConfig+0x542>
 80025ba:	e014      	b.n	80025e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025bc:	f7fe ff40 	bl	8001440 <HAL_GetTick>
 80025c0:	0003      	movs	r3, r0
 80025c2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025c4:	e009      	b.n	80025da <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025c6:	f7fe ff3b 	bl	8001440 <HAL_GetTick>
 80025ca:	0002      	movs	r2, r0
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	4a46      	ldr	r2, [pc, #280]	@ (80026ec <HAL_RCC_OscConfig+0x694>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e0b4      	b.n	8002744 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025da:	4b3f      	ldr	r3, [pc, #252]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 80025dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80025de:	2380      	movs	r3, #128	@ 0x80
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4013      	ands	r3, r2
 80025e4:	d1ef      	bne.n	80025c6 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025e6:	2323      	movs	r3, #35	@ 0x23
 80025e8:	18fb      	adds	r3, r7, r3
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d105      	bne.n	80025fc <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f0:	4b39      	ldr	r3, [pc, #228]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 80025f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025f4:	4b38      	ldr	r3, [pc, #224]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 80025f6:	493e      	ldr	r1, [pc, #248]	@ (80026f0 <HAL_RCC_OscConfig+0x698>)
 80025f8:	400a      	ands	r2, r1
 80025fa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002600:	2b00      	cmp	r3, #0
 8002602:	d100      	bne.n	8002606 <HAL_RCC_OscConfig+0x5ae>
 8002604:	e09d      	b.n	8002742 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	2b0c      	cmp	r3, #12
 800260a:	d100      	bne.n	800260e <HAL_RCC_OscConfig+0x5b6>
 800260c:	e076      	b.n	80026fc <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002612:	2b02      	cmp	r3, #2
 8002614:	d145      	bne.n	80026a2 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002616:	4b30      	ldr	r3, [pc, #192]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	4b2f      	ldr	r3, [pc, #188]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 800261c:	4935      	ldr	r1, [pc, #212]	@ (80026f4 <HAL_RCC_OscConfig+0x69c>)
 800261e:	400a      	ands	r2, r1
 8002620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002622:	f7fe ff0d 	bl	8001440 <HAL_GetTick>
 8002626:	0003      	movs	r3, r0
 8002628:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800262c:	f7fe ff08 	bl	8001440 <HAL_GetTick>
 8002630:	0002      	movs	r2, r0
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e082      	b.n	8002744 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800263e:	4b26      	ldr	r3, [pc, #152]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	2380      	movs	r3, #128	@ 0x80
 8002644:	049b      	lsls	r3, r3, #18
 8002646:	4013      	ands	r3, r2
 8002648:	d1f0      	bne.n	800262c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800264a:	4b23      	ldr	r3, [pc, #140]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	4a2a      	ldr	r2, [pc, #168]	@ (80026f8 <HAL_RCC_OscConfig+0x6a0>)
 8002650:	4013      	ands	r3, r2
 8002652:	0019      	movs	r1, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800265c:	431a      	orrs	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002662:	431a      	orrs	r2, r3
 8002664:	4b1c      	ldr	r3, [pc, #112]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 8002666:	430a      	orrs	r2, r1
 8002668:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800266a:	4b1b      	ldr	r3, [pc, #108]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	4b1a      	ldr	r3, [pc, #104]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 8002670:	2180      	movs	r1, #128	@ 0x80
 8002672:	0449      	lsls	r1, r1, #17
 8002674:	430a      	orrs	r2, r1
 8002676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002678:	f7fe fee2 	bl	8001440 <HAL_GetTick>
 800267c:	0003      	movs	r3, r0
 800267e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002682:	f7fe fedd 	bl	8001440 <HAL_GetTick>
 8002686:	0002      	movs	r2, r0
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e057      	b.n	8002744 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002694:	4b10      	ldr	r3, [pc, #64]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	2380      	movs	r3, #128	@ 0x80
 800269a:	049b      	lsls	r3, r3, #18
 800269c:	4013      	ands	r3, r2
 800269e:	d0f0      	beq.n	8002682 <HAL_RCC_OscConfig+0x62a>
 80026a0:	e04f      	b.n	8002742 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a2:	4b0d      	ldr	r3, [pc, #52]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	4b0c      	ldr	r3, [pc, #48]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 80026a8:	4912      	ldr	r1, [pc, #72]	@ (80026f4 <HAL_RCC_OscConfig+0x69c>)
 80026aa:	400a      	ands	r2, r1
 80026ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ae:	f7fe fec7 	bl	8001440 <HAL_GetTick>
 80026b2:	0003      	movs	r3, r0
 80026b4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b8:	f7fe fec2 	bl	8001440 <HAL_GetTick>
 80026bc:	0002      	movs	r2, r0
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e03c      	b.n	8002744 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80026ca:	4b03      	ldr	r3, [pc, #12]	@ (80026d8 <HAL_RCC_OscConfig+0x680>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	2380      	movs	r3, #128	@ 0x80
 80026d0:	049b      	lsls	r3, r3, #18
 80026d2:	4013      	ands	r3, r2
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x660>
 80026d6:	e034      	b.n	8002742 <HAL_RCC_OscConfig+0x6ea>
 80026d8:	40021000 	.word	0x40021000
 80026dc:	ffff1fff 	.word	0xffff1fff
 80026e0:	fffffeff 	.word	0xfffffeff
 80026e4:	40007000 	.word	0x40007000
 80026e8:	fffffbff 	.word	0xfffffbff
 80026ec:	00001388 	.word	0x00001388
 80026f0:	efffffff 	.word	0xefffffff
 80026f4:	feffffff 	.word	0xfeffffff
 80026f8:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002700:	2b01      	cmp	r3, #1
 8002702:	d101      	bne.n	8002708 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e01d      	b.n	8002744 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002708:	4b10      	ldr	r3, [pc, #64]	@ (800274c <HAL_RCC_OscConfig+0x6f4>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	2380      	movs	r3, #128	@ 0x80
 8002712:	025b      	lsls	r3, r3, #9
 8002714:	401a      	ands	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271a:	429a      	cmp	r2, r3
 800271c:	d10f      	bne.n	800273e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	23f0      	movs	r3, #240	@ 0xf0
 8002722:	039b      	lsls	r3, r3, #14
 8002724:	401a      	ands	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800272a:	429a      	cmp	r2, r3
 800272c:	d107      	bne.n	800273e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	23c0      	movs	r3, #192	@ 0xc0
 8002732:	041b      	lsls	r3, r3, #16
 8002734:	401a      	ands	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800273a:	429a      	cmp	r2, r3
 800273c:	d001      	beq.n	8002742 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	0018      	movs	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	b00a      	add	sp, #40	@ 0x28
 800274a:	bdb0      	pop	{r4, r5, r7, pc}
 800274c:	40021000 	.word	0x40021000

08002750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002750:	b5b0      	push	{r4, r5, r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e128      	b.n	80029b6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002764:	4b96      	ldr	r3, [pc, #600]	@ (80029c0 <HAL_RCC_ClockConfig+0x270>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2201      	movs	r2, #1
 800276a:	4013      	ands	r3, r2
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d91e      	bls.n	80027b0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002772:	4b93      	ldr	r3, [pc, #588]	@ (80029c0 <HAL_RCC_ClockConfig+0x270>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2201      	movs	r2, #1
 8002778:	4393      	bics	r3, r2
 800277a:	0019      	movs	r1, r3
 800277c:	4b90      	ldr	r3, [pc, #576]	@ (80029c0 <HAL_RCC_ClockConfig+0x270>)
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002784:	f7fe fe5c 	bl	8001440 <HAL_GetTick>
 8002788:	0003      	movs	r3, r0
 800278a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800278c:	e009      	b.n	80027a2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800278e:	f7fe fe57 	bl	8001440 <HAL_GetTick>
 8002792:	0002      	movs	r2, r0
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	4a8a      	ldr	r2, [pc, #552]	@ (80029c4 <HAL_RCC_ClockConfig+0x274>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e109      	b.n	80029b6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a2:	4b87      	ldr	r3, [pc, #540]	@ (80029c0 <HAL_RCC_ClockConfig+0x270>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2201      	movs	r2, #1
 80027a8:	4013      	ands	r3, r2
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d1ee      	bne.n	800278e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2202      	movs	r2, #2
 80027b6:	4013      	ands	r3, r2
 80027b8:	d009      	beq.n	80027ce <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ba:	4b83      	ldr	r3, [pc, #524]	@ (80029c8 <HAL_RCC_ClockConfig+0x278>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	22f0      	movs	r2, #240	@ 0xf0
 80027c0:	4393      	bics	r3, r2
 80027c2:	0019      	movs	r1, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	4b7f      	ldr	r3, [pc, #508]	@ (80029c8 <HAL_RCC_ClockConfig+0x278>)
 80027ca:	430a      	orrs	r2, r1
 80027cc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2201      	movs	r2, #1
 80027d4:	4013      	ands	r3, r2
 80027d6:	d100      	bne.n	80027da <HAL_RCC_ClockConfig+0x8a>
 80027d8:	e089      	b.n	80028ee <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d107      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027e2:	4b79      	ldr	r3, [pc, #484]	@ (80029c8 <HAL_RCC_ClockConfig+0x278>)
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	2380      	movs	r3, #128	@ 0x80
 80027e8:	029b      	lsls	r3, r3, #10
 80027ea:	4013      	ands	r3, r2
 80027ec:	d120      	bne.n	8002830 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e0e1      	b.n	80029b6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d107      	bne.n	800280a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027fa:	4b73      	ldr	r3, [pc, #460]	@ (80029c8 <HAL_RCC_ClockConfig+0x278>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	2380      	movs	r3, #128	@ 0x80
 8002800:	049b      	lsls	r3, r3, #18
 8002802:	4013      	ands	r3, r2
 8002804:	d114      	bne.n	8002830 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e0d5      	b.n	80029b6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d106      	bne.n	8002820 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002812:	4b6d      	ldr	r3, [pc, #436]	@ (80029c8 <HAL_RCC_ClockConfig+0x278>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2204      	movs	r2, #4
 8002818:	4013      	ands	r3, r2
 800281a:	d109      	bne.n	8002830 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0ca      	b.n	80029b6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002820:	4b69      	ldr	r3, [pc, #420]	@ (80029c8 <HAL_RCC_ClockConfig+0x278>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	2380      	movs	r3, #128	@ 0x80
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4013      	ands	r3, r2
 800282a:	d101      	bne.n	8002830 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0c2      	b.n	80029b6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002830:	4b65      	ldr	r3, [pc, #404]	@ (80029c8 <HAL_RCC_ClockConfig+0x278>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	2203      	movs	r2, #3
 8002836:	4393      	bics	r3, r2
 8002838:	0019      	movs	r1, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	4b62      	ldr	r3, [pc, #392]	@ (80029c8 <HAL_RCC_ClockConfig+0x278>)
 8002840:	430a      	orrs	r2, r1
 8002842:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002844:	f7fe fdfc 	bl	8001440 <HAL_GetTick>
 8002848:	0003      	movs	r3, r0
 800284a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b02      	cmp	r3, #2
 8002852:	d111      	bne.n	8002878 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002854:	e009      	b.n	800286a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002856:	f7fe fdf3 	bl	8001440 <HAL_GetTick>
 800285a:	0002      	movs	r2, r0
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	4a58      	ldr	r2, [pc, #352]	@ (80029c4 <HAL_RCC_ClockConfig+0x274>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d901      	bls.n	800286a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e0a5      	b.n	80029b6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800286a:	4b57      	ldr	r3, [pc, #348]	@ (80029c8 <HAL_RCC_ClockConfig+0x278>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	220c      	movs	r2, #12
 8002870:	4013      	ands	r3, r2
 8002872:	2b08      	cmp	r3, #8
 8002874:	d1ef      	bne.n	8002856 <HAL_RCC_ClockConfig+0x106>
 8002876:	e03a      	b.n	80028ee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b03      	cmp	r3, #3
 800287e:	d111      	bne.n	80028a4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002880:	e009      	b.n	8002896 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002882:	f7fe fddd 	bl	8001440 <HAL_GetTick>
 8002886:	0002      	movs	r2, r0
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	4a4d      	ldr	r2, [pc, #308]	@ (80029c4 <HAL_RCC_ClockConfig+0x274>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e08f      	b.n	80029b6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002896:	4b4c      	ldr	r3, [pc, #304]	@ (80029c8 <HAL_RCC_ClockConfig+0x278>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	220c      	movs	r2, #12
 800289c:	4013      	ands	r3, r2
 800289e:	2b0c      	cmp	r3, #12
 80028a0:	d1ef      	bne.n	8002882 <HAL_RCC_ClockConfig+0x132>
 80028a2:	e024      	b.n	80028ee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d11b      	bne.n	80028e4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80028ac:	e009      	b.n	80028c2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ae:	f7fe fdc7 	bl	8001440 <HAL_GetTick>
 80028b2:	0002      	movs	r2, r0
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	4a42      	ldr	r2, [pc, #264]	@ (80029c4 <HAL_RCC_ClockConfig+0x274>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e079      	b.n	80029b6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80028c2:	4b41      	ldr	r3, [pc, #260]	@ (80029c8 <HAL_RCC_ClockConfig+0x278>)
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	220c      	movs	r2, #12
 80028c8:	4013      	ands	r3, r2
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d1ef      	bne.n	80028ae <HAL_RCC_ClockConfig+0x15e>
 80028ce:	e00e      	b.n	80028ee <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d0:	f7fe fdb6 	bl	8001440 <HAL_GetTick>
 80028d4:	0002      	movs	r2, r0
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	4a3a      	ldr	r2, [pc, #232]	@ (80029c4 <HAL_RCC_ClockConfig+0x274>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e068      	b.n	80029b6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80028e4:	4b38      	ldr	r3, [pc, #224]	@ (80029c8 <HAL_RCC_ClockConfig+0x278>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	220c      	movs	r2, #12
 80028ea:	4013      	ands	r3, r2
 80028ec:	d1f0      	bne.n	80028d0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028ee:	4b34      	ldr	r3, [pc, #208]	@ (80029c0 <HAL_RCC_ClockConfig+0x270>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2201      	movs	r2, #1
 80028f4:	4013      	ands	r3, r2
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d21e      	bcs.n	800293a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fc:	4b30      	ldr	r3, [pc, #192]	@ (80029c0 <HAL_RCC_ClockConfig+0x270>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2201      	movs	r2, #1
 8002902:	4393      	bics	r3, r2
 8002904:	0019      	movs	r1, r3
 8002906:	4b2e      	ldr	r3, [pc, #184]	@ (80029c0 <HAL_RCC_ClockConfig+0x270>)
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800290e:	f7fe fd97 	bl	8001440 <HAL_GetTick>
 8002912:	0003      	movs	r3, r0
 8002914:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002916:	e009      	b.n	800292c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002918:	f7fe fd92 	bl	8001440 <HAL_GetTick>
 800291c:	0002      	movs	r2, r0
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	4a28      	ldr	r2, [pc, #160]	@ (80029c4 <HAL_RCC_ClockConfig+0x274>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d901      	bls.n	800292c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e044      	b.n	80029b6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800292c:	4b24      	ldr	r3, [pc, #144]	@ (80029c0 <HAL_RCC_ClockConfig+0x270>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2201      	movs	r2, #1
 8002932:	4013      	ands	r3, r2
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d1ee      	bne.n	8002918 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2204      	movs	r2, #4
 8002940:	4013      	ands	r3, r2
 8002942:	d009      	beq.n	8002958 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002944:	4b20      	ldr	r3, [pc, #128]	@ (80029c8 <HAL_RCC_ClockConfig+0x278>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	4a20      	ldr	r2, [pc, #128]	@ (80029cc <HAL_RCC_ClockConfig+0x27c>)
 800294a:	4013      	ands	r3, r2
 800294c:	0019      	movs	r1, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	4b1d      	ldr	r3, [pc, #116]	@ (80029c8 <HAL_RCC_ClockConfig+0x278>)
 8002954:	430a      	orrs	r2, r1
 8002956:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2208      	movs	r2, #8
 800295e:	4013      	ands	r3, r2
 8002960:	d00a      	beq.n	8002978 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002962:	4b19      	ldr	r3, [pc, #100]	@ (80029c8 <HAL_RCC_ClockConfig+0x278>)
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	4a1a      	ldr	r2, [pc, #104]	@ (80029d0 <HAL_RCC_ClockConfig+0x280>)
 8002968:	4013      	ands	r3, r2
 800296a:	0019      	movs	r1, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	00da      	lsls	r2, r3, #3
 8002972:	4b15      	ldr	r3, [pc, #84]	@ (80029c8 <HAL_RCC_ClockConfig+0x278>)
 8002974:	430a      	orrs	r2, r1
 8002976:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002978:	f000 f832 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 800297c:	0001      	movs	r1, r0
 800297e:	4b12      	ldr	r3, [pc, #72]	@ (80029c8 <HAL_RCC_ClockConfig+0x278>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	091b      	lsrs	r3, r3, #4
 8002984:	220f      	movs	r2, #15
 8002986:	4013      	ands	r3, r2
 8002988:	4a12      	ldr	r2, [pc, #72]	@ (80029d4 <HAL_RCC_ClockConfig+0x284>)
 800298a:	5cd3      	ldrb	r3, [r2, r3]
 800298c:	000a      	movs	r2, r1
 800298e:	40da      	lsrs	r2, r3
 8002990:	4b11      	ldr	r3, [pc, #68]	@ (80029d8 <HAL_RCC_ClockConfig+0x288>)
 8002992:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002994:	4b11      	ldr	r3, [pc, #68]	@ (80029dc <HAL_RCC_ClockConfig+0x28c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	250b      	movs	r5, #11
 800299a:	197c      	adds	r4, r7, r5
 800299c:	0018      	movs	r0, r3
 800299e:	f7fe fd09 	bl	80013b4 <HAL_InitTick>
 80029a2:	0003      	movs	r3, r0
 80029a4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80029a6:	197b      	adds	r3, r7, r5
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d002      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80029ae:	197b      	adds	r3, r7, r5
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	e000      	b.n	80029b6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	0018      	movs	r0, r3
 80029b8:	46bd      	mov	sp, r7
 80029ba:	b004      	add	sp, #16
 80029bc:	bdb0      	pop	{r4, r5, r7, pc}
 80029be:	46c0      	nop			@ (mov r8, r8)
 80029c0:	40022000 	.word	0x40022000
 80029c4:	00001388 	.word	0x00001388
 80029c8:	40021000 	.word	0x40021000
 80029cc:	fffff8ff 	.word	0xfffff8ff
 80029d0:	ffffc7ff 	.word	0xffffc7ff
 80029d4:	08007b30 	.word	0x08007b30
 80029d8:	20000030 	.word	0x20000030
 80029dc:	20000034 	.word	0x20000034

080029e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e0:	b5b0      	push	{r4, r5, r7, lr}
 80029e2:	b08e      	sub	sp, #56	@ 0x38
 80029e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80029e6:	4b4c      	ldr	r3, [pc, #304]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0x138>)
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029ee:	230c      	movs	r3, #12
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b0c      	cmp	r3, #12
 80029f4:	d014      	beq.n	8002a20 <HAL_RCC_GetSysClockFreq+0x40>
 80029f6:	d900      	bls.n	80029fa <HAL_RCC_GetSysClockFreq+0x1a>
 80029f8:	e07b      	b.n	8002af2 <HAL_RCC_GetSysClockFreq+0x112>
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d002      	beq.n	8002a04 <HAL_RCC_GetSysClockFreq+0x24>
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d00b      	beq.n	8002a1a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a02:	e076      	b.n	8002af2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002a04:	4b44      	ldr	r3, [pc, #272]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0x138>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2210      	movs	r2, #16
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d002      	beq.n	8002a14 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002a0e:	4b43      	ldr	r3, [pc, #268]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002a10:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002a12:	e07c      	b.n	8002b0e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002a14:	4b42      	ldr	r3, [pc, #264]	@ (8002b20 <HAL_RCC_GetSysClockFreq+0x140>)
 8002a16:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002a18:	e079      	b.n	8002b0e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a1a:	4b42      	ldr	r3, [pc, #264]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0x144>)
 8002a1c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002a1e:	e076      	b.n	8002b0e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a22:	0c9a      	lsrs	r2, r3, #18
 8002a24:	230f      	movs	r3, #15
 8002a26:	401a      	ands	r2, r3
 8002a28:	4b3f      	ldr	r3, [pc, #252]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x148>)
 8002a2a:	5c9b      	ldrb	r3, [r3, r2]
 8002a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a30:	0d9a      	lsrs	r2, r3, #22
 8002a32:	2303      	movs	r3, #3
 8002a34:	4013      	ands	r3, r2
 8002a36:	3301      	adds	r3, #1
 8002a38:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a3a:	4b37      	ldr	r3, [pc, #220]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0x138>)
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	2380      	movs	r3, #128	@ 0x80
 8002a40:	025b      	lsls	r3, r3, #9
 8002a42:	4013      	ands	r3, r2
 8002a44:	d01a      	beq.n	8002a7c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a48:	61bb      	str	r3, [r7, #24]
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61fb      	str	r3, [r7, #28]
 8002a4e:	4a35      	ldr	r2, [pc, #212]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0x144>)
 8002a50:	2300      	movs	r3, #0
 8002a52:	69b8      	ldr	r0, [r7, #24]
 8002a54:	69f9      	ldr	r1, [r7, #28]
 8002a56:	f7fd fc15 	bl	8000284 <__aeabi_lmul>
 8002a5a:	0002      	movs	r2, r0
 8002a5c:	000b      	movs	r3, r1
 8002a5e:	0010      	movs	r0, r2
 8002a60:	0019      	movs	r1, r3
 8002a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a64:	613b      	str	r3, [r7, #16]
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	f7fd fbe9 	bl	8000244 <__aeabi_uldivmod>
 8002a72:	0002      	movs	r2, r0
 8002a74:	000b      	movs	r3, r1
 8002a76:	0013      	movs	r3, r2
 8002a78:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a7a:	e037      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002a7c:	4b26      	ldr	r3, [pc, #152]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0x138>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2210      	movs	r2, #16
 8002a82:	4013      	ands	r3, r2
 8002a84:	d01a      	beq.n	8002abc <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a88:	60bb      	str	r3, [r7, #8]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	4a23      	ldr	r2, [pc, #140]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002a90:	2300      	movs	r3, #0
 8002a92:	68b8      	ldr	r0, [r7, #8]
 8002a94:	68f9      	ldr	r1, [r7, #12]
 8002a96:	f7fd fbf5 	bl	8000284 <__aeabi_lmul>
 8002a9a:	0002      	movs	r2, r0
 8002a9c:	000b      	movs	r3, r1
 8002a9e:	0010      	movs	r0, r2
 8002aa0:	0019      	movs	r1, r3
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	603b      	str	r3, [r7, #0]
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	607b      	str	r3, [r7, #4]
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f7fd fbc9 	bl	8000244 <__aeabi_uldivmod>
 8002ab2:	0002      	movs	r2, r0
 8002ab4:	000b      	movs	r3, r1
 8002ab6:	0013      	movs	r3, r2
 8002ab8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002aba:	e017      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002abe:	0018      	movs	r0, r3
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	0019      	movs	r1, r3
 8002ac4:	4a16      	ldr	r2, [pc, #88]	@ (8002b20 <HAL_RCC_GetSysClockFreq+0x140>)
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f7fd fbdc 	bl	8000284 <__aeabi_lmul>
 8002acc:	0002      	movs	r2, r0
 8002ace:	000b      	movs	r3, r1
 8002ad0:	0010      	movs	r0, r2
 8002ad2:	0019      	movs	r1, r3
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad6:	001c      	movs	r4, r3
 8002ad8:	2300      	movs	r3, #0
 8002ada:	001d      	movs	r5, r3
 8002adc:	0022      	movs	r2, r4
 8002ade:	002b      	movs	r3, r5
 8002ae0:	f7fd fbb0 	bl	8000244 <__aeabi_uldivmod>
 8002ae4:	0002      	movs	r2, r0
 8002ae6:	000b      	movs	r3, r1
 8002ae8:	0013      	movs	r3, r2
 8002aea:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8002aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aee:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002af0:	e00d      	b.n	8002b0e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002af2:	4b09      	ldr	r3, [pc, #36]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0x138>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	0b5b      	lsrs	r3, r3, #13
 8002af8:	2207      	movs	r2, #7
 8002afa:	4013      	ands	r3, r2
 8002afc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	3301      	adds	r3, #1
 8002b02:	2280      	movs	r2, #128	@ 0x80
 8002b04:	0212      	lsls	r2, r2, #8
 8002b06:	409a      	lsls	r2, r3
 8002b08:	0013      	movs	r3, r2
 8002b0a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002b0c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002b10:	0018      	movs	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	b00e      	add	sp, #56	@ 0x38
 8002b16:	bdb0      	pop	{r4, r5, r7, pc}
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	003d0900 	.word	0x003d0900
 8002b20:	00f42400 	.word	0x00f42400
 8002b24:	007a1200 	.word	0x007a1200
 8002b28:	08007b48 	.word	0x08007b48

08002b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b30:	4b02      	ldr	r3, [pc, #8]	@ (8002b3c <HAL_RCC_GetHCLKFreq+0x10>)
 8002b32:	681b      	ldr	r3, [r3, #0]
}
 8002b34:	0018      	movs	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	46c0      	nop			@ (mov r8, r8)
 8002b3c:	20000030 	.word	0x20000030

08002b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b44:	f7ff fff2 	bl	8002b2c <HAL_RCC_GetHCLKFreq>
 8002b48:	0001      	movs	r1, r0
 8002b4a:	4b06      	ldr	r3, [pc, #24]	@ (8002b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	0a1b      	lsrs	r3, r3, #8
 8002b50:	2207      	movs	r2, #7
 8002b52:	4013      	ands	r3, r2
 8002b54:	4a04      	ldr	r2, [pc, #16]	@ (8002b68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b56:	5cd3      	ldrb	r3, [r2, r3]
 8002b58:	40d9      	lsrs	r1, r3
 8002b5a:	000b      	movs	r3, r1
}
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	46c0      	nop			@ (mov r8, r8)
 8002b64:	40021000 	.word	0x40021000
 8002b68:	08007b40 	.word	0x08007b40

08002b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b70:	f7ff ffdc 	bl	8002b2c <HAL_RCC_GetHCLKFreq>
 8002b74:	0001      	movs	r1, r0
 8002b76:	4b06      	ldr	r3, [pc, #24]	@ (8002b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	0adb      	lsrs	r3, r3, #11
 8002b7c:	2207      	movs	r2, #7
 8002b7e:	4013      	ands	r3, r2
 8002b80:	4a04      	ldr	r2, [pc, #16]	@ (8002b94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b82:	5cd3      	ldrb	r3, [r2, r3]
 8002b84:	40d9      	lsrs	r1, r3
 8002b86:	000b      	movs	r3, r1
}
 8002b88:	0018      	movs	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	46c0      	nop			@ (mov r8, r8)
 8002b90:	40021000 	.word	0x40021000
 8002b94:	08007b40 	.word	0x08007b40

08002b98 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002ba0:	2017      	movs	r0, #23
 8002ba2:	183b      	adds	r3, r7, r0
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2220      	movs	r2, #32
 8002bae:	4013      	ands	r3, r2
 8002bb0:	d100      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002bb2:	e0c7      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bb4:	4b84      	ldr	r3, [pc, #528]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bb8:	2380      	movs	r3, #128	@ 0x80
 8002bba:	055b      	lsls	r3, r3, #21
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d109      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bc0:	4b81      	ldr	r3, [pc, #516]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bc4:	4b80      	ldr	r3, [pc, #512]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bc6:	2180      	movs	r1, #128	@ 0x80
 8002bc8:	0549      	lsls	r1, r1, #21
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002bce:	183b      	adds	r3, r7, r0
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd4:	4b7d      	ldr	r3, [pc, #500]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	2380      	movs	r3, #128	@ 0x80
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d11a      	bne.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002be0:	4b7a      	ldr	r3, [pc, #488]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	4b79      	ldr	r3, [pc, #484]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002be6:	2180      	movs	r1, #128	@ 0x80
 8002be8:	0049      	lsls	r1, r1, #1
 8002bea:	430a      	orrs	r2, r1
 8002bec:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bee:	f7fe fc27 	bl	8001440 <HAL_GetTick>
 8002bf2:	0003      	movs	r3, r0
 8002bf4:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf6:	e008      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf8:	f7fe fc22 	bl	8001440 <HAL_GetTick>
 8002bfc:	0002      	movs	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b64      	cmp	r3, #100	@ 0x64
 8002c04:	d901      	bls.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e0d9      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0a:	4b70      	ldr	r3, [pc, #448]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	2380      	movs	r3, #128	@ 0x80
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	4013      	ands	r3, r2
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002c16:	4b6c      	ldr	r3, [pc, #432]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	23c0      	movs	r3, #192	@ 0xc0
 8002c1c:	039b      	lsls	r3, r3, #14
 8002c1e:	4013      	ands	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	23c0      	movs	r3, #192	@ 0xc0
 8002c28:	039b      	lsls	r3, r3, #14
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d013      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	23c0      	movs	r3, #192	@ 0xc0
 8002c38:	029b      	lsls	r3, r3, #10
 8002c3a:	401a      	ands	r2, r3
 8002c3c:	23c0      	movs	r3, #192	@ 0xc0
 8002c3e:	029b      	lsls	r3, r3, #10
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d10a      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002c44:	4b60      	ldr	r3, [pc, #384]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	2380      	movs	r3, #128	@ 0x80
 8002c4a:	029b      	lsls	r3, r3, #10
 8002c4c:	401a      	ands	r2, r3
 8002c4e:	2380      	movs	r3, #128	@ 0x80
 8002c50:	029b      	lsls	r3, r3, #10
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d101      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e0b1      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002c5a:	4b5b      	ldr	r3, [pc, #364]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c5e:	23c0      	movs	r3, #192	@ 0xc0
 8002c60:	029b      	lsls	r3, r3, #10
 8002c62:	4013      	ands	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d03b      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	23c0      	movs	r3, #192	@ 0xc0
 8002c72:	029b      	lsls	r3, r3, #10
 8002c74:	4013      	ands	r3, r2
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d033      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2220      	movs	r2, #32
 8002c82:	4013      	ands	r3, r2
 8002c84:	d02e      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002c86:	4b50      	ldr	r3, [pc, #320]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c8a:	4a51      	ldr	r2, [pc, #324]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c90:	4b4d      	ldr	r3, [pc, #308]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c94:	4b4c      	ldr	r3, [pc, #304]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c96:	2180      	movs	r1, #128	@ 0x80
 8002c98:	0309      	lsls	r1, r1, #12
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c9e:	4b4a      	ldr	r3, [pc, #296]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ca0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ca2:	4b49      	ldr	r3, [pc, #292]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ca4:	494b      	ldr	r1, [pc, #300]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002ca6:	400a      	ands	r2, r1
 8002ca8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002caa:	4b47      	ldr	r3, [pc, #284]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	2380      	movs	r3, #128	@ 0x80
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	d014      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cba:	f7fe fbc1 	bl	8001440 <HAL_GetTick>
 8002cbe:	0003      	movs	r3, r0
 8002cc0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cc2:	e009      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc4:	f7fe fbbc 	bl	8001440 <HAL_GetTick>
 8002cc8:	0002      	movs	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	4a42      	ldr	r2, [pc, #264]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e072      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cd8:	4b3b      	ldr	r3, [pc, #236]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002cda:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002cdc:	2380      	movs	r3, #128	@ 0x80
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d0ef      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2220      	movs	r2, #32
 8002cea:	4013      	ands	r3, r2
 8002cec:	d01f      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	23c0      	movs	r3, #192	@ 0xc0
 8002cf4:	029b      	lsls	r3, r3, #10
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	23c0      	movs	r3, #192	@ 0xc0
 8002cfa:	029b      	lsls	r3, r3, #10
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d10c      	bne.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002d00:	4b31      	ldr	r3, [pc, #196]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a35      	ldr	r2, [pc, #212]	@ (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	0019      	movs	r1, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	23c0      	movs	r3, #192	@ 0xc0
 8002d10:	039b      	lsls	r3, r3, #14
 8002d12:	401a      	ands	r2, r3
 8002d14:	4b2c      	ldr	r3, [pc, #176]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d16:	430a      	orrs	r2, r1
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	4b2b      	ldr	r3, [pc, #172]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d1c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	23c0      	movs	r3, #192	@ 0xc0
 8002d24:	029b      	lsls	r3, r3, #10
 8002d26:	401a      	ands	r2, r3
 8002d28:	4b27      	ldr	r3, [pc, #156]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d2e:	2317      	movs	r3, #23
 8002d30:	18fb      	adds	r3, r7, r3
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d105      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d38:	4b23      	ldr	r3, [pc, #140]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d3c:	4b22      	ldr	r3, [pc, #136]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d3e:	4928      	ldr	r1, [pc, #160]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d40:	400a      	ands	r2, r1
 8002d42:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d009      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d52:	220c      	movs	r2, #12
 8002d54:	4393      	bics	r3, r2
 8002d56:	0019      	movs	r1, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2204      	movs	r2, #4
 8002d68:	4013      	ands	r3, r2
 8002d6a:	d009      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d6c:	4b16      	ldr	r3, [pc, #88]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d70:	4a1c      	ldr	r2, [pc, #112]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	0019      	movs	r1, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68da      	ldr	r2, [r3, #12]
 8002d7a:	4b13      	ldr	r3, [pc, #76]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2208      	movs	r2, #8
 8002d86:	4013      	ands	r3, r2
 8002d88:	d009      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d8e:	4a16      	ldr	r2, [pc, #88]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	0019      	movs	r1, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691a      	ldr	r2, [r3, #16]
 8002d98:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2280      	movs	r2, #128	@ 0x80
 8002da4:	4013      	ands	r3, r2
 8002da6:	d009      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002da8:	4b07      	ldr	r3, [pc, #28]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dac:	4a0f      	ldr	r2, [pc, #60]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002dae:	4013      	ands	r3, r2
 8002db0:	0019      	movs	r1, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	695a      	ldr	r2, [r3, #20]
 8002db6:	4b04      	ldr	r3, [pc, #16]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002db8:	430a      	orrs	r2, r1
 8002dba:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b006      	add	sp, #24
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	46c0      	nop			@ (mov r8, r8)
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	40007000 	.word	0x40007000
 8002dd0:	fffcffff 	.word	0xfffcffff
 8002dd4:	fff7ffff 	.word	0xfff7ffff
 8002dd8:	00001388 	.word	0x00001388
 8002ddc:	ffcfffff 	.word	0xffcfffff
 8002de0:	efffffff 	.word	0xefffffff
 8002de4:	fffff3ff 	.word	0xfffff3ff
 8002de8:	ffffcfff 	.word	0xffffcfff
 8002dec:	fff3ffff 	.word	0xfff3ffff

08002df0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002df0:	b5b0      	push	{r4, r5, r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002df8:	230f      	movs	r3, #15
 8002dfa:	18fb      	adds	r3, r7, r3
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e088      	b.n	8002f1c <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2221      	movs	r2, #33	@ 0x21
 8002e0e:	5c9b      	ldrb	r3, [r3, r2]
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d107      	bne.n	8002e26 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	0018      	movs	r0, r3
 8002e22:	f7fe f91d 	bl	8001060 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2221      	movs	r2, #33	@ 0x21
 8002e2a:	2102      	movs	r1, #2
 8002e2c:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	2210      	movs	r2, #16
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b10      	cmp	r3, #16
 8002e3a:	d05f      	beq.n	8002efc <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	22ca      	movs	r2, #202	@ 0xca
 8002e42:	625a      	str	r2, [r3, #36]	@ 0x24
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2253      	movs	r2, #83	@ 0x53
 8002e4a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002e4c:	250f      	movs	r5, #15
 8002e4e:	197c      	adds	r4, r7, r5
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	0018      	movs	r0, r3
 8002e54:	f000 fa2c 	bl	80032b0 <RTC_EnterInitMode>
 8002e58:	0003      	movs	r3, r0
 8002e5a:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8002e5c:	0028      	movs	r0, r5
 8002e5e:	183b      	adds	r3, r7, r0
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d12c      	bne.n	8002ec0 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	492c      	ldr	r1, [pc, #176]	@ (8002f24 <HAL_RTC_Init+0x134>)
 8002e72:	400a      	ands	r2, r1
 8002e74:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6899      	ldr	r1, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	431a      	orrs	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	68d2      	ldr	r2, [r2, #12]
 8002e9c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6919      	ldr	r1, [r3, #16]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	041a      	lsls	r2, r3, #16
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002eb2:	183c      	adds	r4, r7, r0
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f000 fa3e 	bl	8003338 <RTC_ExitInitMode>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8002ec0:	230f      	movs	r3, #15
 8002ec2:	18fb      	adds	r3, r7, r3
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d113      	bne.n	8002ef2 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2103      	movs	r1, #3
 8002ed6:	438a      	bics	r2, r1
 8002ed8:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69da      	ldr	r2, [r3, #28]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	22ff      	movs	r2, #255	@ 0xff
 8002ef8:	625a      	str	r2, [r3, #36]	@ 0x24
 8002efa:	e003      	b.n	8002f04 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002efc:	230f      	movs	r3, #15
 8002efe:	18fb      	adds	r3, r7, r3
 8002f00:	2200      	movs	r2, #0
 8002f02:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8002f04:	230f      	movs	r3, #15
 8002f06:	18fb      	adds	r3, r7, r3
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d103      	bne.n	8002f16 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2221      	movs	r2, #33	@ 0x21
 8002f12:	2101      	movs	r1, #1
 8002f14:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002f16:	230f      	movs	r3, #15
 8002f18:	18fb      	adds	r3, r7, r3
 8002f1a:	781b      	ldrb	r3, [r3, #0]
}
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b004      	add	sp, #16
 8002f22:	bdb0      	pop	{r4, r5, r7, pc}
 8002f24:	ff8fffbf 	.word	0xff8fffbf

08002f28 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f28:	b5b0      	push	{r4, r5, r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	5c9b      	ldrb	r3, [r3, r2]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d101      	bne.n	8002f46 <HAL_RTC_SetTime+0x1e>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e092      	b.n	800306c <HAL_RTC_SetTime+0x144>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2221      	movs	r2, #33	@ 0x21
 8002f52:	2102      	movs	r1, #2
 8002f54:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d125      	bne.n	8002fa8 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	2240      	movs	r2, #64	@ 0x40
 8002f64:	4013      	ands	r3, r2
 8002f66:	d102      	bne.n	8002f6e <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	0018      	movs	r0, r3
 8002f74:	f000 fa0a 	bl	800338c <RTC_ByteToBcd2>
 8002f78:	0003      	movs	r3, r0
 8002f7a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	785b      	ldrb	r3, [r3, #1]
 8002f80:	0018      	movs	r0, r3
 8002f82:	f000 fa03 	bl	800338c <RTC_ByteToBcd2>
 8002f86:	0003      	movs	r3, r0
 8002f88:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002f8a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	789b      	ldrb	r3, [r3, #2]
 8002f90:	0018      	movs	r0, r3
 8002f92:	f000 f9fb 	bl	800338c <RTC_ByteToBcd2>
 8002f96:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f98:	0022      	movs	r2, r4
 8002f9a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	78db      	ldrb	r3, [r3, #3]
 8002fa0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	617b      	str	r3, [r7, #20]
 8002fa6:	e017      	b.n	8002fd8 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	2240      	movs	r2, #64	@ 0x40
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d102      	bne.n	8002fba <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	785b      	ldrb	r3, [r3, #1]
 8002fc4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002fc6:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002fcc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	78db      	ldrb	r3, [r3, #3]
 8002fd2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	22ca      	movs	r2, #202	@ 0xca
 8002fde:	625a      	str	r2, [r3, #36]	@ 0x24
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2253      	movs	r2, #83	@ 0x53
 8002fe6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002fe8:	2513      	movs	r5, #19
 8002fea:	197c      	adds	r4, r7, r5
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f000 f95e 	bl	80032b0 <RTC_EnterInitMode>
 8002ff4:	0003      	movs	r3, r0
 8002ff6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002ff8:	0028      	movs	r0, r5
 8002ffa:	183b      	adds	r3, r7, r0
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d120      	bne.n	8003044 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	491a      	ldr	r1, [pc, #104]	@ (8003074 <HAL_RTC_SetTime+0x14c>)
 800300a:	400a      	ands	r2, r1
 800300c:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4917      	ldr	r1, [pc, #92]	@ (8003078 <HAL_RTC_SetTime+0x150>)
 800301a:	400a      	ands	r2, r1
 800301c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6899      	ldr	r1, [r3, #8]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	431a      	orrs	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003036:	183c      	adds	r4, r7, r0
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	0018      	movs	r0, r3
 800303c:	f000 f97c 	bl	8003338 <RTC_ExitInitMode>
 8003040:	0003      	movs	r3, r0
 8003042:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8003044:	2313      	movs	r3, #19
 8003046:	18fb      	adds	r3, r7, r3
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d103      	bne.n	8003056 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2221      	movs	r2, #33	@ 0x21
 8003052:	2101      	movs	r1, #1
 8003054:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	22ff      	movs	r2, #255	@ 0xff
 800305c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	2100      	movs	r1, #0
 8003064:	5499      	strb	r1, [r3, r2]

  return status;
 8003066:	2313      	movs	r3, #19
 8003068:	18fb      	adds	r3, r7, r3
 800306a:	781b      	ldrb	r3, [r3, #0]
}
 800306c:	0018      	movs	r0, r3
 800306e:	46bd      	mov	sp, r7
 8003070:	b006      	add	sp, #24
 8003072:	bdb0      	pop	{r4, r5, r7, pc}
 8003074:	007f7f7f 	.word	0x007f7f7f
 8003078:	fffbffff 	.word	0xfffbffff

0800307c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	045b      	lsls	r3, r3, #17
 800309e:	0c5a      	lsrs	r2, r3, #17
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a22      	ldr	r2, [pc, #136]	@ (8003134 <HAL_RTC_GetTime+0xb8>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	0c1b      	lsrs	r3, r3, #16
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	223f      	movs	r2, #63	@ 0x3f
 80030b8:	4013      	ands	r3, r2
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	0a1b      	lsrs	r3, r3, #8
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	227f      	movs	r2, #127	@ 0x7f
 80030c8:	4013      	ands	r3, r2
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	227f      	movs	r2, #127	@ 0x7f
 80030d6:	4013      	ands	r3, r2
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	0d9b      	lsrs	r3, r3, #22
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2201      	movs	r2, #1
 80030e6:	4013      	ands	r3, r2
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d11a      	bne.n	800312a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	0018      	movs	r0, r3
 80030fa:	f000 f968 	bl	80033ce <RTC_Bcd2ToByte>
 80030fe:	0003      	movs	r3, r0
 8003100:	001a      	movs	r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	785b      	ldrb	r3, [r3, #1]
 800310a:	0018      	movs	r0, r3
 800310c:	f000 f95f 	bl	80033ce <RTC_Bcd2ToByte>
 8003110:	0003      	movs	r3, r0
 8003112:	001a      	movs	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	789b      	ldrb	r3, [r3, #2]
 800311c:	0018      	movs	r0, r3
 800311e:	f000 f956 	bl	80033ce <RTC_Bcd2ToByte>
 8003122:	0003      	movs	r3, r0
 8003124:	001a      	movs	r2, r3
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	0018      	movs	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	b006      	add	sp, #24
 8003132:	bd80      	pop	{r7, pc}
 8003134:	007f7f7f 	.word	0x007f7f7f

08003138 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003138:	b5b0      	push	{r4, r5, r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2220      	movs	r2, #32
 800314c:	5c9b      	ldrb	r3, [r3, r2]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <HAL_RTC_SetDate+0x1e>
 8003152:	2302      	movs	r3, #2
 8003154:	e07e      	b.n	8003254 <HAL_RTC_SetDate+0x11c>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2220      	movs	r2, #32
 800315a:	2101      	movs	r1, #1
 800315c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2221      	movs	r2, #33	@ 0x21
 8003162:	2102      	movs	r1, #2
 8003164:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10e      	bne.n	800318a <HAL_RTC_SetDate+0x52>
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	785b      	ldrb	r3, [r3, #1]
 8003170:	001a      	movs	r2, r3
 8003172:	2310      	movs	r3, #16
 8003174:	4013      	ands	r3, r2
 8003176:	d008      	beq.n	800318a <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	785b      	ldrb	r3, [r3, #1]
 800317c:	2210      	movs	r2, #16
 800317e:	4393      	bics	r3, r2
 8003180:	b2db      	uxtb	r3, r3
 8003182:	330a      	adds	r3, #10
 8003184:	b2da      	uxtb	r2, r3
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d11c      	bne.n	80031ca <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	78db      	ldrb	r3, [r3, #3]
 8003194:	0018      	movs	r0, r3
 8003196:	f000 f8f9 	bl	800338c <RTC_ByteToBcd2>
 800319a:	0003      	movs	r3, r0
 800319c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	785b      	ldrb	r3, [r3, #1]
 80031a2:	0018      	movs	r0, r3
 80031a4:	f000 f8f2 	bl	800338c <RTC_ByteToBcd2>
 80031a8:	0003      	movs	r3, r0
 80031aa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80031ac:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	789b      	ldrb	r3, [r3, #2]
 80031b2:	0018      	movs	r0, r3
 80031b4:	f000 f8ea 	bl	800338c <RTC_ByteToBcd2>
 80031b8:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80031ba:	0022      	movs	r2, r4
 80031bc:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80031c4:	4313      	orrs	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	e00e      	b.n	80031e8 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	78db      	ldrb	r3, [r3, #3]
 80031ce:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	785b      	ldrb	r3, [r3, #1]
 80031d4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80031d6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80031dc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80031e4:	4313      	orrs	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	22ca      	movs	r2, #202	@ 0xca
 80031ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2253      	movs	r2, #83	@ 0x53
 80031f6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80031f8:	2513      	movs	r5, #19
 80031fa:	197c      	adds	r4, r7, r5
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	0018      	movs	r0, r3
 8003200:	f000 f856 	bl	80032b0 <RTC_EnterInitMode>
 8003204:	0003      	movs	r3, r0
 8003206:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8003208:	0028      	movs	r0, r5
 800320a:	183b      	adds	r3, r7, r0
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10c      	bne.n	800322c <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	4910      	ldr	r1, [pc, #64]	@ (800325c <HAL_RTC_SetDate+0x124>)
 800321a:	400a      	ands	r2, r1
 800321c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800321e:	183c      	adds	r4, r7, r0
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	0018      	movs	r0, r3
 8003224:	f000 f888 	bl	8003338 <RTC_ExitInitMode>
 8003228:	0003      	movs	r3, r0
 800322a:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 800322c:	2313      	movs	r3, #19
 800322e:	18fb      	adds	r3, r7, r3
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d103      	bne.n	800323e <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2221      	movs	r2, #33	@ 0x21
 800323a:	2101      	movs	r1, #1
 800323c:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	22ff      	movs	r2, #255	@ 0xff
 8003244:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2220      	movs	r2, #32
 800324a:	2100      	movs	r1, #0
 800324c:	5499      	strb	r1, [r3, r2]

  return status;
 800324e:	2313      	movs	r3, #19
 8003250:	18fb      	adds	r3, r7, r3
 8003252:	781b      	ldrb	r3, [r3, #0]
}
 8003254:	0018      	movs	r0, r3
 8003256:	46bd      	mov	sp, r7
 8003258:	b006      	add	sp, #24
 800325a:	bdb0      	pop	{r4, r5, r7, pc}
 800325c:	00ffff3f 	.word	0x00ffff3f

08003260 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a0e      	ldr	r2, [pc, #56]	@ (80032ac <HAL_RTC_WaitForSynchro+0x4c>)
 8003272:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003274:	f7fe f8e4 	bl	8001440 <HAL_GetTick>
 8003278:	0003      	movs	r3, r0
 800327a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800327c:	e00a      	b.n	8003294 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800327e:	f7fe f8df 	bl	8001440 <HAL_GetTick>
 8003282:	0002      	movs	r2, r0
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	1ad2      	subs	r2, r2, r3
 8003288:	23fa      	movs	r3, #250	@ 0xfa
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	429a      	cmp	r2, r3
 800328e:	d901      	bls.n	8003294 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e006      	b.n	80032a2 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	4013      	ands	r3, r2
 800329e:	d0ee      	beq.n	800327e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	0018      	movs	r0, r3
 80032a4:	46bd      	mov	sp, r7
 80032a6:	b004      	add	sp, #16
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	46c0      	nop			@ (mov r8, r8)
 80032ac:	0001ff5f 	.word	0x0001ff5f

080032b0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80032bc:	230f      	movs	r3, #15
 80032be:	18fb      	adds	r3, r7, r3
 80032c0:	2200      	movs	r2, #0
 80032c2:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	2240      	movs	r2, #64	@ 0x40
 80032cc:	4013      	ands	r3, r2
 80032ce:	d12c      	bne.n	800332a <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2180      	movs	r1, #128	@ 0x80
 80032dc:	430a      	orrs	r2, r1
 80032de:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032e0:	f7fe f8ae 	bl	8001440 <HAL_GetTick>
 80032e4:	0003      	movs	r3, r0
 80032e6:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80032e8:	e014      	b.n	8003314 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80032ea:	f7fe f8a9 	bl	8001440 <HAL_GetTick>
 80032ee:	0002      	movs	r2, r0
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	1ad2      	subs	r2, r2, r3
 80032f4:	200f      	movs	r0, #15
 80032f6:	183b      	adds	r3, r7, r0
 80032f8:	1839      	adds	r1, r7, r0
 80032fa:	7809      	ldrb	r1, [r1, #0]
 80032fc:	7019      	strb	r1, [r3, #0]
 80032fe:	23fa      	movs	r3, #250	@ 0xfa
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	429a      	cmp	r2, r3
 8003304:	d906      	bls.n	8003314 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2221      	movs	r2, #33	@ 0x21
 800330a:	2104      	movs	r1, #4
 800330c:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 800330e:	183b      	adds	r3, r7, r0
 8003310:	2201      	movs	r2, #1
 8003312:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	2240      	movs	r2, #64	@ 0x40
 800331c:	4013      	ands	r3, r2
 800331e:	d104      	bne.n	800332a <RTC_EnterInitMode+0x7a>
 8003320:	230f      	movs	r3, #15
 8003322:	18fb      	adds	r3, r7, r3
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d1df      	bne.n	80032ea <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 800332a:	230f      	movs	r3, #15
 800332c:	18fb      	adds	r3, r7, r3
 800332e:	781b      	ldrb	r3, [r3, #0]
}
 8003330:	0018      	movs	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	b004      	add	sp, #16
 8003336:	bd80      	pop	{r7, pc}

08003338 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003338:	b590      	push	{r4, r7, lr}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003340:	240f      	movs	r4, #15
 8003342:	193b      	adds	r3, r7, r4
 8003344:	2200      	movs	r2, #0
 8003346:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2180      	movs	r1, #128	@ 0x80
 8003354:	438a      	bics	r2, r1
 8003356:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	2220      	movs	r2, #32
 8003360:	4013      	ands	r3, r2
 8003362:	d10c      	bne.n	800337e <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	0018      	movs	r0, r3
 8003368:	f7ff ff7a 	bl	8003260 <HAL_RTC_WaitForSynchro>
 800336c:	1e03      	subs	r3, r0, #0
 800336e:	d006      	beq.n	800337e <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2221      	movs	r2, #33	@ 0x21
 8003374:	2104      	movs	r1, #4
 8003376:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8003378:	193b      	adds	r3, r7, r4
 800337a:	2201      	movs	r2, #1
 800337c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800337e:	230f      	movs	r3, #15
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	781b      	ldrb	r3, [r3, #0]
}
 8003384:	0018      	movs	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	b005      	add	sp, #20
 800338a:	bd90      	pop	{r4, r7, pc}

0800338c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	0002      	movs	r2, r0
 8003394:	1dfb      	adds	r3, r7, #7
 8003396:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003398:	2300      	movs	r3, #0
 800339a:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800339c:	e007      	b.n	80033ae <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	3301      	adds	r3, #1
 80033a2:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80033a4:	1dfb      	adds	r3, r7, #7
 80033a6:	1dfa      	adds	r2, r7, #7
 80033a8:	7812      	ldrb	r2, [r2, #0]
 80033aa:	3a0a      	subs	r2, #10
 80033ac:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 80033ae:	1dfb      	adds	r3, r7, #7
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b09      	cmp	r3, #9
 80033b4:	d8f3      	bhi.n	800339e <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	1dfb      	adds	r3, r7, #7
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	b2db      	uxtb	r3, r3
}
 80033c6:	0018      	movs	r0, r3
 80033c8:	46bd      	mov	sp, r7
 80033ca:	b004      	add	sp, #16
 80033cc:	bd80      	pop	{r7, pc}

080033ce <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b084      	sub	sp, #16
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	0002      	movs	r2, r0
 80033d6:	1dfb      	adds	r3, r7, #7
 80033d8:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80033de:	1dfb      	adds	r3, r7, #7
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	091b      	lsrs	r3, r3, #4
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	001a      	movs	r2, r3
 80033e8:	0013      	movs	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	189b      	adds	r3, r3, r2
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	1dfb      	adds	r3, r7, #7
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	210f      	movs	r1, #15
 80033fc:	400b      	ands	r3, r1
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	18d3      	adds	r3, r2, r3
 8003402:	b2db      	uxtb	r3, r3
}
 8003404:	0018      	movs	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	b004      	add	sp, #16
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_RTCEx_SetTimeStamp>:
  * @note Although unused, parameter RTC_TimeStampPin has been kept for portability
  *       reasons.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]
  /* Prevent compilation warning due to unused argument(s) if assert_param check
     is disabled */
  UNUSED(RTC_TimeStampPin);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2220      	movs	r2, #32
 8003420:	5c9b      	ldrb	r3, [r3, r2]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d101      	bne.n	800342a <HAL_RTCEx_SetTimeStamp+0x1e>
 8003426:	2302      	movs	r3, #2
 8003428:	e047      	b.n	80034ba <HAL_RTCEx_SetTimeStamp+0xae>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2220      	movs	r2, #32
 800342e:	2101      	movs	r1, #1
 8003430:	5499      	strb	r1, [r3, r2]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2221      	movs	r2, #33	@ 0x21
 8003436:	2102      	movs	r1, #2
 8003438:	5499      	strb	r1, [r3, r2]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	4a20      	ldr	r2, [pc, #128]	@ (80034c4 <HAL_RTCEx_SetTimeStamp+0xb8>)
 8003442:	4013      	ands	r3, r2
 8003444:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	4313      	orrs	r3, r2
 800344c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	22ca      	movs	r2, #202	@ 0xca
 8003454:	625a      	str	r2, [r3, #36]	@ 0x24
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2253      	movs	r2, #83	@ 0x53
 800345c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	22ff      	movs	r2, #255	@ 0xff
 800346e:	401a      	ands	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4914      	ldr	r1, [pc, #80]	@ (80034c8 <HAL_RTCEx_SetTimeStamp+0xbc>)
 8003476:	430a      	orrs	r2, r1
 8003478:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	22ff      	movs	r2, #255	@ 0xff
 8003482:	401a      	ands	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4910      	ldr	r1, [pc, #64]	@ (80034cc <HAL_RTCEx_SetTimeStamp+0xc0>)
 800348a:	430a      	orrs	r2, r1
 800348c:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2180      	movs	r1, #128	@ 0x80
 800349a:	0109      	lsls	r1, r1, #4
 800349c:	430a      	orrs	r2, r1
 800349e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	22ff      	movs	r2, #255	@ 0xff
 80034a6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2221      	movs	r2, #33	@ 0x21
 80034ac:	2101      	movs	r1, #1
 80034ae:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2220      	movs	r2, #32
 80034b4:	2100      	movs	r1, #0
 80034b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	0018      	movs	r0, r3
 80034bc:	46bd      	mov	sp, r7
 80034be:	b006      	add	sp, #24
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	46c0      	nop			@ (mov r8, r8)
 80034c4:	fffff7f7 	.word	0xfffff7f7
 80034c8:	fffff77f 	.word	0xfffff77f
 80034cc:	ffffef7f 	.word	0xffffef7f

080034d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e07b      	b.n	80035da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d109      	bne.n	80034fe <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	2382      	movs	r3, #130	@ 0x82
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d009      	beq.n	800350a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	61da      	str	r2, [r3, #28]
 80034fc:	e005      	b.n	800350a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2251      	movs	r2, #81	@ 0x51
 8003514:	5c9b      	ldrb	r3, [r3, r2]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	d107      	bne.n	800352c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2250      	movs	r2, #80	@ 0x50
 8003520:	2100      	movs	r1, #0
 8003522:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	0018      	movs	r0, r3
 8003528:	f7fd fdb2 	bl	8001090 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2251      	movs	r2, #81	@ 0x51
 8003530:	2102      	movs	r1, #2
 8003532:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2140      	movs	r1, #64	@ 0x40
 8003540:	438a      	bics	r2, r1
 8003542:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	2382      	movs	r3, #130	@ 0x82
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	401a      	ands	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6899      	ldr	r1, [r3, #8]
 8003552:	2384      	movs	r3, #132	@ 0x84
 8003554:	021b      	lsls	r3, r3, #8
 8003556:	400b      	ands	r3, r1
 8003558:	431a      	orrs	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68d9      	ldr	r1, [r3, #12]
 800355e:	2380      	movs	r3, #128	@ 0x80
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	400b      	ands	r3, r1
 8003564:	431a      	orrs	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	2102      	movs	r1, #2
 800356c:	400b      	ands	r3, r1
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	2101      	movs	r1, #1
 8003576:	400b      	ands	r3, r1
 8003578:	431a      	orrs	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6999      	ldr	r1, [r3, #24]
 800357e:	2380      	movs	r3, #128	@ 0x80
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	400b      	ands	r3, r1
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	2138      	movs	r1, #56	@ 0x38
 800358c:	400b      	ands	r3, r1
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	2180      	movs	r1, #128	@ 0x80
 8003596:	400b      	ands	r3, r1
 8003598:	431a      	orrs	r2, r3
 800359a:	0011      	movs	r1, r2
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035a0:	2380      	movs	r3, #128	@ 0x80
 80035a2:	019b      	lsls	r3, r3, #6
 80035a4:	401a      	ands	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	0c1b      	lsrs	r3, r3, #16
 80035b4:	2204      	movs	r2, #4
 80035b6:	4013      	ands	r3, r2
 80035b8:	0019      	movs	r1, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035be:	2210      	movs	r2, #16
 80035c0:	401a      	ands	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2251      	movs	r2, #81	@ 0x51
 80035d4:	2101      	movs	r1, #1
 80035d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	0018      	movs	r0, r3
 80035dc:	46bd      	mov	sp, r7
 80035de:	b002      	add	sp, #8
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b088      	sub	sp, #32
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	603b      	str	r3, [r7, #0]
 80035ee:	1dbb      	adds	r3, r7, #6
 80035f0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035f2:	231f      	movs	r3, #31
 80035f4:	18fb      	adds	r3, r7, r3
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2250      	movs	r2, #80	@ 0x50
 80035fe:	5c9b      	ldrb	r3, [r3, r2]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_SPI_Transmit+0x26>
 8003604:	2302      	movs	r3, #2
 8003606:	e145      	b.n	8003894 <HAL_SPI_Transmit+0x2b2>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2250      	movs	r2, #80	@ 0x50
 800360c:	2101      	movs	r1, #1
 800360e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003610:	f7fd ff16 	bl	8001440 <HAL_GetTick>
 8003614:	0003      	movs	r3, r0
 8003616:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003618:	2316      	movs	r3, #22
 800361a:	18fb      	adds	r3, r7, r3
 800361c:	1dba      	adds	r2, r7, #6
 800361e:	8812      	ldrh	r2, [r2, #0]
 8003620:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2251      	movs	r2, #81	@ 0x51
 8003626:	5c9b      	ldrb	r3, [r3, r2]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b01      	cmp	r3, #1
 800362c:	d004      	beq.n	8003638 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800362e:	231f      	movs	r3, #31
 8003630:	18fb      	adds	r3, r7, r3
 8003632:	2202      	movs	r2, #2
 8003634:	701a      	strb	r2, [r3, #0]
    goto error;
 8003636:	e126      	b.n	8003886 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_SPI_Transmit+0x64>
 800363e:	1dbb      	adds	r3, r7, #6
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d104      	bne.n	8003650 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003646:	231f      	movs	r3, #31
 8003648:	18fb      	adds	r3, r7, r3
 800364a:	2201      	movs	r2, #1
 800364c:	701a      	strb	r2, [r3, #0]
    goto error;
 800364e:	e11a      	b.n	8003886 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2251      	movs	r2, #81	@ 0x51
 8003654:	2103      	movs	r1, #3
 8003656:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	1dba      	adds	r2, r7, #6
 8003668:	8812      	ldrh	r2, [r2, #0]
 800366a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	1dba      	adds	r2, r7, #6
 8003670:	8812      	ldrh	r2, [r2, #0]
 8003672:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	2380      	movs	r3, #128	@ 0x80
 8003698:	021b      	lsls	r3, r3, #8
 800369a:	429a      	cmp	r2, r3
 800369c:	d110      	bne.n	80036c0 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2140      	movs	r1, #64	@ 0x40
 80036aa:	438a      	bics	r2, r1
 80036ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2180      	movs	r1, #128	@ 0x80
 80036ba:	01c9      	lsls	r1, r1, #7
 80036bc:	430a      	orrs	r2, r1
 80036be:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2240      	movs	r2, #64	@ 0x40
 80036c8:	4013      	ands	r3, r2
 80036ca:	2b40      	cmp	r3, #64	@ 0x40
 80036cc:	d007      	beq.n	80036de <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2140      	movs	r1, #64	@ 0x40
 80036da:	430a      	orrs	r2, r1
 80036dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	2380      	movs	r3, #128	@ 0x80
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d152      	bne.n	8003790 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d004      	beq.n	80036fc <HAL_SPI_Transmit+0x11a>
 80036f2:	2316      	movs	r3, #22
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d143      	bne.n	8003784 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003700:	881a      	ldrh	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370c:	1c9a      	adds	r2, r3, #2
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003716:	b29b      	uxth	r3, r3
 8003718:	3b01      	subs	r3, #1
 800371a:	b29a      	uxth	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003720:	e030      	b.n	8003784 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	2202      	movs	r2, #2
 800372a:	4013      	ands	r3, r2
 800372c:	2b02      	cmp	r3, #2
 800372e:	d112      	bne.n	8003756 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003734:	881a      	ldrh	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003740:	1c9a      	adds	r2, r3, #2
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800374a:	b29b      	uxth	r3, r3
 800374c:	3b01      	subs	r3, #1
 800374e:	b29a      	uxth	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003754:	e016      	b.n	8003784 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003756:	f7fd fe73 	bl	8001440 <HAL_GetTick>
 800375a:	0002      	movs	r2, r0
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d802      	bhi.n	800376c <HAL_SPI_Transmit+0x18a>
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	3301      	adds	r3, #1
 800376a:	d102      	bne.n	8003772 <HAL_SPI_Transmit+0x190>
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d108      	bne.n	8003784 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8003772:	231f      	movs	r3, #31
 8003774:	18fb      	adds	r3, r7, r3
 8003776:	2203      	movs	r2, #3
 8003778:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2251      	movs	r2, #81	@ 0x51
 800377e:	2101      	movs	r1, #1
 8003780:	5499      	strb	r1, [r3, r2]
          goto error;
 8003782:	e080      	b.n	8003886 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003788:	b29b      	uxth	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1c9      	bne.n	8003722 <HAL_SPI_Transmit+0x140>
 800378e:	e053      	b.n	8003838 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d004      	beq.n	80037a2 <HAL_SPI_Transmit+0x1c0>
 8003798:	2316      	movs	r3, #22
 800379a:	18fb      	adds	r3, r7, r3
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d145      	bne.n	800382e <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	330c      	adds	r3, #12
 80037ac:	7812      	ldrb	r2, [r2, #0]
 80037ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037be:	b29b      	uxth	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80037c8:	e031      	b.n	800382e <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	2202      	movs	r2, #2
 80037d2:	4013      	ands	r3, r2
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d113      	bne.n	8003800 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	330c      	adds	r3, #12
 80037e2:	7812      	ldrb	r2, [r2, #0]
 80037e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ea:	1c5a      	adds	r2, r3, #1
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	3b01      	subs	r3, #1
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80037fe:	e016      	b.n	800382e <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003800:	f7fd fe1e 	bl	8001440 <HAL_GetTick>
 8003804:	0002      	movs	r2, r0
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d802      	bhi.n	8003816 <HAL_SPI_Transmit+0x234>
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	3301      	adds	r3, #1
 8003814:	d102      	bne.n	800381c <HAL_SPI_Transmit+0x23a>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d108      	bne.n	800382e <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 800381c:	231f      	movs	r3, #31
 800381e:	18fb      	adds	r3, r7, r3
 8003820:	2203      	movs	r2, #3
 8003822:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2251      	movs	r2, #81	@ 0x51
 8003828:	2101      	movs	r1, #1
 800382a:	5499      	strb	r1, [r3, r2]
          goto error;
 800382c:	e02b      	b.n	8003886 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003832:	b29b      	uxth	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1c8      	bne.n	80037ca <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	6839      	ldr	r1, [r7, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	0018      	movs	r0, r3
 8003840:	f000 fc1e 	bl	8004080 <SPI_EndRxTxTransaction>
 8003844:	1e03      	subs	r3, r0, #0
 8003846:	d002      	beq.n	800384e <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10a      	bne.n	800386c <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003856:	2300      	movs	r3, #0
 8003858:	613b      	str	r3, [r7, #16]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	613b      	str	r3, [r7, #16]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	613b      	str	r3, [r7, #16]
 800386a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003870:	2b00      	cmp	r3, #0
 8003872:	d004      	beq.n	800387e <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8003874:	231f      	movs	r3, #31
 8003876:	18fb      	adds	r3, r7, r3
 8003878:	2201      	movs	r2, #1
 800387a:	701a      	strb	r2, [r3, #0]
 800387c:	e003      	b.n	8003886 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2251      	movs	r2, #81	@ 0x51
 8003882:	2101      	movs	r1, #1
 8003884:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2250      	movs	r2, #80	@ 0x50
 800388a:	2100      	movs	r1, #0
 800388c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800388e:	231f      	movs	r3, #31
 8003890:	18fb      	adds	r3, r7, r3
 8003892:	781b      	ldrb	r3, [r3, #0]
}
 8003894:	0018      	movs	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	b008      	add	sp, #32
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800389c:	b590      	push	{r4, r7, lr}
 800389e:	b089      	sub	sp, #36	@ 0x24
 80038a0:	af02      	add	r7, sp, #8
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	603b      	str	r3, [r7, #0]
 80038a8:	1dbb      	adds	r3, r7, #6
 80038aa:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038ac:	2117      	movs	r1, #23
 80038ae:	187b      	adds	r3, r7, r1
 80038b0:	2200      	movs	r2, #0
 80038b2:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2251      	movs	r2, #81	@ 0x51
 80038b8:	5c9b      	ldrb	r3, [r3, r2]
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d003      	beq.n	80038c8 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80038c0:	187b      	adds	r3, r7, r1
 80038c2:	2202      	movs	r2, #2
 80038c4:	701a      	strb	r2, [r3, #0]
    goto error;
 80038c6:	e109      	b.n	8003adc <HAL_SPI_Receive+0x240>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	2382      	movs	r3, #130	@ 0x82
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d113      	bne.n	80038fc <HAL_SPI_Receive+0x60>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10f      	bne.n	80038fc <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2251      	movs	r2, #81	@ 0x51
 80038e0:	2104      	movs	r1, #4
 80038e2:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80038e4:	1dbb      	adds	r3, r7, #6
 80038e6:	881c      	ldrh	r4, [r3, #0]
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	68b9      	ldr	r1, [r7, #8]
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	0023      	movs	r3, r4
 80038f4:	f000 f900 	bl	8003af8 <HAL_SPI_TransmitReceive>
 80038f8:	0003      	movs	r3, r0
 80038fa:	e0f6      	b.n	8003aea <HAL_SPI_Receive+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2250      	movs	r2, #80	@ 0x50
 8003900:	5c9b      	ldrb	r3, [r3, r2]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_SPI_Receive+0x6e>
 8003906:	2302      	movs	r3, #2
 8003908:	e0ef      	b.n	8003aea <HAL_SPI_Receive+0x24e>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2250      	movs	r2, #80	@ 0x50
 800390e:	2101      	movs	r1, #1
 8003910:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003912:	f7fd fd95 	bl	8001440 <HAL_GetTick>
 8003916:	0003      	movs	r3, r0
 8003918:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <HAL_SPI_Receive+0x8c>
 8003920:	1dbb      	adds	r3, r7, #6
 8003922:	881b      	ldrh	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d104      	bne.n	8003932 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8003928:	2317      	movs	r3, #23
 800392a:	18fb      	adds	r3, r7, r3
 800392c:	2201      	movs	r2, #1
 800392e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003930:	e0d4      	b.n	8003adc <HAL_SPI_Receive+0x240>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2251      	movs	r2, #81	@ 0x51
 8003936:	2104      	movs	r1, #4
 8003938:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	1dba      	adds	r2, r7, #6
 800394a:	8812      	ldrh	r2, [r2, #0]
 800394c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	1dba      	adds	r2, r7, #6
 8003952:	8812      	ldrh	r2, [r2, #0]
 8003954:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	2380      	movs	r3, #128	@ 0x80
 800397a:	021b      	lsls	r3, r3, #8
 800397c:	429a      	cmp	r2, r3
 800397e:	d10f      	bne.n	80039a0 <HAL_SPI_Receive+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2140      	movs	r1, #64	@ 0x40
 800398c:	438a      	bics	r2, r1
 800398e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4956      	ldr	r1, [pc, #344]	@ (8003af4 <HAL_SPI_Receive+0x258>)
 800399c:	400a      	ands	r2, r1
 800399e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2240      	movs	r2, #64	@ 0x40
 80039a8:	4013      	ands	r3, r2
 80039aa:	2b40      	cmp	r3, #64	@ 0x40
 80039ac:	d007      	beq.n	80039be <HAL_SPI_Receive+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2140      	movs	r1, #64	@ 0x40
 80039ba:	430a      	orrs	r2, r1
 80039bc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d000      	beq.n	80039c8 <HAL_SPI_Receive+0x12c>
 80039c6:	e06c      	b.n	8003aa2 <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80039c8:	e033      	b.n	8003a32 <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	2201      	movs	r2, #1
 80039d2:	4013      	ands	r3, r2
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d115      	bne.n	8003a04 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	330c      	adds	r3, #12
 80039de:	001a      	movs	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e4:	7812      	ldrb	r2, [r2, #0]
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ee:	1c5a      	adds	r2, r3, #1
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a02:	e016      	b.n	8003a32 <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a04:	f7fd fd1c 	bl	8001440 <HAL_GetTick>
 8003a08:	0002      	movs	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d802      	bhi.n	8003a1a <HAL_SPI_Receive+0x17e>
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	3301      	adds	r3, #1
 8003a18:	d102      	bne.n	8003a20 <HAL_SPI_Receive+0x184>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d108      	bne.n	8003a32 <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 8003a20:	2317      	movs	r3, #23
 8003a22:	18fb      	adds	r3, r7, r3
 8003a24:	2203      	movs	r2, #3
 8003a26:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2251      	movs	r2, #81	@ 0x51
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	5499      	strb	r1, [r3, r2]
          goto error;
 8003a30:	e054      	b.n	8003adc <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1c6      	bne.n	80039ca <HAL_SPI_Receive+0x12e>
 8003a3c:	e036      	b.n	8003aac <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	2201      	movs	r2, #1
 8003a46:	4013      	ands	r3, r2
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d113      	bne.n	8003a74 <HAL_SPI_Receive+0x1d8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a56:	b292      	uxth	r2, r2
 8003a58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a5e:	1c9a      	adds	r2, r3, #2
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a72:	e016      	b.n	8003aa2 <HAL_SPI_Receive+0x206>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a74:	f7fd fce4 	bl	8001440 <HAL_GetTick>
 8003a78:	0002      	movs	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d802      	bhi.n	8003a8a <HAL_SPI_Receive+0x1ee>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	3301      	adds	r3, #1
 8003a88:	d102      	bne.n	8003a90 <HAL_SPI_Receive+0x1f4>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d108      	bne.n	8003aa2 <HAL_SPI_Receive+0x206>
        {
          errorcode = HAL_TIMEOUT;
 8003a90:	2317      	movs	r3, #23
 8003a92:	18fb      	adds	r3, r7, r3
 8003a94:	2203      	movs	r2, #3
 8003a96:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2251      	movs	r2, #81	@ 0x51
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	5499      	strb	r1, [r3, r2]
          goto error;
 8003aa0:	e01c      	b.n	8003adc <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1c8      	bne.n	8003a3e <HAL_SPI_Receive+0x1a2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	6839      	ldr	r1, [r7, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	f000 fa7a 	bl	8003fac <SPI_EndRxTransaction>
 8003ab8:	1e03      	subs	r3, r0, #0
 8003aba:	d002      	beq.n	8003ac2 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d004      	beq.n	8003ad4 <HAL_SPI_Receive+0x238>
  {
    errorcode = HAL_ERROR;
 8003aca:	2317      	movs	r3, #23
 8003acc:	18fb      	adds	r3, r7, r3
 8003ace:	2201      	movs	r2, #1
 8003ad0:	701a      	strb	r2, [r3, #0]
 8003ad2:	e003      	b.n	8003adc <HAL_SPI_Receive+0x240>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2251      	movs	r2, #81	@ 0x51
 8003ad8:	2101      	movs	r1, #1
 8003ada:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2250      	movs	r2, #80	@ 0x50
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003ae4:	2317      	movs	r3, #23
 8003ae6:	18fb      	adds	r3, r7, r3
 8003ae8:	781b      	ldrb	r3, [r3, #0]
}
 8003aea:	0018      	movs	r0, r3
 8003aec:	46bd      	mov	sp, r7
 8003aee:	b007      	add	sp, #28
 8003af0:	bd90      	pop	{r4, r7, pc}
 8003af2:	46c0      	nop			@ (mov r8, r8)
 8003af4:	ffffbfff 	.word	0xffffbfff

08003af8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08c      	sub	sp, #48	@ 0x30
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	001a      	movs	r2, r3
 8003b06:	1cbb      	adds	r3, r7, #2
 8003b08:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b0e:	232b      	movs	r3, #43	@ 0x2b
 8003b10:	18fb      	adds	r3, r7, r3
 8003b12:	2200      	movs	r2, #0
 8003b14:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2250      	movs	r2, #80	@ 0x50
 8003b1a:	5c9b      	ldrb	r3, [r3, r2]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_SPI_TransmitReceive+0x2c>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e1b0      	b.n	8003e86 <HAL_SPI_TransmitReceive+0x38e>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2250      	movs	r2, #80	@ 0x50
 8003b28:	2101      	movs	r1, #1
 8003b2a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b2c:	f7fd fc88 	bl	8001440 <HAL_GetTick>
 8003b30:	0003      	movs	r3, r0
 8003b32:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b34:	2023      	movs	r0, #35	@ 0x23
 8003b36:	183b      	adds	r3, r7, r0
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	2151      	movs	r1, #81	@ 0x51
 8003b3c:	5c52      	ldrb	r2, [r2, r1]
 8003b3e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003b46:	231a      	movs	r3, #26
 8003b48:	18fb      	adds	r3, r7, r3
 8003b4a:	1cba      	adds	r2, r7, #2
 8003b4c:	8812      	ldrh	r2, [r2, #0]
 8003b4e:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b50:	183b      	adds	r3, r7, r0
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d011      	beq.n	8003b7c <HAL_SPI_TransmitReceive+0x84>
 8003b58:	69fa      	ldr	r2, [r7, #28]
 8003b5a:	2382      	movs	r3, #130	@ 0x82
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d107      	bne.n	8003b72 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d103      	bne.n	8003b72 <HAL_SPI_TransmitReceive+0x7a>
 8003b6a:	183b      	adds	r3, r7, r0
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	2b04      	cmp	r3, #4
 8003b70:	d004      	beq.n	8003b7c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003b72:	232b      	movs	r3, #43	@ 0x2b
 8003b74:	18fb      	adds	r3, r7, r3
 8003b76:	2202      	movs	r2, #2
 8003b78:	701a      	strb	r2, [r3, #0]
    goto error;
 8003b7a:	e17d      	b.n	8003e78 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d006      	beq.n	8003b90 <HAL_SPI_TransmitReceive+0x98>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <HAL_SPI_TransmitReceive+0x98>
 8003b88:	1cbb      	adds	r3, r7, #2
 8003b8a:	881b      	ldrh	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d104      	bne.n	8003b9a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003b90:	232b      	movs	r3, #43	@ 0x2b
 8003b92:	18fb      	adds	r3, r7, r3
 8003b94:	2201      	movs	r2, #1
 8003b96:	701a      	strb	r2, [r3, #0]
    goto error;
 8003b98:	e16e      	b.n	8003e78 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2251      	movs	r2, #81	@ 0x51
 8003b9e:	5c9b      	ldrb	r3, [r3, r2]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d003      	beq.n	8003bae <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2251      	movs	r2, #81	@ 0x51
 8003baa:	2105      	movs	r1, #5
 8003bac:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	1cba      	adds	r2, r7, #2
 8003bbe:	8812      	ldrh	r2, [r2, #0]
 8003bc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	1cba      	adds	r2, r7, #2
 8003bc6:	8812      	ldrh	r2, [r2, #0]
 8003bc8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	1cba      	adds	r2, r7, #2
 8003bd4:	8812      	ldrh	r2, [r2, #0]
 8003bd6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	1cba      	adds	r2, r7, #2
 8003bdc:	8812      	ldrh	r2, [r2, #0]
 8003bde:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2240      	movs	r2, #64	@ 0x40
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	2b40      	cmp	r3, #64	@ 0x40
 8003bf8:	d007      	beq.n	8003c0a <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2140      	movs	r1, #64	@ 0x40
 8003c06:	430a      	orrs	r2, r1
 8003c08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	2380      	movs	r3, #128	@ 0x80
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d000      	beq.n	8003c18 <HAL_SPI_TransmitReceive+0x120>
 8003c16:	e07f      	b.n	8003d18 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d005      	beq.n	8003c2c <HAL_SPI_TransmitReceive+0x134>
 8003c20:	231a      	movs	r3, #26
 8003c22:	18fb      	adds	r3, r7, r3
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d000      	beq.n	8003c2c <HAL_SPI_TransmitReceive+0x134>
 8003c2a:	e06a      	b.n	8003d02 <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c30:	881a      	ldrh	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3c:	1c9a      	adds	r2, r3, #2
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c50:	e057      	b.n	8003d02 <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	2202      	movs	r2, #2
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d11b      	bne.n	8003c98 <HAL_SPI_TransmitReceive+0x1a0>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d016      	beq.n	8003c98 <HAL_SPI_TransmitReceive+0x1a0>
 8003c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d113      	bne.n	8003c98 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c74:	881a      	ldrh	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c80:	1c9a      	adds	r2, r3, #2
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d119      	bne.n	8003cda <HAL_SPI_TransmitReceive+0x1e2>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d014      	beq.n	8003cda <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cba:	b292      	uxth	r2, r2
 8003cbc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc2:	1c9a      	adds	r2, r3, #2
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003cda:	f7fd fbb1 	bl	8001440 <HAL_GetTick>
 8003cde:	0002      	movs	r2, r0
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d80b      	bhi.n	8003d02 <HAL_SPI_TransmitReceive+0x20a>
 8003cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cec:	3301      	adds	r3, #1
 8003cee:	d008      	beq.n	8003d02 <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8003cf0:	232b      	movs	r3, #43	@ 0x2b
 8003cf2:	18fb      	adds	r3, r7, r3
 8003cf4:	2203      	movs	r2, #3
 8003cf6:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2251      	movs	r2, #81	@ 0x51
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	5499      	strb	r1, [r3, r2]
        goto error;
 8003d00:	e0ba      	b.n	8003e78 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1a2      	bne.n	8003c52 <HAL_SPI_TransmitReceive+0x15a>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d19d      	bne.n	8003c52 <HAL_SPI_TransmitReceive+0x15a>
 8003d16:	e083      	b.n	8003e20 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d005      	beq.n	8003d2c <HAL_SPI_TransmitReceive+0x234>
 8003d20:	231a      	movs	r3, #26
 8003d22:	18fb      	adds	r3, r7, r3
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d000      	beq.n	8003d2c <HAL_SPI_TransmitReceive+0x234>
 8003d2a:	e06f      	b.n	8003e0c <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	330c      	adds	r3, #12
 8003d36:	7812      	ldrb	r2, [r2, #0]
 8003d38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3e:	1c5a      	adds	r2, r3, #1
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d52:	e05b      	b.n	8003e0c <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d11c      	bne.n	8003d9c <HAL_SPI_TransmitReceive+0x2a4>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d017      	beq.n	8003d9c <HAL_SPI_TransmitReceive+0x2a4>
 8003d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d114      	bne.n	8003d9c <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	330c      	adds	r3, #12
 8003d7c:	7812      	ldrb	r2, [r2, #0]
 8003d7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	2201      	movs	r2, #1
 8003da4:	4013      	ands	r3, r2
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d119      	bne.n	8003dde <HAL_SPI_TransmitReceive+0x2e6>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d014      	beq.n	8003dde <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003dde:	f7fd fb2f 	bl	8001440 <HAL_GetTick>
 8003de2:	0002      	movs	r2, r0
 8003de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d802      	bhi.n	8003df4 <HAL_SPI_TransmitReceive+0x2fc>
 8003dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df0:	3301      	adds	r3, #1
 8003df2:	d102      	bne.n	8003dfa <HAL_SPI_TransmitReceive+0x302>
 8003df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d108      	bne.n	8003e0c <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 8003dfa:	232b      	movs	r3, #43	@ 0x2b
 8003dfc:	18fb      	adds	r3, r7, r3
 8003dfe:	2203      	movs	r2, #3
 8003e00:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2251      	movs	r2, #81	@ 0x51
 8003e06:	2101      	movs	r1, #1
 8003e08:	5499      	strb	r1, [r3, r2]
        goto error;
 8003e0a:	e035      	b.n	8003e78 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d19e      	bne.n	8003d54 <HAL_SPI_TransmitReceive+0x25c>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d199      	bne.n	8003d54 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e22:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	0018      	movs	r0, r3
 8003e28:	f000 f92a 	bl	8004080 <SPI_EndRxTxTransaction>
 8003e2c:	1e03      	subs	r3, r0, #0
 8003e2e:	d007      	beq.n	8003e40 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8003e30:	232b      	movs	r3, #43	@ 0x2b
 8003e32:	18fb      	adds	r3, r7, r3
 8003e34:	2201      	movs	r2, #1
 8003e36:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003e3e:	e01b      	b.n	8003e78 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10a      	bne.n	8003e5e <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e48:	2300      	movs	r3, #0
 8003e4a:	617b      	str	r3, [r7, #20]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	617b      	str	r3, [r7, #20]
 8003e5c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d004      	beq.n	8003e70 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 8003e66:	232b      	movs	r3, #43	@ 0x2b
 8003e68:	18fb      	adds	r3, r7, r3
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	701a      	strb	r2, [r3, #0]
 8003e6e:	e003      	b.n	8003e78 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2251      	movs	r2, #81	@ 0x51
 8003e74:	2101      	movs	r1, #1
 8003e76:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2250      	movs	r2, #80	@ 0x50
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003e80:	232b      	movs	r3, #43	@ 0x2b
 8003e82:	18fb      	adds	r3, r7, r3
 8003e84:	781b      	ldrb	r3, [r3, #0]
}
 8003e86:	0018      	movs	r0, r3
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	b00c      	add	sp, #48	@ 0x30
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b088      	sub	sp, #32
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	603b      	str	r3, [r7, #0]
 8003e9c:	1dfb      	adds	r3, r7, #7
 8003e9e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ea0:	f7fd face 	bl	8001440 <HAL_GetTick>
 8003ea4:	0002      	movs	r2, r0
 8003ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea8:	1a9b      	subs	r3, r3, r2
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	18d3      	adds	r3, r2, r3
 8003eae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003eb0:	f7fd fac6 	bl	8001440 <HAL_GetTick>
 8003eb4:	0003      	movs	r3, r0
 8003eb6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003eb8:	4b3a      	ldr	r3, [pc, #232]	@ (8003fa4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	015b      	lsls	r3, r3, #5
 8003ebe:	0d1b      	lsrs	r3, r3, #20
 8003ec0:	69fa      	ldr	r2, [r7, #28]
 8003ec2:	4353      	muls	r3, r2
 8003ec4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ec6:	e058      	b.n	8003f7a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	d055      	beq.n	8003f7a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ece:	f7fd fab7 	bl	8001440 <HAL_GetTick>
 8003ed2:	0002      	movs	r2, r0
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	69fa      	ldr	r2, [r7, #28]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d902      	bls.n	8003ee4 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d142      	bne.n	8003f6a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	21e0      	movs	r1, #224	@ 0xe0
 8003ef0:	438a      	bics	r2, r1
 8003ef2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	2382      	movs	r3, #130	@ 0x82
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d113      	bne.n	8003f28 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	2380      	movs	r3, #128	@ 0x80
 8003f06:	021b      	lsls	r3, r3, #8
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d005      	beq.n	8003f18 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	2380      	movs	r3, #128	@ 0x80
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d107      	bne.n	8003f28 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2140      	movs	r1, #64	@ 0x40
 8003f24:	438a      	bics	r2, r1
 8003f26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f2c:	2380      	movs	r3, #128	@ 0x80
 8003f2e:	019b      	lsls	r3, r3, #6
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d110      	bne.n	8003f56 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	491a      	ldr	r1, [pc, #104]	@ (8003fa8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003f40:	400a      	ands	r2, r1
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2180      	movs	r1, #128	@ 0x80
 8003f50:	0189      	lsls	r1, r1, #6
 8003f52:	430a      	orrs	r2, r1
 8003f54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2251      	movs	r2, #81	@ 0x51
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2250      	movs	r2, #80	@ 0x50
 8003f62:	2100      	movs	r1, #0
 8003f64:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e017      	b.n	8003f9a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	4013      	ands	r3, r2
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	425a      	negs	r2, r3
 8003f8a:	4153      	adcs	r3, r2
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	001a      	movs	r2, r3
 8003f90:	1dfb      	adds	r3, r7, #7
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d197      	bne.n	8003ec8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	b008      	add	sp, #32
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	46c0      	nop			@ (mov r8, r8)
 8003fa4:	20000030 	.word	0x20000030
 8003fa8:	ffffdfff 	.word	0xffffdfff

08003fac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af02      	add	r7, sp, #8
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	2382      	movs	r3, #130	@ 0x82
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d113      	bne.n	8003fec <SPI_EndRxTransaction+0x40>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	2380      	movs	r3, #128	@ 0x80
 8003fca:	021b      	lsls	r3, r3, #8
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d005      	beq.n	8003fdc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	2380      	movs	r3, #128	@ 0x80
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d107      	bne.n	8003fec <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2140      	movs	r1, #64	@ 0x40
 8003fe8:	438a      	bics	r2, r1
 8003fea:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	2382      	movs	r3, #130	@ 0x82
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d12b      	bne.n	8004050 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	2380      	movs	r3, #128	@ 0x80
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	429a      	cmp	r2, r3
 8004002:	d012      	beq.n	800402a <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	0013      	movs	r3, r2
 800400e:	2200      	movs	r2, #0
 8004010:	2180      	movs	r1, #128	@ 0x80
 8004012:	f7ff ff3d 	bl	8003e90 <SPI_WaitFlagStateUntilTimeout>
 8004016:	1e03      	subs	r3, r0, #0
 8004018:	d02d      	beq.n	8004076 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800401e:	2220      	movs	r2, #32
 8004020:	431a      	orrs	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e026      	b.n	8004078 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	0013      	movs	r3, r2
 8004034:	2200      	movs	r2, #0
 8004036:	2101      	movs	r1, #1
 8004038:	f7ff ff2a 	bl	8003e90 <SPI_WaitFlagStateUntilTimeout>
 800403c:	1e03      	subs	r3, r0, #0
 800403e:	d01a      	beq.n	8004076 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004044:	2220      	movs	r2, #32
 8004046:	431a      	orrs	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e013      	b.n	8004078 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	0013      	movs	r3, r2
 800405a:	2200      	movs	r2, #0
 800405c:	2101      	movs	r1, #1
 800405e:	f7ff ff17 	bl	8003e90 <SPI_WaitFlagStateUntilTimeout>
 8004062:	1e03      	subs	r3, r0, #0
 8004064:	d007      	beq.n	8004076 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800406a:	2220      	movs	r2, #32
 800406c:	431a      	orrs	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e000      	b.n	8004078 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	0018      	movs	r0, r3
 800407a:	46bd      	mov	sp, r7
 800407c:	b004      	add	sp, #16
 800407e:	bd80      	pop	{r7, pc}

08004080 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af02      	add	r7, sp, #8
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800408c:	4b1d      	ldr	r3, [pc, #116]	@ (8004104 <SPI_EndRxTxTransaction+0x84>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	491d      	ldr	r1, [pc, #116]	@ (8004108 <SPI_EndRxTxTransaction+0x88>)
 8004092:	0018      	movs	r0, r3
 8004094:	f7fc f84a 	bl	800012c <__udivsi3>
 8004098:	0003      	movs	r3, r0
 800409a:	001a      	movs	r2, r3
 800409c:	0013      	movs	r3, r2
 800409e:	015b      	lsls	r3, r3, #5
 80040a0:	1a9b      	subs	r3, r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	189b      	adds	r3, r3, r2
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	2382      	movs	r3, #130	@ 0x82
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d112      	bne.n	80040dc <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	0013      	movs	r3, r2
 80040c0:	2200      	movs	r2, #0
 80040c2:	2180      	movs	r1, #128	@ 0x80
 80040c4:	f7ff fee4 	bl	8003e90 <SPI_WaitFlagStateUntilTimeout>
 80040c8:	1e03      	subs	r3, r0, #0
 80040ca:	d016      	beq.n	80040fa <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d0:	2220      	movs	r2, #32
 80040d2:	431a      	orrs	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e00f      	b.n	80040fc <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	3b01      	subs	r3, #1
 80040e6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	2280      	movs	r2, #128	@ 0x80
 80040f0:	4013      	ands	r3, r2
 80040f2:	2b80      	cmp	r3, #128	@ 0x80
 80040f4:	d0f2      	beq.n	80040dc <SPI_EndRxTxTransaction+0x5c>
 80040f6:	e000      	b.n	80040fa <SPI_EndRxTxTransaction+0x7a>
        break;
 80040f8:	46c0      	nop			@ (mov r8, r8)
  }

  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	0018      	movs	r0, r3
 80040fe:	46bd      	mov	sp, r7
 8004100:	b006      	add	sp, #24
 8004102:	bd80      	pop	{r7, pc}
 8004104:	20000030 	.word	0x20000030
 8004108:	016e3600 	.word	0x016e3600

0800410c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e032      	b.n	8004184 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2239      	movs	r2, #57	@ 0x39
 8004122:	5c9b      	ldrb	r3, [r3, r2]
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d107      	bne.n	800413a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2238      	movs	r2, #56	@ 0x38
 800412e:	2100      	movs	r1, #0
 8004130:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	0018      	movs	r0, r3
 8004136:	f7fc ffef 	bl	8001118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2239      	movs	r2, #57	@ 0x39
 800413e:	2102      	movs	r1, #2
 8004140:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3304      	adds	r3, #4
 800414a:	0019      	movs	r1, r3
 800414c:	0010      	movs	r0, r2
 800414e:	f000 f9ff 	bl	8004550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	223e      	movs	r2, #62	@ 0x3e
 8004156:	2101      	movs	r1, #1
 8004158:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	223a      	movs	r2, #58	@ 0x3a
 800415e:	2101      	movs	r1, #1
 8004160:	5499      	strb	r1, [r3, r2]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	223b      	movs	r2, #59	@ 0x3b
 8004166:	2101      	movs	r1, #1
 8004168:	5499      	strb	r1, [r3, r2]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	223c      	movs	r2, #60	@ 0x3c
 800416e:	2101      	movs	r1, #1
 8004170:	5499      	strb	r1, [r3, r2]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	223d      	movs	r2, #61	@ 0x3d
 8004176:	2101      	movs	r1, #1
 8004178:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2239      	movs	r2, #57	@ 0x39
 800417e:	2101      	movs	r1, #1
 8004180:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	0018      	movs	r0, r3
 8004186:	46bd      	mov	sp, r7
 8004188:	b002      	add	sp, #8
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e032      	b.n	8004204 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2239      	movs	r2, #57	@ 0x39
 80041a2:	5c9b      	ldrb	r3, [r3, r2]
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d107      	bne.n	80041ba <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2238      	movs	r2, #56	@ 0x38
 80041ae:	2100      	movs	r1, #0
 80041b0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	0018      	movs	r0, r3
 80041b6:	f000 f829 	bl	800420c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2239      	movs	r2, #57	@ 0x39
 80041be:	2102      	movs	r1, #2
 80041c0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3304      	adds	r3, #4
 80041ca:	0019      	movs	r1, r3
 80041cc:	0010      	movs	r0, r2
 80041ce:	f000 f9bf 	bl	8004550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	223e      	movs	r2, #62	@ 0x3e
 80041d6:	2101      	movs	r1, #1
 80041d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	223a      	movs	r2, #58	@ 0x3a
 80041de:	2101      	movs	r1, #1
 80041e0:	5499      	strb	r1, [r3, r2]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	223b      	movs	r2, #59	@ 0x3b
 80041e6:	2101      	movs	r1, #1
 80041e8:	5499      	strb	r1, [r3, r2]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	223c      	movs	r2, #60	@ 0x3c
 80041ee:	2101      	movs	r1, #1
 80041f0:	5499      	strb	r1, [r3, r2]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	223d      	movs	r2, #61	@ 0x3d
 80041f6:	2101      	movs	r1, #1
 80041f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2239      	movs	r2, #57	@ 0x39
 80041fe:	2101      	movs	r1, #1
 8004200:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	0018      	movs	r0, r3
 8004206:	46bd      	mov	sp, r7
 8004208:	b002      	add	sp, #8
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004214:	46c0      	nop			@ (mov r8, r8)
 8004216:	46bd      	mov	sp, r7
 8004218:	b002      	add	sp, #8
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004228:	2317      	movs	r3, #23
 800422a:	18fb      	adds	r3, r7, r3
 800422c:	2200      	movs	r2, #0
 800422e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2238      	movs	r2, #56	@ 0x38
 8004234:	5c9b      	ldrb	r3, [r3, r2]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d101      	bne.n	800423e <HAL_TIM_PWM_ConfigChannel+0x22>
 800423a:	2302      	movs	r3, #2
 800423c:	e0ad      	b.n	800439a <HAL_TIM_PWM_ConfigChannel+0x17e>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2238      	movs	r2, #56	@ 0x38
 8004242:	2101      	movs	r1, #1
 8004244:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b0c      	cmp	r3, #12
 800424a:	d100      	bne.n	800424e <HAL_TIM_PWM_ConfigChannel+0x32>
 800424c:	e076      	b.n	800433c <HAL_TIM_PWM_ConfigChannel+0x120>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b0c      	cmp	r3, #12
 8004252:	d900      	bls.n	8004256 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004254:	e095      	b.n	8004382 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b08      	cmp	r3, #8
 800425a:	d04e      	beq.n	80042fa <HAL_TIM_PWM_ConfigChannel+0xde>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b08      	cmp	r3, #8
 8004260:	d900      	bls.n	8004264 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004262:	e08e      	b.n	8004382 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_TIM_PWM_ConfigChannel+0x56>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b04      	cmp	r3, #4
 800426e:	d021      	beq.n	80042b4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004270:	e087      	b.n	8004382 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	0011      	movs	r1, r2
 800427a:	0018      	movs	r0, r3
 800427c:	f000 f9b2 	bl	80045e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	699a      	ldr	r2, [r3, #24]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2108      	movs	r1, #8
 800428c:	430a      	orrs	r2, r1
 800428e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699a      	ldr	r2, [r3, #24]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2104      	movs	r1, #4
 800429c:	438a      	bics	r2, r1
 800429e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6999      	ldr	r1, [r3, #24]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	619a      	str	r2, [r3, #24]
      break;
 80042b2:	e06b      	b.n	800438c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	0011      	movs	r1, r2
 80042bc:	0018      	movs	r0, r3
 80042be:	f000 f9cd 	bl	800465c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	699a      	ldr	r2, [r3, #24]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2180      	movs	r1, #128	@ 0x80
 80042ce:	0109      	lsls	r1, r1, #4
 80042d0:	430a      	orrs	r2, r1
 80042d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	699a      	ldr	r2, [r3, #24]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4931      	ldr	r1, [pc, #196]	@ (80043a4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80042e0:	400a      	ands	r2, r1
 80042e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6999      	ldr	r1, [r3, #24]
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	021a      	lsls	r2, r3, #8
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	619a      	str	r2, [r3, #24]
      break;
 80042f8:	e048      	b.n	800438c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	0011      	movs	r1, r2
 8004302:	0018      	movs	r0, r3
 8004304:	f000 f9ec 	bl	80046e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	69da      	ldr	r2, [r3, #28]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2108      	movs	r1, #8
 8004314:	430a      	orrs	r2, r1
 8004316:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	69da      	ldr	r2, [r3, #28]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2104      	movs	r1, #4
 8004324:	438a      	bics	r2, r1
 8004326:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	69d9      	ldr	r1, [r3, #28]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	61da      	str	r2, [r3, #28]
      break;
 800433a:	e027      	b.n	800438c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	0011      	movs	r1, r2
 8004344:	0018      	movs	r0, r3
 8004346:	f000 fa0b 	bl	8004760 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	69da      	ldr	r2, [r3, #28]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2180      	movs	r1, #128	@ 0x80
 8004356:	0109      	lsls	r1, r1, #4
 8004358:	430a      	orrs	r2, r1
 800435a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	69da      	ldr	r2, [r3, #28]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	490f      	ldr	r1, [pc, #60]	@ (80043a4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004368:	400a      	ands	r2, r1
 800436a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	69d9      	ldr	r1, [r3, #28]
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	021a      	lsls	r2, r3, #8
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	430a      	orrs	r2, r1
 800437e:	61da      	str	r2, [r3, #28]
      break;
 8004380:	e004      	b.n	800438c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004382:	2317      	movs	r3, #23
 8004384:	18fb      	adds	r3, r7, r3
 8004386:	2201      	movs	r2, #1
 8004388:	701a      	strb	r2, [r3, #0]
      break;
 800438a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2238      	movs	r2, #56	@ 0x38
 8004390:	2100      	movs	r1, #0
 8004392:	5499      	strb	r1, [r3, r2]

  return status;
 8004394:	2317      	movs	r3, #23
 8004396:	18fb      	adds	r3, r7, r3
 8004398:	781b      	ldrb	r3, [r3, #0]
}
 800439a:	0018      	movs	r0, r3
 800439c:	46bd      	mov	sp, r7
 800439e:	b006      	add	sp, #24
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	46c0      	nop			@ (mov r8, r8)
 80043a4:	fffffbff 	.word	0xfffffbff

080043a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043b2:	230f      	movs	r3, #15
 80043b4:	18fb      	adds	r3, r7, r3
 80043b6:	2200      	movs	r2, #0
 80043b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2238      	movs	r2, #56	@ 0x38
 80043be:	5c9b      	ldrb	r3, [r3, r2]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d101      	bne.n	80043c8 <HAL_TIM_ConfigClockSource+0x20>
 80043c4:	2302      	movs	r3, #2
 80043c6:	e0bc      	b.n	8004542 <HAL_TIM_ConfigClockSource+0x19a>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2238      	movs	r2, #56	@ 0x38
 80043cc:	2101      	movs	r1, #1
 80043ce:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2239      	movs	r2, #57	@ 0x39
 80043d4:	2102      	movs	r1, #2
 80043d6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	2277      	movs	r2, #119	@ 0x77
 80043e4:	4393      	bics	r3, r2
 80043e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	4a58      	ldr	r2, [pc, #352]	@ (800454c <HAL_TIM_ConfigClockSource+0x1a4>)
 80043ec:	4013      	ands	r3, r2
 80043ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2280      	movs	r2, #128	@ 0x80
 80043fe:	0192      	lsls	r2, r2, #6
 8004400:	4293      	cmp	r3, r2
 8004402:	d040      	beq.n	8004486 <HAL_TIM_ConfigClockSource+0xde>
 8004404:	2280      	movs	r2, #128	@ 0x80
 8004406:	0192      	lsls	r2, r2, #6
 8004408:	4293      	cmp	r3, r2
 800440a:	d900      	bls.n	800440e <HAL_TIM_ConfigClockSource+0x66>
 800440c:	e088      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x178>
 800440e:	2280      	movs	r2, #128	@ 0x80
 8004410:	0152      	lsls	r2, r2, #5
 8004412:	4293      	cmp	r3, r2
 8004414:	d100      	bne.n	8004418 <HAL_TIM_ConfigClockSource+0x70>
 8004416:	e088      	b.n	800452a <HAL_TIM_ConfigClockSource+0x182>
 8004418:	2280      	movs	r2, #128	@ 0x80
 800441a:	0152      	lsls	r2, r2, #5
 800441c:	4293      	cmp	r3, r2
 800441e:	d900      	bls.n	8004422 <HAL_TIM_ConfigClockSource+0x7a>
 8004420:	e07e      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x178>
 8004422:	2b70      	cmp	r3, #112	@ 0x70
 8004424:	d018      	beq.n	8004458 <HAL_TIM_ConfigClockSource+0xb0>
 8004426:	d900      	bls.n	800442a <HAL_TIM_ConfigClockSource+0x82>
 8004428:	e07a      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x178>
 800442a:	2b60      	cmp	r3, #96	@ 0x60
 800442c:	d04f      	beq.n	80044ce <HAL_TIM_ConfigClockSource+0x126>
 800442e:	d900      	bls.n	8004432 <HAL_TIM_ConfigClockSource+0x8a>
 8004430:	e076      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x178>
 8004432:	2b50      	cmp	r3, #80	@ 0x50
 8004434:	d03b      	beq.n	80044ae <HAL_TIM_ConfigClockSource+0x106>
 8004436:	d900      	bls.n	800443a <HAL_TIM_ConfigClockSource+0x92>
 8004438:	e072      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x178>
 800443a:	2b40      	cmp	r3, #64	@ 0x40
 800443c:	d057      	beq.n	80044ee <HAL_TIM_ConfigClockSource+0x146>
 800443e:	d900      	bls.n	8004442 <HAL_TIM_ConfigClockSource+0x9a>
 8004440:	e06e      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x178>
 8004442:	2b30      	cmp	r3, #48	@ 0x30
 8004444:	d063      	beq.n	800450e <HAL_TIM_ConfigClockSource+0x166>
 8004446:	d86b      	bhi.n	8004520 <HAL_TIM_ConfigClockSource+0x178>
 8004448:	2b20      	cmp	r3, #32
 800444a:	d060      	beq.n	800450e <HAL_TIM_ConfigClockSource+0x166>
 800444c:	d868      	bhi.n	8004520 <HAL_TIM_ConfigClockSource+0x178>
 800444e:	2b00      	cmp	r3, #0
 8004450:	d05d      	beq.n	800450e <HAL_TIM_ConfigClockSource+0x166>
 8004452:	2b10      	cmp	r3, #16
 8004454:	d05b      	beq.n	800450e <HAL_TIM_ConfigClockSource+0x166>
 8004456:	e063      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004468:	f000 fa3a 	bl	80048e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2277      	movs	r2, #119	@ 0x77
 8004478:	4313      	orrs	r3, r2
 800447a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	609a      	str	r2, [r3, #8]
      break;
 8004484:	e052      	b.n	800452c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004496:	f000 fa23 	bl	80048e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2180      	movs	r1, #128	@ 0x80
 80044a6:	01c9      	lsls	r1, r1, #7
 80044a8:	430a      	orrs	r2, r1
 80044aa:	609a      	str	r2, [r3, #8]
      break;
 80044ac:	e03e      	b.n	800452c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ba:	001a      	movs	r2, r3
 80044bc:	f000 f996 	bl	80047ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2150      	movs	r1, #80	@ 0x50
 80044c6:	0018      	movs	r0, r3
 80044c8:	f000 f9f0 	bl	80048ac <TIM_ITRx_SetConfig>
      break;
 80044cc:	e02e      	b.n	800452c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044da:	001a      	movs	r2, r3
 80044dc:	f000 f9b4 	bl	8004848 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2160      	movs	r1, #96	@ 0x60
 80044e6:	0018      	movs	r0, r3
 80044e8:	f000 f9e0 	bl	80048ac <TIM_ITRx_SetConfig>
      break;
 80044ec:	e01e      	b.n	800452c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044fa:	001a      	movs	r2, r3
 80044fc:	f000 f976 	bl	80047ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2140      	movs	r1, #64	@ 0x40
 8004506:	0018      	movs	r0, r3
 8004508:	f000 f9d0 	bl	80048ac <TIM_ITRx_SetConfig>
      break;
 800450c:	e00e      	b.n	800452c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	0019      	movs	r1, r3
 8004518:	0010      	movs	r0, r2
 800451a:	f000 f9c7 	bl	80048ac <TIM_ITRx_SetConfig>
      break;
 800451e:	e005      	b.n	800452c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004520:	230f      	movs	r3, #15
 8004522:	18fb      	adds	r3, r7, r3
 8004524:	2201      	movs	r2, #1
 8004526:	701a      	strb	r2, [r3, #0]
      break;
 8004528:	e000      	b.n	800452c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800452a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2239      	movs	r2, #57	@ 0x39
 8004530:	2101      	movs	r1, #1
 8004532:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2238      	movs	r2, #56	@ 0x38
 8004538:	2100      	movs	r1, #0
 800453a:	5499      	strb	r1, [r3, r2]

  return status;
 800453c:	230f      	movs	r3, #15
 800453e:	18fb      	adds	r3, r7, r3
 8004540:	781b      	ldrb	r3, [r3, #0]
}
 8004542:	0018      	movs	r0, r3
 8004544:	46bd      	mov	sp, r7
 8004546:	b004      	add	sp, #16
 8004548:	bd80      	pop	{r7, pc}
 800454a:	46c0      	nop			@ (mov r8, r8)
 800454c:	ffff00ff 	.word	0xffff00ff

08004550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	2380      	movs	r3, #128	@ 0x80
 8004564:	05db      	lsls	r3, r3, #23
 8004566:	429a      	cmp	r2, r3
 8004568:	d003      	beq.n	8004572 <TIM_Base_SetConfig+0x22>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a1b      	ldr	r2, [pc, #108]	@ (80045dc <TIM_Base_SetConfig+0x8c>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d108      	bne.n	8004584 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2270      	movs	r2, #112	@ 0x70
 8004576:	4393      	bics	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	4313      	orrs	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	2380      	movs	r3, #128	@ 0x80
 8004588:	05db      	lsls	r3, r3, #23
 800458a:	429a      	cmp	r2, r3
 800458c:	d003      	beq.n	8004596 <TIM_Base_SetConfig+0x46>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a12      	ldr	r2, [pc, #72]	@ (80045dc <TIM_Base_SetConfig+0x8c>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d108      	bne.n	80045a8 <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4a11      	ldr	r2, [pc, #68]	@ (80045e0 <TIM_Base_SetConfig+0x90>)
 800459a:	4013      	ands	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2280      	movs	r2, #128	@ 0x80
 80045ac:	4393      	bics	r3, r2
 80045ae:	001a      	movs	r2, r3
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	615a      	str	r2, [r3, #20]
}
 80045d4:	46c0      	nop			@ (mov r8, r8)
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b004      	add	sp, #16
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40010800 	.word	0x40010800
 80045e0:	fffffcff 	.word	0xfffffcff

080045e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	2201      	movs	r2, #1
 80045f4:	4393      	bics	r3, r2
 80045f6:	001a      	movs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2270      	movs	r2, #112	@ 0x70
 8004612:	4393      	bics	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2203      	movs	r2, #3
 800461a:	4393      	bics	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	4313      	orrs	r3, r2
 8004626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	2202      	movs	r2, #2
 800462c:	4393      	bics	r3, r2
 800462e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	4313      	orrs	r3, r2
 8004638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	621a      	str	r2, [r3, #32]
}
 8004654:	46c0      	nop			@ (mov r8, r8)
 8004656:	46bd      	mov	sp, r7
 8004658:	b006      	add	sp, #24
 800465a:	bd80      	pop	{r7, pc}

0800465c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	2210      	movs	r2, #16
 800466c:	4393      	bics	r3, r2
 800466e:	001a      	movs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4a13      	ldr	r2, [pc, #76]	@ (80046d8 <TIM_OC2_SetConfig+0x7c>)
 800468a:	4013      	ands	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	4a12      	ldr	r2, [pc, #72]	@ (80046dc <TIM_OC2_SetConfig+0x80>)
 8004692:	4013      	ands	r3, r2
 8004694:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	021b      	lsls	r3, r3, #8
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	4313      	orrs	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	2220      	movs	r2, #32
 80046a6:	4393      	bics	r3, r2
 80046a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	621a      	str	r2, [r3, #32]
}
 80046d0:	46c0      	nop			@ (mov r8, r8)
 80046d2:	46bd      	mov	sp, r7
 80046d4:	b006      	add	sp, #24
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	ffff8fff 	.word	0xffff8fff
 80046dc:	fffffcff 	.word	0xfffffcff

080046e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	4a1a      	ldr	r2, [pc, #104]	@ (8004758 <TIM_OC3_SetConfig+0x78>)
 80046f0:	401a      	ands	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2270      	movs	r2, #112	@ 0x70
 800470c:	4393      	bics	r3, r2
 800470e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2203      	movs	r2, #3
 8004714:	4393      	bics	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	4313      	orrs	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	4a0d      	ldr	r2, [pc, #52]	@ (800475c <TIM_OC3_SetConfig+0x7c>)
 8004726:	4013      	ands	r3, r2
 8004728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	021b      	lsls	r3, r3, #8
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	4313      	orrs	r3, r2
 8004734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	621a      	str	r2, [r3, #32]
}
 8004750:	46c0      	nop			@ (mov r8, r8)
 8004752:	46bd      	mov	sp, r7
 8004754:	b006      	add	sp, #24
 8004756:	bd80      	pop	{r7, pc}
 8004758:	fffffeff 	.word	0xfffffeff
 800475c:	fffffdff 	.word	0xfffffdff

08004760 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	4a1b      	ldr	r2, [pc, #108]	@ (80047dc <TIM_OC4_SetConfig+0x7c>)
 8004770:	401a      	ands	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4a15      	ldr	r2, [pc, #84]	@ (80047e0 <TIM_OC4_SetConfig+0x80>)
 800478c:	4013      	ands	r3, r2
 800478e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4a14      	ldr	r2, [pc, #80]	@ (80047e4 <TIM_OC4_SetConfig+0x84>)
 8004794:	4013      	ands	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	021b      	lsls	r3, r3, #8
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	4a10      	ldr	r2, [pc, #64]	@ (80047e8 <TIM_OC4_SetConfig+0x88>)
 80047a8:	4013      	ands	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	031b      	lsls	r3, r3, #12
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	621a      	str	r2, [r3, #32]
}
 80047d2:	46c0      	nop			@ (mov r8, r8)
 80047d4:	46bd      	mov	sp, r7
 80047d6:	b006      	add	sp, #24
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	46c0      	nop			@ (mov r8, r8)
 80047dc:	ffffefff 	.word	0xffffefff
 80047e0:	ffff8fff 	.word	0xffff8fff
 80047e4:	fffffcff 	.word	0xfffffcff
 80047e8:	ffffdfff 	.word	0xffffdfff

080047ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	2201      	movs	r2, #1
 8004804:	4393      	bics	r3, r2
 8004806:	001a      	movs	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	22f0      	movs	r2, #240	@ 0xf0
 8004816:	4393      	bics	r3, r2
 8004818:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	011b      	lsls	r3, r3, #4
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	4313      	orrs	r3, r2
 8004822:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	220a      	movs	r2, #10
 8004828:	4393      	bics	r3, r2
 800482a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	4313      	orrs	r3, r2
 8004832:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	621a      	str	r2, [r3, #32]
}
 8004840:	46c0      	nop			@ (mov r8, r8)
 8004842:	46bd      	mov	sp, r7
 8004844:	b006      	add	sp, #24
 8004846:	bd80      	pop	{r7, pc}

08004848 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	2210      	movs	r2, #16
 800485a:	4393      	bics	r3, r2
 800485c:	001a      	movs	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	4a0d      	ldr	r2, [pc, #52]	@ (80048a8 <TIM_TI2_ConfigInputStage+0x60>)
 8004872:	4013      	ands	r3, r2
 8004874:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	031b      	lsls	r3, r3, #12
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	4313      	orrs	r3, r2
 800487e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	22a0      	movs	r2, #160	@ 0xa0
 8004884:	4393      	bics	r3, r2
 8004886:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	011b      	lsls	r3, r3, #4
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	4313      	orrs	r3, r2
 8004890:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	621a      	str	r2, [r3, #32]
}
 800489e:	46c0      	nop			@ (mov r8, r8)
 80048a0:	46bd      	mov	sp, r7
 80048a2:	b006      	add	sp, #24
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	46c0      	nop			@ (mov r8, r8)
 80048a8:	ffff0fff 	.word	0xffff0fff

080048ac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2270      	movs	r2, #112	@ 0x70
 80048c0:	4393      	bics	r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	2207      	movs	r2, #7
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	609a      	str	r2, [r3, #8]
}
 80048d6:	46c0      	nop			@ (mov r8, r8)
 80048d8:	46bd      	mov	sp, r7
 80048da:	b004      	add	sp, #16
 80048dc:	bd80      	pop	{r7, pc}
	...

080048e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	4a09      	ldr	r2, [pc, #36]	@ (800491c <TIM_ETR_SetConfig+0x3c>)
 80048f8:	4013      	ands	r3, r2
 80048fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	021a      	lsls	r2, r3, #8
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	431a      	orrs	r2, r3
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	4313      	orrs	r3, r2
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	4313      	orrs	r3, r2
 800490c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	609a      	str	r2, [r3, #8]
}
 8004914:	46c0      	nop			@ (mov r8, r8)
 8004916:	46bd      	mov	sp, r7
 8004918:	b006      	add	sp, #24
 800491a:	bd80      	pop	{r7, pc}
 800491c:	ffff00ff 	.word	0xffff00ff

08004920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2238      	movs	r2, #56	@ 0x38
 800492e:	5c9b      	ldrb	r3, [r3, r2]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004934:	2302      	movs	r3, #2
 8004936:	e03d      	b.n	80049b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2238      	movs	r2, #56	@ 0x38
 800493c:	2101      	movs	r1, #1
 800493e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2239      	movs	r2, #57	@ 0x39
 8004944:	2102      	movs	r1, #2
 8004946:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2270      	movs	r2, #112	@ 0x70
 800495c:	4393      	bics	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	4313      	orrs	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	2380      	movs	r3, #128	@ 0x80
 8004978:	05db      	lsls	r3, r3, #23
 800497a:	429a      	cmp	r2, r3
 800497c:	d004      	beq.n	8004988 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a0e      	ldr	r2, [pc, #56]	@ (80049bc <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d10c      	bne.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2280      	movs	r2, #128	@ 0x80
 800498c:	4393      	bics	r3, r2
 800498e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	4313      	orrs	r3, r2
 8004998:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2239      	movs	r2, #57	@ 0x39
 80049a6:	2101      	movs	r1, #1
 80049a8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2238      	movs	r2, #56	@ 0x38
 80049ae:	2100      	movs	r1, #0
 80049b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	0018      	movs	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	b004      	add	sp, #16
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40010800 	.word	0x40010800

080049c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e044      	b.n	8004a5c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d107      	bne.n	80049ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2278      	movs	r2, #120	@ 0x78
 80049de:	2100      	movs	r1, #0
 80049e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	0018      	movs	r0, r3
 80049e6:	f7fc fbe9 	bl	80011bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2224      	movs	r2, #36	@ 0x24
 80049ee:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2101      	movs	r1, #1
 80049fc:	438a      	bics	r2, r1
 80049fe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	0018      	movs	r0, r3
 8004a04:	f000 f952 	bl	8004cac <UART_SetConfig>
 8004a08:	0003      	movs	r3, r0
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d101      	bne.n	8004a12 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e024      	b.n	8004a5c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	f000 fb8f 	bl	8005140 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	490d      	ldr	r1, [pc, #52]	@ (8004a64 <HAL_UART_Init+0xa4>)
 8004a2e:	400a      	ands	r2, r1
 8004a30:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	212a      	movs	r1, #42	@ 0x2a
 8004a3e:	438a      	bics	r2, r1
 8004a40:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	0018      	movs	r0, r3
 8004a56:	f000 fc27 	bl	80052a8 <UART_CheckIdleState>
 8004a5a:	0003      	movs	r3, r0
}
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	b002      	add	sp, #8
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	ffffb7ff 	.word	0xffffb7ff

08004a68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b08a      	sub	sp, #40	@ 0x28
 8004a6c:	af02      	add	r7, sp, #8
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	603b      	str	r3, [r7, #0]
 8004a74:	1dbb      	adds	r3, r7, #6
 8004a76:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a7c:	2b20      	cmp	r3, #32
 8004a7e:	d000      	beq.n	8004a82 <HAL_UART_Transmit+0x1a>
 8004a80:	e08c      	b.n	8004b9c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d003      	beq.n	8004a90 <HAL_UART_Transmit+0x28>
 8004a88:	1dbb      	adds	r3, r7, #6
 8004a8a:	881b      	ldrh	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e084      	b.n	8004b9e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	2380      	movs	r3, #128	@ 0x80
 8004a9a:	015b      	lsls	r3, r3, #5
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d109      	bne.n	8004ab4 <HAL_UART_Transmit+0x4c>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d105      	bne.n	8004ab4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	4013      	ands	r3, r2
 8004aae:	d001      	beq.n	8004ab4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e074      	b.n	8004b9e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2284      	movs	r2, #132	@ 0x84
 8004ab8:	2100      	movs	r1, #0
 8004aba:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2221      	movs	r2, #33	@ 0x21
 8004ac0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ac2:	f7fc fcbd 	bl	8001440 <HAL_GetTick>
 8004ac6:	0003      	movs	r3, r0
 8004ac8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	1dba      	adds	r2, r7, #6
 8004ace:	2150      	movs	r1, #80	@ 0x50
 8004ad0:	8812      	ldrh	r2, [r2, #0]
 8004ad2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	1dba      	adds	r2, r7, #6
 8004ad8:	2152      	movs	r1, #82	@ 0x52
 8004ada:	8812      	ldrh	r2, [r2, #0]
 8004adc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	2380      	movs	r3, #128	@ 0x80
 8004ae4:	015b      	lsls	r3, r3, #5
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d108      	bne.n	8004afc <HAL_UART_Transmit+0x94>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d104      	bne.n	8004afc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004af2:	2300      	movs	r3, #0
 8004af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	61bb      	str	r3, [r7, #24]
 8004afa:	e003      	b.n	8004b04 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b00:	2300      	movs	r3, #0
 8004b02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b04:	e02f      	b.n	8004b66 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	0013      	movs	r3, r2
 8004b10:	2200      	movs	r2, #0
 8004b12:	2180      	movs	r1, #128	@ 0x80
 8004b14:	f000 fc70 	bl	80053f8 <UART_WaitOnFlagUntilTimeout>
 8004b18:	1e03      	subs	r3, r0, #0
 8004b1a:	d004      	beq.n	8004b26 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e03b      	b.n	8004b9e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10b      	bne.n	8004b44 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	001a      	movs	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	05d2      	lsls	r2, r2, #23
 8004b38:	0dd2      	lsrs	r2, r2, #23
 8004b3a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	3302      	adds	r3, #2
 8004b40:	61bb      	str	r3, [r7, #24]
 8004b42:	e007      	b.n	8004b54 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	781a      	ldrb	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	3301      	adds	r3, #1
 8004b52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2252      	movs	r2, #82	@ 0x52
 8004b58:	5a9b      	ldrh	r3, [r3, r2]
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b299      	uxth	r1, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2252      	movs	r2, #82	@ 0x52
 8004b64:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2252      	movs	r2, #82	@ 0x52
 8004b6a:	5a9b      	ldrh	r3, [r3, r2]
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1c9      	bne.n	8004b06 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	0013      	movs	r3, r2
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	2140      	movs	r1, #64	@ 0x40
 8004b80:	f000 fc3a 	bl	80053f8 <UART_WaitOnFlagUntilTimeout>
 8004b84:	1e03      	subs	r3, r0, #0
 8004b86:	d004      	beq.n	8004b92 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e005      	b.n	8004b9e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2220      	movs	r2, #32
 8004b96:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	e000      	b.n	8004b9e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004b9c:	2302      	movs	r3, #2
  }
}
 8004b9e:	0018      	movs	r0, r3
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	b008      	add	sp, #32
 8004ba4:	bd80      	pop	{r7, pc}
	...

08004ba8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b088      	sub	sp, #32
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	1dbb      	adds	r3, r7, #6
 8004bb4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2280      	movs	r2, #128	@ 0x80
 8004bba:	589b      	ldr	r3, [r3, r2]
 8004bbc:	2b20      	cmp	r3, #32
 8004bbe:	d14a      	bne.n	8004c56 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_UART_Receive_DMA+0x26>
 8004bc6:	1dbb      	adds	r3, r7, #6
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e042      	b.n	8004c58 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	2380      	movs	r3, #128	@ 0x80
 8004bd8:	015b      	lsls	r3, r3, #5
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d109      	bne.n	8004bf2 <HAL_UART_Receive_DMA+0x4a>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d105      	bne.n	8004bf2 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	2201      	movs	r2, #1
 8004bea:	4013      	ands	r3, r2
 8004bec:	d001      	beq.n	8004bf2 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e032      	b.n	8004c58 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a18      	ldr	r2, [pc, #96]	@ (8004c60 <HAL_UART_Receive_DMA+0xb8>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d020      	beq.n	8004c44 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	2380      	movs	r3, #128	@ 0x80
 8004c0a:	041b      	lsls	r3, r3, #16
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	d019      	beq.n	8004c44 <HAL_UART_Receive_DMA+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c10:	f3ef 8310 	mrs	r3, PRIMASK
 8004c14:	613b      	str	r3, [r7, #16]
  return(result);
 8004c16:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c18:	61fb      	str	r3, [r7, #28]
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f383 8810 	msr	PRIMASK, r3
}
 8004c24:	46c0      	nop			@ (mov r8, r8)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2180      	movs	r1, #128	@ 0x80
 8004c32:	04c9      	lsls	r1, r1, #19
 8004c34:	430a      	orrs	r2, r1
 8004c36:	601a      	str	r2, [r3, #0]
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	f383 8810 	msr	PRIMASK, r3
}
 8004c42:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004c44:	1dbb      	adds	r3, r7, #6
 8004c46:	881a      	ldrh	r2, [r3, #0]
 8004c48:	68b9      	ldr	r1, [r7, #8]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f000 fc3d 	bl	80054cc <UART_Start_Receive_DMA>
 8004c52:	0003      	movs	r3, r0
 8004c54:	e000      	b.n	8004c58 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8004c56:	2302      	movs	r3, #2
  }
}
 8004c58:	0018      	movs	r0, r3
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	b008      	add	sp, #32
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	40004800 	.word	0x40004800

08004c64 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004c6c:	46c0      	nop			@ (mov r8, r8)
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	b002      	add	sp, #8
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004c7c:	46c0      	nop			@ (mov r8, r8)
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	b002      	add	sp, #8
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c8c:	46c0      	nop			@ (mov r8, r8)
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	b002      	add	sp, #8
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	000a      	movs	r2, r1
 8004c9e:	1cbb      	adds	r3, r7, #2
 8004ca0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ca2:	46c0      	nop			@ (mov r8, r8)
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	b002      	add	sp, #8
 8004ca8:	bd80      	pop	{r7, pc}
	...

08004cac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cac:	b5b0      	push	{r4, r5, r7, lr}
 8004cae:	b08e      	sub	sp, #56	@ 0x38
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cb4:	231a      	movs	r3, #26
 8004cb6:	2218      	movs	r2, #24
 8004cb8:	189b      	adds	r3, r3, r2
 8004cba:	19db      	adds	r3, r3, r7
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	69db      	ldr	r3, [r3, #28]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4ab4      	ldr	r2, [pc, #720]	@ (8004fb0 <UART_SetConfig+0x304>)
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	0019      	movs	r1, r3
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004cea:	430a      	orrs	r2, r1
 8004cec:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	4aaf      	ldr	r2, [pc, #700]	@ (8004fb4 <UART_SetConfig+0x308>)
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	0019      	movs	r1, r3
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	68da      	ldr	r2, [r3, #12]
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4aa9      	ldr	r2, [pc, #676]	@ (8004fb8 <UART_SetConfig+0x30c>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d004      	beq.n	8004d20 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	4aa5      	ldr	r2, [pc, #660]	@ (8004fbc <UART_SetConfig+0x310>)
 8004d28:	4013      	ands	r3, r2
 8004d2a:	0019      	movs	r1, r3
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d32:	430a      	orrs	r2, r1
 8004d34:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4aa1      	ldr	r2, [pc, #644]	@ (8004fc0 <UART_SetConfig+0x314>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d131      	bne.n	8004da4 <UART_SetConfig+0xf8>
 8004d40:	4ba0      	ldr	r3, [pc, #640]	@ (8004fc4 <UART_SetConfig+0x318>)
 8004d42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d44:	220c      	movs	r2, #12
 8004d46:	4013      	ands	r3, r2
 8004d48:	2b0c      	cmp	r3, #12
 8004d4a:	d01d      	beq.n	8004d88 <UART_SetConfig+0xdc>
 8004d4c:	d823      	bhi.n	8004d96 <UART_SetConfig+0xea>
 8004d4e:	2b08      	cmp	r3, #8
 8004d50:	d00c      	beq.n	8004d6c <UART_SetConfig+0xc0>
 8004d52:	d820      	bhi.n	8004d96 <UART_SetConfig+0xea>
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <UART_SetConfig+0xb2>
 8004d58:	2b04      	cmp	r3, #4
 8004d5a:	d00e      	beq.n	8004d7a <UART_SetConfig+0xce>
 8004d5c:	e01b      	b.n	8004d96 <UART_SetConfig+0xea>
 8004d5e:	231b      	movs	r3, #27
 8004d60:	2218      	movs	r2, #24
 8004d62:	189b      	adds	r3, r3, r2
 8004d64:	19db      	adds	r3, r3, r7
 8004d66:	2200      	movs	r2, #0
 8004d68:	701a      	strb	r2, [r3, #0]
 8004d6a:	e065      	b.n	8004e38 <UART_SetConfig+0x18c>
 8004d6c:	231b      	movs	r3, #27
 8004d6e:	2218      	movs	r2, #24
 8004d70:	189b      	adds	r3, r3, r2
 8004d72:	19db      	adds	r3, r3, r7
 8004d74:	2202      	movs	r2, #2
 8004d76:	701a      	strb	r2, [r3, #0]
 8004d78:	e05e      	b.n	8004e38 <UART_SetConfig+0x18c>
 8004d7a:	231b      	movs	r3, #27
 8004d7c:	2218      	movs	r2, #24
 8004d7e:	189b      	adds	r3, r3, r2
 8004d80:	19db      	adds	r3, r3, r7
 8004d82:	2204      	movs	r2, #4
 8004d84:	701a      	strb	r2, [r3, #0]
 8004d86:	e057      	b.n	8004e38 <UART_SetConfig+0x18c>
 8004d88:	231b      	movs	r3, #27
 8004d8a:	2218      	movs	r2, #24
 8004d8c:	189b      	adds	r3, r3, r2
 8004d8e:	19db      	adds	r3, r3, r7
 8004d90:	2208      	movs	r2, #8
 8004d92:	701a      	strb	r2, [r3, #0]
 8004d94:	e050      	b.n	8004e38 <UART_SetConfig+0x18c>
 8004d96:	231b      	movs	r3, #27
 8004d98:	2218      	movs	r2, #24
 8004d9a:	189b      	adds	r3, r3, r2
 8004d9c:	19db      	adds	r3, r3, r7
 8004d9e:	2210      	movs	r2, #16
 8004da0:	701a      	strb	r2, [r3, #0]
 8004da2:	e049      	b.n	8004e38 <UART_SetConfig+0x18c>
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a83      	ldr	r2, [pc, #524]	@ (8004fb8 <UART_SetConfig+0x30c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d13e      	bne.n	8004e2c <UART_SetConfig+0x180>
 8004dae:	4b85      	ldr	r3, [pc, #532]	@ (8004fc4 <UART_SetConfig+0x318>)
 8004db0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004db2:	23c0      	movs	r3, #192	@ 0xc0
 8004db4:	011b      	lsls	r3, r3, #4
 8004db6:	4013      	ands	r3, r2
 8004db8:	22c0      	movs	r2, #192	@ 0xc0
 8004dba:	0112      	lsls	r2, r2, #4
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d027      	beq.n	8004e10 <UART_SetConfig+0x164>
 8004dc0:	22c0      	movs	r2, #192	@ 0xc0
 8004dc2:	0112      	lsls	r2, r2, #4
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d82a      	bhi.n	8004e1e <UART_SetConfig+0x172>
 8004dc8:	2280      	movs	r2, #128	@ 0x80
 8004dca:	0112      	lsls	r2, r2, #4
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d011      	beq.n	8004df4 <UART_SetConfig+0x148>
 8004dd0:	2280      	movs	r2, #128	@ 0x80
 8004dd2:	0112      	lsls	r2, r2, #4
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d822      	bhi.n	8004e1e <UART_SetConfig+0x172>
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d004      	beq.n	8004de6 <UART_SetConfig+0x13a>
 8004ddc:	2280      	movs	r2, #128	@ 0x80
 8004dde:	00d2      	lsls	r2, r2, #3
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00e      	beq.n	8004e02 <UART_SetConfig+0x156>
 8004de4:	e01b      	b.n	8004e1e <UART_SetConfig+0x172>
 8004de6:	231b      	movs	r3, #27
 8004de8:	2218      	movs	r2, #24
 8004dea:	189b      	adds	r3, r3, r2
 8004dec:	19db      	adds	r3, r3, r7
 8004dee:	2200      	movs	r2, #0
 8004df0:	701a      	strb	r2, [r3, #0]
 8004df2:	e021      	b.n	8004e38 <UART_SetConfig+0x18c>
 8004df4:	231b      	movs	r3, #27
 8004df6:	2218      	movs	r2, #24
 8004df8:	189b      	adds	r3, r3, r2
 8004dfa:	19db      	adds	r3, r3, r7
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	701a      	strb	r2, [r3, #0]
 8004e00:	e01a      	b.n	8004e38 <UART_SetConfig+0x18c>
 8004e02:	231b      	movs	r3, #27
 8004e04:	2218      	movs	r2, #24
 8004e06:	189b      	adds	r3, r3, r2
 8004e08:	19db      	adds	r3, r3, r7
 8004e0a:	2204      	movs	r2, #4
 8004e0c:	701a      	strb	r2, [r3, #0]
 8004e0e:	e013      	b.n	8004e38 <UART_SetConfig+0x18c>
 8004e10:	231b      	movs	r3, #27
 8004e12:	2218      	movs	r2, #24
 8004e14:	189b      	adds	r3, r3, r2
 8004e16:	19db      	adds	r3, r3, r7
 8004e18:	2208      	movs	r2, #8
 8004e1a:	701a      	strb	r2, [r3, #0]
 8004e1c:	e00c      	b.n	8004e38 <UART_SetConfig+0x18c>
 8004e1e:	231b      	movs	r3, #27
 8004e20:	2218      	movs	r2, #24
 8004e22:	189b      	adds	r3, r3, r2
 8004e24:	19db      	adds	r3, r3, r7
 8004e26:	2210      	movs	r2, #16
 8004e28:	701a      	strb	r2, [r3, #0]
 8004e2a:	e005      	b.n	8004e38 <UART_SetConfig+0x18c>
 8004e2c:	231b      	movs	r3, #27
 8004e2e:	2218      	movs	r2, #24
 8004e30:	189b      	adds	r3, r3, r2
 8004e32:	19db      	adds	r3, r3, r7
 8004e34:	2210      	movs	r2, #16
 8004e36:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a5e      	ldr	r2, [pc, #376]	@ (8004fb8 <UART_SetConfig+0x30c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d000      	beq.n	8004e44 <UART_SetConfig+0x198>
 8004e42:	e084      	b.n	8004f4e <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e44:	231b      	movs	r3, #27
 8004e46:	2218      	movs	r2, #24
 8004e48:	189b      	adds	r3, r3, r2
 8004e4a:	19db      	adds	r3, r3, r7
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	2b08      	cmp	r3, #8
 8004e50:	d01d      	beq.n	8004e8e <UART_SetConfig+0x1e2>
 8004e52:	dc20      	bgt.n	8004e96 <UART_SetConfig+0x1ea>
 8004e54:	2b04      	cmp	r3, #4
 8004e56:	d015      	beq.n	8004e84 <UART_SetConfig+0x1d8>
 8004e58:	dc1d      	bgt.n	8004e96 <UART_SetConfig+0x1ea>
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d002      	beq.n	8004e64 <UART_SetConfig+0x1b8>
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d005      	beq.n	8004e6e <UART_SetConfig+0x1c2>
 8004e62:	e018      	b.n	8004e96 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e64:	f7fd fe6c 	bl	8002b40 <HAL_RCC_GetPCLK1Freq>
 8004e68:	0003      	movs	r3, r0
 8004e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004e6c:	e01c      	b.n	8004ea8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e6e:	4b55      	ldr	r3, [pc, #340]	@ (8004fc4 <UART_SetConfig+0x318>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2210      	movs	r2, #16
 8004e74:	4013      	ands	r3, r2
 8004e76:	d002      	beq.n	8004e7e <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004e78:	4b53      	ldr	r3, [pc, #332]	@ (8004fc8 <UART_SetConfig+0x31c>)
 8004e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e7c:	e014      	b.n	8004ea8 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8004e7e:	4b53      	ldr	r3, [pc, #332]	@ (8004fcc <UART_SetConfig+0x320>)
 8004e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004e82:	e011      	b.n	8004ea8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e84:	f7fd fdac 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 8004e88:	0003      	movs	r3, r0
 8004e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004e8c:	e00c      	b.n	8004ea8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e8e:	2380      	movs	r3, #128	@ 0x80
 8004e90:	021b      	lsls	r3, r3, #8
 8004e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004e94:	e008      	b.n	8004ea8 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004e9a:	231a      	movs	r3, #26
 8004e9c:	2218      	movs	r2, #24
 8004e9e:	189b      	adds	r3, r3, r2
 8004ea0:	19db      	adds	r3, r3, r7
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	701a      	strb	r2, [r3, #0]
        break;
 8004ea6:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d100      	bne.n	8004eb0 <UART_SetConfig+0x204>
 8004eae:	e12f      	b.n	8005110 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	0013      	movs	r3, r2
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	189b      	adds	r3, r3, r2
 8004eba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d305      	bcc.n	8004ecc <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ec6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d906      	bls.n	8004eda <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8004ecc:	231a      	movs	r3, #26
 8004ece:	2218      	movs	r2, #24
 8004ed0:	189b      	adds	r3, r3, r2
 8004ed2:	19db      	adds	r3, r3, r7
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	701a      	strb	r2, [r3, #0]
 8004ed8:	e11a      	b.n	8005110 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004edc:	613b      	str	r3, [r7, #16]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	617b      	str	r3, [r7, #20]
 8004ee2:	6939      	ldr	r1, [r7, #16]
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	000b      	movs	r3, r1
 8004ee8:	0e1b      	lsrs	r3, r3, #24
 8004eea:	0010      	movs	r0, r2
 8004eec:	0205      	lsls	r5, r0, #8
 8004eee:	431d      	orrs	r5, r3
 8004ef0:	000b      	movs	r3, r1
 8004ef2:	021c      	lsls	r4, r3, #8
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	085b      	lsrs	r3, r3, #1
 8004efa:	60bb      	str	r3, [r7, #8]
 8004efc:	2300      	movs	r3, #0
 8004efe:	60fb      	str	r3, [r7, #12]
 8004f00:	68b8      	ldr	r0, [r7, #8]
 8004f02:	68f9      	ldr	r1, [r7, #12]
 8004f04:	1900      	adds	r0, r0, r4
 8004f06:	4169      	adcs	r1, r5
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	603b      	str	r3, [r7, #0]
 8004f0e:	2300      	movs	r3, #0
 8004f10:	607b      	str	r3, [r7, #4]
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f7fb f995 	bl	8000244 <__aeabi_uldivmod>
 8004f1a:	0002      	movs	r2, r0
 8004f1c:	000b      	movs	r3, r1
 8004f1e:	0013      	movs	r3, r2
 8004f20:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f24:	23c0      	movs	r3, #192	@ 0xc0
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d309      	bcc.n	8004f40 <UART_SetConfig+0x294>
 8004f2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f2e:	2380      	movs	r3, #128	@ 0x80
 8004f30:	035b      	lsls	r3, r3, #13
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d204      	bcs.n	8004f40 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f3c:	60da      	str	r2, [r3, #12]
 8004f3e:	e0e7      	b.n	8005110 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8004f40:	231a      	movs	r3, #26
 8004f42:	2218      	movs	r2, #24
 8004f44:	189b      	adds	r3, r3, r2
 8004f46:	19db      	adds	r3, r3, r7
 8004f48:	2201      	movs	r2, #1
 8004f4a:	701a      	strb	r2, [r3, #0]
 8004f4c:	e0e0      	b.n	8005110 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	69da      	ldr	r2, [r3, #28]
 8004f52:	2380      	movs	r3, #128	@ 0x80
 8004f54:	021b      	lsls	r3, r3, #8
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d000      	beq.n	8004f5c <UART_SetConfig+0x2b0>
 8004f5a:	e082      	b.n	8005062 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8004f5c:	231b      	movs	r3, #27
 8004f5e:	2218      	movs	r2, #24
 8004f60:	189b      	adds	r3, r3, r2
 8004f62:	19db      	adds	r3, r3, r7
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d834      	bhi.n	8004fd4 <UART_SetConfig+0x328>
 8004f6a:	009a      	lsls	r2, r3, #2
 8004f6c:	4b18      	ldr	r3, [pc, #96]	@ (8004fd0 <UART_SetConfig+0x324>)
 8004f6e:	18d3      	adds	r3, r2, r3
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f74:	f7fd fde4 	bl	8002b40 <HAL_RCC_GetPCLK1Freq>
 8004f78:	0003      	movs	r3, r0
 8004f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004f7c:	e033      	b.n	8004fe6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f7e:	f7fd fdf5 	bl	8002b6c <HAL_RCC_GetPCLK2Freq>
 8004f82:	0003      	movs	r3, r0
 8004f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004f86:	e02e      	b.n	8004fe6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f88:	4b0e      	ldr	r3, [pc, #56]	@ (8004fc4 <UART_SetConfig+0x318>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2210      	movs	r2, #16
 8004f8e:	4013      	ands	r3, r2
 8004f90:	d002      	beq.n	8004f98 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004f92:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc8 <UART_SetConfig+0x31c>)
 8004f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f96:	e026      	b.n	8004fe6 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8004f98:	4b0c      	ldr	r3, [pc, #48]	@ (8004fcc <UART_SetConfig+0x320>)
 8004f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004f9c:	e023      	b.n	8004fe6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f9e:	f7fd fd1f 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 8004fa2:	0003      	movs	r3, r0
 8004fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004fa6:	e01e      	b.n	8004fe6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fa8:	2380      	movs	r3, #128	@ 0x80
 8004faa:	021b      	lsls	r3, r3, #8
 8004fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004fae:	e01a      	b.n	8004fe6 <UART_SetConfig+0x33a>
 8004fb0:	efff69f3 	.word	0xefff69f3
 8004fb4:	ffffcfff 	.word	0xffffcfff
 8004fb8:	40004800 	.word	0x40004800
 8004fbc:	fffff4ff 	.word	0xfffff4ff
 8004fc0:	40004400 	.word	0x40004400
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	003d0900 	.word	0x003d0900
 8004fcc:	00f42400 	.word	0x00f42400
 8004fd0:	08007b54 	.word	0x08007b54
      default:
        pclk = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004fd8:	231a      	movs	r3, #26
 8004fda:	2218      	movs	r2, #24
 8004fdc:	189b      	adds	r3, r3, r2
 8004fde:	19db      	adds	r3, r3, r7
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	701a      	strb	r2, [r3, #0]
        break;
 8004fe4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d100      	bne.n	8004fee <UART_SetConfig+0x342>
 8004fec:	e090      	b.n	8005110 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ff0:	005a      	lsls	r2, r3, #1
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	085b      	lsrs	r3, r3, #1
 8004ff8:	18d2      	adds	r2, r2, r3
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	0019      	movs	r1, r3
 8005000:	0010      	movs	r0, r2
 8005002:	f7fb f893 	bl	800012c <__udivsi3>
 8005006:	0003      	movs	r3, r0
 8005008:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800500a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800500c:	2b0f      	cmp	r3, #15
 800500e:	d921      	bls.n	8005054 <UART_SetConfig+0x3a8>
 8005010:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005012:	2380      	movs	r3, #128	@ 0x80
 8005014:	025b      	lsls	r3, r3, #9
 8005016:	429a      	cmp	r2, r3
 8005018:	d21c      	bcs.n	8005054 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800501a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501c:	b29a      	uxth	r2, r3
 800501e:	200e      	movs	r0, #14
 8005020:	2418      	movs	r4, #24
 8005022:	1903      	adds	r3, r0, r4
 8005024:	19db      	adds	r3, r3, r7
 8005026:	210f      	movs	r1, #15
 8005028:	438a      	bics	r2, r1
 800502a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800502c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800502e:	085b      	lsrs	r3, r3, #1
 8005030:	b29b      	uxth	r3, r3
 8005032:	2207      	movs	r2, #7
 8005034:	4013      	ands	r3, r2
 8005036:	b299      	uxth	r1, r3
 8005038:	1903      	adds	r3, r0, r4
 800503a:	19db      	adds	r3, r3, r7
 800503c:	1902      	adds	r2, r0, r4
 800503e:	19d2      	adds	r2, r2, r7
 8005040:	8812      	ldrh	r2, [r2, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	1902      	adds	r2, r0, r4
 800504c:	19d2      	adds	r2, r2, r7
 800504e:	8812      	ldrh	r2, [r2, #0]
 8005050:	60da      	str	r2, [r3, #12]
 8005052:	e05d      	b.n	8005110 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8005054:	231a      	movs	r3, #26
 8005056:	2218      	movs	r2, #24
 8005058:	189b      	adds	r3, r3, r2
 800505a:	19db      	adds	r3, r3, r7
 800505c:	2201      	movs	r2, #1
 800505e:	701a      	strb	r2, [r3, #0]
 8005060:	e056      	b.n	8005110 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005062:	231b      	movs	r3, #27
 8005064:	2218      	movs	r2, #24
 8005066:	189b      	adds	r3, r3, r2
 8005068:	19db      	adds	r3, r3, r7
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	2b08      	cmp	r3, #8
 800506e:	d822      	bhi.n	80050b6 <UART_SetConfig+0x40a>
 8005070:	009a      	lsls	r2, r3, #2
 8005072:	4b2f      	ldr	r3, [pc, #188]	@ (8005130 <UART_SetConfig+0x484>)
 8005074:	18d3      	adds	r3, r2, r3
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800507a:	f7fd fd61 	bl	8002b40 <HAL_RCC_GetPCLK1Freq>
 800507e:	0003      	movs	r3, r0
 8005080:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005082:	e021      	b.n	80050c8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005084:	f7fd fd72 	bl	8002b6c <HAL_RCC_GetPCLK2Freq>
 8005088:	0003      	movs	r3, r0
 800508a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800508c:	e01c      	b.n	80050c8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800508e:	4b29      	ldr	r3, [pc, #164]	@ (8005134 <UART_SetConfig+0x488>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2210      	movs	r2, #16
 8005094:	4013      	ands	r3, r2
 8005096:	d002      	beq.n	800509e <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005098:	4b27      	ldr	r3, [pc, #156]	@ (8005138 <UART_SetConfig+0x48c>)
 800509a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800509c:	e014      	b.n	80050c8 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 800509e:	4b27      	ldr	r3, [pc, #156]	@ (800513c <UART_SetConfig+0x490>)
 80050a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80050a2:	e011      	b.n	80050c8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050a4:	f7fd fc9c 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 80050a8:	0003      	movs	r3, r0
 80050aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80050ac:	e00c      	b.n	80050c8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ae:	2380      	movs	r3, #128	@ 0x80
 80050b0:	021b      	lsls	r3, r3, #8
 80050b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80050b4:	e008      	b.n	80050c8 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80050ba:	231a      	movs	r3, #26
 80050bc:	2218      	movs	r2, #24
 80050be:	189b      	adds	r3, r3, r2
 80050c0:	19db      	adds	r3, r3, r7
 80050c2:	2201      	movs	r2, #1
 80050c4:	701a      	strb	r2, [r3, #0]
        break;
 80050c6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80050c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d020      	beq.n	8005110 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	085a      	lsrs	r2, r3, #1
 80050d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050d6:	18d2      	adds	r2, r2, r3
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	0019      	movs	r1, r3
 80050de:	0010      	movs	r0, r2
 80050e0:	f7fb f824 	bl	800012c <__udivsi3>
 80050e4:	0003      	movs	r3, r0
 80050e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ea:	2b0f      	cmp	r3, #15
 80050ec:	d90a      	bls.n	8005104 <UART_SetConfig+0x458>
 80050ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050f0:	2380      	movs	r3, #128	@ 0x80
 80050f2:	025b      	lsls	r3, r3, #9
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d205      	bcs.n	8005104 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	60da      	str	r2, [r3, #12]
 8005102:	e005      	b.n	8005110 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8005104:	231a      	movs	r3, #26
 8005106:	2218      	movs	r2, #24
 8005108:	189b      	adds	r3, r3, r2
 800510a:	19db      	adds	r3, r3, r7
 800510c:	2201      	movs	r2, #1
 800510e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	2200      	movs	r2, #0
 8005114:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	2200      	movs	r2, #0
 800511a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800511c:	231a      	movs	r3, #26
 800511e:	2218      	movs	r2, #24
 8005120:	189b      	adds	r3, r3, r2
 8005122:	19db      	adds	r3, r3, r7
 8005124:	781b      	ldrb	r3, [r3, #0]
}
 8005126:	0018      	movs	r0, r3
 8005128:	46bd      	mov	sp, r7
 800512a:	b00e      	add	sp, #56	@ 0x38
 800512c:	bdb0      	pop	{r4, r5, r7, pc}
 800512e:	46c0      	nop			@ (mov r8, r8)
 8005130:	08007b78 	.word	0x08007b78
 8005134:	40021000 	.word	0x40021000
 8005138:	003d0900 	.word	0x003d0900
 800513c:	00f42400 	.word	0x00f42400

08005140 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514c:	2201      	movs	r2, #1
 800514e:	4013      	ands	r3, r2
 8005150:	d00b      	beq.n	800516a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	4a4a      	ldr	r2, [pc, #296]	@ (8005284 <UART_AdvFeatureConfig+0x144>)
 800515a:	4013      	ands	r3, r2
 800515c:	0019      	movs	r1, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516e:	2202      	movs	r2, #2
 8005170:	4013      	ands	r3, r2
 8005172:	d00b      	beq.n	800518c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	4a43      	ldr	r2, [pc, #268]	@ (8005288 <UART_AdvFeatureConfig+0x148>)
 800517c:	4013      	ands	r3, r2
 800517e:	0019      	movs	r1, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005190:	2204      	movs	r2, #4
 8005192:	4013      	ands	r3, r2
 8005194:	d00b      	beq.n	80051ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	4a3b      	ldr	r2, [pc, #236]	@ (800528c <UART_AdvFeatureConfig+0x14c>)
 800519e:	4013      	ands	r3, r2
 80051a0:	0019      	movs	r1, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b2:	2208      	movs	r2, #8
 80051b4:	4013      	ands	r3, r2
 80051b6:	d00b      	beq.n	80051d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	4a34      	ldr	r2, [pc, #208]	@ (8005290 <UART_AdvFeatureConfig+0x150>)
 80051c0:	4013      	ands	r3, r2
 80051c2:	0019      	movs	r1, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d4:	2210      	movs	r2, #16
 80051d6:	4013      	ands	r3, r2
 80051d8:	d00b      	beq.n	80051f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	4a2c      	ldr	r2, [pc, #176]	@ (8005294 <UART_AdvFeatureConfig+0x154>)
 80051e2:	4013      	ands	r3, r2
 80051e4:	0019      	movs	r1, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f6:	2220      	movs	r2, #32
 80051f8:	4013      	ands	r3, r2
 80051fa:	d00b      	beq.n	8005214 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	4a25      	ldr	r2, [pc, #148]	@ (8005298 <UART_AdvFeatureConfig+0x158>)
 8005204:	4013      	ands	r3, r2
 8005206:	0019      	movs	r1, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005218:	2240      	movs	r2, #64	@ 0x40
 800521a:	4013      	ands	r3, r2
 800521c:	d01d      	beq.n	800525a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	4a1d      	ldr	r2, [pc, #116]	@ (800529c <UART_AdvFeatureConfig+0x15c>)
 8005226:	4013      	ands	r3, r2
 8005228:	0019      	movs	r1, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800523a:	2380      	movs	r3, #128	@ 0x80
 800523c:	035b      	lsls	r3, r3, #13
 800523e:	429a      	cmp	r2, r3
 8005240:	d10b      	bne.n	800525a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	4a15      	ldr	r2, [pc, #84]	@ (80052a0 <UART_AdvFeatureConfig+0x160>)
 800524a:	4013      	ands	r3, r2
 800524c:	0019      	movs	r1, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525e:	2280      	movs	r2, #128	@ 0x80
 8005260:	4013      	ands	r3, r2
 8005262:	d00b      	beq.n	800527c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	4a0e      	ldr	r2, [pc, #56]	@ (80052a4 <UART_AdvFeatureConfig+0x164>)
 800526c:	4013      	ands	r3, r2
 800526e:	0019      	movs	r1, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	430a      	orrs	r2, r1
 800527a:	605a      	str	r2, [r3, #4]
  }
}
 800527c:	46c0      	nop			@ (mov r8, r8)
 800527e:	46bd      	mov	sp, r7
 8005280:	b002      	add	sp, #8
 8005282:	bd80      	pop	{r7, pc}
 8005284:	fffdffff 	.word	0xfffdffff
 8005288:	fffeffff 	.word	0xfffeffff
 800528c:	fffbffff 	.word	0xfffbffff
 8005290:	ffff7fff 	.word	0xffff7fff
 8005294:	ffffefff 	.word	0xffffefff
 8005298:	ffffdfff 	.word	0xffffdfff
 800529c:	ffefffff 	.word	0xffefffff
 80052a0:	ff9fffff 	.word	0xff9fffff
 80052a4:	fff7ffff 	.word	0xfff7ffff

080052a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b092      	sub	sp, #72	@ 0x48
 80052ac:	af02      	add	r7, sp, #8
 80052ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2284      	movs	r2, #132	@ 0x84
 80052b4:	2100      	movs	r1, #0
 80052b6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052b8:	f7fc f8c2 	bl	8001440 <HAL_GetTick>
 80052bc:	0003      	movs	r3, r0
 80052be:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2208      	movs	r2, #8
 80052c8:	4013      	ands	r3, r2
 80052ca:	2b08      	cmp	r3, #8
 80052cc:	d12c      	bne.n	8005328 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052d0:	2280      	movs	r2, #128	@ 0x80
 80052d2:	0391      	lsls	r1, r2, #14
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	4a46      	ldr	r2, [pc, #280]	@ (80053f0 <UART_CheckIdleState+0x148>)
 80052d8:	9200      	str	r2, [sp, #0]
 80052da:	2200      	movs	r2, #0
 80052dc:	f000 f88c 	bl	80053f8 <UART_WaitOnFlagUntilTimeout>
 80052e0:	1e03      	subs	r3, r0, #0
 80052e2:	d021      	beq.n	8005328 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052e4:	f3ef 8310 	mrs	r3, PRIMASK
 80052e8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80052ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80052ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052ee:	2301      	movs	r3, #1
 80052f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f4:	f383 8810 	msr	PRIMASK, r3
}
 80052f8:	46c0      	nop			@ (mov r8, r8)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2180      	movs	r1, #128	@ 0x80
 8005306:	438a      	bics	r2, r1
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800530c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800530e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005310:	f383 8810 	msr	PRIMASK, r3
}
 8005314:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2220      	movs	r2, #32
 800531a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2278      	movs	r2, #120	@ 0x78
 8005320:	2100      	movs	r1, #0
 8005322:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e05f      	b.n	80053e8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2204      	movs	r2, #4
 8005330:	4013      	ands	r3, r2
 8005332:	2b04      	cmp	r3, #4
 8005334:	d146      	bne.n	80053c4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005338:	2280      	movs	r2, #128	@ 0x80
 800533a:	03d1      	lsls	r1, r2, #15
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	4a2c      	ldr	r2, [pc, #176]	@ (80053f0 <UART_CheckIdleState+0x148>)
 8005340:	9200      	str	r2, [sp, #0]
 8005342:	2200      	movs	r2, #0
 8005344:	f000 f858 	bl	80053f8 <UART_WaitOnFlagUntilTimeout>
 8005348:	1e03      	subs	r3, r0, #0
 800534a:	d03b      	beq.n	80053c4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800534c:	f3ef 8310 	mrs	r3, PRIMASK
 8005350:	60fb      	str	r3, [r7, #12]
  return(result);
 8005352:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005354:	637b      	str	r3, [r7, #52]	@ 0x34
 8005356:	2301      	movs	r3, #1
 8005358:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	f383 8810 	msr	PRIMASK, r3
}
 8005360:	46c0      	nop			@ (mov r8, r8)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4921      	ldr	r1, [pc, #132]	@ (80053f4 <UART_CheckIdleState+0x14c>)
 800536e:	400a      	ands	r2, r1
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005374:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f383 8810 	msr	PRIMASK, r3
}
 800537c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800537e:	f3ef 8310 	mrs	r3, PRIMASK
 8005382:	61bb      	str	r3, [r7, #24]
  return(result);
 8005384:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005386:	633b      	str	r3, [r7, #48]	@ 0x30
 8005388:	2301      	movs	r3, #1
 800538a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	f383 8810 	msr	PRIMASK, r3
}
 8005392:	46c0      	nop			@ (mov r8, r8)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689a      	ldr	r2, [r3, #8]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2101      	movs	r1, #1
 80053a0:	438a      	bics	r2, r1
 80053a2:	609a      	str	r2, [r3, #8]
 80053a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053a8:	6a3b      	ldr	r3, [r7, #32]
 80053aa:	f383 8810 	msr	PRIMASK, r3
}
 80053ae:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2280      	movs	r2, #128	@ 0x80
 80053b4:	2120      	movs	r1, #32
 80053b6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2278      	movs	r2, #120	@ 0x78
 80053bc:	2100      	movs	r1, #0
 80053be:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e011      	b.n	80053e8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2220      	movs	r2, #32
 80053c8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2280      	movs	r2, #128	@ 0x80
 80053ce:	2120      	movs	r1, #32
 80053d0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2278      	movs	r2, #120	@ 0x78
 80053e2:	2100      	movs	r1, #0
 80053e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	0018      	movs	r0, r3
 80053ea:	46bd      	mov	sp, r7
 80053ec:	b010      	add	sp, #64	@ 0x40
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	01ffffff 	.word	0x01ffffff
 80053f4:	fffffedf 	.word	0xfffffedf

080053f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	603b      	str	r3, [r7, #0]
 8005404:	1dfb      	adds	r3, r7, #7
 8005406:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005408:	e04b      	b.n	80054a2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	3301      	adds	r3, #1
 800540e:	d048      	beq.n	80054a2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005410:	f7fc f816 	bl	8001440 <HAL_GetTick>
 8005414:	0002      	movs	r2, r0
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	429a      	cmp	r2, r3
 800541e:	d302      	bcc.n	8005426 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e04b      	b.n	80054c2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2204      	movs	r2, #4
 8005432:	4013      	ands	r3, r2
 8005434:	d035      	beq.n	80054a2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	69db      	ldr	r3, [r3, #28]
 800543c:	2208      	movs	r2, #8
 800543e:	4013      	ands	r3, r2
 8005440:	2b08      	cmp	r3, #8
 8005442:	d111      	bne.n	8005468 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2208      	movs	r2, #8
 800544a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	0018      	movs	r0, r3
 8005450:	f000 f900 	bl	8005654 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2284      	movs	r2, #132	@ 0x84
 8005458:	2108      	movs	r1, #8
 800545a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2278      	movs	r2, #120	@ 0x78
 8005460:	2100      	movs	r1, #0
 8005462:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e02c      	b.n	80054c2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	69da      	ldr	r2, [r3, #28]
 800546e:	2380      	movs	r3, #128	@ 0x80
 8005470:	011b      	lsls	r3, r3, #4
 8005472:	401a      	ands	r2, r3
 8005474:	2380      	movs	r3, #128	@ 0x80
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	429a      	cmp	r2, r3
 800547a:	d112      	bne.n	80054a2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2280      	movs	r2, #128	@ 0x80
 8005482:	0112      	lsls	r2, r2, #4
 8005484:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	0018      	movs	r0, r3
 800548a:	f000 f8e3 	bl	8005654 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2284      	movs	r2, #132	@ 0x84
 8005492:	2120      	movs	r1, #32
 8005494:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2278      	movs	r2, #120	@ 0x78
 800549a:	2100      	movs	r1, #0
 800549c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e00f      	b.n	80054c2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	4013      	ands	r3, r2
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	425a      	negs	r2, r3
 80054b2:	4153      	adcs	r3, r2
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	001a      	movs	r2, r3
 80054b8:	1dfb      	adds	r3, r7, #7
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d0a4      	beq.n	800540a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	0018      	movs	r0, r3
 80054c4:	46bd      	mov	sp, r7
 80054c6:	b004      	add	sp, #16
 80054c8:	bd80      	pop	{r7, pc}
	...

080054cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b090      	sub	sp, #64	@ 0x40
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	1dbb      	adds	r3, r7, #6
 80054d8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	1dba      	adds	r2, r7, #6
 80054e4:	2158      	movs	r1, #88	@ 0x58
 80054e6:	8812      	ldrh	r2, [r2, #0]
 80054e8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2284      	movs	r2, #132	@ 0x84
 80054ee:	2100      	movs	r1, #0
 80054f0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2280      	movs	r2, #128	@ 0x80
 80054f6:	2122      	movs	r1, #34	@ 0x22
 80054f8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d028      	beq.n	8005554 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005506:	4a3e      	ldr	r2, [pc, #248]	@ (8005600 <UART_Start_Receive_DMA+0x134>)
 8005508:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800550e:	4a3d      	ldr	r2, [pc, #244]	@ (8005604 <UART_Start_Receive_DMA+0x138>)
 8005510:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005516:	4a3c      	ldr	r2, [pc, #240]	@ (8005608 <UART_Start_Receive_DMA+0x13c>)
 8005518:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800551e:	2200      	movs	r2, #0
 8005520:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3324      	adds	r3, #36	@ 0x24
 800552c:	0019      	movs	r1, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005532:	001a      	movs	r2, r3
 8005534:	1dbb      	adds	r3, r7, #6
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	f7fc fa40 	bl	80019bc <HAL_DMA_Start_IT>
 800553c:	1e03      	subs	r3, r0, #0
 800553e:	d009      	beq.n	8005554 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2284      	movs	r2, #132	@ 0x84
 8005544:	2110      	movs	r1, #16
 8005546:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2280      	movs	r2, #128	@ 0x80
 800554c:	2120      	movs	r1, #32
 800554e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e050      	b.n	80055f6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d019      	beq.n	8005590 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800555c:	f3ef 8310 	mrs	r3, PRIMASK
 8005560:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8005562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005564:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005566:	2301      	movs	r3, #1
 8005568:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800556a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800556c:	f383 8810 	msr	PRIMASK, r3
}
 8005570:	46c0      	nop			@ (mov r8, r8)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2180      	movs	r1, #128	@ 0x80
 800557e:	0049      	lsls	r1, r1, #1
 8005580:	430a      	orrs	r2, r1
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005586:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558a:	f383 8810 	msr	PRIMASK, r3
}
 800558e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005590:	f3ef 8310 	mrs	r3, PRIMASK
 8005594:	613b      	str	r3, [r7, #16]
  return(result);
 8005596:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005598:	63bb      	str	r3, [r7, #56]	@ 0x38
 800559a:	2301      	movs	r3, #1
 800559c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f383 8810 	msr	PRIMASK, r3
}
 80055a4:	46c0      	nop			@ (mov r8, r8)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2101      	movs	r1, #1
 80055b2:	430a      	orrs	r2, r1
 80055b4:	609a      	str	r2, [r3, #8]
 80055b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	f383 8810 	msr	PRIMASK, r3
}
 80055c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055c2:	f3ef 8310 	mrs	r3, PRIMASK
 80055c6:	61fb      	str	r3, [r7, #28]
  return(result);
 80055c8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80055cc:	2301      	movs	r3, #1
 80055ce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055d0:	6a3b      	ldr	r3, [r7, #32]
 80055d2:	f383 8810 	msr	PRIMASK, r3
}
 80055d6:	46c0      	nop			@ (mov r8, r8)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689a      	ldr	r2, [r3, #8]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2140      	movs	r1, #64	@ 0x40
 80055e4:	430a      	orrs	r2, r1
 80055e6:	609a      	str	r2, [r3, #8]
 80055e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ea:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ee:	f383 8810 	msr	PRIMASK, r3
}
 80055f2:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	0018      	movs	r0, r3
 80055f8:	46bd      	mov	sp, r7
 80055fa:	b010      	add	sp, #64	@ 0x40
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	46c0      	nop			@ (mov r8, r8)
 8005600:	0800571d 	.word	0x0800571d
 8005604:	0800584d 	.word	0x0800584d
 8005608:	0800588f 	.word	0x0800588f

0800560c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005614:	f3ef 8310 	mrs	r3, PRIMASK
 8005618:	60bb      	str	r3, [r7, #8]
  return(result);
 800561a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800561c:	617b      	str	r3, [r7, #20]
 800561e:	2301      	movs	r3, #1
 8005620:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f383 8810 	msr	PRIMASK, r3
}
 8005628:	46c0      	nop			@ (mov r8, r8)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	21c0      	movs	r1, #192	@ 0xc0
 8005636:	438a      	bics	r2, r1
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	f383 8810 	msr	PRIMASK, r3
}
 8005644:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2220      	movs	r2, #32
 800564a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800564c:	46c0      	nop			@ (mov r8, r8)
 800564e:	46bd      	mov	sp, r7
 8005650:	b006      	add	sp, #24
 8005652:	bd80      	pop	{r7, pc}

08005654 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b08e      	sub	sp, #56	@ 0x38
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800565c:	f3ef 8310 	mrs	r3, PRIMASK
 8005660:	617b      	str	r3, [r7, #20]
  return(result);
 8005662:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005664:	637b      	str	r3, [r7, #52]	@ 0x34
 8005666:	2301      	movs	r3, #1
 8005668:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	f383 8810 	msr	PRIMASK, r3
}
 8005670:	46c0      	nop			@ (mov r8, r8)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4926      	ldr	r1, [pc, #152]	@ (8005718 <UART_EndRxTransfer+0xc4>)
 800567e:	400a      	ands	r2, r1
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005684:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	f383 8810 	msr	PRIMASK, r3
}
 800568c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800568e:	f3ef 8310 	mrs	r3, PRIMASK
 8005692:	623b      	str	r3, [r7, #32]
  return(result);
 8005694:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005696:	633b      	str	r3, [r7, #48]	@ 0x30
 8005698:	2301      	movs	r3, #1
 800569a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800569c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569e:	f383 8810 	msr	PRIMASK, r3
}
 80056a2:	46c0      	nop			@ (mov r8, r8)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689a      	ldr	r2, [r3, #8]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2101      	movs	r1, #1
 80056b0:	438a      	bics	r2, r1
 80056b2:	609a      	str	r2, [r3, #8]
 80056b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ba:	f383 8810 	msr	PRIMASK, r3
}
 80056be:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d118      	bne.n	80056fa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056c8:	f3ef 8310 	mrs	r3, PRIMASK
 80056cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80056ce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056d2:	2301      	movs	r3, #1
 80056d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f383 8810 	msr	PRIMASK, r3
}
 80056dc:	46c0      	nop			@ (mov r8, r8)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2110      	movs	r1, #16
 80056ea:	438a      	bics	r2, r1
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	f383 8810 	msr	PRIMASK, r3
}
 80056f8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2280      	movs	r2, #128	@ 0x80
 80056fe:	2120      	movs	r1, #32
 8005700:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800570e:	46c0      	nop			@ (mov r8, r8)
 8005710:	46bd      	mov	sp, r7
 8005712:	b00e      	add	sp, #56	@ 0x38
 8005714:	bd80      	pop	{r7, pc}
 8005716:	46c0      	nop			@ (mov r8, r8)
 8005718:	fffffedf 	.word	0xfffffedf

0800571c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b094      	sub	sp, #80	@ 0x50
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005728:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2220      	movs	r2, #32
 8005732:	4013      	ands	r3, r2
 8005734:	d16f      	bne.n	8005816 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8005736:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005738:	225a      	movs	r2, #90	@ 0x5a
 800573a:	2100      	movs	r1, #0
 800573c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800573e:	f3ef 8310 	mrs	r3, PRIMASK
 8005742:	61bb      	str	r3, [r7, #24]
  return(result);
 8005744:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005746:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005748:	2301      	movs	r3, #1
 800574a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	f383 8810 	msr	PRIMASK, r3
}
 8005752:	46c0      	nop			@ (mov r8, r8)
 8005754:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	493a      	ldr	r1, [pc, #232]	@ (8005848 <UART_DMAReceiveCplt+0x12c>)
 8005760:	400a      	ands	r2, r1
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005766:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005768:	6a3b      	ldr	r3, [r7, #32]
 800576a:	f383 8810 	msr	PRIMASK, r3
}
 800576e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005770:	f3ef 8310 	mrs	r3, PRIMASK
 8005774:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005778:	647b      	str	r3, [r7, #68]	@ 0x44
 800577a:	2301      	movs	r3, #1
 800577c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800577e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005780:	f383 8810 	msr	PRIMASK, r3
}
 8005784:	46c0      	nop			@ (mov r8, r8)
 8005786:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2101      	movs	r1, #1
 8005792:	438a      	bics	r2, r1
 8005794:	609a      	str	r2, [r3, #8]
 8005796:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005798:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800579a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800579c:	f383 8810 	msr	PRIMASK, r3
}
 80057a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057a2:	f3ef 8310 	mrs	r3, PRIMASK
 80057a6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80057a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80057ac:	2301      	movs	r3, #1
 80057ae:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057b2:	f383 8810 	msr	PRIMASK, r3
}
 80057b6:	46c0      	nop			@ (mov r8, r8)
 80057b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689a      	ldr	r2, [r3, #8]
 80057be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2140      	movs	r1, #64	@ 0x40
 80057c4:	438a      	bics	r2, r1
 80057c6:	609a      	str	r2, [r3, #8]
 80057c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ce:	f383 8810 	msr	PRIMASK, r3
}
 80057d2:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80057d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057d6:	2280      	movs	r2, #128	@ 0x80
 80057d8:	2120      	movs	r1, #32
 80057da:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d118      	bne.n	8005816 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057e4:	f3ef 8310 	mrs	r3, PRIMASK
 80057e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80057ea:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057ee:	2301      	movs	r3, #1
 80057f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f383 8810 	msr	PRIMASK, r3
}
 80057f8:	46c0      	nop			@ (mov r8, r8)
 80057fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2110      	movs	r1, #16
 8005806:	438a      	bics	r2, r1
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800580c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f383 8810 	msr	PRIMASK, r3
}
 8005814:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005816:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005818:	2200      	movs	r2, #0
 800581a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800581c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800581e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005820:	2b01      	cmp	r3, #1
 8005822:	d108      	bne.n	8005836 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005824:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005826:	2258      	movs	r2, #88	@ 0x58
 8005828:	5a9a      	ldrh	r2, [r3, r2]
 800582a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800582c:	0011      	movs	r1, r2
 800582e:	0018      	movs	r0, r3
 8005830:	f7ff fa30 	bl	8004c94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005834:	e003      	b.n	800583e <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8005836:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005838:	0018      	movs	r0, r3
 800583a:	f7ff fa13 	bl	8004c64 <HAL_UART_RxCpltCallback>
}
 800583e:	46c0      	nop			@ (mov r8, r8)
 8005840:	46bd      	mov	sp, r7
 8005842:	b014      	add	sp, #80	@ 0x50
 8005844:	bd80      	pop	{r7, pc}
 8005846:	46c0      	nop			@ (mov r8, r8)
 8005848:	fffffeff 	.word	0xfffffeff

0800584c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005858:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2201      	movs	r2, #1
 800585e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005864:	2b01      	cmp	r3, #1
 8005866:	d10a      	bne.n	800587e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2258      	movs	r2, #88	@ 0x58
 800586c:	5a9b      	ldrh	r3, [r3, r2]
 800586e:	085b      	lsrs	r3, r3, #1
 8005870:	b29a      	uxth	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	0011      	movs	r1, r2
 8005876:	0018      	movs	r0, r3
 8005878:	f7ff fa0c 	bl	8004c94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800587c:	e003      	b.n	8005886 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	0018      	movs	r0, r3
 8005882:	f7ff f9f7 	bl	8004c74 <HAL_UART_RxHalfCpltCallback>
}
 8005886:	46c0      	nop			@ (mov r8, r8)
 8005888:	46bd      	mov	sp, r7
 800588a:	b004      	add	sp, #16
 800588c:	bd80      	pop	{r7, pc}

0800588e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b086      	sub	sp, #24
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800589a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058a0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2280      	movs	r2, #128	@ 0x80
 80058a6:	589b      	ldr	r3, [r3, r2]
 80058a8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	2280      	movs	r2, #128	@ 0x80
 80058b2:	4013      	ands	r3, r2
 80058b4:	2b80      	cmp	r3, #128	@ 0x80
 80058b6:	d10a      	bne.n	80058ce <UART_DMAError+0x40>
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	2b21      	cmp	r3, #33	@ 0x21
 80058bc:	d107      	bne.n	80058ce <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2252      	movs	r2, #82	@ 0x52
 80058c2:	2100      	movs	r1, #0
 80058c4:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	0018      	movs	r0, r3
 80058ca:	f7ff fe9f 	bl	800560c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	2240      	movs	r2, #64	@ 0x40
 80058d6:	4013      	ands	r3, r2
 80058d8:	2b40      	cmp	r3, #64	@ 0x40
 80058da:	d10a      	bne.n	80058f2 <UART_DMAError+0x64>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2b22      	cmp	r3, #34	@ 0x22
 80058e0:	d107      	bne.n	80058f2 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	225a      	movs	r2, #90	@ 0x5a
 80058e6:	2100      	movs	r1, #0
 80058e8:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	0018      	movs	r0, r3
 80058ee:	f7ff feb1 	bl	8005654 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	2284      	movs	r2, #132	@ 0x84
 80058f6:	589b      	ldr	r3, [r3, r2]
 80058f8:	2210      	movs	r2, #16
 80058fa:	431a      	orrs	r2, r3
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	2184      	movs	r1, #132	@ 0x84
 8005900:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	0018      	movs	r0, r3
 8005906:	f7ff f9bd 	bl	8004c84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800590a:	46c0      	nop			@ (mov r8, r8)
 800590c:	46bd      	mov	sp, r7
 800590e:	b006      	add	sp, #24
 8005910:	bd80      	pop	{r7, pc}
	...

08005914 <NRF24_Init_EN>:




NRF_ret_val_en NRF24_Init_EN(NRF_HAL_function_str NRF_HAL_function_STR)
{
 8005914:	b084      	sub	sp, #16
 8005916:	b5b0      	push	{r4, r5, r7, lr}
 8005918:	b082      	sub	sp, #8
 800591a:	af00      	add	r7, sp, #0
 800591c:	2518      	movs	r5, #24
 800591e:	197c      	adds	r4, r7, r5
 8005920:	6020      	str	r0, [r4, #0]
 8005922:	6061      	str	r1, [r4, #4]
 8005924:	60a2      	str	r2, [r4, #8]
 8005926:	60e3      	str	r3, [r4, #12]
	NRF_ret_val_en NRF_ret_val_EN;

	NRF_HAL_function_local_STR.readSpiValue_EN_PF = NRF_HAL_function_STR.readSpiValue_EN_PF;
 8005928:	0029      	movs	r1, r5
 800592a:	187b      	adds	r3, r7, r1
 800592c:	689a      	ldr	r2, [r3, #8]
 800592e:	4b0f      	ldr	r3, [pc, #60]	@ (800596c <NRF24_Init_EN+0x58>)
 8005930:	609a      	str	r2, [r3, #8]
	NRF_HAL_function_local_STR.setCe_PF = NRF_HAL_function_STR.setCe_PF;
 8005932:	187b      	adds	r3, r7, r1
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	4b0d      	ldr	r3, [pc, #52]	@ (800596c <NRF24_Init_EN+0x58>)
 8005938:	601a      	str	r2, [r3, #0]
	NRF_HAL_function_local_STR.writeSpiValue_EN_PF = NRF_HAL_function_STR.writeSpiValue_EN_PF;
 800593a:	187b      	adds	r3, r7, r1
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	4b0b      	ldr	r3, [pc, #44]	@ (800596c <NRF24_Init_EN+0x58>)
 8005940:	605a      	str	r2, [r3, #4]
	NRF_HAL_function_local_STR.delay_ms_PF = NRF_HAL_function_STR.delay_ms_PF;
 8005942:	187b      	adds	r3, r7, r1
 8005944:	68da      	ldr	r2, [r3, #12]
 8005946:	4b09      	ldr	r3, [pc, #36]	@ (800596c <NRF24_Init_EN+0x58>)
 8005948:	60da      	str	r2, [r3, #12]

	NRF_ret_val_EN = NRF24_Init_registers_EN();
 800594a:	1dfc      	adds	r4, r7, #7
 800594c:	f000 fade 	bl	8005f0c <NRF24_Init_registers_EN>
 8005950:	0003      	movs	r3, r0
 8005952:	7023      	strb	r3, [r4, #0]

	//CS_Select();
	NRF_isInit_B = true;
 8005954:	4b06      	ldr	r3, [pc, #24]	@ (8005970 <NRF24_Init_EN+0x5c>)
 8005956:	2201      	movs	r2, #1
 8005958:	701a      	strb	r2, [r3, #0]

	return NRF_ret_val_EN;
 800595a:	1dfb      	adds	r3, r7, #7
 800595c:	781b      	ldrb	r3, [r3, #0]
}
 800595e:	0018      	movs	r0, r3
 8005960:	46bd      	mov	sp, r7
 8005962:	b002      	add	sp, #8
 8005964:	bcb0      	pop	{r4, r5, r7}
 8005966:	bc08      	pop	{r3}
 8005968:	b004      	add	sp, #16
 800596a:	4718      	bx	r3
 800596c:	200002dc 	.word	0x200002dc
 8005970:	200002f4 	.word	0x200002f4

08005974 <NRF_WriteReg_EN>:


// write a single byte to the particular register
static NRF_ret_val_en NRF_WriteReg_EN (NRF_register_REG reg, uint8_t Data_U8)
{
 8005974:	b5b0      	push	{r4, r5, r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	0002      	movs	r2, r0
 800597c:	1dfb      	adds	r3, r7, #7
 800597e:	701a      	strb	r2, [r3, #0]
 8005980:	1dbb      	adds	r3, r7, #6
 8005982:	1c0a      	adds	r2, r1, #0
 8005984:	701a      	strb	r2, [r3, #0]
	uint8_t buf_U8A[2];
	HAL_ret_val_en HAL_ret_val_EN;

	buf_U8A[0] = reg|1<<5;
 8005986:	1dfb      	adds	r3, r7, #7
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	2220      	movs	r2, #32
 800598c:	4313      	orrs	r3, r2
 800598e:	b2da      	uxtb	r2, r3
 8005990:	210c      	movs	r1, #12
 8005992:	187b      	adds	r3, r7, r1
 8005994:	701a      	strb	r2, [r3, #0]
	buf_U8A[1] = Data_U8;
 8005996:	187b      	adds	r3, r7, r1
 8005998:	1dba      	adds	r2, r7, #6
 800599a:	7812      	ldrb	r2, [r2, #0]
 800599c:	705a      	strb	r2, [r3, #1]
	HAL_ret_val_EN = NRF_HAL_function_local_STR.writeSpiValue_EN_PF(buf_U8A, 2);
 800599e:	4b0a      	ldr	r3, [pc, #40]	@ (80059c8 <NRF_WriteReg_EN+0x54>)
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	250f      	movs	r5, #15
 80059a4:	197c      	adds	r4, r7, r5
 80059a6:	187a      	adds	r2, r7, r1
 80059a8:	2102      	movs	r1, #2
 80059aa:	0010      	movs	r0, r2
 80059ac:	4798      	blx	r3
 80059ae:	0003      	movs	r3, r0
 80059b0:	7023      	strb	r3, [r4, #0]
	if(HAL_ret_val_EN != HAL_SPI_WRITE_OK_EN)
 80059b2:	197b      	adds	r3, r7, r5
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	2b03      	cmp	r3, #3
 80059b8:	d001      	beq.n	80059be <NRF_WriteReg_EN+0x4a>
	{
		return NRF_SPI_ERROR_EN;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e000      	b.n	80059c0 <NRF_WriteReg_EN+0x4c>
	}
	else
	{
		return NRF_OK_EN;
 80059be:	2303      	movs	r3, #3
	}
}
 80059c0:	0018      	movs	r0, r3
 80059c2:	46bd      	mov	sp, r7
 80059c4:	b004      	add	sp, #16
 80059c6:	bdb0      	pop	{r4, r5, r7, pc}
 80059c8:	200002dc 	.word	0x200002dc

080059cc <NRF_WriteReg_Multi_EN>:

//write multiple bytes starting from a particular register
static NRF_ret_val_en NRF_WriteReg_Multi_EN(NRF_register_REG register_REG, uint8_t* Data_U8A, uint16_t size_U16)
{
 80059cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ce:	46c6      	mov	lr, r8
 80059d0:	b500      	push	{lr}
 80059d2:	b08c      	sub	sp, #48	@ 0x30
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	61b9      	str	r1, [r7, #24]
 80059d8:	0011      	movs	r1, r2
 80059da:	231f      	movs	r3, #31
 80059dc:	18fb      	adds	r3, r7, r3
 80059de:	1c02      	adds	r2, r0, #0
 80059e0:	701a      	strb	r2, [r3, #0]
 80059e2:	201c      	movs	r0, #28
 80059e4:	183b      	adds	r3, r7, r0
 80059e6:	1c0a      	adds	r2, r1, #0
 80059e8:	801a      	strh	r2, [r3, #0]
 80059ea:	466b      	mov	r3, sp
 80059ec:	4698      	mov	r8, r3
	uint8_t buf_U8A[1+size_U16];
 80059ee:	183b      	adds	r3, r7, r0
 80059f0:	881b      	ldrh	r3, [r3, #0]
 80059f2:	3301      	adds	r3, #1
 80059f4:	1e5a      	subs	r2, r3, #1
 80059f6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80059f8:	001a      	movs	r2, r3
 80059fa:	60ba      	str	r2, [r7, #8]
 80059fc:	2200      	movs	r2, #0
 80059fe:	60fa      	str	r2, [r7, #12]
 8005a00:	68b8      	ldr	r0, [r7, #8]
 8005a02:	68f9      	ldr	r1, [r7, #12]
 8005a04:	0002      	movs	r2, r0
 8005a06:	0f52      	lsrs	r2, r2, #29
 8005a08:	000e      	movs	r6, r1
 8005a0a:	00f6      	lsls	r6, r6, #3
 8005a0c:	617e      	str	r6, [r7, #20]
 8005a0e:	697e      	ldr	r6, [r7, #20]
 8005a10:	4316      	orrs	r6, r2
 8005a12:	617e      	str	r6, [r7, #20]
 8005a14:	0002      	movs	r2, r0
 8005a16:	00d2      	lsls	r2, r2, #3
 8005a18:	613a      	str	r2, [r7, #16]
 8005a1a:	001a      	movs	r2, r3
 8005a1c:	603a      	str	r2, [r7, #0]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	607a      	str	r2, [r7, #4]
 8005a22:	6838      	ldr	r0, [r7, #0]
 8005a24:	6879      	ldr	r1, [r7, #4]
 8005a26:	0002      	movs	r2, r0
 8005a28:	0f52      	lsrs	r2, r2, #29
 8005a2a:	000e      	movs	r6, r1
 8005a2c:	00f5      	lsls	r5, r6, #3
 8005a2e:	4315      	orrs	r5, r2
 8005a30:	0002      	movs	r2, r0
 8005a32:	00d4      	lsls	r4, r2, #3
 8005a34:	3307      	adds	r3, #7
 8005a36:	08db      	lsrs	r3, r3, #3
 8005a38:	00db      	lsls	r3, r3, #3
 8005a3a:	466a      	mov	r2, sp
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	469d      	mov	sp, r3
 8005a40:	466b      	mov	r3, sp
 8005a42:	3300      	adds	r3, #0
 8005a44:	627b      	str	r3, [r7, #36]	@ 0x24
	buf_U8A[0] = register_REG|1<<5;
 8005a46:	231f      	movs	r3, #31
 8005a48:	18fb      	adds	r3, r7, r3
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	701a      	strb	r2, [r3, #0]
	HAL_ret_val_en HAL_ret_val_EN;

	for(uint16_t counter_U16=0 ; counter_U16<size_U16 ; counter_U16++){
 8005a56:	2316      	movs	r3, #22
 8005a58:	2218      	movs	r2, #24
 8005a5a:	189b      	adds	r3, r3, r2
 8005a5c:	19db      	adds	r3, r3, r7
 8005a5e:	2200      	movs	r2, #0
 8005a60:	801a      	strh	r2, [r3, #0]
 8005a62:	e014      	b.n	8005a8e <NRF_WriteReg_Multi_EN+0xc2>
		buf_U8A[1+counter_U16] = Data_U8A[counter_U16];
 8005a64:	2016      	movs	r0, #22
 8005a66:	2418      	movs	r4, #24
 8005a68:	1903      	adds	r3, r0, r4
 8005a6a:	19db      	adds	r3, r3, r7
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	18d2      	adds	r2, r2, r3
 8005a72:	1903      	adds	r3, r0, r4
 8005a74:	19db      	adds	r3, r3, r7
 8005a76:	881b      	ldrh	r3, [r3, #0]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	7811      	ldrb	r1, [r2, #0]
 8005a7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a7e:	54d1      	strb	r1, [r2, r3]
	for(uint16_t counter_U16=0 ; counter_U16<size_U16 ; counter_U16++){
 8005a80:	1903      	adds	r3, r0, r4
 8005a82:	19db      	adds	r3, r3, r7
 8005a84:	881a      	ldrh	r2, [r3, #0]
 8005a86:	1903      	adds	r3, r0, r4
 8005a88:	19db      	adds	r3, r3, r7
 8005a8a:	3201      	adds	r2, #1
 8005a8c:	801a      	strh	r2, [r3, #0]
 8005a8e:	2316      	movs	r3, #22
 8005a90:	2018      	movs	r0, #24
 8005a92:	181b      	adds	r3, r3, r0
 8005a94:	19da      	adds	r2, r3, r7
 8005a96:	211c      	movs	r1, #28
 8005a98:	187b      	adds	r3, r7, r1
 8005a9a:	8812      	ldrh	r2, [r2, #0]
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d3e0      	bcc.n	8005a64 <NRF_WriteReg_Multi_EN+0x98>
	}

	HAL_ret_val_EN = NRF_HAL_function_local_STR.writeSpiValue_EN_PF(buf_U8A, 1+size_U16);
 8005aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8005ae0 <NRF_WriteReg_Multi_EN+0x114>)
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	187a      	adds	r2, r7, r1
 8005aa8:	8812      	ldrh	r2, [r2, #0]
 8005aaa:	3201      	adds	r2, #1
 8005aac:	b291      	uxth	r1, r2
 8005aae:	250b      	movs	r5, #11
 8005ab0:	0006      	movs	r6, r0
 8005ab2:	182a      	adds	r2, r5, r0
 8005ab4:	19d4      	adds	r4, r2, r7
 8005ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ab8:	0010      	movs	r0, r2
 8005aba:	4798      	blx	r3
 8005abc:	0003      	movs	r3, r0
 8005abe:	7023      	strb	r3, [r4, #0]
	if(HAL_ret_val_EN != HAL_SPI_WRITE_OK_EN)
 8005ac0:	19ab      	adds	r3, r5, r6
 8005ac2:	19db      	adds	r3, r3, r7
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	2b03      	cmp	r3, #3
 8005ac8:	d001      	beq.n	8005ace <NRF_WriteReg_Multi_EN+0x102>
	{
		return NRF_SPI_ERROR_EN;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e000      	b.n	8005ad0 <NRF_WriteReg_Multi_EN+0x104>
	}
	else
	{
		return NRF_OK_EN;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	46c5      	mov	sp, r8
	}
}
 8005ad2:	0018      	movs	r0, r3
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	b00c      	add	sp, #48	@ 0x30
 8005ad8:	bc80      	pop	{r7}
 8005ada:	46b8      	mov	r8, r7
 8005adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ade:	46c0      	nop			@ (mov r8, r8)
 8005ae0:	200002dc 	.word	0x200002dc

08005ae4 <nrf24_ReadReg_EN>:

static NRF_ret_val_en nrf24_ReadReg_EN(NRF_register_REG register_REG, uint8_t* read_value_U8P)
{
 8005ae4:	b5b0      	push	{r4, r5, r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	0002      	movs	r2, r0
 8005aec:	6039      	str	r1, [r7, #0]
 8005aee:	1dfb      	adds	r3, r7, #7
 8005af0:	701a      	strb	r2, [r3, #0]
	HAL_ret_val_en HAL_ret_val_EN;
	*read_value_U8P = 0;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2200      	movs	r2, #0
 8005af6:	701a      	strb	r2, [r3, #0]
	HAL_ret_val_EN = NRF_HAL_function_local_STR.readSpiValue_EN_PF((uint8_t)register_REG,read_value_U8P,1);
 8005af8:	4b0a      	ldr	r3, [pc, #40]	@ (8005b24 <nrf24_ReadReg_EN+0x40>)
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	250f      	movs	r5, #15
 8005afe:	197c      	adds	r4, r7, r5
 8005b00:	6839      	ldr	r1, [r7, #0]
 8005b02:	1dfa      	adds	r2, r7, #7
 8005b04:	7810      	ldrb	r0, [r2, #0]
 8005b06:	2201      	movs	r2, #1
 8005b08:	4798      	blx	r3
 8005b0a:	0003      	movs	r3, r0
 8005b0c:	7023      	strb	r3, [r4, #0]
	if(HAL_ret_val_EN != HAL_SPI_READ_OK_EN)
 8005b0e:	197b      	adds	r3, r7, r5
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	2b05      	cmp	r3, #5
 8005b14:	d001      	beq.n	8005b1a <nrf24_ReadReg_EN+0x36>
	{
		return NRF_SPI_ERROR_EN;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e000      	b.n	8005b1c <nrf24_ReadReg_EN+0x38>
	}
	else
	{
		return NRF_OK_EN;
 8005b1a:	2303      	movs	r3, #3
	}
}
 8005b1c:	0018      	movs	r0, r3
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	b004      	add	sp, #16
 8005b22:	bdb0      	pop	{r4, r5, r7, pc}
 8005b24:	200002dc 	.word	0x200002dc

08005b28 <nrfsendCmd_EN>:
}*/


// send the command to the NRF
static NRF_ret_val_en nrfsendCmd_EN(NRF_register_REG cmd_REG)
{
 8005b28:	b5b0      	push	{r4, r5, r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	0002      	movs	r2, r0
 8005b30:	1dfb      	adds	r3, r7, #7
 8005b32:	701a      	strb	r2, [r3, #0]
	HAL_ret_val_en HAL_ret_val_EN;
	HAL_ret_val_EN = NRF_HAL_function_local_STR.writeSpiValue_EN_PF(&cmd_REG, 1);
 8005b34:	4b0a      	ldr	r3, [pc, #40]	@ (8005b60 <nrfsendCmd_EN+0x38>)
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	250f      	movs	r5, #15
 8005b3a:	197c      	adds	r4, r7, r5
 8005b3c:	1dfa      	adds	r2, r7, #7
 8005b3e:	2101      	movs	r1, #1
 8005b40:	0010      	movs	r0, r2
 8005b42:	4798      	blx	r3
 8005b44:	0003      	movs	r3, r0
 8005b46:	7023      	strb	r3, [r4, #0]
	if(HAL_ret_val_EN != HAL_SPI_WRITE_OK_EN)
 8005b48:	197b      	adds	r3, r7, r5
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d001      	beq.n	8005b54 <nrfsendCmd_EN+0x2c>
	{
		return NRF_SPI_ERROR_EN;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e000      	b.n	8005b56 <nrfsendCmd_EN+0x2e>
	}
	else
	{
		return NRF_OK_EN;
 8005b54:	2303      	movs	r3, #3
	}
}
 8005b56:	0018      	movs	r0, r3
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	b004      	add	sp, #16
 8005b5c:	bdb0      	pop	{r4, r5, r7, pc}
 8005b5e:	46c0      	nop			@ (mov r8, r8)
 8005b60:	200002dc 	.word	0x200002dc

08005b64 <nrf24_reset_EN>:

static NRF_ret_val_en nrf24_reset_EN(NRF_register_REG reg)
{
 8005b64:	b5b0      	push	{r4, r5, r7, lr}
 8005b66:	b088      	sub	sp, #32
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	0002      	movs	r2, r0
 8005b6c:	1dfb      	adds	r3, r7, #7
 8005b6e:	701a      	strb	r2, [r3, #0]
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8005b70:	2318      	movs	r3, #24
 8005b72:	18fb      	adds	r3, r7, r3
 8005b74:	4ad8      	ldr	r2, [pc, #864]	@ (8005ed8 <nrf24_reset_EN+0x374>)
 8005b76:	6811      	ldr	r1, [r2, #0]
 8005b78:	6019      	str	r1, [r3, #0]
 8005b7a:	7912      	ldrb	r2, [r2, #4]
 8005b7c:	711a      	strb	r2, [r3, #4]
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8005b7e:	2310      	movs	r3, #16
 8005b80:	18fb      	adds	r3, r7, r3
 8005b82:	4ad6      	ldr	r2, [pc, #856]	@ (8005edc <nrf24_reset_EN+0x378>)
 8005b84:	6811      	ldr	r1, [r2, #0]
 8005b86:	6019      	str	r1, [r3, #0]
 8005b88:	7912      	ldrb	r2, [r2, #4]
 8005b8a:	711a      	strb	r2, [r3, #4]
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8005b8c:	2308      	movs	r3, #8
 8005b8e:	18fb      	adds	r3, r7, r3
 8005b90:	4ad2      	ldr	r2, [pc, #840]	@ (8005edc <nrf24_reset_EN+0x378>)
 8005b92:	6811      	ldr	r1, [r2, #0]
 8005b94:	6019      	str	r1, [r3, #0]
 8005b96:	7912      	ldrb	r2, [r2, #4]
 8005b98:	711a      	strb	r2, [r3, #4]
	NRF_ret_val_en NRF_ret_val_EN;
	if (reg == STATUS_REG)
 8005b9a:	1dfb      	adds	r3, r7, #7
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	2b07      	cmp	r3, #7
 8005ba0:	d110      	bne.n	8005bc4 <nrf24_reset_EN+0x60>
	{
		NRF_ret_val_EN = NRF_WriteReg_EN(STATUS_REG, 0x00);
 8005ba2:	251f      	movs	r5, #31
 8005ba4:	197c      	adds	r4, r7, r5
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	2007      	movs	r0, #7
 8005baa:	f7ff fee3 	bl	8005974 <NRF_WriteReg_EN>
 8005bae:	0003      	movs	r3, r0
 8005bb0:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8005bb2:	002a      	movs	r2, r5
 8005bb4:	18bb      	adds	r3, r7, r2
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	2b03      	cmp	r3, #3
 8005bba:	d100      	bne.n	8005bbe <nrf24_reset_EN+0x5a>
 8005bbc:	e1a0      	b.n	8005f00 <nrf24_reset_EN+0x39c>
		{
			return NRF_ret_val_EN;
 8005bbe:	18bb      	adds	r3, r7, r2
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	e19e      	b.n	8005f02 <nrf24_reset_EN+0x39e>
		}
	}

	else if (reg == FIFO_STATUS_REG)
 8005bc4:	1dfb      	adds	r3, r7, #7
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	2b17      	cmp	r3, #23
 8005bca:	d110      	bne.n	8005bee <nrf24_reset_EN+0x8a>
	{
		NRF_ret_val_EN = NRF_WriteReg_EN(FIFO_STATUS_REG, 0x11);
 8005bcc:	251f      	movs	r5, #31
 8005bce:	197c      	adds	r4, r7, r5
 8005bd0:	2111      	movs	r1, #17
 8005bd2:	2017      	movs	r0, #23
 8005bd4:	f7ff fece 	bl	8005974 <NRF_WriteReg_EN>
 8005bd8:	0003      	movs	r3, r0
 8005bda:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8005bdc:	002a      	movs	r2, r5
 8005bde:	18bb      	adds	r3, r7, r2
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	2b03      	cmp	r3, #3
 8005be4:	d100      	bne.n	8005be8 <nrf24_reset_EN+0x84>
 8005be6:	e18b      	b.n	8005f00 <nrf24_reset_EN+0x39c>
		{
			return NRF_ret_val_EN;
 8005be8:	18bb      	adds	r3, r7, r2
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	e189      	b.n	8005f02 <nrf24_reset_EN+0x39e>
		}
	}

	else {
		NRF_ret_val_EN = NRF_WriteReg_EN(CONFIG_REG, 0x08);
 8005bee:	251f      	movs	r5, #31
 8005bf0:	197c      	adds	r4, r7, r5
 8005bf2:	2108      	movs	r1, #8
 8005bf4:	2000      	movs	r0, #0
 8005bf6:	f7ff febd 	bl	8005974 <NRF_WriteReg_EN>
 8005bfa:	0003      	movs	r3, r0
 8005bfc:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8005bfe:	002a      	movs	r2, r5
 8005c00:	18bb      	adds	r3, r7, r2
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	2b03      	cmp	r3, #3
 8005c06:	d002      	beq.n	8005c0e <nrf24_reset_EN+0xaa>
		{
			return NRF_ret_val_EN;
 8005c08:	18bb      	adds	r3, r7, r2
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	e179      	b.n	8005f02 <nrf24_reset_EN+0x39e>
		}
		NRF_ret_val_EN = NRF_WriteReg_EN(EN_AA_REG, 0x3F);
 8005c0e:	251f      	movs	r5, #31
 8005c10:	197c      	adds	r4, r7, r5
 8005c12:	213f      	movs	r1, #63	@ 0x3f
 8005c14:	2001      	movs	r0, #1
 8005c16:	f7ff fead 	bl	8005974 <NRF_WriteReg_EN>
 8005c1a:	0003      	movs	r3, r0
 8005c1c:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8005c1e:	002a      	movs	r2, r5
 8005c20:	18bb      	adds	r3, r7, r2
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b03      	cmp	r3, #3
 8005c26:	d002      	beq.n	8005c2e <nrf24_reset_EN+0xca>
		{
			return NRF_ret_val_EN;
 8005c28:	18bb      	adds	r3, r7, r2
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	e169      	b.n	8005f02 <nrf24_reset_EN+0x39e>
		}
		NRF_ret_val_EN = NRF_WriteReg_EN(EN_RXADDR_REG, 0x03);
 8005c2e:	251f      	movs	r5, #31
 8005c30:	197c      	adds	r4, r7, r5
 8005c32:	2103      	movs	r1, #3
 8005c34:	2002      	movs	r0, #2
 8005c36:	f7ff fe9d 	bl	8005974 <NRF_WriteReg_EN>
 8005c3a:	0003      	movs	r3, r0
 8005c3c:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8005c3e:	002a      	movs	r2, r5
 8005c40:	18bb      	adds	r3, r7, r2
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	2b03      	cmp	r3, #3
 8005c46:	d002      	beq.n	8005c4e <nrf24_reset_EN+0xea>
		{
			return NRF_ret_val_EN;
 8005c48:	18bb      	adds	r3, r7, r2
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	e159      	b.n	8005f02 <nrf24_reset_EN+0x39e>
		}
		NRF_ret_val_EN = NRF_WriteReg_EN(SETUP_AW_REG, 0x03);
 8005c4e:	251f      	movs	r5, #31
 8005c50:	197c      	adds	r4, r7, r5
 8005c52:	2103      	movs	r1, #3
 8005c54:	2003      	movs	r0, #3
 8005c56:	f7ff fe8d 	bl	8005974 <NRF_WriteReg_EN>
 8005c5a:	0003      	movs	r3, r0
 8005c5c:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8005c5e:	002a      	movs	r2, r5
 8005c60:	18bb      	adds	r3, r7, r2
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	2b03      	cmp	r3, #3
 8005c66:	d002      	beq.n	8005c6e <nrf24_reset_EN+0x10a>
		{
			return NRF_ret_val_EN;
 8005c68:	18bb      	adds	r3, r7, r2
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	e149      	b.n	8005f02 <nrf24_reset_EN+0x39e>
		}
		NRF_ret_val_EN = NRF_WriteReg_EN(SETUP_RETR_REG, 0x03);
 8005c6e:	251f      	movs	r5, #31
 8005c70:	197c      	adds	r4, r7, r5
 8005c72:	2103      	movs	r1, #3
 8005c74:	2004      	movs	r0, #4
 8005c76:	f7ff fe7d 	bl	8005974 <NRF_WriteReg_EN>
 8005c7a:	0003      	movs	r3, r0
 8005c7c:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8005c7e:	002a      	movs	r2, r5
 8005c80:	18bb      	adds	r3, r7, r2
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b03      	cmp	r3, #3
 8005c86:	d002      	beq.n	8005c8e <nrf24_reset_EN+0x12a>
		{
			return NRF_ret_val_EN;
 8005c88:	18bb      	adds	r3, r7, r2
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	e139      	b.n	8005f02 <nrf24_reset_EN+0x39e>
		}
		NRF_ret_val_EN = NRF_WriteReg_EN(RF_CH_REG, 0x02);
 8005c8e:	251f      	movs	r5, #31
 8005c90:	197c      	adds	r4, r7, r5
 8005c92:	2102      	movs	r1, #2
 8005c94:	2005      	movs	r0, #5
 8005c96:	f7ff fe6d 	bl	8005974 <NRF_WriteReg_EN>
 8005c9a:	0003      	movs	r3, r0
 8005c9c:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8005c9e:	002a      	movs	r2, r5
 8005ca0:	18bb      	adds	r3, r7, r2
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	2b03      	cmp	r3, #3
 8005ca6:	d002      	beq.n	8005cae <nrf24_reset_EN+0x14a>
		{
			return NRF_ret_val_EN;
 8005ca8:	18bb      	adds	r3, r7, r2
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	e129      	b.n	8005f02 <nrf24_reset_EN+0x39e>
		}
		NRF_ret_val_EN = NRF_WriteReg_EN(RF_SETUP_REG, 0x0E);
 8005cae:	251f      	movs	r5, #31
 8005cb0:	197c      	adds	r4, r7, r5
 8005cb2:	210e      	movs	r1, #14
 8005cb4:	2006      	movs	r0, #6
 8005cb6:	f7ff fe5d 	bl	8005974 <NRF_WriteReg_EN>
 8005cba:	0003      	movs	r3, r0
 8005cbc:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8005cbe:	002a      	movs	r2, r5
 8005cc0:	18bb      	adds	r3, r7, r2
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	2b03      	cmp	r3, #3
 8005cc6:	d002      	beq.n	8005cce <nrf24_reset_EN+0x16a>
		{
			return NRF_ret_val_EN;
 8005cc8:	18bb      	adds	r3, r7, r2
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	e119      	b.n	8005f02 <nrf24_reset_EN+0x39e>
		}
		NRF_ret_val_EN = NRF_WriteReg_EN(STATUS_REG, 0x00);
 8005cce:	251f      	movs	r5, #31
 8005cd0:	197c      	adds	r4, r7, r5
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	2007      	movs	r0, #7
 8005cd6:	f7ff fe4d 	bl	8005974 <NRF_WriteReg_EN>
 8005cda:	0003      	movs	r3, r0
 8005cdc:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8005cde:	002a      	movs	r2, r5
 8005ce0:	18bb      	adds	r3, r7, r2
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	2b03      	cmp	r3, #3
 8005ce6:	d002      	beq.n	8005cee <nrf24_reset_EN+0x18a>
		{
			return NRF_ret_val_EN;
 8005ce8:	18bb      	adds	r3, r7, r2
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	e109      	b.n	8005f02 <nrf24_reset_EN+0x39e>
		}
		NRF_ret_val_EN = NRF_WriteReg_EN(OBSERVE_TX_REG, 0x00);
 8005cee:	251f      	movs	r5, #31
 8005cf0:	197c      	adds	r4, r7, r5
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	2008      	movs	r0, #8
 8005cf6:	f7ff fe3d 	bl	8005974 <NRF_WriteReg_EN>
 8005cfa:	0003      	movs	r3, r0
 8005cfc:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8005cfe:	002a      	movs	r2, r5
 8005d00:	18bb      	adds	r3, r7, r2
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	2b03      	cmp	r3, #3
 8005d06:	d002      	beq.n	8005d0e <nrf24_reset_EN+0x1aa>
		{
			return NRF_ret_val_EN;
 8005d08:	18bb      	adds	r3, r7, r2
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	e0f9      	b.n	8005f02 <nrf24_reset_EN+0x39e>
		}
		NRF_ret_val_EN = NRF_WriteReg_EN(CD_REG, 0x00);
 8005d0e:	251f      	movs	r5, #31
 8005d10:	197c      	adds	r4, r7, r5
 8005d12:	2100      	movs	r1, #0
 8005d14:	2009      	movs	r0, #9
 8005d16:	f7ff fe2d 	bl	8005974 <NRF_WriteReg_EN>
 8005d1a:	0003      	movs	r3, r0
 8005d1c:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8005d1e:	002a      	movs	r2, r5
 8005d20:	18bb      	adds	r3, r7, r2
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d002      	beq.n	8005d2e <nrf24_reset_EN+0x1ca>
		{
			return NRF_ret_val_EN;
 8005d28:	18bb      	adds	r3, r7, r2
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	e0e9      	b.n	8005f02 <nrf24_reset_EN+0x39e>
		}
		NRF_WriteReg_Multi_EN(RX_ADDR_P0_REG, rx_addr_p0_def, 5);
 8005d2e:	2308      	movs	r3, #8
 8005d30:	18fb      	adds	r3, r7, r3
 8005d32:	2205      	movs	r2, #5
 8005d34:	0019      	movs	r1, r3
 8005d36:	200a      	movs	r0, #10
 8005d38:	f7ff fe48 	bl	80059cc <NRF_WriteReg_Multi_EN>
		NRF_WriteReg_Multi_EN(RX_ADDR_P1_REG, rx_addr_p1_def, 5);
 8005d3c:	2318      	movs	r3, #24
 8005d3e:	18fb      	adds	r3, r7, r3
 8005d40:	2205      	movs	r2, #5
 8005d42:	0019      	movs	r1, r3
 8005d44:	200b      	movs	r0, #11
 8005d46:	f7ff fe41 	bl	80059cc <NRF_WriteReg_Multi_EN>
		NRF_ret_val_EN = NRF_WriteReg_EN(RX_ADDR_P2_REG, 0xC3);
 8005d4a:	251f      	movs	r5, #31
 8005d4c:	197c      	adds	r4, r7, r5
 8005d4e:	21c3      	movs	r1, #195	@ 0xc3
 8005d50:	200b      	movs	r0, #11
 8005d52:	f7ff fe0f 	bl	8005974 <NRF_WriteReg_EN>
 8005d56:	0003      	movs	r3, r0
 8005d58:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8005d5a:	002a      	movs	r2, r5
 8005d5c:	18bb      	adds	r3, r7, r2
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	2b03      	cmp	r3, #3
 8005d62:	d002      	beq.n	8005d6a <nrf24_reset_EN+0x206>
		{
			return NRF_ret_val_EN;
 8005d64:	18bb      	adds	r3, r7, r2
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	e0cb      	b.n	8005f02 <nrf24_reset_EN+0x39e>
		}
		NRF_ret_val_EN = NRF_WriteReg_EN(RX_ADDR_P3_REG, 0xC4);
 8005d6a:	251f      	movs	r5, #31
 8005d6c:	197c      	adds	r4, r7, r5
 8005d6e:	21c4      	movs	r1, #196	@ 0xc4
 8005d70:	200d      	movs	r0, #13
 8005d72:	f7ff fdff 	bl	8005974 <NRF_WriteReg_EN>
 8005d76:	0003      	movs	r3, r0
 8005d78:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8005d7a:	002a      	movs	r2, r5
 8005d7c:	18bb      	adds	r3, r7, r2
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	2b03      	cmp	r3, #3
 8005d82:	d002      	beq.n	8005d8a <nrf24_reset_EN+0x226>
		{
			return NRF_ret_val_EN;
 8005d84:	18bb      	adds	r3, r7, r2
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	e0bb      	b.n	8005f02 <nrf24_reset_EN+0x39e>
		}
		NRF_ret_val_EN = NRF_WriteReg_EN(RX_ADDR_P4_REG, 0xC5);
 8005d8a:	251f      	movs	r5, #31
 8005d8c:	197c      	adds	r4, r7, r5
 8005d8e:	21c5      	movs	r1, #197	@ 0xc5
 8005d90:	200e      	movs	r0, #14
 8005d92:	f7ff fdef 	bl	8005974 <NRF_WriteReg_EN>
 8005d96:	0003      	movs	r3, r0
 8005d98:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8005d9a:	002a      	movs	r2, r5
 8005d9c:	18bb      	adds	r3, r7, r2
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	2b03      	cmp	r3, #3
 8005da2:	d002      	beq.n	8005daa <nrf24_reset_EN+0x246>
		{
			return NRF_ret_val_EN;
 8005da4:	18bb      	adds	r3, r7, r2
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	e0ab      	b.n	8005f02 <nrf24_reset_EN+0x39e>
		}
		NRF_ret_val_EN = NRF_WriteReg_EN(RX_ADDR_P5_REG, 0xC6);
 8005daa:	251f      	movs	r5, #31
 8005dac:	197c      	adds	r4, r7, r5
 8005dae:	21c6      	movs	r1, #198	@ 0xc6
 8005db0:	200f      	movs	r0, #15
 8005db2:	f7ff fddf 	bl	8005974 <NRF_WriteReg_EN>
 8005db6:	0003      	movs	r3, r0
 8005db8:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8005dba:	002a      	movs	r2, r5
 8005dbc:	18bb      	adds	r3, r7, r2
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	2b03      	cmp	r3, #3
 8005dc2:	d002      	beq.n	8005dca <nrf24_reset_EN+0x266>
		{
			return NRF_ret_val_EN;
 8005dc4:	18bb      	adds	r3, r7, r2
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	e09b      	b.n	8005f02 <nrf24_reset_EN+0x39e>
		}
		NRF_WriteReg_Multi_EN(TX_ADDR_REG, tx_addr_def, 5);
 8005dca:	2310      	movs	r3, #16
 8005dcc:	18fb      	adds	r3, r7, r3
 8005dce:	2205      	movs	r2, #5
 8005dd0:	0019      	movs	r1, r3
 8005dd2:	2010      	movs	r0, #16
 8005dd4:	f7ff fdfa 	bl	80059cc <NRF_WriteReg_Multi_EN>
		NRF_ret_val_EN = NRF_WriteReg_EN(RX_PW_P0_REG, 0);
 8005dd8:	251f      	movs	r5, #31
 8005dda:	197c      	adds	r4, r7, r5
 8005ddc:	2100      	movs	r1, #0
 8005dde:	2011      	movs	r0, #17
 8005de0:	f7ff fdc8 	bl	8005974 <NRF_WriteReg_EN>
 8005de4:	0003      	movs	r3, r0
 8005de6:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8005de8:	002a      	movs	r2, r5
 8005dea:	18bb      	adds	r3, r7, r2
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	2b03      	cmp	r3, #3
 8005df0:	d002      	beq.n	8005df8 <nrf24_reset_EN+0x294>
		{
			return NRF_ret_val_EN;
 8005df2:	18bb      	adds	r3, r7, r2
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	e084      	b.n	8005f02 <nrf24_reset_EN+0x39e>
		}
		NRF_ret_val_EN = NRF_WriteReg_EN(RX_PW_P1_REG, 0);
 8005df8:	251f      	movs	r5, #31
 8005dfa:	197c      	adds	r4, r7, r5
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	2012      	movs	r0, #18
 8005e00:	f7ff fdb8 	bl	8005974 <NRF_WriteReg_EN>
 8005e04:	0003      	movs	r3, r0
 8005e06:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8005e08:	002a      	movs	r2, r5
 8005e0a:	18bb      	adds	r3, r7, r2
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	d002      	beq.n	8005e18 <nrf24_reset_EN+0x2b4>
		{
			return NRF_ret_val_EN;
 8005e12:	18bb      	adds	r3, r7, r2
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	e074      	b.n	8005f02 <nrf24_reset_EN+0x39e>
		}
		NRF_ret_val_EN = NRF_WriteReg_EN(RX_PW_P2_REG, 0);
 8005e18:	251f      	movs	r5, #31
 8005e1a:	197c      	adds	r4, r7, r5
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	2013      	movs	r0, #19
 8005e20:	f7ff fda8 	bl	8005974 <NRF_WriteReg_EN>
 8005e24:	0003      	movs	r3, r0
 8005e26:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8005e28:	002a      	movs	r2, r5
 8005e2a:	18bb      	adds	r3, r7, r2
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	2b03      	cmp	r3, #3
 8005e30:	d002      	beq.n	8005e38 <nrf24_reset_EN+0x2d4>
		{
			return NRF_ret_val_EN;
 8005e32:	18bb      	adds	r3, r7, r2
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	e064      	b.n	8005f02 <nrf24_reset_EN+0x39e>
		}
		NRF_ret_val_EN = NRF_WriteReg_EN(RX_PW_P3_REG, 0);
 8005e38:	251f      	movs	r5, #31
 8005e3a:	197c      	adds	r4, r7, r5
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	2014      	movs	r0, #20
 8005e40:	f7ff fd98 	bl	8005974 <NRF_WriteReg_EN>
 8005e44:	0003      	movs	r3, r0
 8005e46:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8005e48:	002a      	movs	r2, r5
 8005e4a:	18bb      	adds	r3, r7, r2
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	2b03      	cmp	r3, #3
 8005e50:	d002      	beq.n	8005e58 <nrf24_reset_EN+0x2f4>
		{
			return NRF_ret_val_EN;
 8005e52:	18bb      	adds	r3, r7, r2
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	e054      	b.n	8005f02 <nrf24_reset_EN+0x39e>
		}
		NRF_ret_val_EN = NRF_WriteReg_EN(RX_PW_P4_REG, 0);
 8005e58:	251f      	movs	r5, #31
 8005e5a:	197c      	adds	r4, r7, r5
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	2015      	movs	r0, #21
 8005e60:	f7ff fd88 	bl	8005974 <NRF_WriteReg_EN>
 8005e64:	0003      	movs	r3, r0
 8005e66:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8005e68:	002a      	movs	r2, r5
 8005e6a:	18bb      	adds	r3, r7, r2
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	2b03      	cmp	r3, #3
 8005e70:	d002      	beq.n	8005e78 <nrf24_reset_EN+0x314>
		{
			return NRF_ret_val_EN;
 8005e72:	18bb      	adds	r3, r7, r2
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	e044      	b.n	8005f02 <nrf24_reset_EN+0x39e>
		}
		NRF_ret_val_EN = NRF_WriteReg_EN(RX_PW_P5_REG, 0);
 8005e78:	251f      	movs	r5, #31
 8005e7a:	197c      	adds	r4, r7, r5
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	2016      	movs	r0, #22
 8005e80:	f7ff fd78 	bl	8005974 <NRF_WriteReg_EN>
 8005e84:	0003      	movs	r3, r0
 8005e86:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8005e88:	002a      	movs	r2, r5
 8005e8a:	18bb      	adds	r3, r7, r2
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	2b03      	cmp	r3, #3
 8005e90:	d002      	beq.n	8005e98 <nrf24_reset_EN+0x334>
		{
			return NRF_ret_val_EN;
 8005e92:	18bb      	adds	r3, r7, r2
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	e034      	b.n	8005f02 <nrf24_reset_EN+0x39e>
		}
		NRF_ret_val_EN = NRF_WriteReg_EN(FIFO_STATUS_REG, 0x11);
 8005e98:	251f      	movs	r5, #31
 8005e9a:	197c      	adds	r4, r7, r5
 8005e9c:	2111      	movs	r1, #17
 8005e9e:	2017      	movs	r0, #23
 8005ea0:	f7ff fd68 	bl	8005974 <NRF_WriteReg_EN>
 8005ea4:	0003      	movs	r3, r0
 8005ea6:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8005ea8:	002a      	movs	r2, r5
 8005eaa:	18bb      	adds	r3, r7, r2
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d002      	beq.n	8005eb8 <nrf24_reset_EN+0x354>
		{
			return NRF_ret_val_EN;
 8005eb2:	18bb      	adds	r3, r7, r2
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	e024      	b.n	8005f02 <nrf24_reset_EN+0x39e>
		}
		NRF_ret_val_EN = NRF_WriteReg_EN(DYNPD_REG, 0);
 8005eb8:	251f      	movs	r5, #31
 8005eba:	197c      	adds	r4, r7, r5
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	201c      	movs	r0, #28
 8005ec0:	f7ff fd58 	bl	8005974 <NRF_WriteReg_EN>
 8005ec4:	0003      	movs	r3, r0
 8005ec6:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8005ec8:	002a      	movs	r2, r5
 8005eca:	18bb      	adds	r3, r7, r2
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	2b03      	cmp	r3, #3
 8005ed0:	d006      	beq.n	8005ee0 <nrf24_reset_EN+0x37c>
		{
			return NRF_ret_val_EN;
 8005ed2:	18bb      	adds	r3, r7, r2
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	e014      	b.n	8005f02 <nrf24_reset_EN+0x39e>
 8005ed8:	08007950 	.word	0x08007950
 8005edc:	08007958 	.word	0x08007958
		}
		NRF_ret_val_EN = NRF_WriteReg_EN(FEATURE_REG, 0);
 8005ee0:	251f      	movs	r5, #31
 8005ee2:	197c      	adds	r4, r7, r5
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	201d      	movs	r0, #29
 8005ee8:	f7ff fd44 	bl	8005974 <NRF_WriteReg_EN>
 8005eec:	0003      	movs	r3, r0
 8005eee:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8005ef0:	002a      	movs	r2, r5
 8005ef2:	18bb      	adds	r3, r7, r2
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	d002      	beq.n	8005f00 <nrf24_reset_EN+0x39c>
		{
			return NRF_ret_val_EN;
 8005efa:	18bb      	adds	r3, r7, r2
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	e000      	b.n	8005f02 <nrf24_reset_EN+0x39e>
		}
	}
	return NRF_OK_EN;
 8005f00:	2303      	movs	r3, #3
}
 8005f02:	0018      	movs	r0, r3
 8005f04:	46bd      	mov	sp, r7
 8005f06:	b008      	add	sp, #32
 8005f08:	bdb0      	pop	{r4, r5, r7, pc}
 8005f0a:	46c0      	nop			@ (mov r8, r8)

08005f0c <NRF24_Init_registers_EN>:

static NRF_ret_val_en NRF24_Init_registers_EN(void)
{
 8005f0c:	b590      	push	{r4, r7, lr}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
	NRF_ret_val_en NRF_ret_val_EN;

	// disable the chip before configuring the device
	NRF_HAL_function_local_STR.setCe_PF(false);
 8005f12:	4b3e      	ldr	r3, [pc, #248]	@ (800600c <NRF24_Init_registers_EN+0x100>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2000      	movs	r0, #0
 8005f18:	4798      	blx	r3

	// reset everything
	NRF_ret_val_EN = nrf24_reset_EN(0);
 8005f1a:	1dfc      	adds	r4, r7, #7
 8005f1c:	2000      	movs	r0, #0
 8005f1e:	f7ff fe21 	bl	8005b64 <nrf24_reset_EN>
 8005f22:	0003      	movs	r3, r0
 8005f24:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 8005f26:	1dfb      	adds	r3, r7, #7
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	2b03      	cmp	r3, #3
 8005f2c:	d002      	beq.n	8005f34 <NRF24_Init_registers_EN+0x28>
	{
		return NRF_ret_val_EN;
 8005f2e:	1dfb      	adds	r3, r7, #7
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	e066      	b.n	8006002 <NRF24_Init_registers_EN+0xf6>
	}

	NRF_ret_val_EN = NRF_WriteReg_EN(CONFIG_REG, 0);  // will be configured later
 8005f34:	1dfc      	adds	r4, r7, #7
 8005f36:	2100      	movs	r1, #0
 8005f38:	2000      	movs	r0, #0
 8005f3a:	f7ff fd1b 	bl	8005974 <NRF_WriteReg_EN>
 8005f3e:	0003      	movs	r3, r0
 8005f40:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 8005f42:	1dfb      	adds	r3, r7, #7
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	2b03      	cmp	r3, #3
 8005f48:	d002      	beq.n	8005f50 <NRF24_Init_registers_EN+0x44>
	{
		return NRF_ret_val_EN;
 8005f4a:	1dfb      	adds	r3, r7, #7
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	e058      	b.n	8006002 <NRF24_Init_registers_EN+0xf6>
	}

	NRF_ret_val_EN = NRF_WriteReg_EN(EN_AA_REG, 0);  // No Auto ACK
 8005f50:	1dfc      	adds	r4, r7, #7
 8005f52:	2100      	movs	r1, #0
 8005f54:	2001      	movs	r0, #1
 8005f56:	f7ff fd0d 	bl	8005974 <NRF_WriteReg_EN>
 8005f5a:	0003      	movs	r3, r0
 8005f5c:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 8005f5e:	1dfb      	adds	r3, r7, #7
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	2b03      	cmp	r3, #3
 8005f64:	d002      	beq.n	8005f6c <NRF24_Init_registers_EN+0x60>
	{
		return NRF_ret_val_EN;
 8005f66:	1dfb      	adds	r3, r7, #7
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	e04a      	b.n	8006002 <NRF24_Init_registers_EN+0xf6>
	}

	NRF_ret_val_EN = NRF_WriteReg_EN(EN_RXADDR_REG, 0);  // Not Enabling any data pipe right now
 8005f6c:	1dfc      	adds	r4, r7, #7
 8005f6e:	2100      	movs	r1, #0
 8005f70:	2002      	movs	r0, #2
 8005f72:	f7ff fcff 	bl	8005974 <NRF_WriteReg_EN>
 8005f76:	0003      	movs	r3, r0
 8005f78:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 8005f7a:	1dfb      	adds	r3, r7, #7
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	2b03      	cmp	r3, #3
 8005f80:	d002      	beq.n	8005f88 <NRF24_Init_registers_EN+0x7c>
	{
		return NRF_ret_val_EN;
 8005f82:	1dfb      	adds	r3, r7, #7
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	e03c      	b.n	8006002 <NRF24_Init_registers_EN+0xf6>
	}

	NRF_ret_val_EN = NRF_WriteReg_EN(SETUP_AW_REG, 0x03);  // 5 Bytes for the TX/RX address
 8005f88:	1dfc      	adds	r4, r7, #7
 8005f8a:	2103      	movs	r1, #3
 8005f8c:	2003      	movs	r0, #3
 8005f8e:	f7ff fcf1 	bl	8005974 <NRF_WriteReg_EN>
 8005f92:	0003      	movs	r3, r0
 8005f94:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 8005f96:	1dfb      	adds	r3, r7, #7
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	2b03      	cmp	r3, #3
 8005f9c:	d002      	beq.n	8005fa4 <NRF24_Init_registers_EN+0x98>
	{
		return NRF_ret_val_EN;
 8005f9e:	1dfb      	adds	r3, r7, #7
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	e02e      	b.n	8006002 <NRF24_Init_registers_EN+0xf6>
	}

	NRF_ret_val_EN = NRF_WriteReg_EN(SETUP_RETR_REG, 0);   // No retransmission
 8005fa4:	1dfc      	adds	r4, r7, #7
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	2004      	movs	r0, #4
 8005faa:	f7ff fce3 	bl	8005974 <NRF_WriteReg_EN>
 8005fae:	0003      	movs	r3, r0
 8005fb0:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 8005fb2:	1dfb      	adds	r3, r7, #7
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	2b03      	cmp	r3, #3
 8005fb8:	d002      	beq.n	8005fc0 <NRF24_Init_registers_EN+0xb4>
	{
		return NRF_ret_val_EN;
 8005fba:	1dfb      	adds	r3, r7, #7
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	e020      	b.n	8006002 <NRF24_Init_registers_EN+0xf6>
	}

	NRF_ret_val_EN = NRF_WriteReg_EN(RF_CH_REG, 0);  // will be setup during Tx or RX
 8005fc0:	1dfc      	adds	r4, r7, #7
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	2005      	movs	r0, #5
 8005fc6:	f7ff fcd5 	bl	8005974 <NRF_WriteReg_EN>
 8005fca:	0003      	movs	r3, r0
 8005fcc:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 8005fce:	1dfb      	adds	r3, r7, #7
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	2b03      	cmp	r3, #3
 8005fd4:	d002      	beq.n	8005fdc <NRF24_Init_registers_EN+0xd0>
	{
		return NRF_ret_val_EN;
 8005fd6:	1dfb      	adds	r3, r7, #7
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	e012      	b.n	8006002 <NRF24_Init_registers_EN+0xf6>
	}

	NRF_ret_val_EN = NRF_WriteReg_EN(RF_SETUP_REG, 0x0E);   // Power= 0db, data rate = 2Mbps
 8005fdc:	1dfc      	adds	r4, r7, #7
 8005fde:	210e      	movs	r1, #14
 8005fe0:	2006      	movs	r0, #6
 8005fe2:	f7ff fcc7 	bl	8005974 <NRF_WriteReg_EN>
 8005fe6:	0003      	movs	r3, r0
 8005fe8:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 8005fea:	1dfb      	adds	r3, r7, #7
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	d002      	beq.n	8005ff8 <NRF24_Init_registers_EN+0xec>
	{
		return NRF_ret_val_EN;
 8005ff2:	1dfb      	adds	r3, r7, #7
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	e004      	b.n	8006002 <NRF24_Init_registers_EN+0xf6>
	}

	// Enable the chip after configuring the device
	NRF_HAL_function_local_STR.setCe_PF(true);
 8005ff8:	4b04      	ldr	r3, [pc, #16]	@ (800600c <NRF24_Init_registers_EN+0x100>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2001      	movs	r0, #1
 8005ffe:	4798      	blx	r3

	return NRF_OK_EN;
 8006000:	2303      	movs	r3, #3
}
 8006002:	0018      	movs	r0, r3
 8006004:	46bd      	mov	sp, r7
 8006006:	b003      	add	sp, #12
 8006008:	bd90      	pop	{r4, r7, pc}
 800600a:	46c0      	nop			@ (mov r8, r8)
 800600c:	200002dc 	.word	0x200002dc

08006010 <NRF24_TxMode_EN>:


// set up the Tx mode
NRF_ret_val_en NRF24_TxMode_EN(uint8_t *Address_U8P, uint8_t channel_U8)
{
 8006010:	b5b0      	push	{r4, r5, r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	000a      	movs	r2, r1
 800601a:	1cfb      	adds	r3, r7, #3
 800601c:	701a      	strb	r2, [r3, #0]
	if(NRF_isInit_B == false)
 800601e:	4b39      	ldr	r3, [pc, #228]	@ (8006104 <NRF24_TxMode_EN+0xf4>)
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	2201      	movs	r2, #1
 8006024:	4053      	eors	r3, r2
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b00      	cmp	r3, #0
 800602a:	d001      	beq.n	8006030 <NRF24_TxMode_EN+0x20>
	{
		return NRF_NOT_INIT_EN;
 800602c:	2300      	movs	r3, #0
 800602e:	e065      	b.n	80060fc <NRF24_TxMode_EN+0xec>
	}

	NRF_ret_val_en NRF_ret_val_EN;

	NRF_ret_val_EN = NRF24_Init_registers_EN();
 8006030:	250f      	movs	r5, #15
 8006032:	197c      	adds	r4, r7, r5
 8006034:	f7ff ff6a 	bl	8005f0c <NRF24_Init_registers_EN>
 8006038:	0003      	movs	r3, r0
 800603a:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 800603c:	002a      	movs	r2, r5
 800603e:	18bb      	adds	r3, r7, r2
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	2b03      	cmp	r3, #3
 8006044:	d002      	beq.n	800604c <NRF24_TxMode_EN+0x3c>
	{
		return NRF_ret_val_EN;
 8006046:	18bb      	adds	r3, r7, r2
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	e057      	b.n	80060fc <NRF24_TxMode_EN+0xec>
	}

	// disable the chip before configuring the device
	NRF_HAL_function_local_STR.setCe_PF(false);
 800604c:	4b2e      	ldr	r3, [pc, #184]	@ (8006108 <NRF24_TxMode_EN+0xf8>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2000      	movs	r0, #0
 8006052:	4798      	blx	r3

	NRF_ret_val_EN = NRF_WriteReg_EN (RF_CH_REG, channel_U8);  // select the channel
 8006054:	250f      	movs	r5, #15
 8006056:	197c      	adds	r4, r7, r5
 8006058:	1cfb      	adds	r3, r7, #3
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	0019      	movs	r1, r3
 800605e:	2005      	movs	r0, #5
 8006060:	f7ff fc88 	bl	8005974 <NRF_WriteReg_EN>
 8006064:	0003      	movs	r3, r0
 8006066:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 8006068:	197b      	adds	r3, r7, r5
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	2b03      	cmp	r3, #3
 800606e:	d002      	beq.n	8006076 <NRF24_TxMode_EN+0x66>
	{
		return NRF_ret_val_EN;
 8006070:	197b      	adds	r3, r7, r5
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	e042      	b.n	80060fc <NRF24_TxMode_EN+0xec>
	}

	NRF_ret_val_EN = NRF_WriteReg_Multi_EN(TX_ADDR_REG, (uint8_t *)Address_U8P, 5);  // Write the TX address
 8006076:	250f      	movs	r5, #15
 8006078:	197c      	adds	r4, r7, r5
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2205      	movs	r2, #5
 800607e:	0019      	movs	r1, r3
 8006080:	2010      	movs	r0, #16
 8006082:	f7ff fca3 	bl	80059cc <NRF_WriteReg_Multi_EN>
 8006086:	0003      	movs	r3, r0
 8006088:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 800608a:	197b      	adds	r3, r7, r5
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	2b03      	cmp	r3, #3
 8006090:	d002      	beq.n	8006098 <NRF24_TxMode_EN+0x88>
	{
		return NRF_ret_val_EN;
 8006092:	197b      	adds	r3, r7, r5
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	e031      	b.n	80060fc <NRF24_TxMode_EN+0xec>
	}


	// power up the device
	uint8_t config = 0;
 8006098:	210e      	movs	r1, #14
 800609a:	187b      	adds	r3, r7, r1
 800609c:	2200      	movs	r2, #0
 800609e:	701a      	strb	r2, [r3, #0]
	NRF_ret_val_EN = nrf24_ReadReg_EN(CONFIG_REG,&config);
 80060a0:	250f      	movs	r5, #15
 80060a2:	197c      	adds	r4, r7, r5
 80060a4:	187b      	adds	r3, r7, r1
 80060a6:	0019      	movs	r1, r3
 80060a8:	2000      	movs	r0, #0
 80060aa:	f7ff fd1b 	bl	8005ae4 <nrf24_ReadReg_EN>
 80060ae:	0003      	movs	r3, r0
 80060b0:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 80060b2:	197b      	adds	r3, r7, r5
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	2b03      	cmp	r3, #3
 80060b8:	d002      	beq.n	80060c0 <NRF24_TxMode_EN+0xb0>
	{
		return NRF_ret_val_EN;
 80060ba:	197b      	adds	r3, r7, r5
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	e01d      	b.n	80060fc <NRF24_TxMode_EN+0xec>
	}

	config = config | (1<<1);   // write 1 in the PWR_UP bit
 80060c0:	210e      	movs	r1, #14
 80060c2:	187b      	adds	r3, r7, r1
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	2202      	movs	r2, #2
 80060c8:	4313      	orrs	r3, r2
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	187b      	adds	r3, r7, r1
 80060ce:	701a      	strb	r2, [r3, #0]

	NRF_ret_val_EN = NRF_WriteReg_EN (CONFIG_REG, config);
 80060d0:	187b      	adds	r3, r7, r1
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	250f      	movs	r5, #15
 80060d6:	197c      	adds	r4, r7, r5
 80060d8:	0019      	movs	r1, r3
 80060da:	2000      	movs	r0, #0
 80060dc:	f7ff fc4a 	bl	8005974 <NRF_WriteReg_EN>
 80060e0:	0003      	movs	r3, r0
 80060e2:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 80060e4:	197b      	adds	r3, r7, r5
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	2b03      	cmp	r3, #3
 80060ea:	d002      	beq.n	80060f2 <NRF24_TxMode_EN+0xe2>
	{
		return NRF_ret_val_EN;
 80060ec:	197b      	adds	r3, r7, r5
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	e004      	b.n	80060fc <NRF24_TxMode_EN+0xec>
	}

	// Enable the chip after configuring the device
	NRF_HAL_function_local_STR.setCe_PF(true);
 80060f2:	4b05      	ldr	r3, [pc, #20]	@ (8006108 <NRF24_TxMode_EN+0xf8>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2001      	movs	r0, #1
 80060f8:	4798      	blx	r3

	return NRF_OK_EN;
 80060fa:	2303      	movs	r3, #3
}
 80060fc:	0018      	movs	r0, r3
 80060fe:	46bd      	mov	sp, r7
 8006100:	b004      	add	sp, #16
 8006102:	bdb0      	pop	{r4, r5, r7, pc}
 8006104:	200002f4 	.word	0x200002f4
 8006108:	200002dc 	.word	0x200002dc

0800610c <NRF24_Transmit_EN>:


// transmit the data
NRF_ret_val_en NRF24_Transmit_EN(uint8_t *data_U8A, uint8_t size_data_U8)
{
 800610c:	b5b0      	push	{r4, r5, r7, lr}
 800610e:	b08c      	sub	sp, #48	@ 0x30
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	000a      	movs	r2, r1
 8006116:	1cfb      	adds	r3, r7, #3
 8006118:	701a      	strb	r2, [r3, #0]
	if(NRF_isInit_B == false)
 800611a:	4b44      	ldr	r3, [pc, #272]	@ (800622c <NRF24_Transmit_EN+0x120>)
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	2201      	movs	r2, #1
 8006120:	4053      	eors	r3, r2
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2b00      	cmp	r3, #0
 8006126:	d001      	beq.n	800612c <NRF24_Transmit_EN+0x20>
	{
		return NRF_NOT_INIT_EN;
 8006128:	2300      	movs	r3, #0
 800612a:	e07b      	b.n	8006224 <NRF24_Transmit_EN+0x118>
	}
	if(size_data_U8>cSIZE_BUFFER_TX_MAX_U8)
 800612c:	1cfb      	adds	r3, r7, #3
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2b20      	cmp	r3, #32
 8006132:	d901      	bls.n	8006138 <NRF24_Transmit_EN+0x2c>
	{
		return NRF_SIZE_BUFFER_TX_TOO_LARGE_EN;
 8006134:	2302      	movs	r3, #2
 8006136:	e075      	b.n	8006224 <NRF24_Transmit_EN+0x118>
	}

	uint8_t cmdtosend[cSIZE_BUFFER_TX_MAX_U8+1] = {0};
 8006138:	240c      	movs	r4, #12
 800613a:	193b      	adds	r3, r7, r4
 800613c:	2200      	movs	r2, #0
 800613e:	601a      	str	r2, [r3, #0]
 8006140:	3304      	adds	r3, #4
 8006142:	221d      	movs	r2, #29
 8006144:	2100      	movs	r1, #0
 8006146:	0018      	movs	r0, r3
 8006148:	f000 ff70 	bl	800702c <memset>
	NRF_ret_val_en NRF_ret_val_EN;
	HAL_ret_val_en HAL_ret_val_EN;
	uint8_t fifostatus = 0;
 800614c:	230b      	movs	r3, #11
 800614e:	18fb      	adds	r3, r7, r3
 8006150:	2200      	movs	r2, #0
 8006152:	701a      	strb	r2, [r3, #0]

	// payload command
	cmdtosend[0] = W_TX_PAYLOAD_REG;
 8006154:	193b      	adds	r3, r7, r4
 8006156:	22a0      	movs	r2, #160	@ 0xa0
 8006158:	701a      	strb	r2, [r3, #0]
	for (uint8_t index_U8=0 ; index_U8<size_data_U8 ; index_U8++)
 800615a:	232f      	movs	r3, #47	@ 0x2f
 800615c:	18fb      	adds	r3, r7, r3
 800615e:	2200      	movs	r2, #0
 8006160:	701a      	strb	r2, [r3, #0]
 8006162:	e010      	b.n	8006186 <NRF24_Transmit_EN+0x7a>
	{
		cmdtosend[index_U8+1] = data_U8A[index_U8];
 8006164:	202f      	movs	r0, #47	@ 0x2f
 8006166:	183b      	adds	r3, r7, r0
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	18d2      	adds	r2, r2, r3
 800616e:	183b      	adds	r3, r7, r0
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	3301      	adds	r3, #1
 8006174:	7811      	ldrb	r1, [r2, #0]
 8006176:	220c      	movs	r2, #12
 8006178:	18ba      	adds	r2, r7, r2
 800617a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t index_U8=0 ; index_U8<size_data_U8 ; index_U8++)
 800617c:	183b      	adds	r3, r7, r0
 800617e:	781a      	ldrb	r2, [r3, #0]
 8006180:	183b      	adds	r3, r7, r0
 8006182:	3201      	adds	r2, #1
 8006184:	701a      	strb	r2, [r3, #0]
 8006186:	232f      	movs	r3, #47	@ 0x2f
 8006188:	18fa      	adds	r2, r7, r3
 800618a:	1cfb      	adds	r3, r7, #3
 800618c:	7812      	ldrb	r2, [r2, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	429a      	cmp	r2, r3
 8006192:	d3e7      	bcc.n	8006164 <NRF24_Transmit_EN+0x58>
	}
	HAL_ret_val_EN = NRF_HAL_function_local_STR.writeSpiValue_EN_PF(cmdtosend, size_data_U8+1);
 8006194:	4b26      	ldr	r3, [pc, #152]	@ (8006230 <NRF24_Transmit_EN+0x124>)
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	1cfa      	adds	r2, r7, #3
 800619a:	7812      	ldrb	r2, [r2, #0]
 800619c:	b292      	uxth	r2, r2
 800619e:	3201      	adds	r2, #1
 80061a0:	b291      	uxth	r1, r2
 80061a2:	252e      	movs	r5, #46	@ 0x2e
 80061a4:	197c      	adds	r4, r7, r5
 80061a6:	220c      	movs	r2, #12
 80061a8:	18ba      	adds	r2, r7, r2
 80061aa:	0010      	movs	r0, r2
 80061ac:	4798      	blx	r3
 80061ae:	0003      	movs	r3, r0
 80061b0:	7023      	strb	r3, [r4, #0]
	if(HAL_ret_val_EN != HAL_SPI_WRITE_OK_EN)
 80061b2:	197b      	adds	r3, r7, r5
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	2b03      	cmp	r3, #3
 80061b8:	d001      	beq.n	80061be <NRF24_Transmit_EN+0xb2>
	{
		return NRF_SPI_ERROR_EN;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e032      	b.n	8006224 <NRF24_Transmit_EN+0x118>
	}

	NRF_HAL_function_local_STR.delay_ms_PF(1);
 80061be:	4b1c      	ldr	r3, [pc, #112]	@ (8006230 <NRF24_Transmit_EN+0x124>)
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	2001      	movs	r0, #1
 80061c4:	4798      	blx	r3

	NRF_ret_val_EN = nrf24_ReadReg_EN(FIFO_STATUS_REG, &fifostatus);
 80061c6:	252d      	movs	r5, #45	@ 0x2d
 80061c8:	197c      	adds	r4, r7, r5
 80061ca:	230b      	movs	r3, #11
 80061cc:	18fb      	adds	r3, r7, r3
 80061ce:	0019      	movs	r1, r3
 80061d0:	2017      	movs	r0, #23
 80061d2:	f7ff fc87 	bl	8005ae4 <nrf24_ReadReg_EN>
 80061d6:	0003      	movs	r3, r0
 80061d8:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 80061da:	197b      	adds	r3, r7, r5
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	2b03      	cmp	r3, #3
 80061e0:	d002      	beq.n	80061e8 <NRF24_Transmit_EN+0xdc>
	{
		return NRF_ret_val_EN;
 80061e2:	197b      	adds	r3, r7, r5
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	e01d      	b.n	8006224 <NRF24_Transmit_EN+0x118>
	}

	// check the fourth bit of FIFO_STATUS to know if the TX fifo is empty
	if ((fifostatus&(1<<4)) && (!(fifostatus&(1<<3))))
 80061e8:	210b      	movs	r1, #11
 80061ea:	187b      	adds	r3, r7, r1
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	001a      	movs	r2, r3
 80061f0:	2310      	movs	r3, #16
 80061f2:	4013      	ands	r3, r2
 80061f4:	d015      	beq.n	8006222 <NRF24_Transmit_EN+0x116>
 80061f6:	187b      	adds	r3, r7, r1
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	001a      	movs	r2, r3
 80061fc:	2308      	movs	r3, #8
 80061fe:	4013      	ands	r3, r2
 8006200:	d10f      	bne.n	8006222 <NRF24_Transmit_EN+0x116>
	{
		NRF_ret_val_EN = nrfsendCmd_EN(FLUSH_TX_REG);
 8006202:	252d      	movs	r5, #45	@ 0x2d
 8006204:	197c      	adds	r4, r7, r5
 8006206:	20e1      	movs	r0, #225	@ 0xe1
 8006208:	f7ff fc8e 	bl	8005b28 <nrfsendCmd_EN>
 800620c:	0003      	movs	r3, r0
 800620e:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 8006210:	197b      	adds	r3, r7, r5
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	2b03      	cmp	r3, #3
 8006216:	d002      	beq.n	800621e <NRF24_Transmit_EN+0x112>
		{
			return NRF_ret_val_EN;
 8006218:	197b      	adds	r3, r7, r5
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	e002      	b.n	8006224 <NRF24_Transmit_EN+0x118>
		}
		return NRF_OK_EN;
 800621e:	2303      	movs	r3, #3
 8006220:	e000      	b.n	8006224 <NRF24_Transmit_EN+0x118>
	}
	return NRF_OK_EN;
 8006222:	2303      	movs	r3, #3
}
 8006224:	0018      	movs	r0, r3
 8006226:	46bd      	mov	sp, r7
 8006228:	b00c      	add	sp, #48	@ 0x30
 800622a:	bdb0      	pop	{r4, r5, r7, pc}
 800622c:	200002f4 	.word	0x200002f4
 8006230:	200002dc 	.word	0x200002dc

08006234 <NRF24_RxMode_EN>:


NRF_ret_val_en NRF24_RxMode_EN (uint8_t *Address_U8P, uint8_t channel_U8)
{
 8006234:	b5b0      	push	{r4, r5, r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	000a      	movs	r2, r1
 800623e:	1cfb      	adds	r3, r7, #3
 8006240:	701a      	strb	r2, [r3, #0]
	if(NRF_isInit_B == false)
 8006242:	4b5b      	ldr	r3, [pc, #364]	@ (80063b0 <NRF24_RxMode_EN+0x17c>)
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	2201      	movs	r2, #1
 8006248:	4053      	eors	r3, r2
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b00      	cmp	r3, #0
 800624e:	d001      	beq.n	8006254 <NRF24_RxMode_EN+0x20>
	{
		return NRF_NOT_INIT_EN;
 8006250:	2300      	movs	r3, #0
 8006252:	e0a9      	b.n	80063a8 <NRF24_RxMode_EN+0x174>
	}

	NRF_ret_val_en NRF_ret_val_EN;
	uint8_t en_rxaddr = 0;
 8006254:	230e      	movs	r3, #14
 8006256:	18fb      	adds	r3, r7, r3
 8006258:	2200      	movs	r2, #0
 800625a:	701a      	strb	r2, [r3, #0]
	uint8_t config = 0;
 800625c:	230d      	movs	r3, #13
 800625e:	18fb      	adds	r3, r7, r3
 8006260:	2200      	movs	r2, #0
 8006262:	701a      	strb	r2, [r3, #0]

	NRF_ret_val_EN = NRF24_Init_registers_EN();
 8006264:	250f      	movs	r5, #15
 8006266:	197c      	adds	r4, r7, r5
 8006268:	f7ff fe50 	bl	8005f0c <NRF24_Init_registers_EN>
 800626c:	0003      	movs	r3, r0
 800626e:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 8006270:	002a      	movs	r2, r5
 8006272:	18bb      	adds	r3, r7, r2
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	2b03      	cmp	r3, #3
 8006278:	d002      	beq.n	8006280 <NRF24_RxMode_EN+0x4c>
	{
		return NRF_ret_val_EN;
 800627a:	18bb      	adds	r3, r7, r2
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	e093      	b.n	80063a8 <NRF24_RxMode_EN+0x174>
	}

	// disable the chip before configuring the device
	NRF_HAL_function_local_STR.setCe_PF(false);
 8006280:	4b4c      	ldr	r3, [pc, #304]	@ (80063b4 <NRF24_RxMode_EN+0x180>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2000      	movs	r0, #0
 8006286:	4798      	blx	r3

	NRF_ret_val_EN = nrf24_reset_EN(STATUS_REG);
 8006288:	250f      	movs	r5, #15
 800628a:	197c      	adds	r4, r7, r5
 800628c:	2007      	movs	r0, #7
 800628e:	f7ff fc69 	bl	8005b64 <nrf24_reset_EN>
 8006292:	0003      	movs	r3, r0
 8006294:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 8006296:	197b      	adds	r3, r7, r5
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	2b03      	cmp	r3, #3
 800629c:	d001      	beq.n	80062a2 <NRF24_RxMode_EN+0x6e>
	{
		return NRF_SPI_ERROR_EN;
 800629e:	2301      	movs	r3, #1
 80062a0:	e082      	b.n	80063a8 <NRF24_RxMode_EN+0x174>
	}

	NRF_ret_val_EN = NRF_WriteReg_EN(RF_CH_REG, channel_U8);  // select the channel
 80062a2:	250f      	movs	r5, #15
 80062a4:	197c      	adds	r4, r7, r5
 80062a6:	1cfb      	adds	r3, r7, #3
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	0019      	movs	r1, r3
 80062ac:	2005      	movs	r0, #5
 80062ae:	f7ff fb61 	bl	8005974 <NRF_WriteReg_EN>
 80062b2:	0003      	movs	r3, r0
 80062b4:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 80062b6:	197b      	adds	r3, r7, r5
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	2b03      	cmp	r3, #3
 80062bc:	d001      	beq.n	80062c2 <NRF24_RxMode_EN+0x8e>
	{
		return NRF_SPI_ERROR_EN;
 80062be:	2301      	movs	r3, #1
 80062c0:	e072      	b.n	80063a8 <NRF24_RxMode_EN+0x174>
	}

	// select data pipe 2
	NRF_ret_val_EN = nrf24_ReadReg_EN(EN_RXADDR_REG,&en_rxaddr);
 80062c2:	250f      	movs	r5, #15
 80062c4:	197c      	adds	r4, r7, r5
 80062c6:	230e      	movs	r3, #14
 80062c8:	18fb      	adds	r3, r7, r3
 80062ca:	0019      	movs	r1, r3
 80062cc:	2002      	movs	r0, #2
 80062ce:	f7ff fc09 	bl	8005ae4 <nrf24_ReadReg_EN>
 80062d2:	0003      	movs	r3, r0
 80062d4:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 80062d6:	197b      	adds	r3, r7, r5
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	2b03      	cmp	r3, #3
 80062dc:	d001      	beq.n	80062e2 <NRF24_RxMode_EN+0xae>
	{
		return NRF_SPI_ERROR_EN;
 80062de:	2301      	movs	r3, #1
 80062e0:	e062      	b.n	80063a8 <NRF24_RxMode_EN+0x174>
	}

	en_rxaddr = en_rxaddr | (1<<1);
 80062e2:	210e      	movs	r1, #14
 80062e4:	187b      	adds	r3, r7, r1
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	2202      	movs	r2, #2
 80062ea:	4313      	orrs	r3, r2
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	187b      	adds	r3, r7, r1
 80062f0:	701a      	strb	r2, [r3, #0]

	NRF_ret_val_EN = NRF_WriteReg_EN(EN_RXADDR_REG, en_rxaddr);
 80062f2:	187b      	adds	r3, r7, r1
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	250f      	movs	r5, #15
 80062f8:	197c      	adds	r4, r7, r5
 80062fa:	0019      	movs	r1, r3
 80062fc:	2002      	movs	r0, #2
 80062fe:	f7ff fb39 	bl	8005974 <NRF_WriteReg_EN>
 8006302:	0003      	movs	r3, r0
 8006304:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 8006306:	197b      	adds	r3, r7, r5
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	2b03      	cmp	r3, #3
 800630c:	d001      	beq.n	8006312 <NRF24_RxMode_EN+0xde>
	{
		return NRF_SPI_ERROR_EN;
 800630e:	2301      	movs	r3, #1
 8006310:	e04a      	b.n	80063a8 <NRF24_RxMode_EN+0x174>
	}

	NRF_ret_val_EN = NRF_WriteReg_Multi_EN(RX_ADDR_P1_REG, Address_U8P, 5);  // Write the Pipe1 address
 8006312:	250f      	movs	r5, #15
 8006314:	197c      	adds	r4, r7, r5
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2205      	movs	r2, #5
 800631a:	0019      	movs	r1, r3
 800631c:	200b      	movs	r0, #11
 800631e:	f7ff fb55 	bl	80059cc <NRF_WriteReg_Multi_EN>
 8006322:	0003      	movs	r3, r0
 8006324:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 8006326:	197b      	adds	r3, r7, r5
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	2b03      	cmp	r3, #3
 800632c:	d001      	beq.n	8006332 <NRF24_RxMode_EN+0xfe>
	{
		return NRF_SPI_ERROR_EN;
 800632e:	2301      	movs	r3, #1
 8006330:	e03a      	b.n	80063a8 <NRF24_RxMode_EN+0x174>
	}

	//NRF_WriteReg_EN(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address

	NRF_ret_val_EN = NRF_WriteReg_EN(RX_PW_P1_REG, 32);   // 32 bit payload size for pipe 2
 8006332:	250f      	movs	r5, #15
 8006334:	197c      	adds	r4, r7, r5
 8006336:	2120      	movs	r1, #32
 8006338:	2012      	movs	r0, #18
 800633a:	f7ff fb1b 	bl	8005974 <NRF_WriteReg_EN>
 800633e:	0003      	movs	r3, r0
 8006340:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 8006342:	197b      	adds	r3, r7, r5
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	2b03      	cmp	r3, #3
 8006348:	d001      	beq.n	800634e <NRF24_RxMode_EN+0x11a>
	{
		return NRF_SPI_ERROR_EN;
 800634a:	2301      	movs	r3, #1
 800634c:	e02c      	b.n	80063a8 <NRF24_RxMode_EN+0x174>
	}

	// power up the device in Rx mode
	NRF_ret_val_EN = nrf24_ReadReg_EN(CONFIG_REG,&config);
 800634e:	250f      	movs	r5, #15
 8006350:	197c      	adds	r4, r7, r5
 8006352:	230d      	movs	r3, #13
 8006354:	18fb      	adds	r3, r7, r3
 8006356:	0019      	movs	r1, r3
 8006358:	2000      	movs	r0, #0
 800635a:	f7ff fbc3 	bl	8005ae4 <nrf24_ReadReg_EN>
 800635e:	0003      	movs	r3, r0
 8006360:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 8006362:	197b      	adds	r3, r7, r5
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	2b03      	cmp	r3, #3
 8006368:	d001      	beq.n	800636e <NRF24_RxMode_EN+0x13a>
	{
		return NRF_SPI_ERROR_EN;
 800636a:	2301      	movs	r3, #1
 800636c:	e01c      	b.n	80063a8 <NRF24_RxMode_EN+0x174>
	}

	config = config | (1<<1) | (1<<0);
 800636e:	210d      	movs	r1, #13
 8006370:	187b      	adds	r3, r7, r1
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	2203      	movs	r2, #3
 8006376:	4313      	orrs	r3, r2
 8006378:	b2da      	uxtb	r2, r3
 800637a:	187b      	adds	r3, r7, r1
 800637c:	701a      	strb	r2, [r3, #0]

	NRF_ret_val_EN = NRF_WriteReg_EN(CONFIG_REG, config);
 800637e:	187b      	adds	r3, r7, r1
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	250f      	movs	r5, #15
 8006384:	197c      	adds	r4, r7, r5
 8006386:	0019      	movs	r1, r3
 8006388:	2000      	movs	r0, #0
 800638a:	f7ff faf3 	bl	8005974 <NRF_WriteReg_EN>
 800638e:	0003      	movs	r3, r0
 8006390:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 8006392:	197b      	adds	r3, r7, r5
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	2b03      	cmp	r3, #3
 8006398:	d001      	beq.n	800639e <NRF24_RxMode_EN+0x16a>
	{
		return NRF_SPI_ERROR_EN;
 800639a:	2301      	movs	r3, #1
 800639c:	e004      	b.n	80063a8 <NRF24_RxMode_EN+0x174>
	}


	// Enable the chip after configuring the device
	NRF_HAL_function_local_STR.setCe_PF(true);
 800639e:	4b05      	ldr	r3, [pc, #20]	@ (80063b4 <NRF24_RxMode_EN+0x180>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2001      	movs	r0, #1
 80063a4:	4798      	blx	r3
	return NRF_OK_EN;
 80063a6:	2303      	movs	r3, #3
}
 80063a8:	0018      	movs	r0, r3
 80063aa:	46bd      	mov	sp, r7
 80063ac:	b004      	add	sp, #16
 80063ae:	bdb0      	pop	{r4, r5, r7, pc}
 80063b0:	200002f4 	.word	0x200002f4
 80063b4:	200002dc 	.word	0x200002dc

080063b8 <NRF24_isDataAvailable_EN>:


NRF_ret_val_en NRF24_isDataAvailable_EN(uint8_t pipenum_U8)
{
 80063b8:	b5b0      	push	{r4, r5, r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	0002      	movs	r2, r0
 80063c0:	1dfb      	adds	r3, r7, #7
 80063c2:	701a      	strb	r2, [r3, #0]
	if(NRF_isInit_B == false)
 80063c4:	4b20      	ldr	r3, [pc, #128]	@ (8006448 <NRF24_isDataAvailable_EN+0x90>)
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	2201      	movs	r2, #1
 80063ca:	4053      	eors	r3, r2
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <NRF24_isDataAvailable_EN+0x1e>
	{
		return NRF_NOT_INIT_EN;
 80063d2:	2300      	movs	r3, #0
 80063d4:	e034      	b.n	8006440 <NRF24_isDataAvailable_EN+0x88>
	}

	uint8_t status = 0;
 80063d6:	210e      	movs	r1, #14
 80063d8:	187b      	adds	r3, r7, r1
 80063da:	2200      	movs	r2, #0
 80063dc:	701a      	strb	r2, [r3, #0]
	NRF_ret_val_en NRF_ret_val_EN;

	NRF_ret_val_EN = nrf24_ReadReg_EN(STATUS_REG,&status);
 80063de:	250f      	movs	r5, #15
 80063e0:	197c      	adds	r4, r7, r5
 80063e2:	187b      	adds	r3, r7, r1
 80063e4:	0019      	movs	r1, r3
 80063e6:	2007      	movs	r0, #7
 80063e8:	f7ff fb7c 	bl	8005ae4 <nrf24_ReadReg_EN>
 80063ec:	0003      	movs	r3, r0
 80063ee:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 80063f0:	197b      	adds	r3, r7, r5
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	2b03      	cmp	r3, #3
 80063f6:	d002      	beq.n	80063fe <NRF24_isDataAvailable_EN+0x46>
	{
		return NRF_ret_val_EN;
 80063f8:	197b      	adds	r3, r7, r5
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	e020      	b.n	8006440 <NRF24_isDataAvailable_EN+0x88>
	}

	if ((status&(1<<6))&&(status&(pipenum_U8<<1)))
 80063fe:	210e      	movs	r1, #14
 8006400:	187b      	adds	r3, r7, r1
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	001a      	movs	r2, r3
 8006406:	2340      	movs	r3, #64	@ 0x40
 8006408:	4013      	ands	r3, r2
 800640a:	d018      	beq.n	800643e <NRF24_isDataAvailable_EN+0x86>
 800640c:	187b      	adds	r3, r7, r1
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	001a      	movs	r2, r3
 8006412:	1dfb      	adds	r3, r7, #7
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	005b      	lsls	r3, r3, #1
 8006418:	4013      	ands	r3, r2
 800641a:	d010      	beq.n	800643e <NRF24_isDataAvailable_EN+0x86>
	{

		NRF_ret_val_EN = NRF_WriteReg_EN(STATUS_REG, (1<<6));
 800641c:	250f      	movs	r5, #15
 800641e:	197c      	adds	r4, r7, r5
 8006420:	2140      	movs	r1, #64	@ 0x40
 8006422:	2007      	movs	r0, #7
 8006424:	f7ff faa6 	bl	8005974 <NRF_WriteReg_EN>
 8006428:	0003      	movs	r3, r0
 800642a:	7023      	strb	r3, [r4, #0]
		if(NRF_ret_val_EN != NRF_OK_EN)
 800642c:	197b      	adds	r3, r7, r5
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	2b03      	cmp	r3, #3
 8006432:	d002      	beq.n	800643a <NRF24_isDataAvailable_EN+0x82>
		{
			return NRF_ret_val_EN;
 8006434:	197b      	adds	r3, r7, r5
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	e002      	b.n	8006440 <NRF24_isDataAvailable_EN+0x88>
		}

		return NRF_DATA_AVAILABLE_EN;
 800643a:	2304      	movs	r3, #4
 800643c:	e000      	b.n	8006440 <NRF24_isDataAvailable_EN+0x88>
	}

	return NRF_DATA_NOT_AVAILABLE_EN;
 800643e:	2305      	movs	r3, #5
}
 8006440:	0018      	movs	r0, r3
 8006442:	46bd      	mov	sp, r7
 8006444:	b004      	add	sp, #16
 8006446:	bdb0      	pop	{r4, r5, r7, pc}
 8006448:	200002f4 	.word	0x200002f4

0800644c <NRF24_Receive_EN>:


NRF_ret_val_en NRF24_Receive_EN (uint8_t *data_U8A)
{
 800644c:	b5b0      	push	{r4, r5, r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
	if(NRF_isInit_B == false)
 8006454:	4b1c      	ldr	r3, [pc, #112]	@ (80064c8 <NRF24_Receive_EN+0x7c>)
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	2201      	movs	r2, #1
 800645a:	4053      	eors	r3, r2
 800645c:	b2db      	uxtb	r3, r3
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <NRF24_Receive_EN+0x1a>
	{
		return NRF_NOT_INIT_EN;
 8006462:	2300      	movs	r3, #0
 8006464:	e02c      	b.n	80064c0 <NRF24_Receive_EN+0x74>
	}

	uint8_t cmdtosend = 0;
 8006466:	230f      	movs	r3, #15
 8006468:	18fb      	adds	r3, r7, r3
 800646a:	2200      	movs	r2, #0
 800646c:	701a      	strb	r2, [r3, #0]
	HAL_ret_val_en HAL_ret_val_EN;
	NRF_ret_val_en NRF_ret_val_EN;

	// payload command
	HAL_ret_val_EN = NRF_HAL_function_local_STR.readSpiValue_EN_PF(R_RX_PAYLOAD_REG,data_U8A,cSIZE_BUFFER_TX_MAX_U8);
 800646e:	4b17      	ldr	r3, [pc, #92]	@ (80064cc <NRF24_Receive_EN+0x80>)
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	250e      	movs	r5, #14
 8006474:	197c      	adds	r4, r7, r5
 8006476:	6879      	ldr	r1, [r7, #4]
 8006478:	2220      	movs	r2, #32
 800647a:	2061      	movs	r0, #97	@ 0x61
 800647c:	4798      	blx	r3
 800647e:	0003      	movs	r3, r0
 8006480:	7023      	strb	r3, [r4, #0]
	if(HAL_ret_val_EN != HAL_SPI_READ_OK_EN)
 8006482:	197b      	adds	r3, r7, r5
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	2b05      	cmp	r3, #5
 8006488:	d001      	beq.n	800648e <NRF24_Receive_EN+0x42>
	{
		return NRF_SPI_ERROR_EN;
 800648a:	2301      	movs	r3, #1
 800648c:	e018      	b.n	80064c0 <NRF24_Receive_EN+0x74>
	}

	NRF_HAL_function_local_STR.delay_ms_PF(1);
 800648e:	4b0f      	ldr	r3, [pc, #60]	@ (80064cc <NRF24_Receive_EN+0x80>)
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	2001      	movs	r0, #1
 8006494:	4798      	blx	r3

	cmdtosend = FLUSH_RX_REG;
 8006496:	210f      	movs	r1, #15
 8006498:	187b      	adds	r3, r7, r1
 800649a:	22e2      	movs	r2, #226	@ 0xe2
 800649c:	701a      	strb	r2, [r3, #0]
	NRF_ret_val_EN = nrfsendCmd_EN(cmdtosend);
 800649e:	250d      	movs	r5, #13
 80064a0:	197c      	adds	r4, r7, r5
 80064a2:	187b      	adds	r3, r7, r1
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	0018      	movs	r0, r3
 80064a8:	f7ff fb3e 	bl	8005b28 <nrfsendCmd_EN>
 80064ac:	0003      	movs	r3, r0
 80064ae:	7023      	strb	r3, [r4, #0]
	if(NRF_ret_val_EN != NRF_OK_EN)
 80064b0:	197b      	adds	r3, r7, r5
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	2b03      	cmp	r3, #3
 80064b6:	d002      	beq.n	80064be <NRF24_Receive_EN+0x72>
	{
		return NRF_ret_val_EN;
 80064b8:	197b      	adds	r3, r7, r5
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	e000      	b.n	80064c0 <NRF24_Receive_EN+0x74>
	}
	else
	{
		return NRF_OK_EN;
 80064be:	2303      	movs	r3, #3
	}
}
 80064c0:	0018      	movs	r0, r3
 80064c2:	46bd      	mov	sp, r7
 80064c4:	b004      	add	sp, #16
 80064c6:	bdb0      	pop	{r4, r5, r7, pc}
 80064c8:	200002f4 	.word	0x200002f4
 80064cc:	200002dc 	.word	0x200002dc

080064d0 <LOG_Init>:

bool LOG_printHelloWorld(void);
bool LOG_addCommand_B(char *command_CA, bool (*command_function_B_FP)(void), bool (*command_function_with_argument_B_FP)(char *argument_CA));

void LOG_Init(LOG_HAL_functions_str *LOG_HAL_functions_STR, uint16_t size_buffer_uart_2_rx_U16)
{
 80064d0:	b590      	push	{r4, r7, lr}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	000a      	movs	r2, r1
 80064da:	1cbb      	adds	r3, r7, #2
 80064dc:	801a      	strh	r2, [r3, #0]
	local_size_buffer_uart_2_rx_U16 = size_buffer_uart_2_rx_U16;
 80064de:	4b0b      	ldr	r3, [pc, #44]	@ (800650c <LOG_Init+0x3c>)
 80064e0:	1cba      	adds	r2, r7, #2
 80064e2:	8812      	ldrh	r2, [r2, #0]
 80064e4:	801a      	strh	r2, [r3, #0]
	local_LOG_HAL_functions_STR = *LOG_HAL_functions_STR;
 80064e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006510 <LOG_Init+0x40>)
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	ca13      	ldmia	r2!, {r0, r1, r4}
 80064ec:	c313      	stmia	r3!, {r0, r1, r4}
 80064ee:	ca13      	ldmia	r2!, {r0, r1, r4}
 80064f0:	c313      	stmia	r3!, {r0, r1, r4}
	local_LOG_HAL_functions_STR.InitDebugUart();
 80064f2:	4b07      	ldr	r3, [pc, #28]	@ (8006510 <LOG_Init+0x40>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4798      	blx	r3
	LOG_addCommand_B("<HELLO WORLD>\r\n", &LOG_printHelloWorld, NULL);
 80064f8:	4906      	ldr	r1, [pc, #24]	@ (8006514 <LOG_Init+0x44>)
 80064fa:	4b07      	ldr	r3, [pc, #28]	@ (8006518 <LOG_Init+0x48>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	0018      	movs	r0, r3
 8006500:	f000 f8a8 	bl	8006654 <LOG_addCommand_B>
}
 8006504:	46c0      	nop			@ (mov r8, r8)
 8006506:	46bd      	mov	sp, r7
 8006508:	b003      	add	sp, #12
 800650a:	bd90      	pop	{r4, r7, pc}
 800650c:	200004a0 	.word	0x200004a0
 8006510:	200002f8 	.word	0x200002f8
 8006514:	0800674d 	.word	0x0800674d
 8006518:	08007960 	.word	0x08007960

0800651c <LOG_PrintString>:

void LOG_PrintString(char *log_to_print_CP, bool show_time_B, LOG_level_en log_level_EN, bool show_log_level_B)
{
 800651c:	b5b0      	push	{r4, r5, r7, lr}
 800651e:	b08a      	sub	sp, #40	@ 0x28
 8006520:	af02      	add	r7, sp, #8
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	000c      	movs	r4, r1
 8006526:	0010      	movs	r0, r2
 8006528:	0019      	movs	r1, r3
 800652a:	1cfb      	adds	r3, r7, #3
 800652c:	1c22      	adds	r2, r4, #0
 800652e:	701a      	strb	r2, [r3, #0]
 8006530:	1cbb      	adds	r3, r7, #2
 8006532:	1c02      	adds	r2, r0, #0
 8006534:	701a      	strb	r2, [r3, #0]
 8006536:	1c7b      	adds	r3, r7, #1
 8006538:	1c0a      	adds	r2, r1, #0
 800653a:	701a      	strb	r2, [r3, #0]
	if (show_time_B)
 800653c:	1cfb      	adds	r3, r7, #3
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d01f      	beq.n	8006584 <LOG_PrintString+0x68>
	{
		char time_CA[20];
		HAL_RTC_values_str HAL_RTC_values_STR;
		local_LOG_HAL_functions_STR.GetTime(&HAL_RTC_values_STR);
 8006544:	4b28      	ldr	r3, [pc, #160]	@ (80065e8 <LOG_PrintString+0xcc>)
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	2408      	movs	r4, #8
 800654a:	193a      	adds	r2, r7, r4
 800654c:	0010      	movs	r0, r2
 800654e:	4798      	blx	r3
		sprintf(time_CA, "%02d:%02d:%02d", HAL_RTC_values_STR.hours_U8,	HAL_RTC_values_STR.minutes_U8, HAL_RTC_values_STR.seconds_U8);
 8006550:	0021      	movs	r1, r4
 8006552:	187b      	adds	r3, r7, r1
 8006554:	789b      	ldrb	r3, [r3, #2]
 8006556:	001a      	movs	r2, r3
 8006558:	187b      	adds	r3, r7, r1
 800655a:	785b      	ldrb	r3, [r3, #1]
 800655c:	001c      	movs	r4, r3
 800655e:	187b      	adds	r3, r7, r1
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	4922      	ldr	r1, [pc, #136]	@ (80065ec <LOG_PrintString+0xd0>)
 8006564:	250c      	movs	r5, #12
 8006566:	1978      	adds	r0, r7, r5
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	0023      	movs	r3, r4
 800656c:	f000 fd3e 	bl	8006fec <siprintf>
		local_LOG_HAL_functions_STR.DebugPrint(time_CA);
 8006570:	4b1d      	ldr	r3, [pc, #116]	@ (80065e8 <LOG_PrintString+0xcc>)
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	197a      	adds	r2, r7, r5
 8006576:	0010      	movs	r0, r2
 8006578:	4798      	blx	r3
		local_LOG_HAL_functions_STR.DebugPrint("\r\n");
 800657a:	4b1b      	ldr	r3, [pc, #108]	@ (80065e8 <LOG_PrintString+0xcc>)
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	4a1c      	ldr	r2, [pc, #112]	@ (80065f0 <LOG_PrintString+0xd4>)
 8006580:	0010      	movs	r0, r2
 8006582:	4798      	blx	r3
	}
	if (show_log_level_B)
 8006584:	1c7b      	adds	r3, r7, #1
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d024      	beq.n	80065d6 <LOG_PrintString+0xba>
	{
		switch (log_level_EN)
 800658c:	1cbb      	adds	r3, r7, #2
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	2b03      	cmp	r3, #3
 8006592:	d01a      	beq.n	80065ca <LOG_PrintString+0xae>
 8006594:	dc1f      	bgt.n	80065d6 <LOG_PrintString+0xba>
 8006596:	2b02      	cmp	r3, #2
 8006598:	d011      	beq.n	80065be <LOG_PrintString+0xa2>
 800659a:	dc1c      	bgt.n	80065d6 <LOG_PrintString+0xba>
 800659c:	2b00      	cmp	r3, #0
 800659e:	d002      	beq.n	80065a6 <LOG_PrintString+0x8a>
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d006      	beq.n	80065b2 <LOG_PrintString+0x96>
 80065a4:	e017      	b.n	80065d6 <LOG_PrintString+0xba>
		{
		case LOG_LEVEL_VERBOSE_EN:
			local_LOG_HAL_functions_STR.DebugPrint("[VERBOSE] ");
 80065a6:	4b10      	ldr	r3, [pc, #64]	@ (80065e8 <LOG_PrintString+0xcc>)
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	4a12      	ldr	r2, [pc, #72]	@ (80065f4 <LOG_PrintString+0xd8>)
 80065ac:	0010      	movs	r0, r2
 80065ae:	4798      	blx	r3
			break;
 80065b0:	e011      	b.n	80065d6 <LOG_PrintString+0xba>
		case LOG_LEVEL_INFO_EN:
			local_LOG_HAL_functions_STR.DebugPrint("[INFO] ");
 80065b2:	4b0d      	ldr	r3, [pc, #52]	@ (80065e8 <LOG_PrintString+0xcc>)
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	4a10      	ldr	r2, [pc, #64]	@ (80065f8 <LOG_PrintString+0xdc>)
 80065b8:	0010      	movs	r0, r2
 80065ba:	4798      	blx	r3
			break;
 80065bc:	e00b      	b.n	80065d6 <LOG_PrintString+0xba>
		case LOG_LEVEL_WARNING_EN:
			local_LOG_HAL_functions_STR.DebugPrint("[WARNING] ");
 80065be:	4b0a      	ldr	r3, [pc, #40]	@ (80065e8 <LOG_PrintString+0xcc>)
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	4a0e      	ldr	r2, [pc, #56]	@ (80065fc <LOG_PrintString+0xe0>)
 80065c4:	0010      	movs	r0, r2
 80065c6:	4798      	blx	r3
			break;
 80065c8:	e005      	b.n	80065d6 <LOG_PrintString+0xba>
		case LOG_LEVEL_ERROR_EN:
			local_LOG_HAL_functions_STR.DebugPrint("[ERROR] ");
 80065ca:	4b07      	ldr	r3, [pc, #28]	@ (80065e8 <LOG_PrintString+0xcc>)
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	4a0c      	ldr	r2, [pc, #48]	@ (8006600 <LOG_PrintString+0xe4>)
 80065d0:	0010      	movs	r0, r2
 80065d2:	4798      	blx	r3
			break;
 80065d4:	46c0      	nop			@ (mov r8, r8)
		}
	}
	local_LOG_HAL_functions_STR.DebugPrint(log_to_print_CP);
 80065d6:	4b04      	ldr	r3, [pc, #16]	@ (80065e8 <LOG_PrintString+0xcc>)
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	0010      	movs	r0, r2
 80065de:	4798      	blx	r3
}
 80065e0:	46c0      	nop			@ (mov r8, r8)
 80065e2:	46bd      	mov	sp, r7
 80065e4:	b008      	add	sp, #32
 80065e6:	bdb0      	pop	{r4, r5, r7, pc}
 80065e8:	200002f8 	.word	0x200002f8
 80065ec:	08007970 	.word	0x08007970
 80065f0:	08007980 	.word	0x08007980
 80065f4:	08007984 	.word	0x08007984
 80065f8:	08007990 	.word	0x08007990
 80065fc:	08007998 	.word	0x08007998
 8006600:	080079a4 	.word	0x080079a4

08006604 <LOG_PrintStringCRLF>:

void LOG_PrintStringCRLF(char *log_to_print_CP, bool show_time_B, LOG_level_en log_level_EN, bool show_log_level_B)
{
 8006604:	b590      	push	{r4, r7, lr}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	000c      	movs	r4, r1
 800660e:	0010      	movs	r0, r2
 8006610:	0019      	movs	r1, r3
 8006612:	1cfb      	adds	r3, r7, #3
 8006614:	1c22      	adds	r2, r4, #0
 8006616:	701a      	strb	r2, [r3, #0]
 8006618:	1cbb      	adds	r3, r7, #2
 800661a:	1c02      	adds	r2, r0, #0
 800661c:	701a      	strb	r2, [r3, #0]
 800661e:	1c7b      	adds	r3, r7, #1
 8006620:	1c0a      	adds	r2, r1, #0
 8006622:	701a      	strb	r2, [r3, #0]
	LOG_PrintString(log_to_print_CP, show_time_B, log_level_EN,	show_log_level_B);
 8006624:	1c7b      	adds	r3, r7, #1
 8006626:	781c      	ldrb	r4, [r3, #0]
 8006628:	1cbb      	adds	r3, r7, #2
 800662a:	781a      	ldrb	r2, [r3, #0]
 800662c:	1cfb      	adds	r3, r7, #3
 800662e:	7819      	ldrb	r1, [r3, #0]
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	0023      	movs	r3, r4
 8006634:	f7ff ff72 	bl	800651c <LOG_PrintString>
	local_LOG_HAL_functions_STR.DebugPrint("\r\n");
 8006638:	4b04      	ldr	r3, [pc, #16]	@ (800664c <LOG_PrintStringCRLF+0x48>)
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	4a04      	ldr	r2, [pc, #16]	@ (8006650 <LOG_PrintStringCRLF+0x4c>)
 800663e:	0010      	movs	r0, r2
 8006640:	4798      	blx	r3
}
 8006642:	46c0      	nop			@ (mov r8, r8)
 8006644:	46bd      	mov	sp, r7
 8006646:	b003      	add	sp, #12
 8006648:	bd90      	pop	{r4, r7, pc}
 800664a:	46c0      	nop			@ (mov r8, r8)
 800664c:	200002f8 	.word	0x200002f8
 8006650:	08007980 	.word	0x08007980

08006654 <LOG_addCommand_B>:
void LOG_setLogLevel(LOG_level_en log_level_EN) {
	local_LOG_level_EN = log_level_EN;
}

bool LOG_addCommand_B(char *command_CA, bool (*command_function_B_FP)(void), bool (*command_function_with_argument_B_FP)(char *argument_CA))
{
 8006654:	b590      	push	{r4, r7, lr}
 8006656:	b087      	sub	sp, #28
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
	if (strlen(command_CA) > LOG_COMMAND_LENGTH_U8) {
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	0018      	movs	r0, r3
 8006664:	f7f9 fd50 	bl	8000108 <strlen>
 8006668:	0003      	movs	r3, r0
 800666a:	2b1e      	cmp	r3, #30
 800666c:	d907      	bls.n	800667e <LOG_addCommand_B+0x2a>
		LOG_PrintString("Command too long", LOG_SHOW_TIME_B, LOG_LEVEL_ERROR_EN, LOG_SHOW_LOG_LEVEL_B);
 800666e:	4834      	ldr	r0, [pc, #208]	@ (8006740 <LOG_addCommand_B+0xec>)
 8006670:	2301      	movs	r3, #1
 8006672:	2203      	movs	r2, #3
 8006674:	2101      	movs	r1, #1
 8006676:	f7ff ff51 	bl	800651c <LOG_PrintString>
		return false;
 800667a:	2300      	movs	r3, #0
 800667c:	e05c      	b.n	8006738 <LOG_addCommand_B+0xe4>
	}
	for (uint8_t counter_U8 = 0; counter_U8 < LOG_SIZE_OF_COMMANDS_U8; counter_U8++)
 800667e:	2317      	movs	r3, #23
 8006680:	18fb      	adds	r3, r7, r3
 8006682:	2200      	movs	r2, #0
 8006684:	701a      	strb	r2, [r3, #0]
 8006686:	e045      	b.n	8006714 <LOG_addCommand_B+0xc0>
	{
		if (local_LOG_command_STRA[counter_U8].command_function_B_FP == NULL || local_LOG_command_STRA[counter_U8].command_function_with_argument_B_FP == NULL)
 8006688:	2017      	movs	r0, #23
 800668a:	183b      	adds	r3, r7, r0
 800668c:	781a      	ldrb	r2, [r3, #0]
 800668e:	492d      	ldr	r1, [pc, #180]	@ (8006744 <LOG_addCommand_B+0xf0>)
 8006690:	0013      	movs	r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	189b      	adds	r3, r3, r2
 8006696:	00db      	lsls	r3, r3, #3
 8006698:	18cb      	adds	r3, r1, r3
 800669a:	3320      	adds	r3, #32
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00b      	beq.n	80066ba <LOG_addCommand_B+0x66>
 80066a2:	183b      	adds	r3, r7, r0
 80066a4:	781a      	ldrb	r2, [r3, #0]
 80066a6:	4927      	ldr	r1, [pc, #156]	@ (8006744 <LOG_addCommand_B+0xf0>)
 80066a8:	0013      	movs	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	189b      	adds	r3, r3, r2
 80066ae:	00db      	lsls	r3, r3, #3
 80066b0:	18cb      	adds	r3, r1, r3
 80066b2:	3324      	adds	r3, #36	@ 0x24
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d126      	bne.n	8006708 <LOG_addCommand_B+0xb4>
		{
			strcpy(local_LOG_command_STRA[counter_U8].command_CA, command_CA);
 80066ba:	2417      	movs	r4, #23
 80066bc:	193b      	adds	r3, r7, r4
 80066be:	781a      	ldrb	r2, [r3, #0]
 80066c0:	0013      	movs	r3, r2
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	189b      	adds	r3, r3, r2
 80066c6:	00db      	lsls	r3, r3, #3
 80066c8:	4a1e      	ldr	r2, [pc, #120]	@ (8006744 <LOG_addCommand_B+0xf0>)
 80066ca:	189b      	adds	r3, r3, r2
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	0011      	movs	r1, r2
 80066d0:	0018      	movs	r0, r3
 80066d2:	f000 fcdf 	bl	8007094 <strcpy>
			local_LOG_command_STRA[counter_U8].command_function_B_FP = command_function_B_FP;
 80066d6:	0020      	movs	r0, r4
 80066d8:	183b      	adds	r3, r7, r0
 80066da:	781a      	ldrb	r2, [r3, #0]
 80066dc:	4919      	ldr	r1, [pc, #100]	@ (8006744 <LOG_addCommand_B+0xf0>)
 80066de:	0013      	movs	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	189b      	adds	r3, r3, r2
 80066e4:	00db      	lsls	r3, r3, #3
 80066e6:	18cb      	adds	r3, r1, r3
 80066e8:	3320      	adds	r3, #32
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	601a      	str	r2, [r3, #0]
			local_LOG_command_STRA[counter_U8].command_function_with_argument_B_FP = command_function_with_argument_B_FP;
 80066ee:	183b      	adds	r3, r7, r0
 80066f0:	781a      	ldrb	r2, [r3, #0]
 80066f2:	4914      	ldr	r1, [pc, #80]	@ (8006744 <LOG_addCommand_B+0xf0>)
 80066f4:	0013      	movs	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	189b      	adds	r3, r3, r2
 80066fa:	00db      	lsls	r3, r3, #3
 80066fc:	18cb      	adds	r3, r1, r3
 80066fe:	3324      	adds	r3, #36	@ 0x24
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	601a      	str	r2, [r3, #0]
			return true;
 8006704:	2301      	movs	r3, #1
 8006706:	e017      	b.n	8006738 <LOG_addCommand_B+0xe4>
	for (uint8_t counter_U8 = 0; counter_U8 < LOG_SIZE_OF_COMMANDS_U8; counter_U8++)
 8006708:	2117      	movs	r1, #23
 800670a:	187b      	adds	r3, r7, r1
 800670c:	781a      	ldrb	r2, [r3, #0]
 800670e:	187b      	adds	r3, r7, r1
 8006710:	3201      	adds	r2, #1
 8006712:	701a      	strb	r2, [r3, #0]
 8006714:	2317      	movs	r3, #23
 8006716:	18fb      	adds	r3, r7, r3
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	2b09      	cmp	r3, #9
 800671c:	d9b4      	bls.n	8006688 <LOG_addCommand_B+0x34>
		}
	}
	LOG_PrintString("No more space for the command: ", LOG_SHOW_TIME_B, LOG_LEVEL_ERROR_EN, LOG_SHOW_LOG_LEVEL_B);
 800671e:	480a      	ldr	r0, [pc, #40]	@ (8006748 <LOG_addCommand_B+0xf4>)
 8006720:	2301      	movs	r3, #1
 8006722:	2203      	movs	r2, #3
 8006724:	2101      	movs	r1, #1
 8006726:	f7ff fef9 	bl	800651c <LOG_PrintString>
	LOG_PrintStringCRLF(command_CA, LOG_HIDE_TIME_B, LOG_LEVEL_ERROR_EN, LOG_SHOW_LOG_LEVEL_B);
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	2301      	movs	r3, #1
 800672e:	2203      	movs	r2, #3
 8006730:	2100      	movs	r1, #0
 8006732:	f7ff ff67 	bl	8006604 <LOG_PrintStringCRLF>
	return false;
 8006736:	2300      	movs	r3, #0
}
 8006738:	0018      	movs	r0, r3
 800673a:	46bd      	mov	sp, r7
 800673c:	b007      	add	sp, #28
 800673e:	bd90      	pop	{r4, r7, pc}
 8006740:	080079b4 	.word	0x080079b4
 8006744:	20000310 	.word	0x20000310
 8006748:	080079c8 	.word	0x080079c8

0800674c <LOG_printHelloWorld>:
		local_LOG_HAL_functions_STR.CleanUart2Buffer();
	}
}

bool LOG_printHelloWorld(void)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	af00      	add	r7, sp, #0
	LOG_PrintString("Hello World", LOG_SHOW_TIME_B, LOG_LEVEL_INFO_EN,LOG_SHOW_LOG_LEVEL_B);
 8006750:	4804      	ldr	r0, [pc, #16]	@ (8006764 <LOG_printHelloWorld+0x18>)
 8006752:	2301      	movs	r3, #1
 8006754:	2201      	movs	r2, #1
 8006756:	2101      	movs	r1, #1
 8006758:	f7ff fee0 	bl	800651c <LOG_PrintString>
	return true;
 800675c:	2301      	movs	r3, #1
}
 800675e:	0018      	movs	r0, r3
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	08007a60 	.word	0x08007a60

08006768 <RADIO_Init_B>:
static bool RADIO_DecodePacket_B(RADIO_trame_UN received_packet_UN);
static void RADIO_SetMyID(uint8_t protocol_version_U8, uint8_t network_ID_U8, uint8_t my_address_U8);


bool RADIO_Init_B(bool (*treatment_function_B_PF)(RADIO_trame_UN), NRF_HAL_function_str NRF_HAL_function_STR, uint8_t protocol_version_U8, uint8_t network_ID_U8, uint8_t my_address_U8)
{
 8006768:	b084      	sub	sp, #16
 800676a:	b5b0      	push	{r4, r5, r7, lr}
 800676c:	b086      	sub	sp, #24
 800676e:	af02      	add	r7, sp, #8
 8006770:	6078      	str	r0, [r7, #4]
 8006772:	2004      	movs	r0, #4
 8006774:	2520      	movs	r5, #32
 8006776:	1940      	adds	r0, r0, r5
 8006778:	19c0      	adds	r0, r0, r7
 800677a:	6001      	str	r1, [r0, #0]
 800677c:	6042      	str	r2, [r0, #4]
 800677e:	6083      	str	r3, [r0, #8]
	NRF_ret_val_en NRF_ret_val_EN;
    local_NRF_HAL_function_STR = NRF_HAL_function_STR;
 8006780:	4928      	ldr	r1, [pc, #160]	@ (8006824 <RADIO_Init_B+0xbc>)
 8006782:	2304      	movs	r3, #4
 8006784:	195b      	adds	r3, r3, r5
 8006786:	19da      	adds	r2, r3, r7
 8006788:	000b      	movs	r3, r1
 800678a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800678c:	c313      	stmia	r3!, {r0, r1, r4}
 800678e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006790:	c313      	stmia	r3!, {r0, r1, r4}
    NRF24_Init_EN(NRF_HAL_function_STR);
 8006792:	2304      	movs	r3, #4
 8006794:	195b      	adds	r3, r3, r5
 8006796:	19db      	adds	r3, r3, r7
 8006798:	466a      	mov	r2, sp
 800679a:	0011      	movs	r1, r2
 800679c:	001a      	movs	r2, r3
 800679e:	3210      	adds	r2, #16
 80067a0:	ca11      	ldmia	r2!, {r0, r4}
 80067a2:	c111      	stmia	r1!, {r0, r4}
 80067a4:	6818      	ldr	r0, [r3, #0]
 80067a6:	6859      	ldr	r1, [r3, #4]
 80067a8:	689a      	ldr	r2, [r3, #8]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	f7ff f8b2 	bl	8005914 <NRF24_Init_EN>
    curseur_ecriture_U16 = 0;
 80067b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006828 <RADIO_Init_B+0xc0>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	801a      	strh	r2, [r3, #0]
    curseur_lecture_U16 = 0;
 80067b6:	4b1d      	ldr	r3, [pc, #116]	@ (800682c <RADIO_Init_B+0xc4>)
 80067b8:	2200      	movs	r2, #0
 80067ba:	801a      	strh	r2, [r3, #0]
    retry_counter_U8 = 0;
 80067bc:	4b1c      	ldr	r3, [pc, #112]	@ (8006830 <RADIO_Init_B+0xc8>)
 80067be:	2200      	movs	r2, #0
 80067c0:	701a      	strb	r2, [r3, #0]
    beginnning_send_time_U32 = 0;
 80067c2:	4b1c      	ldr	r3, [pc, #112]	@ (8006834 <RADIO_Init_B+0xcc>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	601a      	str	r2, [r3, #0]
    waiting_acknowledge_B = false;
 80067c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006838 <RADIO_Init_B+0xd0>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	701a      	strb	r2, [r3, #0]
    acknoledge_received_B = false;
 80067ce:	4b1b      	ldr	r3, [pc, #108]	@ (800683c <RADIO_Init_B+0xd4>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	701a      	strb	r2, [r3, #0]
    RADIO_treatment_function_B_PF = treatment_function_B_PF;
 80067d4:	4b1a      	ldr	r3, [pc, #104]	@ (8006840 <RADIO_Init_B+0xd8>)
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	601a      	str	r2, [r3, #0]
    RADIO_SetMyID(protocol_version_U8, network_ID_U8, my_address_U8);
 80067da:	2324      	movs	r3, #36	@ 0x24
 80067dc:	195b      	adds	r3, r3, r5
 80067de:	19db      	adds	r3, r3, r7
 80067e0:	781a      	ldrb	r2, [r3, #0]
 80067e2:	2320      	movs	r3, #32
 80067e4:	195b      	adds	r3, r3, r5
 80067e6:	19db      	adds	r3, r3, r7
 80067e8:	7819      	ldrb	r1, [r3, #0]
 80067ea:	233c      	movs	r3, #60	@ 0x3c
 80067ec:	18fb      	adds	r3, r7, r3
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	0018      	movs	r0, r3
 80067f2:	f000 f941 	bl	8006a78 <RADIO_SetMyID>
	NRF_ret_val_EN = NRF24_RxMode_EN((uint8_t *)PipeAddress, 10);
 80067f6:	250f      	movs	r5, #15
 80067f8:	197c      	adds	r4, r7, r5
 80067fa:	4b12      	ldr	r3, [pc, #72]	@ (8006844 <RADIO_Init_B+0xdc>)
 80067fc:	210a      	movs	r1, #10
 80067fe:	0018      	movs	r0, r3
 8006800:	f7ff fd18 	bl	8006234 <NRF24_RxMode_EN>
 8006804:	0003      	movs	r3, r0
 8006806:	7023      	strb	r3, [r4, #0]
	if (NRF_ret_val_EN != NRF_OK_EN)
 8006808:	197b      	adds	r3, r7, r5
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	2b03      	cmp	r3, #3
 800680e:	d001      	beq.n	8006814 <RADIO_Init_B+0xac>
	{
		return false;
 8006810:	2300      	movs	r3, #0
 8006812:	e000      	b.n	8006816 <RADIO_Init_B+0xae>
	}
	else
	{
		return true;
 8006814:	2301      	movs	r3, #1
	}
}
 8006816:	0018      	movs	r0, r3
 8006818:	46bd      	mov	sp, r7
 800681a:	b004      	add	sp, #16
 800681c:	bcb0      	pop	{r4, r5, r7}
 800681e:	bc08      	pop	{r3}
 8006820:	b004      	add	sp, #16
 8006822:	4718      	bx	r3
 8006824:	200004a4 	.word	0x200004a4
 8006828:	200004bc 	.word	0x200004bc
 800682c:	200004be 	.word	0x200004be
 8006830:	200004ca 	.word	0x200004ca
 8006834:	200004cc 	.word	0x200004cc
 8006838:	200004c0 	.word	0x200004c0
 800683c:	200004c1 	.word	0x200004c1
 8006840:	20000624 	.word	0x20000624
 8006844:	08007b9c 	.word	0x08007b9c

08006848 <RADIO_SendStateMachine>:

static void RADIO_SendStateMachine(void)
{
 8006848:	b590      	push	{r4, r7, lr}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
    NRF_ret_val_en NRF_ret_val_EN;
    switch(RADIO_state_send_packet_EN)
 800684e:	4b6e      	ldr	r3, [pc, #440]	@ (8006a08 <RADIO_SendStateMachine+0x1c0>)
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	2b03      	cmp	r3, #3
 8006854:	d02c      	beq.n	80068b0 <RADIO_SendStateMachine+0x68>
 8006856:	dd00      	ble.n	800685a <RADIO_SendStateMachine+0x12>
 8006858:	e0d0      	b.n	80069fc <RADIO_SendStateMachine+0x1b4>
 800685a:	2b02      	cmp	r3, #2
 800685c:	d100      	bne.n	8006860 <RADIO_SendStateMachine+0x18>
 800685e:	e099      	b.n	8006994 <RADIO_SendStateMachine+0x14c>
 8006860:	dd00      	ble.n	8006864 <RADIO_SendStateMachine+0x1c>
 8006862:	e0cb      	b.n	80069fc <RADIO_SendStateMachine+0x1b4>
 8006864:	2b00      	cmp	r3, #0
 8006866:	d002      	beq.n	800686e <RADIO_SendStateMachine+0x26>
 8006868:	2b01      	cmp	r3, #1
 800686a:	d013      	beq.n	8006894 <RADIO_SendStateMachine+0x4c>
                //on reste dans cette tache tant que l'on a pas reçu l'acknowledge ou que le timeout n'est pas atteint
                RADIO_state_send_packet_EN = RADIO_SEND_WAITING_ACK_EN;
            }
            break;
        default:
            break;
 800686c:	e0c6      	b.n	80069fc <RADIO_SendStateMachine+0x1b4>
            retry_counter_U8 = 0;
 800686e:	4b67      	ldr	r3, [pc, #412]	@ (8006a0c <RADIO_SendStateMachine+0x1c4>)
 8006870:	2200      	movs	r2, #0
 8006872:	701a      	strb	r2, [r3, #0]
            beginnning_send_time_U32 = 0;
 8006874:	4b66      	ldr	r3, [pc, #408]	@ (8006a10 <RADIO_SendStateMachine+0x1c8>)
 8006876:	2200      	movs	r2, #0
 8006878:	601a      	str	r2, [r3, #0]
            waiting_acknowledge_B = false;
 800687a:	4b66      	ldr	r3, [pc, #408]	@ (8006a14 <RADIO_SendStateMachine+0x1cc>)
 800687c:	2200      	movs	r2, #0
 800687e:	701a      	strb	r2, [r3, #0]
            acknoledge_received_B = false;
 8006880:	4b65      	ldr	r3, [pc, #404]	@ (8006a18 <RADIO_SendStateMachine+0x1d0>)
 8006882:	2200      	movs	r2, #0
 8006884:	701a      	strb	r2, [r3, #0]
            packet_ID_to_acknowledge_U32 = 0;
 8006886:	4b65      	ldr	r3, [pc, #404]	@ (8006a1c <RADIO_SendStateMachine+0x1d4>)
 8006888:	2200      	movs	r2, #0
 800688a:	601a      	str	r2, [r3, #0]
            RADIO_state_send_packet_EN = RADIO_SEND_BEGIN_EN;
 800688c:	4b5e      	ldr	r3, [pc, #376]	@ (8006a08 <RADIO_SendStateMachine+0x1c0>)
 800688e:	2201      	movs	r2, #1
 8006890:	701a      	strb	r2, [r3, #0]
            break;
 8006892:	e0b6      	b.n	8006a02 <RADIO_SendStateMachine+0x1ba>
            if(curseur_ecriture_U16 != curseur_lecture_U16)
 8006894:	4b62      	ldr	r3, [pc, #392]	@ (8006a20 <RADIO_SendStateMachine+0x1d8>)
 8006896:	881a      	ldrh	r2, [r3, #0]
 8006898:	4b62      	ldr	r3, [pc, #392]	@ (8006a24 <RADIO_SendStateMachine+0x1dc>)
 800689a:	881b      	ldrh	r3, [r3, #0]
 800689c:	429a      	cmp	r2, r3
 800689e:	d003      	beq.n	80068a8 <RADIO_SendStateMachine+0x60>
                RADIO_state_send_packet_EN = RADIO_SEND_SENDING_PACKET_EN;
 80068a0:	4b59      	ldr	r3, [pc, #356]	@ (8006a08 <RADIO_SendStateMachine+0x1c0>)
 80068a2:	2203      	movs	r2, #3
 80068a4:	701a      	strb	r2, [r3, #0]
            break;
 80068a6:	e0ac      	b.n	8006a02 <RADIO_SendStateMachine+0x1ba>
                RADIO_state_send_packet_EN = RADIO_SEND_BEGIN_EN;
 80068a8:	4b57      	ldr	r3, [pc, #348]	@ (8006a08 <RADIO_SendStateMachine+0x1c0>)
 80068aa:	2201      	movs	r2, #1
 80068ac:	701a      	strb	r2, [r3, #0]
            break;
 80068ae:	e0a8      	b.n	8006a02 <RADIO_SendStateMachine+0x1ba>
            if(retry_counter_U8 < NUMBER_OF_RETRY_MAX_U8)
 80068b0:	4b56      	ldr	r3, [pc, #344]	@ (8006a0c <RADIO_SendStateMachine+0x1c4>)
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d851      	bhi.n	800695c <RADIO_SendStateMachine+0x114>
            	NRF_ret_val_EN = NRF24_TxMode_EN((uint8_t *)PipeAddress, 10);
 80068b8:	1dfc      	adds	r4, r7, #7
 80068ba:	4b5b      	ldr	r3, [pc, #364]	@ (8006a28 <RADIO_SendStateMachine+0x1e0>)
 80068bc:	210a      	movs	r1, #10
 80068be:	0018      	movs	r0, r3
 80068c0:	f7ff fba6 	bl	8006010 <NRF24_TxMode_EN>
 80068c4:	0003      	movs	r3, r0
 80068c6:	7023      	strb	r3, [r4, #0]
            	if(NRF_ret_val_EN != NRF_OK_EN)
 80068c8:	1dfb      	adds	r3, r7, #7
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	2b03      	cmp	r3, #3
 80068ce:	d006      	beq.n	80068de <RADIO_SendStateMachine+0x96>
            		error_counter_U16++;
 80068d0:	4b56      	ldr	r3, [pc, #344]	@ (8006a2c <RADIO_SendStateMachine+0x1e4>)
 80068d2:	881b      	ldrh	r3, [r3, #0]
 80068d4:	3301      	adds	r3, #1
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	4b54      	ldr	r3, [pc, #336]	@ (8006a2c <RADIO_SendStateMachine+0x1e4>)
 80068da:	801a      	strh	r2, [r3, #0]
					return;
 80068dc:	e091      	b.n	8006a02 <RADIO_SendStateMachine+0x1ba>
                NRF_ret_val_EN = NRF24_Transmit_EN(List_of_packet_to_send_ENA[curseur_lecture_U16].trame_U8A, SIZE_TRAME_U8);
 80068de:	4b51      	ldr	r3, [pc, #324]	@ (8006a24 <RADIO_SendStateMachine+0x1dc>)
 80068e0:	881b      	ldrh	r3, [r3, #0]
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	4b52      	ldr	r3, [pc, #328]	@ (8006a30 <RADIO_SendStateMachine+0x1e8>)
 80068e6:	18d3      	adds	r3, r2, r3
 80068e8:	1dfc      	adds	r4, r7, #7
 80068ea:	2120      	movs	r1, #32
 80068ec:	0018      	movs	r0, r3
 80068ee:	f7ff fc0d 	bl	800610c <NRF24_Transmit_EN>
 80068f2:	0003      	movs	r3, r0
 80068f4:	7023      	strb	r3, [r4, #0]
                if(NRF_ret_val_EN == NRF_OK_EN)
 80068f6:	1dfb      	adds	r3, r7, #7
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	2b03      	cmp	r3, #3
 80068fc:	d124      	bne.n	8006948 <RADIO_SendStateMachine+0x100>
                    NRF_ret_val_EN = NRF24_RxMode_EN((uint8_t *)PipeAddress, 10);
 80068fe:	1dfc      	adds	r4, r7, #7
 8006900:	4b49      	ldr	r3, [pc, #292]	@ (8006a28 <RADIO_SendStateMachine+0x1e0>)
 8006902:	210a      	movs	r1, #10
 8006904:	0018      	movs	r0, r3
 8006906:	f7ff fc95 	bl	8006234 <NRF24_RxMode_EN>
 800690a:	0003      	movs	r3, r0
 800690c:	7023      	strb	r3, [r4, #0]
    				if (NRF_ret_val_EN != NRF_OK_EN)
 800690e:	1dfb      	adds	r3, r7, #7
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	2b03      	cmp	r3, #3
 8006914:	d005      	beq.n	8006922 <RADIO_SendStateMachine+0xda>
    					error_counter_U16++;
 8006916:	4b45      	ldr	r3, [pc, #276]	@ (8006a2c <RADIO_SendStateMachine+0x1e4>)
 8006918:	881b      	ldrh	r3, [r3, #0]
 800691a:	3301      	adds	r3, #1
 800691c:	b29a      	uxth	r2, r3
 800691e:	4b43      	ldr	r3, [pc, #268]	@ (8006a2c <RADIO_SendStateMachine+0x1e4>)
 8006920:	801a      	strh	r2, [r3, #0]
                    packet_ID_to_acknowledge_U32 = List_of_packet_to_send_ENA[curseur_lecture_U16].trame_str.CRC_ID_U32;
 8006922:	4b40      	ldr	r3, [pc, #256]	@ (8006a24 <RADIO_SendStateMachine+0x1dc>)
 8006924:	881b      	ldrh	r3, [r3, #0]
 8006926:	4a42      	ldr	r2, [pc, #264]	@ (8006a30 <RADIO_SendStateMachine+0x1e8>)
 8006928:	015b      	lsls	r3, r3, #5
 800692a:	18d3      	adds	r3, r2, r3
 800692c:	331c      	adds	r3, #28
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	4b3a      	ldr	r3, [pc, #232]	@ (8006a1c <RADIO_SendStateMachine+0x1d4>)
 8006932:	601a      	str	r2, [r3, #0]
                    beginnning_send_time_U32 = local_NRF_HAL_function_STR.millis_PF_U32();
 8006934:	4b3f      	ldr	r3, [pc, #252]	@ (8006a34 <RADIO_SendStateMachine+0x1ec>)
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	4798      	blx	r3
 800693a:	0002      	movs	r2, r0
 800693c:	4b34      	ldr	r3, [pc, #208]	@ (8006a10 <RADIO_SendStateMachine+0x1c8>)
 800693e:	601a      	str	r2, [r3, #0]
                    RADIO_state_send_packet_EN = RADIO_SEND_WAITING_ACK_EN;
 8006940:	4b31      	ldr	r3, [pc, #196]	@ (8006a08 <RADIO_SendStateMachine+0x1c0>)
 8006942:	2202      	movs	r2, #2
 8006944:	701a      	strb	r2, [r3, #0]
            break;
 8006946:	e05b      	b.n	8006a00 <RADIO_SendStateMachine+0x1b8>
                	retry_counter_U8++;
 8006948:	4b30      	ldr	r3, [pc, #192]	@ (8006a0c <RADIO_SendStateMachine+0x1c4>)
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	3301      	adds	r3, #1
 800694e:	b2da      	uxtb	r2, r3
 8006950:	4b2e      	ldr	r3, [pc, #184]	@ (8006a0c <RADIO_SendStateMachine+0x1c4>)
 8006952:	701a      	strb	r2, [r3, #0]
                    RADIO_state_send_packet_EN = RADIO_SEND_SENDING_PACKET_EN;
 8006954:	4b2c      	ldr	r3, [pc, #176]	@ (8006a08 <RADIO_SendStateMachine+0x1c0>)
 8006956:	2203      	movs	r2, #3
 8006958:	701a      	strb	r2, [r3, #0]
            break;
 800695a:	e051      	b.n	8006a00 <RADIO_SendStateMachine+0x1b8>
                error_counter_U16++;
 800695c:	4b33      	ldr	r3, [pc, #204]	@ (8006a2c <RADIO_SendStateMachine+0x1e4>)
 800695e:	881b      	ldrh	r3, [r3, #0]
 8006960:	3301      	adds	r3, #1
 8006962:	b29a      	uxth	r2, r3
 8006964:	4b31      	ldr	r3, [pc, #196]	@ (8006a2c <RADIO_SendStateMachine+0x1e4>)
 8006966:	801a      	strh	r2, [r3, #0]
                RADIO_state_send_packet_EN = RADIO_SEND_TRANSITION_TO_BEGIN_EN;
 8006968:	4b27      	ldr	r3, [pc, #156]	@ (8006a08 <RADIO_SendStateMachine+0x1c0>)
 800696a:	2200      	movs	r2, #0
 800696c:	701a      	strb	r2, [r3, #0]
                NRF_ret_val_EN = NRF24_RxMode_EN((uint8_t *)PipeAddress, 10);
 800696e:	1dfc      	adds	r4, r7, #7
 8006970:	4b2d      	ldr	r3, [pc, #180]	@ (8006a28 <RADIO_SendStateMachine+0x1e0>)
 8006972:	210a      	movs	r1, #10
 8006974:	0018      	movs	r0, r3
 8006976:	f7ff fc5d 	bl	8006234 <NRF24_RxMode_EN>
 800697a:	0003      	movs	r3, r0
 800697c:	7023      	strb	r3, [r4, #0]
				if (NRF_ret_val_EN != NRF_OK_EN)
 800697e:	1dfb      	adds	r3, r7, #7
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	2b03      	cmp	r3, #3
 8006984:	d03c      	beq.n	8006a00 <RADIO_SendStateMachine+0x1b8>
					error_counter_U16++;
 8006986:	4b29      	ldr	r3, [pc, #164]	@ (8006a2c <RADIO_SendStateMachine+0x1e4>)
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	3301      	adds	r3, #1
 800698c:	b29a      	uxth	r2, r3
 800698e:	4b27      	ldr	r3, [pc, #156]	@ (8006a2c <RADIO_SendStateMachine+0x1e4>)
 8006990:	801a      	strh	r2, [r3, #0]
            break;
 8006992:	e035      	b.n	8006a00 <RADIO_SendStateMachine+0x1b8>
            if(acknoledge_received_B == true)
 8006994:	4b20      	ldr	r3, [pc, #128]	@ (8006a18 <RADIO_SendStateMachine+0x1d0>)
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d010      	beq.n	80069be <RADIO_SendStateMachine+0x176>
                curseur_lecture_U16++;
 800699c:	4b21      	ldr	r3, [pc, #132]	@ (8006a24 <RADIO_SendStateMachine+0x1dc>)
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	3301      	adds	r3, #1
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	4b1f      	ldr	r3, [pc, #124]	@ (8006a24 <RADIO_SendStateMachine+0x1dc>)
 80069a6:	801a      	strh	r2, [r3, #0]
                if(curseur_lecture_U16 >= SIZE_BUFFER_U16)
 80069a8:	4b1e      	ldr	r3, [pc, #120]	@ (8006a24 <RADIO_SendStateMachine+0x1dc>)
 80069aa:	881b      	ldrh	r3, [r3, #0]
 80069ac:	2b63      	cmp	r3, #99	@ 0x63
 80069ae:	d902      	bls.n	80069b6 <RADIO_SendStateMachine+0x16e>
                    curseur_lecture_U16 = 0;
 80069b0:	4b1c      	ldr	r3, [pc, #112]	@ (8006a24 <RADIO_SendStateMachine+0x1dc>)
 80069b2:	2200      	movs	r2, #0
 80069b4:	801a      	strh	r2, [r3, #0]
                RADIO_state_send_packet_EN = RADIO_SEND_TRANSITION_TO_BEGIN_EN;
 80069b6:	4b14      	ldr	r3, [pc, #80]	@ (8006a08 <RADIO_SendStateMachine+0x1c0>)
 80069b8:	2200      	movs	r2, #0
 80069ba:	701a      	strb	r2, [r3, #0]
            break;
 80069bc:	e021      	b.n	8006a02 <RADIO_SendStateMachine+0x1ba>
            else if(TOOLS_IsTimeoutEnded_B(beginnning_send_time_U32, TIMEOUT_ACKNOWLEDGE_ms_U32, local_NRF_HAL_function_STR.millis_PF_U32()) == true)
 80069be:	4b14      	ldr	r3, [pc, #80]	@ (8006a10 <RADIO_SendStateMachine+0x1c8>)
 80069c0:	681c      	ldr	r4, [r3, #0]
 80069c2:	4b1c      	ldr	r3, [pc, #112]	@ (8006a34 <RADIO_SendStateMachine+0x1ec>)
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	4798      	blx	r3
 80069c8:	0002      	movs	r2, r0
 80069ca:	23fa      	movs	r3, #250	@ 0xfa
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	0019      	movs	r1, r3
 80069d0:	0020      	movs	r0, r4
 80069d2:	f000 fadf 	bl	8006f94 <TOOLS_IsTimeoutEnded_B>
 80069d6:	1e03      	subs	r3, r0, #0
 80069d8:	d00c      	beq.n	80069f4 <RADIO_SendStateMachine+0x1ac>
                retry_counter_U8++;
 80069da:	4b0c      	ldr	r3, [pc, #48]	@ (8006a0c <RADIO_SendStateMachine+0x1c4>)
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	3301      	adds	r3, #1
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	4b0a      	ldr	r3, [pc, #40]	@ (8006a0c <RADIO_SendStateMachine+0x1c4>)
 80069e4:	701a      	strb	r2, [r3, #0]
                beginnning_send_time_U32 = 0;
 80069e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006a10 <RADIO_SendStateMachine+0x1c8>)
 80069e8:	2200      	movs	r2, #0
 80069ea:	601a      	str	r2, [r3, #0]
                RADIO_state_send_packet_EN = RADIO_SEND_SENDING_PACKET_EN;
 80069ec:	4b06      	ldr	r3, [pc, #24]	@ (8006a08 <RADIO_SendStateMachine+0x1c0>)
 80069ee:	2203      	movs	r2, #3
 80069f0:	701a      	strb	r2, [r3, #0]
            break;
 80069f2:	e006      	b.n	8006a02 <RADIO_SendStateMachine+0x1ba>
                RADIO_state_send_packet_EN = RADIO_SEND_WAITING_ACK_EN;
 80069f4:	4b04      	ldr	r3, [pc, #16]	@ (8006a08 <RADIO_SendStateMachine+0x1c0>)
 80069f6:	2202      	movs	r2, #2
 80069f8:	701a      	strb	r2, [r3, #0]
            break;
 80069fa:	e002      	b.n	8006a02 <RADIO_SendStateMachine+0x1ba>
            break;
 80069fc:	46c0      	nop			@ (mov r8, r8)
 80069fe:	e000      	b.n	8006a02 <RADIO_SendStateMachine+0x1ba>
            break;
 8006a00:	46c0      	nop			@ (mov r8, r8)
    }
}
 8006a02:	46bd      	mov	sp, r7
 8006a04:	b003      	add	sp, #12
 8006a06:	bd90      	pop	{r4, r7, pc}
 8006a08:	200004d0 	.word	0x200004d0
 8006a0c:	200004ca 	.word	0x200004ca
 8006a10:	200004cc 	.word	0x200004cc
 8006a14:	200004c0 	.word	0x200004c0
 8006a18:	200004c1 	.word	0x200004c1
 8006a1c:	200004c4 	.word	0x200004c4
 8006a20:	200004bc 	.word	0x200004bc
 8006a24:	200004be 	.word	0x200004be
 8006a28:	08007b9c 	.word	0x08007b9c
 8006a2c:	200004c8 	.word	0x200004c8
 8006a30:	200004d4 	.word	0x200004d4
 8006a34:	200004a4 	.word	0x200004a4

08006a38 <RADIO_setAcknowledgeReceivedFlag>:

static void RADIO_setAcknowledgeReceivedFlag(bool value_B)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	0002      	movs	r2, r0
 8006a40:	1dfb      	adds	r3, r7, #7
 8006a42:	701a      	strb	r2, [r3, #0]
    if(value_B == true && acknoledge_received_B == true)
 8006a44:	1dfb      	adds	r3, r7, #7
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00a      	beq.n	8006a62 <RADIO_setAcknowledgeReceivedFlag+0x2a>
 8006a4c:	4b08      	ldr	r3, [pc, #32]	@ (8006a70 <RADIO_setAcknowledgeReceivedFlag+0x38>)
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d006      	beq.n	8006a62 <RADIO_setAcknowledgeReceivedFlag+0x2a>
    {
        //logguer l'erreur
        error_counter_U16++;
 8006a54:	4b07      	ldr	r3, [pc, #28]	@ (8006a74 <RADIO_setAcknowledgeReceivedFlag+0x3c>)
 8006a56:	881b      	ldrh	r3, [r3, #0]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	4b05      	ldr	r3, [pc, #20]	@ (8006a74 <RADIO_setAcknowledgeReceivedFlag+0x3c>)
 8006a5e:	801a      	strh	r2, [r3, #0]
        return;
 8006a60:	e003      	b.n	8006a6a <RADIO_setAcknowledgeReceivedFlag+0x32>
    }
    acknoledge_received_B = value_B;
 8006a62:	4b03      	ldr	r3, [pc, #12]	@ (8006a70 <RADIO_setAcknowledgeReceivedFlag+0x38>)
 8006a64:	1dfa      	adds	r2, r7, #7
 8006a66:	7812      	ldrb	r2, [r2, #0]
 8006a68:	701a      	strb	r2, [r3, #0]
}
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	b002      	add	sp, #8
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	200004c1 	.word	0x200004c1
 8006a74:	200004c8 	.word	0x200004c8

08006a78 <RADIO_SetMyID>:

static void RADIO_SetMyID(uint8_t protocol_version_U8, uint8_t network_ID_U8, uint8_t my_address_U8)
{
 8006a78:	b590      	push	{r4, r7, lr}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	0004      	movs	r4, r0
 8006a80:	0008      	movs	r0, r1
 8006a82:	0011      	movs	r1, r2
 8006a84:	1dfb      	adds	r3, r7, #7
 8006a86:	1c22      	adds	r2, r4, #0
 8006a88:	701a      	strb	r2, [r3, #0]
 8006a8a:	1dbb      	adds	r3, r7, #6
 8006a8c:	1c02      	adds	r2, r0, #0
 8006a8e:	701a      	strb	r2, [r3, #0]
 8006a90:	1d7b      	adds	r3, r7, #5
 8006a92:	1c0a      	adds	r2, r1, #0
 8006a94:	701a      	strb	r2, [r3, #0]
    my_ID_STR.my_protocol_version_U8 = protocol_version_U8;
 8006a96:	4b08      	ldr	r3, [pc, #32]	@ (8006ab8 <RADIO_SetMyID+0x40>)
 8006a98:	1dfa      	adds	r2, r7, #7
 8006a9a:	7812      	ldrb	r2, [r2, #0]
 8006a9c:	701a      	strb	r2, [r3, #0]
    my_ID_STR.my_network_ID_U8 = network_ID_U8;
 8006a9e:	4b06      	ldr	r3, [pc, #24]	@ (8006ab8 <RADIO_SetMyID+0x40>)
 8006aa0:	1dba      	adds	r2, r7, #6
 8006aa2:	7812      	ldrb	r2, [r2, #0]
 8006aa4:	705a      	strb	r2, [r3, #1]
    my_ID_STR.my_address_U8 = my_address_U8;
 8006aa6:	4b04      	ldr	r3, [pc, #16]	@ (8006ab8 <RADIO_SetMyID+0x40>)
 8006aa8:	1d7a      	adds	r2, r7, #5
 8006aaa:	7812      	ldrb	r2, [r2, #0]
 8006aac:	709a      	strb	r2, [r3, #2]
}
 8006aae:	46c0      	nop			@ (mov r8, r8)
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	b003      	add	sp, #12
 8006ab4:	bd90      	pop	{r4, r7, pc}
 8006ab6:	46c0      	nop			@ (mov r8, r8)
 8006ab8:	20000614 	.word	0x20000614

08006abc <RADIO_SendPacket_B>:


static bool RADIO_SendPacket_B(uint8_t destination_address_U8, uint8_t trame_type_EN_6, uint8_t *payload_U8, uint8_t payload_size_U8)
{
 8006abc:	b590      	push	{r4, r7, lr}
 8006abe:	b08d      	sub	sp, #52	@ 0x34
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	0004      	movs	r4, r0
 8006ac4:	0008      	movs	r0, r1
 8006ac6:	603a      	str	r2, [r7, #0]
 8006ac8:	0019      	movs	r1, r3
 8006aca:	1dfb      	adds	r3, r7, #7
 8006acc:	1c22      	adds	r2, r4, #0
 8006ace:	701a      	strb	r2, [r3, #0]
 8006ad0:	1dbb      	adds	r3, r7, #6
 8006ad2:	1c02      	adds	r2, r0, #0
 8006ad4:	701a      	strb	r2, [r3, #0]
 8006ad6:	1d7b      	adds	r3, r7, #5
 8006ad8:	1c0a      	adds	r2, r1, #0
 8006ada:	701a      	strb	r2, [r3, #0]
    RADIO_trame_UN packet_to_send_EN;
    packet_to_send_EN.trame_str.cerced_data_UN.cerced_data_str.protocol_version_U8 = my_ID_STR.my_protocol_version_U8;
 8006adc:	4b45      	ldr	r3, [pc, #276]	@ (8006bf4 <RADIO_SendPacket_B+0x138>)
 8006ade:	781a      	ldrb	r2, [r3, #0]
 8006ae0:	240c      	movs	r4, #12
 8006ae2:	193b      	adds	r3, r7, r4
 8006ae4:	701a      	strb	r2, [r3, #0]
    packet_to_send_EN.trame_str.cerced_data_UN.cerced_data_str.network_ID_U8 = my_ID_STR.my_network_ID_U8;
 8006ae6:	4b43      	ldr	r3, [pc, #268]	@ (8006bf4 <RADIO_SendPacket_B+0x138>)
 8006ae8:	785a      	ldrb	r2, [r3, #1]
 8006aea:	193b      	adds	r3, r7, r4
 8006aec:	705a      	strb	r2, [r3, #1]
    packet_to_send_EN.trame_str.cerced_data_UN.cerced_data_str.destination_address_U8 = destination_address_U8;
 8006aee:	193b      	adds	r3, r7, r4
 8006af0:	1dfa      	adds	r2, r7, #7
 8006af2:	7812      	ldrb	r2, [r2, #0]
 8006af4:	709a      	strb	r2, [r3, #2]
    packet_to_send_EN.trame_str.cerced_data_UN.cerced_data_str.trame_type_EN_6 = trame_type_EN_6;
 8006af6:	1dbb      	adds	r3, r7, #6
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	223f      	movs	r2, #63	@ 0x3f
 8006afc:	4013      	ands	r3, r2
 8006afe:	b2da      	uxtb	r2, r3
 8006b00:	193b      	adds	r3, r7, r4
 8006b02:	213f      	movs	r1, #63	@ 0x3f
 8006b04:	400a      	ands	r2, r1
 8006b06:	0010      	movs	r0, r2
 8006b08:	78da      	ldrb	r2, [r3, #3]
 8006b0a:	213f      	movs	r1, #63	@ 0x3f
 8006b0c:	438a      	bics	r2, r1
 8006b0e:	1c11      	adds	r1, r2, #0
 8006b10:	1c02      	adds	r2, r0, #0
 8006b12:	430a      	orrs	r2, r1
 8006b14:	70da      	strb	r2, [r3, #3]
    packet_to_send_EN.trame_str.cerced_data_UN.cerced_data_str.nb_nodes_traverses_U2 = 0;
 8006b16:	193b      	adds	r3, r7, r4
 8006b18:	78da      	ldrb	r2, [r3, #3]
 8006b1a:	213f      	movs	r1, #63	@ 0x3f
 8006b1c:	400a      	ands	r2, r1
 8006b1e:	70da      	strb	r2, [r3, #3]
    packet_to_send_EN.trame_str.cerced_data_UN.cerced_data_str.source_address_U8[0] = my_ID_STR.my_address_U8;
 8006b20:	4b34      	ldr	r3, [pc, #208]	@ (8006bf4 <RADIO_SendPacket_B+0x138>)
 8006b22:	789a      	ldrb	r2, [r3, #2]
 8006b24:	193b      	adds	r3, r7, r4
 8006b26:	711a      	strb	r2, [r3, #4]
    packet_to_send_EN.trame_str.cerced_data_UN.cerced_data_str.timestamp_U32 = local_NRF_HAL_function_STR.getTimestamp_PF_U32();
 8006b28:	4b33      	ldr	r3, [pc, #204]	@ (8006bf8 <RADIO_SendPacket_B+0x13c>)
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	4798      	blx	r3
 8006b2e:	0002      	movs	r2, r0
 8006b30:	193b      	adds	r3, r7, r4
 8006b32:	609a      	str	r2, [r3, #8]
    if(payload_size_U8 > SIZE_PAYLOAD_U8)
 8006b34:	1d7b      	adds	r3, r7, #5
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	2b10      	cmp	r3, #16
 8006b3a:	d907      	bls.n	8006b4c <RADIO_SendPacket_B+0x90>
    {
		LOG_PrintString("Payload too big", LOG_SHOW_TIME_B, LOG_LEVEL_ERROR_EN, LOG_SHOW_LOG_LEVEL_B);
 8006b3c:	482f      	ldr	r0, [pc, #188]	@ (8006bfc <RADIO_SendPacket_B+0x140>)
 8006b3e:	2301      	movs	r3, #1
 8006b40:	2203      	movs	r2, #3
 8006b42:	2101      	movs	r1, #1
 8006b44:	f7ff fcea 	bl	800651c <LOG_PrintString>
		return false;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	e04e      	b.n	8006bea <RADIO_SendPacket_B+0x12e>
    }
    else
    {
        for(uint8_t i = 0; i < payload_size_U8; i++)
 8006b4c:	232f      	movs	r3, #47	@ 0x2f
 8006b4e:	18fb      	adds	r3, r7, r3
 8006b50:	2200      	movs	r2, #0
 8006b52:	701a      	strb	r2, [r3, #0]
 8006b54:	e011      	b.n	8006b7a <RADIO_SendPacket_B+0xbe>
        {
            packet_to_send_EN.trame_str.cerced_data_UN.cerced_data_str.payload_U8A[i] = payload_U8[i];
 8006b56:	202f      	movs	r0, #47	@ 0x2f
 8006b58:	183b      	adds	r3, r7, r0
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	683a      	ldr	r2, [r7, #0]
 8006b5e:	18d2      	adds	r2, r2, r3
 8006b60:	183b      	adds	r3, r7, r0
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	7811      	ldrb	r1, [r2, #0]
 8006b66:	220c      	movs	r2, #12
 8006b68:	18ba      	adds	r2, r7, r2
 8006b6a:	18d3      	adds	r3, r2, r3
 8006b6c:	1c0a      	adds	r2, r1, #0
 8006b6e:	731a      	strb	r2, [r3, #12]
        for(uint8_t i = 0; i < payload_size_U8; i++)
 8006b70:	183b      	adds	r3, r7, r0
 8006b72:	781a      	ldrb	r2, [r3, #0]
 8006b74:	183b      	adds	r3, r7, r0
 8006b76:	3201      	adds	r2, #1
 8006b78:	701a      	strb	r2, [r3, #0]
 8006b7a:	232f      	movs	r3, #47	@ 0x2f
 8006b7c:	18fa      	adds	r2, r7, r3
 8006b7e:	1d7b      	adds	r3, r7, #5
 8006b80:	7812      	ldrb	r2, [r2, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d3e6      	bcc.n	8006b56 <RADIO_SendPacket_B+0x9a>
        }
    }
    packet_to_send_EN.trame_str.CRC_ID_U32 = TOOLS_CRC32(packet_to_send_EN.trame_str.cerced_data_UN.cerced_data_U8A, SIZE_CERCED_DATA_U8);
 8006b88:	240c      	movs	r4, #12
 8006b8a:	193b      	adds	r3, r7, r4
 8006b8c:	211c      	movs	r1, #28
 8006b8e:	0018      	movs	r0, r3
 8006b90:	f000 f9c8 	bl	8006f24 <TOOLS_CRC32>
 8006b94:	0002      	movs	r2, r0
 8006b96:	0021      	movs	r1, r4
 8006b98:	187b      	adds	r3, r7, r1
 8006b9a:	61da      	str	r2, [r3, #28]

    List_of_packet_to_send_ENA[curseur_ecriture_U16] = packet_to_send_EN;
 8006b9c:	4b18      	ldr	r3, [pc, #96]	@ (8006c00 <RADIO_SendPacket_B+0x144>)
 8006b9e:	881b      	ldrh	r3, [r3, #0]
 8006ba0:	4a18      	ldr	r2, [pc, #96]	@ (8006c04 <RADIO_SendPacket_B+0x148>)
 8006ba2:	015b      	lsls	r3, r3, #5
 8006ba4:	1879      	adds	r1, r7, r1
 8006ba6:	18d3      	adds	r3, r2, r3
 8006ba8:	000a      	movs	r2, r1
 8006baa:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006bac:	c313      	stmia	r3!, {r0, r1, r4}
 8006bae:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006bb0:	c313      	stmia	r3!, {r0, r1, r4}
 8006bb2:	ca03      	ldmia	r2!, {r0, r1}
 8006bb4:	c303      	stmia	r3!, {r0, r1}
    curseur_ecriture_U16++;
 8006bb6:	4b12      	ldr	r3, [pc, #72]	@ (8006c00 <RADIO_SendPacket_B+0x144>)
 8006bb8:	881b      	ldrh	r3, [r3, #0]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	4b10      	ldr	r3, [pc, #64]	@ (8006c00 <RADIO_SendPacket_B+0x144>)
 8006bc0:	801a      	strh	r2, [r3, #0]
    if(curseur_ecriture_U16 >= SIZE_BUFFER_U16)
 8006bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8006c00 <RADIO_SendPacket_B+0x144>)
 8006bc4:	881b      	ldrh	r3, [r3, #0]
 8006bc6:	2b63      	cmp	r3, #99	@ 0x63
 8006bc8:	d902      	bls.n	8006bd0 <RADIO_SendPacket_B+0x114>
    {
        curseur_ecriture_U16 = 0;
 8006bca:	4b0d      	ldr	r3, [pc, #52]	@ (8006c00 <RADIO_SendPacket_B+0x144>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	801a      	strh	r2, [r3, #0]
    }

    if(curseur_ecriture_U16 == curseur_lecture_U16)
 8006bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8006c00 <RADIO_SendPacket_B+0x144>)
 8006bd2:	881a      	ldrh	r2, [r3, #0]
 8006bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8006c08 <RADIO_SendPacket_B+0x14c>)
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d105      	bne.n	8006be8 <RADIO_SendPacket_B+0x12c>
    {
        //logguer l'erreur
        error_counter_U16++;
 8006bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8006c0c <RADIO_SendPacket_B+0x150>)
 8006bde:	881b      	ldrh	r3, [r3, #0]
 8006be0:	3301      	adds	r3, #1
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	4b09      	ldr	r3, [pc, #36]	@ (8006c0c <RADIO_SendPacket_B+0x150>)
 8006be6:	801a      	strh	r2, [r3, #0]
    }
    return true;
 8006be8:	2301      	movs	r3, #1
}
 8006bea:	0018      	movs	r0, r3
 8006bec:	46bd      	mov	sp, r7
 8006bee:	b00d      	add	sp, #52	@ 0x34
 8006bf0:	bd90      	pop	{r4, r7, pc}
 8006bf2:	46c0      	nop			@ (mov r8, r8)
 8006bf4:	20000614 	.word	0x20000614
 8006bf8:	200004a4 	.word	0x200004a4
 8006bfc:	08007a70 	.word	0x08007a70
 8006c00:	200004bc 	.word	0x200004bc
 8006c04:	200004d4 	.word	0x200004d4
 8006c08:	200004be 	.word	0x200004be
 8006c0c:	200004c8 	.word	0x200004c8

08006c10 <RADIO_ReceiveStateMachine>:

static void RADIO_ReceiveStateMachine(void)
{
 8006c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c12:	b08f      	sub	sp, #60	@ 0x3c
 8006c14:	af04      	add	r7, sp, #16
    NRF_ret_val_en NRF_ret_val_EN;
    RADIO_trame_UN received_packet_UN;
    bool ret_val_B = false;
 8006c16:	2327      	movs	r3, #39	@ 0x27
 8006c18:	18fb      	adds	r3, r7, r3
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	701a      	strb	r2, [r3, #0]
    switch(RADIO_state_receive_packet_EN)
 8006c1e:	4b2f      	ldr	r3, [pc, #188]	@ (8006cdc <RADIO_ReceiveStateMachine+0xcc>)
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d01c      	beq.n	8006c60 <RADIO_ReceiveStateMachine+0x50>
 8006c26:	dc53      	bgt.n	8006cd0 <RADIO_ReceiveStateMachine+0xc0>
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d002      	beq.n	8006c32 <RADIO_ReceiveStateMachine+0x22>
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d004      	beq.n	8006c3a <RADIO_ReceiveStateMachine+0x2a>
                error_counter_U16++;
            }
            RADIO_state_receive_packet_EN = RADIO_RECEIVE_TRANSITION_TO_WAITING_FOR_RECEIVE_PACKET_EN;
            break;
        default:
            break;
 8006c30:	e04e      	b.n	8006cd0 <RADIO_ReceiveStateMachine+0xc0>
            RADIO_state_receive_packet_EN = RADIO_RECEIVE_WAITING_FOR_RECEIVE_PACKET_EN;
 8006c32:	4b2a      	ldr	r3, [pc, #168]	@ (8006cdc <RADIO_ReceiveStateMachine+0xcc>)
 8006c34:	2201      	movs	r2, #1
 8006c36:	701a      	strb	r2, [r3, #0]
            break;
 8006c38:	e04b      	b.n	8006cd2 <RADIO_ReceiveStateMachine+0xc2>
            NRF_ret_val_EN = NRF24_isDataAvailable_EN(0);
 8006c3a:	2526      	movs	r5, #38	@ 0x26
 8006c3c:	197c      	adds	r4, r7, r5
 8006c3e:	2000      	movs	r0, #0
 8006c40:	f7ff fbba 	bl	80063b8 <NRF24_isDataAvailable_EN>
 8006c44:	0003      	movs	r3, r0
 8006c46:	7023      	strb	r3, [r4, #0]
            if(NRF_ret_val_EN == NRF_DATA_AVAILABLE_EN)
 8006c48:	197b      	adds	r3, r7, r5
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	2b04      	cmp	r3, #4
 8006c4e:	d103      	bne.n	8006c58 <RADIO_ReceiveStateMachine+0x48>
                RADIO_state_receive_packet_EN = RADIO_RECEIVE_PROCESSING_EN;
 8006c50:	4b22      	ldr	r3, [pc, #136]	@ (8006cdc <RADIO_ReceiveStateMachine+0xcc>)
 8006c52:	2202      	movs	r2, #2
 8006c54:	701a      	strb	r2, [r3, #0]
            break;
 8006c56:	e03c      	b.n	8006cd2 <RADIO_ReceiveStateMachine+0xc2>
                RADIO_state_receive_packet_EN = RADIO_RECEIVE_WAITING_FOR_RECEIVE_PACKET_EN;
 8006c58:	4b20      	ldr	r3, [pc, #128]	@ (8006cdc <RADIO_ReceiveStateMachine+0xcc>)
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	701a      	strb	r2, [r3, #0]
            break;
 8006c5e:	e038      	b.n	8006cd2 <RADIO_ReceiveStateMachine+0xc2>
            NRF_ret_val_EN = NRF24_Receive_EN(received_packet_UN.trame_U8A);
 8006c60:	2526      	movs	r5, #38	@ 0x26
 8006c62:	197c      	adds	r4, r7, r5
 8006c64:	1d3b      	adds	r3, r7, #4
 8006c66:	0018      	movs	r0, r3
 8006c68:	f7ff fbf0 	bl	800644c <NRF24_Receive_EN>
 8006c6c:	0003      	movs	r3, r0
 8006c6e:	7023      	strb	r3, [r4, #0]
            if(NRF_ret_val_EN == NRF_OK_EN)
 8006c70:	197b      	adds	r3, r7, r5
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	2b03      	cmp	r3, #3
 8006c76:	d121      	bne.n	8006cbc <RADIO_ReceiveStateMachine+0xac>
                ret_val_B = RADIO_DecodePacket_B(received_packet_UN);
 8006c78:	2327      	movs	r3, #39	@ 0x27
 8006c7a:	18fc      	adds	r4, r7, r3
 8006c7c:	1d3b      	adds	r3, r7, #4
 8006c7e:	466a      	mov	r2, sp
 8006c80:	0011      	movs	r1, r2
 8006c82:	001a      	movs	r2, r3
 8006c84:	3210      	adds	r2, #16
 8006c86:	ca61      	ldmia	r2!, {r0, r5, r6}
 8006c88:	c161      	stmia	r1!, {r0, r5, r6}
 8006c8a:	6812      	ldr	r2, [r2, #0]
 8006c8c:	600a      	str	r2, [r1, #0]
 8006c8e:	6818      	ldr	r0, [r3, #0]
 8006c90:	6859      	ldr	r1, [r3, #4]
 8006c92:	689a      	ldr	r2, [r3, #8]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	f000 f825 	bl	8006ce4 <RADIO_DecodePacket_B>
 8006c9a:	0003      	movs	r3, r0
 8006c9c:	7023      	strb	r3, [r4, #0]
                if(ret_val_B != true)
 8006c9e:	2327      	movs	r3, #39	@ 0x27
 8006ca0:	18fb      	adds	r3, r7, r3
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	4053      	eors	r3, r2
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00c      	beq.n	8006cc8 <RADIO_ReceiveStateMachine+0xb8>
                    error_counter_U16++;
 8006cae:	4b0c      	ldr	r3, [pc, #48]	@ (8006ce0 <RADIO_ReceiveStateMachine+0xd0>)
 8006cb0:	881b      	ldrh	r3, [r3, #0]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8006ce0 <RADIO_ReceiveStateMachine+0xd0>)
 8006cb8:	801a      	strh	r2, [r3, #0]
 8006cba:	e005      	b.n	8006cc8 <RADIO_ReceiveStateMachine+0xb8>
                error_counter_U16++;
 8006cbc:	4b08      	ldr	r3, [pc, #32]	@ (8006ce0 <RADIO_ReceiveStateMachine+0xd0>)
 8006cbe:	881b      	ldrh	r3, [r3, #0]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	4b06      	ldr	r3, [pc, #24]	@ (8006ce0 <RADIO_ReceiveStateMachine+0xd0>)
 8006cc6:	801a      	strh	r2, [r3, #0]
            RADIO_state_receive_packet_EN = RADIO_RECEIVE_TRANSITION_TO_WAITING_FOR_RECEIVE_PACKET_EN;
 8006cc8:	4b04      	ldr	r3, [pc, #16]	@ (8006cdc <RADIO_ReceiveStateMachine+0xcc>)
 8006cca:	2200      	movs	r2, #0
 8006ccc:	701a      	strb	r2, [r3, #0]
            break;
 8006cce:	e000      	b.n	8006cd2 <RADIO_ReceiveStateMachine+0xc2>
            break;
 8006cd0:	46c0      	nop			@ (mov r8, r8)
    }
}
 8006cd2:	46c0      	nop			@ (mov r8, r8)
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	b00b      	add	sp, #44	@ 0x2c
 8006cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cda:	46c0      	nop			@ (mov r8, r8)
 8006cdc:	200004d1 	.word	0x200004d1
 8006ce0:	200004c8 	.word	0x200004c8

08006ce4 <RADIO_DecodePacket_B>:
{
    return my_ID_STR.my_groups_address_U8;
}

static bool RADIO_DecodePacket_B(RADIO_trame_UN received_packet_UN)
{
 8006ce4:	b084      	sub	sp, #16
 8006ce6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ce8:	46c6      	mov	lr, r8
 8006cea:	b500      	push	{lr}
 8006cec:	b086      	sub	sp, #24
 8006cee:	af04      	add	r7, sp, #16
 8006cf0:	2420      	movs	r4, #32
 8006cf2:	193c      	adds	r4, r7, r4
 8006cf4:	6020      	str	r0, [r4, #0]
 8006cf6:	6061      	str	r1, [r4, #4]
 8006cf8:	60a2      	str	r2, [r4, #8]
 8006cfa:	60e3      	str	r3, [r4, #12]
    RADIO_steps_decode_packets_en step_decode_packet_EN = RADIO_STEPS_CHECK_PROTOCOL_VERSION_EN;
 8006cfc:	1d7b      	adds	r3, r7, #5
 8006cfe:	2200      	movs	r2, #0
 8006d00:	701a      	strb	r2, [r3, #0]
    bool packet_is_for_me_B = false;
 8006d02:	1dfb      	adds	r3, r7, #7
 8006d04:	2200      	movs	r2, #0
 8006d06:	701a      	strb	r2, [r3, #0]
    bool ret_val_B = false;
 8006d08:	1d3b      	adds	r3, r7, #4
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	701a      	strb	r2, [r3, #0]
    switch (step_decode_packet_EN)
 8006d0e:	1d7b      	adds	r3, r7, #5
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	2b04      	cmp	r3, #4
 8006d14:	d900      	bls.n	8006d18 <RADIO_DecodePacket_B+0x34>
 8006d16:	e0b0      	b.n	8006e7a <RADIO_DecodePacket_B+0x196>
 8006d18:	009a      	lsls	r2, r3, #2
 8006d1a:	4b5d      	ldr	r3, [pc, #372]	@ (8006e90 <RADIO_DecodePacket_B+0x1ac>)
 8006d1c:	18d3      	adds	r3, r2, r3
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	469f      	mov	pc, r3
    {
        case RADIO_STEPS_CHECK_PROTOCOL_VERSION_EN:
            if(received_packet_UN.trame_str.cerced_data_UN.cerced_data_str.protocol_version_U8 == my_ID_STR.my_protocol_version_U8)
 8006d22:	2320      	movs	r3, #32
 8006d24:	18fb      	adds	r3, r7, r3
 8006d26:	781a      	ldrb	r2, [r3, #0]
 8006d28:	4b5a      	ldr	r3, [pc, #360]	@ (8006e94 <RADIO_DecodePacket_B+0x1b0>)
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d103      	bne.n	8006d38 <RADIO_DecodePacket_B+0x54>
            {
                step_decode_packet_EN = RADIO_STEPS_CHECK_NETWORK_ID_EN;
 8006d30:	1d7b      	adds	r3, r7, #5
 8006d32:	2201      	movs	r2, #1
 8006d34:	701a      	strb	r2, [r3, #0]
 8006d36:	e001      	b.n	8006d3c <RADIO_DecodePacket_B+0x58>
            }
            else
            {
                return false;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	e09f      	b.n	8006e7c <RADIO_DecodePacket_B+0x198>
            }
        // fall through
        case RADIO_STEPS_CHECK_NETWORK_ID_EN:
            if(received_packet_UN.trame_str.cerced_data_UN.cerced_data_str.network_ID_U8 == my_ID_STR.my_network_ID_U8)
 8006d3c:	2320      	movs	r3, #32
 8006d3e:	18fb      	adds	r3, r7, r3
 8006d40:	785a      	ldrb	r2, [r3, #1]
 8006d42:	4b54      	ldr	r3, [pc, #336]	@ (8006e94 <RADIO_DecodePacket_B+0x1b0>)
 8006d44:	785b      	ldrb	r3, [r3, #1]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d103      	bne.n	8006d52 <RADIO_DecodePacket_B+0x6e>
            {
                step_decode_packet_EN = RADIO_STEPS_CHECK_DESTINATION_ADDRESS_EN;
 8006d4a:	1d7b      	adds	r3, r7, #5
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	701a      	strb	r2, [r3, #0]
 8006d50:	e001      	b.n	8006d56 <RADIO_DecodePacket_B+0x72>
            }
            else
            {
                return false;
 8006d52:	2300      	movs	r3, #0
 8006d54:	e092      	b.n	8006e7c <RADIO_DecodePacket_B+0x198>
            }
        // fall through
        case RADIO_STEPS_CHECK_DESTINATION_ADDRESS_EN:
            for (uint8_t i_U8 = 0; i_U8 < NUMBER_MAX_OF_GROUPS_U8; i_U8++)
 8006d56:	1dbb      	adds	r3, r7, #6
 8006d58:	2200      	movs	r2, #0
 8006d5a:	701a      	strb	r2, [r3, #0]
 8006d5c:	e011      	b.n	8006d82 <RADIO_DecodePacket_B+0x9e>
            {
                if(received_packet_UN.trame_str.cerced_data_UN.cerced_data_str.destination_address_U8 == my_ID_STR.my_groups_address_U8[i_U8])
 8006d5e:	2320      	movs	r3, #32
 8006d60:	18fb      	adds	r3, r7, r3
 8006d62:	789a      	ldrb	r2, [r3, #2]
 8006d64:	1dbb      	adds	r3, r7, #6
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	494a      	ldr	r1, [pc, #296]	@ (8006e94 <RADIO_DecodePacket_B+0x1b0>)
 8006d6a:	18cb      	adds	r3, r1, r3
 8006d6c:	78db      	ldrb	r3, [r3, #3]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d102      	bne.n	8006d78 <RADIO_DecodePacket_B+0x94>
                {
                    packet_is_for_me_B = true;
 8006d72:	1dfb      	adds	r3, r7, #7
 8006d74:	2201      	movs	r2, #1
 8006d76:	701a      	strb	r2, [r3, #0]
            for (uint8_t i_U8 = 0; i_U8 < NUMBER_MAX_OF_GROUPS_U8; i_U8++)
 8006d78:	1dbb      	adds	r3, r7, #6
 8006d7a:	781a      	ldrb	r2, [r3, #0]
 8006d7c:	1dbb      	adds	r3, r7, #6
 8006d7e:	3201      	adds	r2, #1
 8006d80:	701a      	strb	r2, [r3, #0]
 8006d82:	1dbb      	adds	r3, r7, #6
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	2b09      	cmp	r3, #9
 8006d88:	d9e9      	bls.n	8006d5e <RADIO_DecodePacket_B+0x7a>
                }
            }
            if(packet_is_for_me_B == true || received_packet_UN.trame_str.cerced_data_UN.cerced_data_str.destination_address_U8 == my_ID_STR.my_address_U8)
 8006d8a:	1dfb      	adds	r3, r7, #7
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d106      	bne.n	8006da0 <RADIO_DecodePacket_B+0xbc>
 8006d92:	2320      	movs	r3, #32
 8006d94:	18fb      	adds	r3, r7, r3
 8006d96:	789a      	ldrb	r2, [r3, #2]
 8006d98:	4b3e      	ldr	r3, [pc, #248]	@ (8006e94 <RADIO_DecodePacket_B+0x1b0>)
 8006d9a:	789b      	ldrb	r3, [r3, #2]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d103      	bne.n	8006da8 <RADIO_DecodePacket_B+0xc4>
            {
                step_decode_packet_EN = RADIO_STEPS_CHECK_CRC_ID_EN;
 8006da0:	1d7b      	adds	r3, r7, #5
 8006da2:	2203      	movs	r2, #3
 8006da4:	701a      	strb	r2, [r3, #0]
 8006da6:	e001      	b.n	8006dac <RADIO_DecodePacket_B+0xc8>
            }
            else
            {
                return false;
 8006da8:	2300      	movs	r3, #0
 8006daa:	e067      	b.n	8006e7c <RADIO_DecodePacket_B+0x198>
            }
        // fall through
        case RADIO_STEPS_CHECK_CRC_ID_EN:
            if(received_packet_UN.trame_str.CRC_ID_U32 == TOOLS_CRC32(received_packet_UN.trame_str.cerced_data_UN.cerced_data_U8A, SIZE_CERCED_DATA_U8))
 8006dac:	2220      	movs	r2, #32
 8006dae:	18bb      	adds	r3, r7, r2
 8006db0:	69dc      	ldr	r4, [r3, #28]
 8006db2:	18bb      	adds	r3, r7, r2
 8006db4:	211c      	movs	r1, #28
 8006db6:	0018      	movs	r0, r3
 8006db8:	f000 f8b4 	bl	8006f24 <TOOLS_CRC32>
 8006dbc:	0003      	movs	r3, r0
 8006dbe:	429c      	cmp	r4, r3
 8006dc0:	d103      	bne.n	8006dca <RADIO_DecodePacket_B+0xe6>
            {
                step_decode_packet_EN = RADIO_STEPS_DECODE_PROCESS_EN;
 8006dc2:	1d7b      	adds	r3, r7, #5
 8006dc4:	2204      	movs	r2, #4
 8006dc6:	701a      	strb	r2, [r3, #0]
 8006dc8:	e001      	b.n	8006dce <RADIO_DecodePacket_B+0xea>
            }
            else
            {
                return false;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	e056      	b.n	8006e7c <RADIO_DecodePacket_B+0x198>
            }
        // fall through
        case RADIO_STEPS_DECODE_PROCESS_EN:
            if(received_packet_UN.trame_str.cerced_data_UN.cerced_data_str.trame_type_EN_6 == RADIO_ACKNOWLEDGEMENT_EN)
 8006dce:	2120      	movs	r1, #32
 8006dd0:	187b      	adds	r3, r7, r1
 8006dd2:	78db      	ldrb	r3, [r3, #3]
 8006dd4:	223f      	movs	r2, #63	@ 0x3f
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d113      	bne.n	8006e06 <RADIO_DecodePacket_B+0x122>
            {
                if(packet_ID_to_acknowledge_U32 == received_packet_UN.trame_str.cerced_data_UN.cerced_data_str.payload_U8A[0])
 8006dde:	187b      	adds	r3, r7, r1
 8006de0:	7b1b      	ldrb	r3, [r3, #12]
 8006de2:	001a      	movs	r2, r3
 8006de4:	4b2c      	ldr	r3, [pc, #176]	@ (8006e98 <RADIO_DecodePacket_B+0x1b4>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d104      	bne.n	8006df6 <RADIO_DecodePacket_B+0x112>
                {
                    RADIO_setAcknowledgeReceivedFlag(true);
 8006dec:	2001      	movs	r0, #1
 8006dee:	f7ff fe23 	bl	8006a38 <RADIO_setAcknowledgeReceivedFlag>
                    return true;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e042      	b.n	8006e7c <RADIO_DecodePacket_B+0x198>
                }
                else
                {
                    //logguer l'erreur
                    error_counter_U16++;
 8006df6:	4b29      	ldr	r3, [pc, #164]	@ (8006e9c <RADIO_DecodePacket_B+0x1b8>)
 8006df8:	881b      	ldrh	r3, [r3, #0]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	4b27      	ldr	r3, [pc, #156]	@ (8006e9c <RADIO_DecodePacket_B+0x1b8>)
 8006e00:	801a      	strh	r2, [r3, #0]
                    return false;
 8006e02:	2300      	movs	r3, #0
 8006e04:	e03a      	b.n	8006e7c <RADIO_DecodePacket_B+0x198>
                }
            }
            else
            {
            	if(RADIO_treatment_function_B_PF != NULL)
 8006e06:	4b26      	ldr	r3, [pc, #152]	@ (8006ea0 <RADIO_DecodePacket_B+0x1bc>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d033      	beq.n	8006e76 <RADIO_DecodePacket_B+0x192>
            	{
            		ret_val_B = RADIO_treatment_function_B_PF(received_packet_UN);
 8006e0e:	4b24      	ldr	r3, [pc, #144]	@ (8006ea0 <RADIO_DecodePacket_B+0x1bc>)
 8006e10:	681d      	ldr	r5, [r3, #0]
 8006e12:	1d3b      	adds	r3, r7, #4
 8006e14:	4698      	mov	r8, r3
 8006e16:	2320      	movs	r3, #32
 8006e18:	18fb      	adds	r3, r7, r3
 8006e1a:	466a      	mov	r2, sp
 8006e1c:	0011      	movs	r1, r2
 8006e1e:	001a      	movs	r2, r3
 8006e20:	3210      	adds	r2, #16
 8006e22:	ca51      	ldmia	r2!, {r0, r4, r6}
 8006e24:	c151      	stmia	r1!, {r0, r4, r6}
 8006e26:	6812      	ldr	r2, [r2, #0]
 8006e28:	600a      	str	r2, [r1, #0]
 8006e2a:	6818      	ldr	r0, [r3, #0]
 8006e2c:	6859      	ldr	r1, [r3, #4]
 8006e2e:	689a      	ldr	r2, [r3, #8]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	47a8      	blx	r5
 8006e34:	0003      	movs	r3, r0
 8006e36:	4642      	mov	r2, r8
 8006e38:	7013      	strb	r3, [r2, #0]
					if(ret_val_B == true)
 8006e3a:	1d3b      	adds	r3, r7, #4
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d011      	beq.n	8006e66 <RADIO_DecodePacket_B+0x182>
					{
						RADIO_sendAcknowledge(received_packet_UN);
 8006e42:	2320      	movs	r3, #32
 8006e44:	18fb      	adds	r3, r7, r3
 8006e46:	466a      	mov	r2, sp
 8006e48:	0011      	movs	r1, r2
 8006e4a:	001a      	movs	r2, r3
 8006e4c:	3210      	adds	r2, #16
 8006e4e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8006e50:	c131      	stmia	r1!, {r0, r4, r5}
 8006e52:	6812      	ldr	r2, [r2, #0]
 8006e54:	600a      	str	r2, [r1, #0]
 8006e56:	6818      	ldr	r0, [r3, #0]
 8006e58:	6859      	ldr	r1, [r3, #4]
 8006e5a:	689a      	ldr	r2, [r3, #8]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	f000 f821 	bl	8006ea4 <RADIO_sendAcknowledge>
						return true;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e00a      	b.n	8006e7c <RADIO_DecodePacket_B+0x198>
					}
					else
					{
						//logguer l'erreur
						error_counter_U16++;
 8006e66:	4b0d      	ldr	r3, [pc, #52]	@ (8006e9c <RADIO_DecodePacket_B+0x1b8>)
 8006e68:	881b      	ldrh	r3, [r3, #0]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8006e9c <RADIO_DecodePacket_B+0x1b8>)
 8006e70:	801a      	strh	r2, [r3, #0]
						return false;
 8006e72:	2300      	movs	r3, #0
 8006e74:	e002      	b.n	8006e7c <RADIO_DecodePacket_B+0x198>
					}
            	}
            	else
            	{
            		return true;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e000      	b.n	8006e7c <RADIO_DecodePacket_B+0x198>
            	}
            }
        default:
            return false;
 8006e7a:	2300      	movs	r3, #0
    }
}
 8006e7c:	0018      	movs	r0, r3
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	b002      	add	sp, #8
 8006e82:	bc80      	pop	{r7}
 8006e84:	46b8      	mov	r8, r7
 8006e86:	bcf0      	pop	{r4, r5, r6, r7}
 8006e88:	bc08      	pop	{r3}
 8006e8a:	b004      	add	sp, #16
 8006e8c:	4718      	bx	r3
 8006e8e:	46c0      	nop			@ (mov r8, r8)
 8006e90:	08007ba4 	.word	0x08007ba4
 8006e94:	20000614 	.word	0x20000614
 8006e98:	200004c4 	.word	0x200004c4
 8006e9c:	200004c8 	.word	0x200004c8
 8006ea0:	20000624 	.word	0x20000624

08006ea4 <RADIO_sendAcknowledge>:

static void RADIO_sendAcknowledge(RADIO_trame_UN packet_to_ack)
{
 8006ea4:	b084      	sub	sp, #16
 8006ea6:	b5b0      	push	{r4, r5, r7, lr}
 8006ea8:	b082      	sub	sp, #8
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	2518      	movs	r5, #24
 8006eae:	197c      	adds	r4, r7, r5
 8006eb0:	6020      	str	r0, [r4, #0]
 8006eb2:	6061      	str	r1, [r4, #4]
 8006eb4:	60a2      	str	r2, [r4, #8]
 8006eb6:	60e3      	str	r3, [r4, #12]
    uint8_t payload_U8[1] = {packet_to_ack.trame_str.CRC_ID_U32};
 8006eb8:	0029      	movs	r1, r5
 8006eba:	187b      	adds	r3, r7, r1
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	b2da      	uxtb	r2, r3
 8006ec0:	1d3b      	adds	r3, r7, #4
 8006ec2:	701a      	strb	r2, [r3, #0]
    RADIO_SendPacket_B(packet_to_ack.trame_str.cerced_data_UN.cerced_data_str.source_address_U8[0], RADIO_ACKNOWLEDGEMENT_EN, payload_U8, 1);
 8006ec4:	187b      	adds	r3, r7, r1
 8006ec6:	7918      	ldrb	r0, [r3, #4]
 8006ec8:	1d3a      	adds	r2, r7, #4
 8006eca:	2301      	movs	r3, #1
 8006ecc:	2100      	movs	r1, #0
 8006ece:	f7ff fdf5 	bl	8006abc <RADIO_SendPacket_B>
}
 8006ed2:	46c0      	nop			@ (mov r8, r8)
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	b002      	add	sp, #8
 8006ed8:	bcb0      	pop	{r4, r5, r7}
 8006eda:	bc08      	pop	{r3}
 8006edc:	b004      	add	sp, #16
 8006ede:	4718      	bx	r3

08006ee0 <RADIO_process>:

void RADIO_process(void)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	af00      	add	r7, sp, #0
    RADIO_SendStateMachine();
 8006ee4:	f7ff fcb0 	bl	8006848 <RADIO_SendStateMachine>
    RADIO_ReceiveStateMachine();
 8006ee8:	f7ff fe92 	bl	8006c10 <RADIO_ReceiveStateMachine>
}
 8006eec:	46c0      	nop			@ (mov r8, r8)
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
	...

08006ef4 <RADIO_SendPing>:

void RADIO_SendPing(uint8_t destination_address_U8)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	0002      	movs	r2, r0
 8006efc:	1dfb      	adds	r3, r7, #7
 8006efe:	701a      	strb	r2, [r3, #0]
    uint8_t payload_U8[1] = {RADIO_PING_EN};
 8006f00:	210c      	movs	r1, #12
 8006f02:	187b      	adds	r3, r7, r1
 8006f04:	4a06      	ldr	r2, [pc, #24]	@ (8006f20 <RADIO_SendPing+0x2c>)
 8006f06:	7812      	ldrb	r2, [r2, #0]
 8006f08:	701a      	strb	r2, [r3, #0]
    RADIO_SendPacket_B(destination_address_U8, RADIO_PING_EN, payload_U8, 1);
 8006f0a:	187a      	adds	r2, r7, r1
 8006f0c:	1dfb      	adds	r3, r7, #7
 8006f0e:	7818      	ldrb	r0, [r3, #0]
 8006f10:	2301      	movs	r3, #1
 8006f12:	2115      	movs	r1, #21
 8006f14:	f7ff fdd2 	bl	8006abc <RADIO_SendPacket_B>
}
 8006f18:	46c0      	nop			@ (mov r8, r8)
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	b004      	add	sp, #16
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	08007a80 	.word	0x08007a80

08006f24 <TOOLS_CRC32>:
};



uint32_t TOOLS_CRC32(uint8_t *data, uint32_t length)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFF;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	425b      	negs	r3, r3
 8006f32:	617b      	str	r3, [r7, #20]
    uint32_t i;
    uint32_t j;
    for (i = 0; i < length; i++)
 8006f34:	2300      	movs	r3, #0
 8006f36:	613b      	str	r3, [r7, #16]
 8006f38:	e020      	b.n	8006f7c <TOOLS_CRC32+0x58>
    {
        crc ^= data[i];
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	18d3      	adds	r3, r2, r3
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	001a      	movs	r2, r3
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	4053      	eors	r3, r2
 8006f48:	617b      	str	r3, [r7, #20]
        for (j = 0; j < 8; j++)
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	60fb      	str	r3, [r7, #12]
 8006f4e:	e00f      	b.n	8006f70 <TOOLS_CRC32+0x4c>
        {
            if (crc & 1)
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	2201      	movs	r2, #1
 8006f54:	4013      	ands	r3, r2
 8006f56:	d005      	beq.n	8006f64 <TOOLS_CRC32+0x40>
            {
                crc = (crc >> 1) ^ 0xEDB88320;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	085b      	lsrs	r3, r3, #1
 8006f5c:	4a0c      	ldr	r2, [pc, #48]	@ (8006f90 <TOOLS_CRC32+0x6c>)
 8006f5e:	4053      	eors	r3, r2
 8006f60:	617b      	str	r3, [r7, #20]
 8006f62:	e002      	b.n	8006f6a <TOOLS_CRC32+0x46>
            }
            else
            {
                crc = crc >> 1;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	085b      	lsrs	r3, r3, #1
 8006f68:	617b      	str	r3, [r7, #20]
        for (j = 0; j < 8; j++)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2b07      	cmp	r3, #7
 8006f74:	d9ec      	bls.n	8006f50 <TOOLS_CRC32+0x2c>
    for (i = 0; i < length; i++)
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	613b      	str	r3, [r7, #16]
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d3da      	bcc.n	8006f3a <TOOLS_CRC32+0x16>
            }
        }
    }
    return ~crc;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	43db      	mvns	r3, r3
}
 8006f88:	0018      	movs	r0, r3
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	b006      	add	sp, #24
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	edb88320 	.word	0xedb88320

08006f94 <TOOLS_IsTimeoutEnded_B>:

    return crc_U8;
}

bool TOOLS_IsTimeoutEnded_B(uint32_t start_time_U32, uint32_t timeout_U32, uint32_t current_time_U32)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b086      	sub	sp, #24
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	607a      	str	r2, [r7, #4]
	bool retval_B = (current_time_U32 > start_time_U32 && current_time_U32 - start_time_U32 > timeout_U32) ||
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d905      	bls.n	8006fb4 <TOOLS_IsTimeoutEnded_B+0x20>
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d30a      	bcc.n	8006fca <TOOLS_IsTimeoutEnded_B+0x36>
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d208      	bcs.n	8006fce <TOOLS_IsTimeoutEnded_B+0x3a>
		   (current_time_U32 < start_time_U32 && current_time_U32 - start_time_U32 + UINT32_MAX_VALUE_U32 > timeout_U32);
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d201      	bcs.n	8006fce <TOOLS_IsTimeoutEnded_B+0x3a>
	bool retval_B = (current_time_U32 > start_time_U32 && current_time_U32 - start_time_U32 > timeout_U32) ||
 8006fca:	2201      	movs	r2, #1
 8006fcc:	e000      	b.n	8006fd0 <TOOLS_IsTimeoutEnded_B+0x3c>
 8006fce:	2200      	movs	r2, #0
 8006fd0:	2017      	movs	r0, #23
 8006fd2:	183b      	adds	r3, r7, r0
 8006fd4:	701a      	strb	r2, [r3, #0]
 8006fd6:	781a      	ldrb	r2, [r3, #0]
 8006fd8:	2101      	movs	r1, #1
 8006fda:	400a      	ands	r2, r1
 8006fdc:	701a      	strb	r2, [r3, #0]
	return retval_B;
 8006fde:	183b      	adds	r3, r7, r0
 8006fe0:	781b      	ldrb	r3, [r3, #0]
}
 8006fe2:	0018      	movs	r0, r3
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	b006      	add	sp, #24
 8006fe8:	bd80      	pop	{r7, pc}
	...

08006fec <siprintf>:
 8006fec:	b40e      	push	{r1, r2, r3}
 8006fee:	b500      	push	{lr}
 8006ff0:	490b      	ldr	r1, [pc, #44]	@ (8007020 <siprintf+0x34>)
 8006ff2:	b09c      	sub	sp, #112	@ 0x70
 8006ff4:	ab1d      	add	r3, sp, #116	@ 0x74
 8006ff6:	9002      	str	r0, [sp, #8]
 8006ff8:	9006      	str	r0, [sp, #24]
 8006ffa:	9107      	str	r1, [sp, #28]
 8006ffc:	9104      	str	r1, [sp, #16]
 8006ffe:	4809      	ldr	r0, [pc, #36]	@ (8007024 <siprintf+0x38>)
 8007000:	4909      	ldr	r1, [pc, #36]	@ (8007028 <siprintf+0x3c>)
 8007002:	cb04      	ldmia	r3!, {r2}
 8007004:	9105      	str	r1, [sp, #20]
 8007006:	6800      	ldr	r0, [r0, #0]
 8007008:	a902      	add	r1, sp, #8
 800700a:	9301      	str	r3, [sp, #4]
 800700c:	f000 f9b0 	bl	8007370 <_svfiprintf_r>
 8007010:	2200      	movs	r2, #0
 8007012:	9b02      	ldr	r3, [sp, #8]
 8007014:	701a      	strb	r2, [r3, #0]
 8007016:	b01c      	add	sp, #112	@ 0x70
 8007018:	bc08      	pop	{r3}
 800701a:	b003      	add	sp, #12
 800701c:	4718      	bx	r3
 800701e:	46c0      	nop			@ (mov r8, r8)
 8007020:	7fffffff 	.word	0x7fffffff
 8007024:	2000003c 	.word	0x2000003c
 8007028:	ffff0208 	.word	0xffff0208

0800702c <memset>:
 800702c:	0003      	movs	r3, r0
 800702e:	1882      	adds	r2, r0, r2
 8007030:	4293      	cmp	r3, r2
 8007032:	d100      	bne.n	8007036 <memset+0xa>
 8007034:	4770      	bx	lr
 8007036:	7019      	strb	r1, [r3, #0]
 8007038:	3301      	adds	r3, #1
 800703a:	e7f9      	b.n	8007030 <memset+0x4>

0800703c <__errno>:
 800703c:	4b01      	ldr	r3, [pc, #4]	@ (8007044 <__errno+0x8>)
 800703e:	6818      	ldr	r0, [r3, #0]
 8007040:	4770      	bx	lr
 8007042:	46c0      	nop			@ (mov r8, r8)
 8007044:	2000003c 	.word	0x2000003c

08007048 <__libc_init_array>:
 8007048:	b570      	push	{r4, r5, r6, lr}
 800704a:	2600      	movs	r6, #0
 800704c:	4c0c      	ldr	r4, [pc, #48]	@ (8007080 <__libc_init_array+0x38>)
 800704e:	4d0d      	ldr	r5, [pc, #52]	@ (8007084 <__libc_init_array+0x3c>)
 8007050:	1b64      	subs	r4, r4, r5
 8007052:	10a4      	asrs	r4, r4, #2
 8007054:	42a6      	cmp	r6, r4
 8007056:	d109      	bne.n	800706c <__libc_init_array+0x24>
 8007058:	2600      	movs	r6, #0
 800705a:	f000 fc6d 	bl	8007938 <_init>
 800705e:	4c0a      	ldr	r4, [pc, #40]	@ (8007088 <__libc_init_array+0x40>)
 8007060:	4d0a      	ldr	r5, [pc, #40]	@ (800708c <__libc_init_array+0x44>)
 8007062:	1b64      	subs	r4, r4, r5
 8007064:	10a4      	asrs	r4, r4, #2
 8007066:	42a6      	cmp	r6, r4
 8007068:	d105      	bne.n	8007076 <__libc_init_array+0x2e>
 800706a:	bd70      	pop	{r4, r5, r6, pc}
 800706c:	00b3      	lsls	r3, r6, #2
 800706e:	58eb      	ldr	r3, [r5, r3]
 8007070:	4798      	blx	r3
 8007072:	3601      	adds	r6, #1
 8007074:	e7ee      	b.n	8007054 <__libc_init_array+0xc>
 8007076:	00b3      	lsls	r3, r6, #2
 8007078:	58eb      	ldr	r3, [r5, r3]
 800707a:	4798      	blx	r3
 800707c:	3601      	adds	r6, #1
 800707e:	e7f2      	b.n	8007066 <__libc_init_array+0x1e>
 8007080:	08007bf4 	.word	0x08007bf4
 8007084:	08007bf4 	.word	0x08007bf4
 8007088:	08007bf8 	.word	0x08007bf8
 800708c:	08007bf4 	.word	0x08007bf4

08007090 <__retarget_lock_acquire_recursive>:
 8007090:	4770      	bx	lr

08007092 <__retarget_lock_release_recursive>:
 8007092:	4770      	bx	lr

08007094 <strcpy>:
 8007094:	0003      	movs	r3, r0
 8007096:	780a      	ldrb	r2, [r1, #0]
 8007098:	3101      	adds	r1, #1
 800709a:	701a      	strb	r2, [r3, #0]
 800709c:	3301      	adds	r3, #1
 800709e:	2a00      	cmp	r2, #0
 80070a0:	d1f9      	bne.n	8007096 <strcpy+0x2>
 80070a2:	4770      	bx	lr

080070a4 <memcpy>:
 80070a4:	2300      	movs	r3, #0
 80070a6:	b510      	push	{r4, lr}
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d100      	bne.n	80070ae <memcpy+0xa>
 80070ac:	bd10      	pop	{r4, pc}
 80070ae:	5ccc      	ldrb	r4, [r1, r3]
 80070b0:	54c4      	strb	r4, [r0, r3]
 80070b2:	3301      	adds	r3, #1
 80070b4:	e7f8      	b.n	80070a8 <memcpy+0x4>
	...

080070b8 <_free_r>:
 80070b8:	b570      	push	{r4, r5, r6, lr}
 80070ba:	0005      	movs	r5, r0
 80070bc:	1e0c      	subs	r4, r1, #0
 80070be:	d010      	beq.n	80070e2 <_free_r+0x2a>
 80070c0:	3c04      	subs	r4, #4
 80070c2:	6823      	ldr	r3, [r4, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	da00      	bge.n	80070ca <_free_r+0x12>
 80070c8:	18e4      	adds	r4, r4, r3
 80070ca:	0028      	movs	r0, r5
 80070cc:	f000 f8e0 	bl	8007290 <__malloc_lock>
 80070d0:	4a1d      	ldr	r2, [pc, #116]	@ (8007148 <_free_r+0x90>)
 80070d2:	6813      	ldr	r3, [r2, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d105      	bne.n	80070e4 <_free_r+0x2c>
 80070d8:	6063      	str	r3, [r4, #4]
 80070da:	6014      	str	r4, [r2, #0]
 80070dc:	0028      	movs	r0, r5
 80070de:	f000 f8df 	bl	80072a0 <__malloc_unlock>
 80070e2:	bd70      	pop	{r4, r5, r6, pc}
 80070e4:	42a3      	cmp	r3, r4
 80070e6:	d908      	bls.n	80070fa <_free_r+0x42>
 80070e8:	6820      	ldr	r0, [r4, #0]
 80070ea:	1821      	adds	r1, r4, r0
 80070ec:	428b      	cmp	r3, r1
 80070ee:	d1f3      	bne.n	80070d8 <_free_r+0x20>
 80070f0:	6819      	ldr	r1, [r3, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	1809      	adds	r1, r1, r0
 80070f6:	6021      	str	r1, [r4, #0]
 80070f8:	e7ee      	b.n	80070d8 <_free_r+0x20>
 80070fa:	001a      	movs	r2, r3
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d001      	beq.n	8007106 <_free_r+0x4e>
 8007102:	42a3      	cmp	r3, r4
 8007104:	d9f9      	bls.n	80070fa <_free_r+0x42>
 8007106:	6811      	ldr	r1, [r2, #0]
 8007108:	1850      	adds	r0, r2, r1
 800710a:	42a0      	cmp	r0, r4
 800710c:	d10b      	bne.n	8007126 <_free_r+0x6e>
 800710e:	6820      	ldr	r0, [r4, #0]
 8007110:	1809      	adds	r1, r1, r0
 8007112:	1850      	adds	r0, r2, r1
 8007114:	6011      	str	r1, [r2, #0]
 8007116:	4283      	cmp	r3, r0
 8007118:	d1e0      	bne.n	80070dc <_free_r+0x24>
 800711a:	6818      	ldr	r0, [r3, #0]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	1841      	adds	r1, r0, r1
 8007120:	6011      	str	r1, [r2, #0]
 8007122:	6053      	str	r3, [r2, #4]
 8007124:	e7da      	b.n	80070dc <_free_r+0x24>
 8007126:	42a0      	cmp	r0, r4
 8007128:	d902      	bls.n	8007130 <_free_r+0x78>
 800712a:	230c      	movs	r3, #12
 800712c:	602b      	str	r3, [r5, #0]
 800712e:	e7d5      	b.n	80070dc <_free_r+0x24>
 8007130:	6820      	ldr	r0, [r4, #0]
 8007132:	1821      	adds	r1, r4, r0
 8007134:	428b      	cmp	r3, r1
 8007136:	d103      	bne.n	8007140 <_free_r+0x88>
 8007138:	6819      	ldr	r1, [r3, #0]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	1809      	adds	r1, r1, r0
 800713e:	6021      	str	r1, [r4, #0]
 8007140:	6063      	str	r3, [r4, #4]
 8007142:	6054      	str	r4, [r2, #4]
 8007144:	e7ca      	b.n	80070dc <_free_r+0x24>
 8007146:	46c0      	nop			@ (mov r8, r8)
 8007148:	2000076c 	.word	0x2000076c

0800714c <sbrk_aligned>:
 800714c:	b570      	push	{r4, r5, r6, lr}
 800714e:	4e0f      	ldr	r6, [pc, #60]	@ (800718c <sbrk_aligned+0x40>)
 8007150:	000d      	movs	r5, r1
 8007152:	6831      	ldr	r1, [r6, #0]
 8007154:	0004      	movs	r4, r0
 8007156:	2900      	cmp	r1, #0
 8007158:	d102      	bne.n	8007160 <sbrk_aligned+0x14>
 800715a:	f000 fb99 	bl	8007890 <_sbrk_r>
 800715e:	6030      	str	r0, [r6, #0]
 8007160:	0029      	movs	r1, r5
 8007162:	0020      	movs	r0, r4
 8007164:	f000 fb94 	bl	8007890 <_sbrk_r>
 8007168:	1c43      	adds	r3, r0, #1
 800716a:	d103      	bne.n	8007174 <sbrk_aligned+0x28>
 800716c:	2501      	movs	r5, #1
 800716e:	426d      	negs	r5, r5
 8007170:	0028      	movs	r0, r5
 8007172:	bd70      	pop	{r4, r5, r6, pc}
 8007174:	2303      	movs	r3, #3
 8007176:	1cc5      	adds	r5, r0, #3
 8007178:	439d      	bics	r5, r3
 800717a:	42a8      	cmp	r0, r5
 800717c:	d0f8      	beq.n	8007170 <sbrk_aligned+0x24>
 800717e:	1a29      	subs	r1, r5, r0
 8007180:	0020      	movs	r0, r4
 8007182:	f000 fb85 	bl	8007890 <_sbrk_r>
 8007186:	3001      	adds	r0, #1
 8007188:	d1f2      	bne.n	8007170 <sbrk_aligned+0x24>
 800718a:	e7ef      	b.n	800716c <sbrk_aligned+0x20>
 800718c:	20000768 	.word	0x20000768

08007190 <_malloc_r>:
 8007190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007192:	2203      	movs	r2, #3
 8007194:	1ccb      	adds	r3, r1, #3
 8007196:	4393      	bics	r3, r2
 8007198:	3308      	adds	r3, #8
 800719a:	0005      	movs	r5, r0
 800719c:	001f      	movs	r7, r3
 800719e:	2b0c      	cmp	r3, #12
 80071a0:	d234      	bcs.n	800720c <_malloc_r+0x7c>
 80071a2:	270c      	movs	r7, #12
 80071a4:	42b9      	cmp	r1, r7
 80071a6:	d833      	bhi.n	8007210 <_malloc_r+0x80>
 80071a8:	0028      	movs	r0, r5
 80071aa:	f000 f871 	bl	8007290 <__malloc_lock>
 80071ae:	4e37      	ldr	r6, [pc, #220]	@ (800728c <_malloc_r+0xfc>)
 80071b0:	6833      	ldr	r3, [r6, #0]
 80071b2:	001c      	movs	r4, r3
 80071b4:	2c00      	cmp	r4, #0
 80071b6:	d12f      	bne.n	8007218 <_malloc_r+0x88>
 80071b8:	0039      	movs	r1, r7
 80071ba:	0028      	movs	r0, r5
 80071bc:	f7ff ffc6 	bl	800714c <sbrk_aligned>
 80071c0:	0004      	movs	r4, r0
 80071c2:	1c43      	adds	r3, r0, #1
 80071c4:	d15f      	bne.n	8007286 <_malloc_r+0xf6>
 80071c6:	6834      	ldr	r4, [r6, #0]
 80071c8:	9400      	str	r4, [sp, #0]
 80071ca:	9b00      	ldr	r3, [sp, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d14a      	bne.n	8007266 <_malloc_r+0xd6>
 80071d0:	2c00      	cmp	r4, #0
 80071d2:	d052      	beq.n	800727a <_malloc_r+0xea>
 80071d4:	6823      	ldr	r3, [r4, #0]
 80071d6:	0028      	movs	r0, r5
 80071d8:	18e3      	adds	r3, r4, r3
 80071da:	9900      	ldr	r1, [sp, #0]
 80071dc:	9301      	str	r3, [sp, #4]
 80071de:	f000 fb57 	bl	8007890 <_sbrk_r>
 80071e2:	9b01      	ldr	r3, [sp, #4]
 80071e4:	4283      	cmp	r3, r0
 80071e6:	d148      	bne.n	800727a <_malloc_r+0xea>
 80071e8:	6823      	ldr	r3, [r4, #0]
 80071ea:	0028      	movs	r0, r5
 80071ec:	1aff      	subs	r7, r7, r3
 80071ee:	0039      	movs	r1, r7
 80071f0:	f7ff ffac 	bl	800714c <sbrk_aligned>
 80071f4:	3001      	adds	r0, #1
 80071f6:	d040      	beq.n	800727a <_malloc_r+0xea>
 80071f8:	6823      	ldr	r3, [r4, #0]
 80071fa:	19db      	adds	r3, r3, r7
 80071fc:	6023      	str	r3, [r4, #0]
 80071fe:	6833      	ldr	r3, [r6, #0]
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	2a00      	cmp	r2, #0
 8007204:	d133      	bne.n	800726e <_malloc_r+0xde>
 8007206:	9b00      	ldr	r3, [sp, #0]
 8007208:	6033      	str	r3, [r6, #0]
 800720a:	e019      	b.n	8007240 <_malloc_r+0xb0>
 800720c:	2b00      	cmp	r3, #0
 800720e:	dac9      	bge.n	80071a4 <_malloc_r+0x14>
 8007210:	230c      	movs	r3, #12
 8007212:	602b      	str	r3, [r5, #0]
 8007214:	2000      	movs	r0, #0
 8007216:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007218:	6821      	ldr	r1, [r4, #0]
 800721a:	1bc9      	subs	r1, r1, r7
 800721c:	d420      	bmi.n	8007260 <_malloc_r+0xd0>
 800721e:	290b      	cmp	r1, #11
 8007220:	d90a      	bls.n	8007238 <_malloc_r+0xa8>
 8007222:	19e2      	adds	r2, r4, r7
 8007224:	6027      	str	r7, [r4, #0]
 8007226:	42a3      	cmp	r3, r4
 8007228:	d104      	bne.n	8007234 <_malloc_r+0xa4>
 800722a:	6032      	str	r2, [r6, #0]
 800722c:	6863      	ldr	r3, [r4, #4]
 800722e:	6011      	str	r1, [r2, #0]
 8007230:	6053      	str	r3, [r2, #4]
 8007232:	e005      	b.n	8007240 <_malloc_r+0xb0>
 8007234:	605a      	str	r2, [r3, #4]
 8007236:	e7f9      	b.n	800722c <_malloc_r+0x9c>
 8007238:	6862      	ldr	r2, [r4, #4]
 800723a:	42a3      	cmp	r3, r4
 800723c:	d10e      	bne.n	800725c <_malloc_r+0xcc>
 800723e:	6032      	str	r2, [r6, #0]
 8007240:	0028      	movs	r0, r5
 8007242:	f000 f82d 	bl	80072a0 <__malloc_unlock>
 8007246:	0020      	movs	r0, r4
 8007248:	2207      	movs	r2, #7
 800724a:	300b      	adds	r0, #11
 800724c:	1d23      	adds	r3, r4, #4
 800724e:	4390      	bics	r0, r2
 8007250:	1ac2      	subs	r2, r0, r3
 8007252:	4298      	cmp	r0, r3
 8007254:	d0df      	beq.n	8007216 <_malloc_r+0x86>
 8007256:	1a1b      	subs	r3, r3, r0
 8007258:	50a3      	str	r3, [r4, r2]
 800725a:	e7dc      	b.n	8007216 <_malloc_r+0x86>
 800725c:	605a      	str	r2, [r3, #4]
 800725e:	e7ef      	b.n	8007240 <_malloc_r+0xb0>
 8007260:	0023      	movs	r3, r4
 8007262:	6864      	ldr	r4, [r4, #4]
 8007264:	e7a6      	b.n	80071b4 <_malloc_r+0x24>
 8007266:	9c00      	ldr	r4, [sp, #0]
 8007268:	6863      	ldr	r3, [r4, #4]
 800726a:	9300      	str	r3, [sp, #0]
 800726c:	e7ad      	b.n	80071ca <_malloc_r+0x3a>
 800726e:	001a      	movs	r2, r3
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	42a3      	cmp	r3, r4
 8007274:	d1fb      	bne.n	800726e <_malloc_r+0xde>
 8007276:	2300      	movs	r3, #0
 8007278:	e7da      	b.n	8007230 <_malloc_r+0xa0>
 800727a:	230c      	movs	r3, #12
 800727c:	0028      	movs	r0, r5
 800727e:	602b      	str	r3, [r5, #0]
 8007280:	f000 f80e 	bl	80072a0 <__malloc_unlock>
 8007284:	e7c6      	b.n	8007214 <_malloc_r+0x84>
 8007286:	6007      	str	r7, [r0, #0]
 8007288:	e7da      	b.n	8007240 <_malloc_r+0xb0>
 800728a:	46c0      	nop			@ (mov r8, r8)
 800728c:	2000076c 	.word	0x2000076c

08007290 <__malloc_lock>:
 8007290:	b510      	push	{r4, lr}
 8007292:	4802      	ldr	r0, [pc, #8]	@ (800729c <__malloc_lock+0xc>)
 8007294:	f7ff fefc 	bl	8007090 <__retarget_lock_acquire_recursive>
 8007298:	bd10      	pop	{r4, pc}
 800729a:	46c0      	nop			@ (mov r8, r8)
 800729c:	20000764 	.word	0x20000764

080072a0 <__malloc_unlock>:
 80072a0:	b510      	push	{r4, lr}
 80072a2:	4802      	ldr	r0, [pc, #8]	@ (80072ac <__malloc_unlock+0xc>)
 80072a4:	f7ff fef5 	bl	8007092 <__retarget_lock_release_recursive>
 80072a8:	bd10      	pop	{r4, pc}
 80072aa:	46c0      	nop			@ (mov r8, r8)
 80072ac:	20000764 	.word	0x20000764

080072b0 <__ssputs_r>:
 80072b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072b2:	688e      	ldr	r6, [r1, #8]
 80072b4:	b085      	sub	sp, #20
 80072b6:	001f      	movs	r7, r3
 80072b8:	000c      	movs	r4, r1
 80072ba:	680b      	ldr	r3, [r1, #0]
 80072bc:	9002      	str	r0, [sp, #8]
 80072be:	9203      	str	r2, [sp, #12]
 80072c0:	42be      	cmp	r6, r7
 80072c2:	d830      	bhi.n	8007326 <__ssputs_r+0x76>
 80072c4:	210c      	movs	r1, #12
 80072c6:	5e62      	ldrsh	r2, [r4, r1]
 80072c8:	2190      	movs	r1, #144	@ 0x90
 80072ca:	00c9      	lsls	r1, r1, #3
 80072cc:	420a      	tst	r2, r1
 80072ce:	d028      	beq.n	8007322 <__ssputs_r+0x72>
 80072d0:	2003      	movs	r0, #3
 80072d2:	6921      	ldr	r1, [r4, #16]
 80072d4:	1a5b      	subs	r3, r3, r1
 80072d6:	9301      	str	r3, [sp, #4]
 80072d8:	6963      	ldr	r3, [r4, #20]
 80072da:	4343      	muls	r3, r0
 80072dc:	9801      	ldr	r0, [sp, #4]
 80072de:	0fdd      	lsrs	r5, r3, #31
 80072e0:	18ed      	adds	r5, r5, r3
 80072e2:	1c7b      	adds	r3, r7, #1
 80072e4:	181b      	adds	r3, r3, r0
 80072e6:	106d      	asrs	r5, r5, #1
 80072e8:	42ab      	cmp	r3, r5
 80072ea:	d900      	bls.n	80072ee <__ssputs_r+0x3e>
 80072ec:	001d      	movs	r5, r3
 80072ee:	0552      	lsls	r2, r2, #21
 80072f0:	d528      	bpl.n	8007344 <__ssputs_r+0x94>
 80072f2:	0029      	movs	r1, r5
 80072f4:	9802      	ldr	r0, [sp, #8]
 80072f6:	f7ff ff4b 	bl	8007190 <_malloc_r>
 80072fa:	1e06      	subs	r6, r0, #0
 80072fc:	d02c      	beq.n	8007358 <__ssputs_r+0xa8>
 80072fe:	9a01      	ldr	r2, [sp, #4]
 8007300:	6921      	ldr	r1, [r4, #16]
 8007302:	f7ff fecf 	bl	80070a4 <memcpy>
 8007306:	89a2      	ldrh	r2, [r4, #12]
 8007308:	4b18      	ldr	r3, [pc, #96]	@ (800736c <__ssputs_r+0xbc>)
 800730a:	401a      	ands	r2, r3
 800730c:	2380      	movs	r3, #128	@ 0x80
 800730e:	4313      	orrs	r3, r2
 8007310:	81a3      	strh	r3, [r4, #12]
 8007312:	9b01      	ldr	r3, [sp, #4]
 8007314:	6126      	str	r6, [r4, #16]
 8007316:	18f6      	adds	r6, r6, r3
 8007318:	6026      	str	r6, [r4, #0]
 800731a:	003e      	movs	r6, r7
 800731c:	6165      	str	r5, [r4, #20]
 800731e:	1aed      	subs	r5, r5, r3
 8007320:	60a5      	str	r5, [r4, #8]
 8007322:	42be      	cmp	r6, r7
 8007324:	d900      	bls.n	8007328 <__ssputs_r+0x78>
 8007326:	003e      	movs	r6, r7
 8007328:	0032      	movs	r2, r6
 800732a:	9903      	ldr	r1, [sp, #12]
 800732c:	6820      	ldr	r0, [r4, #0]
 800732e:	f000 fa9b 	bl	8007868 <memmove>
 8007332:	2000      	movs	r0, #0
 8007334:	68a3      	ldr	r3, [r4, #8]
 8007336:	1b9b      	subs	r3, r3, r6
 8007338:	60a3      	str	r3, [r4, #8]
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	199b      	adds	r3, r3, r6
 800733e:	6023      	str	r3, [r4, #0]
 8007340:	b005      	add	sp, #20
 8007342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007344:	002a      	movs	r2, r5
 8007346:	9802      	ldr	r0, [sp, #8]
 8007348:	f000 fabf 	bl	80078ca <_realloc_r>
 800734c:	1e06      	subs	r6, r0, #0
 800734e:	d1e0      	bne.n	8007312 <__ssputs_r+0x62>
 8007350:	6921      	ldr	r1, [r4, #16]
 8007352:	9802      	ldr	r0, [sp, #8]
 8007354:	f7ff feb0 	bl	80070b8 <_free_r>
 8007358:	230c      	movs	r3, #12
 800735a:	2001      	movs	r0, #1
 800735c:	9a02      	ldr	r2, [sp, #8]
 800735e:	4240      	negs	r0, r0
 8007360:	6013      	str	r3, [r2, #0]
 8007362:	89a2      	ldrh	r2, [r4, #12]
 8007364:	3334      	adds	r3, #52	@ 0x34
 8007366:	4313      	orrs	r3, r2
 8007368:	81a3      	strh	r3, [r4, #12]
 800736a:	e7e9      	b.n	8007340 <__ssputs_r+0x90>
 800736c:	fffffb7f 	.word	0xfffffb7f

08007370 <_svfiprintf_r>:
 8007370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007372:	b0a1      	sub	sp, #132	@ 0x84
 8007374:	9003      	str	r0, [sp, #12]
 8007376:	001d      	movs	r5, r3
 8007378:	898b      	ldrh	r3, [r1, #12]
 800737a:	000f      	movs	r7, r1
 800737c:	0016      	movs	r6, r2
 800737e:	061b      	lsls	r3, r3, #24
 8007380:	d511      	bpl.n	80073a6 <_svfiprintf_r+0x36>
 8007382:	690b      	ldr	r3, [r1, #16]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10e      	bne.n	80073a6 <_svfiprintf_r+0x36>
 8007388:	2140      	movs	r1, #64	@ 0x40
 800738a:	f7ff ff01 	bl	8007190 <_malloc_r>
 800738e:	6038      	str	r0, [r7, #0]
 8007390:	6138      	str	r0, [r7, #16]
 8007392:	2800      	cmp	r0, #0
 8007394:	d105      	bne.n	80073a2 <_svfiprintf_r+0x32>
 8007396:	230c      	movs	r3, #12
 8007398:	9a03      	ldr	r2, [sp, #12]
 800739a:	6013      	str	r3, [r2, #0]
 800739c:	2001      	movs	r0, #1
 800739e:	4240      	negs	r0, r0
 80073a0:	e0cf      	b.n	8007542 <_svfiprintf_r+0x1d2>
 80073a2:	2340      	movs	r3, #64	@ 0x40
 80073a4:	617b      	str	r3, [r7, #20]
 80073a6:	2300      	movs	r3, #0
 80073a8:	ac08      	add	r4, sp, #32
 80073aa:	6163      	str	r3, [r4, #20]
 80073ac:	3320      	adds	r3, #32
 80073ae:	7663      	strb	r3, [r4, #25]
 80073b0:	3310      	adds	r3, #16
 80073b2:	76a3      	strb	r3, [r4, #26]
 80073b4:	9507      	str	r5, [sp, #28]
 80073b6:	0035      	movs	r5, r6
 80073b8:	782b      	ldrb	r3, [r5, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d001      	beq.n	80073c2 <_svfiprintf_r+0x52>
 80073be:	2b25      	cmp	r3, #37	@ 0x25
 80073c0:	d148      	bne.n	8007454 <_svfiprintf_r+0xe4>
 80073c2:	1bab      	subs	r3, r5, r6
 80073c4:	9305      	str	r3, [sp, #20]
 80073c6:	42b5      	cmp	r5, r6
 80073c8:	d00b      	beq.n	80073e2 <_svfiprintf_r+0x72>
 80073ca:	0032      	movs	r2, r6
 80073cc:	0039      	movs	r1, r7
 80073ce:	9803      	ldr	r0, [sp, #12]
 80073d0:	f7ff ff6e 	bl	80072b0 <__ssputs_r>
 80073d4:	3001      	adds	r0, #1
 80073d6:	d100      	bne.n	80073da <_svfiprintf_r+0x6a>
 80073d8:	e0ae      	b.n	8007538 <_svfiprintf_r+0x1c8>
 80073da:	6963      	ldr	r3, [r4, #20]
 80073dc:	9a05      	ldr	r2, [sp, #20]
 80073de:	189b      	adds	r3, r3, r2
 80073e0:	6163      	str	r3, [r4, #20]
 80073e2:	782b      	ldrb	r3, [r5, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d100      	bne.n	80073ea <_svfiprintf_r+0x7a>
 80073e8:	e0a6      	b.n	8007538 <_svfiprintf_r+0x1c8>
 80073ea:	2201      	movs	r2, #1
 80073ec:	2300      	movs	r3, #0
 80073ee:	4252      	negs	r2, r2
 80073f0:	6062      	str	r2, [r4, #4]
 80073f2:	a904      	add	r1, sp, #16
 80073f4:	3254      	adds	r2, #84	@ 0x54
 80073f6:	1852      	adds	r2, r2, r1
 80073f8:	1c6e      	adds	r6, r5, #1
 80073fa:	6023      	str	r3, [r4, #0]
 80073fc:	60e3      	str	r3, [r4, #12]
 80073fe:	60a3      	str	r3, [r4, #8]
 8007400:	7013      	strb	r3, [r2, #0]
 8007402:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007404:	4b54      	ldr	r3, [pc, #336]	@ (8007558 <_svfiprintf_r+0x1e8>)
 8007406:	2205      	movs	r2, #5
 8007408:	0018      	movs	r0, r3
 800740a:	7831      	ldrb	r1, [r6, #0]
 800740c:	9305      	str	r3, [sp, #20]
 800740e:	f000 fa51 	bl	80078b4 <memchr>
 8007412:	1c75      	adds	r5, r6, #1
 8007414:	2800      	cmp	r0, #0
 8007416:	d11f      	bne.n	8007458 <_svfiprintf_r+0xe8>
 8007418:	6822      	ldr	r2, [r4, #0]
 800741a:	06d3      	lsls	r3, r2, #27
 800741c:	d504      	bpl.n	8007428 <_svfiprintf_r+0xb8>
 800741e:	2353      	movs	r3, #83	@ 0x53
 8007420:	a904      	add	r1, sp, #16
 8007422:	185b      	adds	r3, r3, r1
 8007424:	2120      	movs	r1, #32
 8007426:	7019      	strb	r1, [r3, #0]
 8007428:	0713      	lsls	r3, r2, #28
 800742a:	d504      	bpl.n	8007436 <_svfiprintf_r+0xc6>
 800742c:	2353      	movs	r3, #83	@ 0x53
 800742e:	a904      	add	r1, sp, #16
 8007430:	185b      	adds	r3, r3, r1
 8007432:	212b      	movs	r1, #43	@ 0x2b
 8007434:	7019      	strb	r1, [r3, #0]
 8007436:	7833      	ldrb	r3, [r6, #0]
 8007438:	2b2a      	cmp	r3, #42	@ 0x2a
 800743a:	d016      	beq.n	800746a <_svfiprintf_r+0xfa>
 800743c:	0035      	movs	r5, r6
 800743e:	2100      	movs	r1, #0
 8007440:	200a      	movs	r0, #10
 8007442:	68e3      	ldr	r3, [r4, #12]
 8007444:	782a      	ldrb	r2, [r5, #0]
 8007446:	1c6e      	adds	r6, r5, #1
 8007448:	3a30      	subs	r2, #48	@ 0x30
 800744a:	2a09      	cmp	r2, #9
 800744c:	d950      	bls.n	80074f0 <_svfiprintf_r+0x180>
 800744e:	2900      	cmp	r1, #0
 8007450:	d111      	bne.n	8007476 <_svfiprintf_r+0x106>
 8007452:	e017      	b.n	8007484 <_svfiprintf_r+0x114>
 8007454:	3501      	adds	r5, #1
 8007456:	e7af      	b.n	80073b8 <_svfiprintf_r+0x48>
 8007458:	9b05      	ldr	r3, [sp, #20]
 800745a:	6822      	ldr	r2, [r4, #0]
 800745c:	1ac0      	subs	r0, r0, r3
 800745e:	2301      	movs	r3, #1
 8007460:	4083      	lsls	r3, r0
 8007462:	4313      	orrs	r3, r2
 8007464:	002e      	movs	r6, r5
 8007466:	6023      	str	r3, [r4, #0]
 8007468:	e7cc      	b.n	8007404 <_svfiprintf_r+0x94>
 800746a:	9b07      	ldr	r3, [sp, #28]
 800746c:	1d19      	adds	r1, r3, #4
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	9107      	str	r1, [sp, #28]
 8007472:	2b00      	cmp	r3, #0
 8007474:	db01      	blt.n	800747a <_svfiprintf_r+0x10a>
 8007476:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007478:	e004      	b.n	8007484 <_svfiprintf_r+0x114>
 800747a:	425b      	negs	r3, r3
 800747c:	60e3      	str	r3, [r4, #12]
 800747e:	2302      	movs	r3, #2
 8007480:	4313      	orrs	r3, r2
 8007482:	6023      	str	r3, [r4, #0]
 8007484:	782b      	ldrb	r3, [r5, #0]
 8007486:	2b2e      	cmp	r3, #46	@ 0x2e
 8007488:	d10c      	bne.n	80074a4 <_svfiprintf_r+0x134>
 800748a:	786b      	ldrb	r3, [r5, #1]
 800748c:	2b2a      	cmp	r3, #42	@ 0x2a
 800748e:	d134      	bne.n	80074fa <_svfiprintf_r+0x18a>
 8007490:	9b07      	ldr	r3, [sp, #28]
 8007492:	3502      	adds	r5, #2
 8007494:	1d1a      	adds	r2, r3, #4
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	9207      	str	r2, [sp, #28]
 800749a:	2b00      	cmp	r3, #0
 800749c:	da01      	bge.n	80074a2 <_svfiprintf_r+0x132>
 800749e:	2301      	movs	r3, #1
 80074a0:	425b      	negs	r3, r3
 80074a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80074a4:	4e2d      	ldr	r6, [pc, #180]	@ (800755c <_svfiprintf_r+0x1ec>)
 80074a6:	2203      	movs	r2, #3
 80074a8:	0030      	movs	r0, r6
 80074aa:	7829      	ldrb	r1, [r5, #0]
 80074ac:	f000 fa02 	bl	80078b4 <memchr>
 80074b0:	2800      	cmp	r0, #0
 80074b2:	d006      	beq.n	80074c2 <_svfiprintf_r+0x152>
 80074b4:	2340      	movs	r3, #64	@ 0x40
 80074b6:	1b80      	subs	r0, r0, r6
 80074b8:	4083      	lsls	r3, r0
 80074ba:	6822      	ldr	r2, [r4, #0]
 80074bc:	3501      	adds	r5, #1
 80074be:	4313      	orrs	r3, r2
 80074c0:	6023      	str	r3, [r4, #0]
 80074c2:	7829      	ldrb	r1, [r5, #0]
 80074c4:	2206      	movs	r2, #6
 80074c6:	4826      	ldr	r0, [pc, #152]	@ (8007560 <_svfiprintf_r+0x1f0>)
 80074c8:	1c6e      	adds	r6, r5, #1
 80074ca:	7621      	strb	r1, [r4, #24]
 80074cc:	f000 f9f2 	bl	80078b4 <memchr>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	d038      	beq.n	8007546 <_svfiprintf_r+0x1d6>
 80074d4:	4b23      	ldr	r3, [pc, #140]	@ (8007564 <_svfiprintf_r+0x1f4>)
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d122      	bne.n	8007520 <_svfiprintf_r+0x1b0>
 80074da:	2207      	movs	r2, #7
 80074dc:	9b07      	ldr	r3, [sp, #28]
 80074de:	3307      	adds	r3, #7
 80074e0:	4393      	bics	r3, r2
 80074e2:	3308      	adds	r3, #8
 80074e4:	9307      	str	r3, [sp, #28]
 80074e6:	6963      	ldr	r3, [r4, #20]
 80074e8:	9a04      	ldr	r2, [sp, #16]
 80074ea:	189b      	adds	r3, r3, r2
 80074ec:	6163      	str	r3, [r4, #20]
 80074ee:	e762      	b.n	80073b6 <_svfiprintf_r+0x46>
 80074f0:	4343      	muls	r3, r0
 80074f2:	0035      	movs	r5, r6
 80074f4:	2101      	movs	r1, #1
 80074f6:	189b      	adds	r3, r3, r2
 80074f8:	e7a4      	b.n	8007444 <_svfiprintf_r+0xd4>
 80074fa:	2300      	movs	r3, #0
 80074fc:	200a      	movs	r0, #10
 80074fe:	0019      	movs	r1, r3
 8007500:	3501      	adds	r5, #1
 8007502:	6063      	str	r3, [r4, #4]
 8007504:	782a      	ldrb	r2, [r5, #0]
 8007506:	1c6e      	adds	r6, r5, #1
 8007508:	3a30      	subs	r2, #48	@ 0x30
 800750a:	2a09      	cmp	r2, #9
 800750c:	d903      	bls.n	8007516 <_svfiprintf_r+0x1a6>
 800750e:	2b00      	cmp	r3, #0
 8007510:	d0c8      	beq.n	80074a4 <_svfiprintf_r+0x134>
 8007512:	9109      	str	r1, [sp, #36]	@ 0x24
 8007514:	e7c6      	b.n	80074a4 <_svfiprintf_r+0x134>
 8007516:	4341      	muls	r1, r0
 8007518:	0035      	movs	r5, r6
 800751a:	2301      	movs	r3, #1
 800751c:	1889      	adds	r1, r1, r2
 800751e:	e7f1      	b.n	8007504 <_svfiprintf_r+0x194>
 8007520:	aa07      	add	r2, sp, #28
 8007522:	9200      	str	r2, [sp, #0]
 8007524:	0021      	movs	r1, r4
 8007526:	003a      	movs	r2, r7
 8007528:	4b0f      	ldr	r3, [pc, #60]	@ (8007568 <_svfiprintf_r+0x1f8>)
 800752a:	9803      	ldr	r0, [sp, #12]
 800752c:	e000      	b.n	8007530 <_svfiprintf_r+0x1c0>
 800752e:	bf00      	nop
 8007530:	9004      	str	r0, [sp, #16]
 8007532:	9b04      	ldr	r3, [sp, #16]
 8007534:	3301      	adds	r3, #1
 8007536:	d1d6      	bne.n	80074e6 <_svfiprintf_r+0x176>
 8007538:	89bb      	ldrh	r3, [r7, #12]
 800753a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800753c:	065b      	lsls	r3, r3, #25
 800753e:	d500      	bpl.n	8007542 <_svfiprintf_r+0x1d2>
 8007540:	e72c      	b.n	800739c <_svfiprintf_r+0x2c>
 8007542:	b021      	add	sp, #132	@ 0x84
 8007544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007546:	aa07      	add	r2, sp, #28
 8007548:	9200      	str	r2, [sp, #0]
 800754a:	0021      	movs	r1, r4
 800754c:	003a      	movs	r2, r7
 800754e:	4b06      	ldr	r3, [pc, #24]	@ (8007568 <_svfiprintf_r+0x1f8>)
 8007550:	9803      	ldr	r0, [sp, #12]
 8007552:	f000 f87b 	bl	800764c <_printf_i>
 8007556:	e7eb      	b.n	8007530 <_svfiprintf_r+0x1c0>
 8007558:	08007bb8 	.word	0x08007bb8
 800755c:	08007bbe 	.word	0x08007bbe
 8007560:	08007bc2 	.word	0x08007bc2
 8007564:	00000000 	.word	0x00000000
 8007568:	080072b1 	.word	0x080072b1

0800756c <_printf_common>:
 800756c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800756e:	0016      	movs	r6, r2
 8007570:	9301      	str	r3, [sp, #4]
 8007572:	688a      	ldr	r2, [r1, #8]
 8007574:	690b      	ldr	r3, [r1, #16]
 8007576:	000c      	movs	r4, r1
 8007578:	9000      	str	r0, [sp, #0]
 800757a:	4293      	cmp	r3, r2
 800757c:	da00      	bge.n	8007580 <_printf_common+0x14>
 800757e:	0013      	movs	r3, r2
 8007580:	0022      	movs	r2, r4
 8007582:	6033      	str	r3, [r6, #0]
 8007584:	3243      	adds	r2, #67	@ 0x43
 8007586:	7812      	ldrb	r2, [r2, #0]
 8007588:	2a00      	cmp	r2, #0
 800758a:	d001      	beq.n	8007590 <_printf_common+0x24>
 800758c:	3301      	adds	r3, #1
 800758e:	6033      	str	r3, [r6, #0]
 8007590:	6823      	ldr	r3, [r4, #0]
 8007592:	069b      	lsls	r3, r3, #26
 8007594:	d502      	bpl.n	800759c <_printf_common+0x30>
 8007596:	6833      	ldr	r3, [r6, #0]
 8007598:	3302      	adds	r3, #2
 800759a:	6033      	str	r3, [r6, #0]
 800759c:	6822      	ldr	r2, [r4, #0]
 800759e:	2306      	movs	r3, #6
 80075a0:	0015      	movs	r5, r2
 80075a2:	401d      	ands	r5, r3
 80075a4:	421a      	tst	r2, r3
 80075a6:	d027      	beq.n	80075f8 <_printf_common+0x8c>
 80075a8:	0023      	movs	r3, r4
 80075aa:	3343      	adds	r3, #67	@ 0x43
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	1e5a      	subs	r2, r3, #1
 80075b0:	4193      	sbcs	r3, r2
 80075b2:	6822      	ldr	r2, [r4, #0]
 80075b4:	0692      	lsls	r2, r2, #26
 80075b6:	d430      	bmi.n	800761a <_printf_common+0xae>
 80075b8:	0022      	movs	r2, r4
 80075ba:	9901      	ldr	r1, [sp, #4]
 80075bc:	9800      	ldr	r0, [sp, #0]
 80075be:	9d08      	ldr	r5, [sp, #32]
 80075c0:	3243      	adds	r2, #67	@ 0x43
 80075c2:	47a8      	blx	r5
 80075c4:	3001      	adds	r0, #1
 80075c6:	d025      	beq.n	8007614 <_printf_common+0xa8>
 80075c8:	2206      	movs	r2, #6
 80075ca:	6823      	ldr	r3, [r4, #0]
 80075cc:	2500      	movs	r5, #0
 80075ce:	4013      	ands	r3, r2
 80075d0:	2b04      	cmp	r3, #4
 80075d2:	d105      	bne.n	80075e0 <_printf_common+0x74>
 80075d4:	6833      	ldr	r3, [r6, #0]
 80075d6:	68e5      	ldr	r5, [r4, #12]
 80075d8:	1aed      	subs	r5, r5, r3
 80075da:	43eb      	mvns	r3, r5
 80075dc:	17db      	asrs	r3, r3, #31
 80075de:	401d      	ands	r5, r3
 80075e0:	68a3      	ldr	r3, [r4, #8]
 80075e2:	6922      	ldr	r2, [r4, #16]
 80075e4:	4293      	cmp	r3, r2
 80075e6:	dd01      	ble.n	80075ec <_printf_common+0x80>
 80075e8:	1a9b      	subs	r3, r3, r2
 80075ea:	18ed      	adds	r5, r5, r3
 80075ec:	2600      	movs	r6, #0
 80075ee:	42b5      	cmp	r5, r6
 80075f0:	d120      	bne.n	8007634 <_printf_common+0xc8>
 80075f2:	2000      	movs	r0, #0
 80075f4:	e010      	b.n	8007618 <_printf_common+0xac>
 80075f6:	3501      	adds	r5, #1
 80075f8:	68e3      	ldr	r3, [r4, #12]
 80075fa:	6832      	ldr	r2, [r6, #0]
 80075fc:	1a9b      	subs	r3, r3, r2
 80075fe:	42ab      	cmp	r3, r5
 8007600:	ddd2      	ble.n	80075a8 <_printf_common+0x3c>
 8007602:	0022      	movs	r2, r4
 8007604:	2301      	movs	r3, #1
 8007606:	9901      	ldr	r1, [sp, #4]
 8007608:	9800      	ldr	r0, [sp, #0]
 800760a:	9f08      	ldr	r7, [sp, #32]
 800760c:	3219      	adds	r2, #25
 800760e:	47b8      	blx	r7
 8007610:	3001      	adds	r0, #1
 8007612:	d1f0      	bne.n	80075f6 <_printf_common+0x8a>
 8007614:	2001      	movs	r0, #1
 8007616:	4240      	negs	r0, r0
 8007618:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800761a:	2030      	movs	r0, #48	@ 0x30
 800761c:	18e1      	adds	r1, r4, r3
 800761e:	3143      	adds	r1, #67	@ 0x43
 8007620:	7008      	strb	r0, [r1, #0]
 8007622:	0021      	movs	r1, r4
 8007624:	1c5a      	adds	r2, r3, #1
 8007626:	3145      	adds	r1, #69	@ 0x45
 8007628:	7809      	ldrb	r1, [r1, #0]
 800762a:	18a2      	adds	r2, r4, r2
 800762c:	3243      	adds	r2, #67	@ 0x43
 800762e:	3302      	adds	r3, #2
 8007630:	7011      	strb	r1, [r2, #0]
 8007632:	e7c1      	b.n	80075b8 <_printf_common+0x4c>
 8007634:	0022      	movs	r2, r4
 8007636:	2301      	movs	r3, #1
 8007638:	9901      	ldr	r1, [sp, #4]
 800763a:	9800      	ldr	r0, [sp, #0]
 800763c:	9f08      	ldr	r7, [sp, #32]
 800763e:	321a      	adds	r2, #26
 8007640:	47b8      	blx	r7
 8007642:	3001      	adds	r0, #1
 8007644:	d0e6      	beq.n	8007614 <_printf_common+0xa8>
 8007646:	3601      	adds	r6, #1
 8007648:	e7d1      	b.n	80075ee <_printf_common+0x82>
	...

0800764c <_printf_i>:
 800764c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800764e:	b08b      	sub	sp, #44	@ 0x2c
 8007650:	9206      	str	r2, [sp, #24]
 8007652:	000a      	movs	r2, r1
 8007654:	3243      	adds	r2, #67	@ 0x43
 8007656:	9307      	str	r3, [sp, #28]
 8007658:	9005      	str	r0, [sp, #20]
 800765a:	9203      	str	r2, [sp, #12]
 800765c:	7e0a      	ldrb	r2, [r1, #24]
 800765e:	000c      	movs	r4, r1
 8007660:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007662:	2a78      	cmp	r2, #120	@ 0x78
 8007664:	d809      	bhi.n	800767a <_printf_i+0x2e>
 8007666:	2a62      	cmp	r2, #98	@ 0x62
 8007668:	d80b      	bhi.n	8007682 <_printf_i+0x36>
 800766a:	2a00      	cmp	r2, #0
 800766c:	d100      	bne.n	8007670 <_printf_i+0x24>
 800766e:	e0bc      	b.n	80077ea <_printf_i+0x19e>
 8007670:	497b      	ldr	r1, [pc, #492]	@ (8007860 <_printf_i+0x214>)
 8007672:	9104      	str	r1, [sp, #16]
 8007674:	2a58      	cmp	r2, #88	@ 0x58
 8007676:	d100      	bne.n	800767a <_printf_i+0x2e>
 8007678:	e090      	b.n	800779c <_printf_i+0x150>
 800767a:	0025      	movs	r5, r4
 800767c:	3542      	adds	r5, #66	@ 0x42
 800767e:	702a      	strb	r2, [r5, #0]
 8007680:	e022      	b.n	80076c8 <_printf_i+0x7c>
 8007682:	0010      	movs	r0, r2
 8007684:	3863      	subs	r0, #99	@ 0x63
 8007686:	2815      	cmp	r0, #21
 8007688:	d8f7      	bhi.n	800767a <_printf_i+0x2e>
 800768a:	f7f8 fd45 	bl	8000118 <__gnu_thumb1_case_shi>
 800768e:	0016      	.short	0x0016
 8007690:	fff6001f 	.word	0xfff6001f
 8007694:	fff6fff6 	.word	0xfff6fff6
 8007698:	001ffff6 	.word	0x001ffff6
 800769c:	fff6fff6 	.word	0xfff6fff6
 80076a0:	fff6fff6 	.word	0xfff6fff6
 80076a4:	003600a1 	.word	0x003600a1
 80076a8:	fff60080 	.word	0xfff60080
 80076ac:	00b2fff6 	.word	0x00b2fff6
 80076b0:	0036fff6 	.word	0x0036fff6
 80076b4:	fff6fff6 	.word	0xfff6fff6
 80076b8:	0084      	.short	0x0084
 80076ba:	0025      	movs	r5, r4
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	3542      	adds	r5, #66	@ 0x42
 80076c0:	1d11      	adds	r1, r2, #4
 80076c2:	6019      	str	r1, [r3, #0]
 80076c4:	6813      	ldr	r3, [r2, #0]
 80076c6:	702b      	strb	r3, [r5, #0]
 80076c8:	2301      	movs	r3, #1
 80076ca:	e0a0      	b.n	800780e <_printf_i+0x1c2>
 80076cc:	6818      	ldr	r0, [r3, #0]
 80076ce:	6809      	ldr	r1, [r1, #0]
 80076d0:	1d02      	adds	r2, r0, #4
 80076d2:	060d      	lsls	r5, r1, #24
 80076d4:	d50b      	bpl.n	80076ee <_printf_i+0xa2>
 80076d6:	6806      	ldr	r6, [r0, #0]
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	2e00      	cmp	r6, #0
 80076dc:	da03      	bge.n	80076e6 <_printf_i+0x9a>
 80076de:	232d      	movs	r3, #45	@ 0x2d
 80076e0:	9a03      	ldr	r2, [sp, #12]
 80076e2:	4276      	negs	r6, r6
 80076e4:	7013      	strb	r3, [r2, #0]
 80076e6:	4b5e      	ldr	r3, [pc, #376]	@ (8007860 <_printf_i+0x214>)
 80076e8:	270a      	movs	r7, #10
 80076ea:	9304      	str	r3, [sp, #16]
 80076ec:	e018      	b.n	8007720 <_printf_i+0xd4>
 80076ee:	6806      	ldr	r6, [r0, #0]
 80076f0:	601a      	str	r2, [r3, #0]
 80076f2:	0649      	lsls	r1, r1, #25
 80076f4:	d5f1      	bpl.n	80076da <_printf_i+0x8e>
 80076f6:	b236      	sxth	r6, r6
 80076f8:	e7ef      	b.n	80076da <_printf_i+0x8e>
 80076fa:	6808      	ldr	r0, [r1, #0]
 80076fc:	6819      	ldr	r1, [r3, #0]
 80076fe:	c940      	ldmia	r1!, {r6}
 8007700:	0605      	lsls	r5, r0, #24
 8007702:	d402      	bmi.n	800770a <_printf_i+0xbe>
 8007704:	0640      	lsls	r0, r0, #25
 8007706:	d500      	bpl.n	800770a <_printf_i+0xbe>
 8007708:	b2b6      	uxth	r6, r6
 800770a:	6019      	str	r1, [r3, #0]
 800770c:	4b54      	ldr	r3, [pc, #336]	@ (8007860 <_printf_i+0x214>)
 800770e:	270a      	movs	r7, #10
 8007710:	9304      	str	r3, [sp, #16]
 8007712:	2a6f      	cmp	r2, #111	@ 0x6f
 8007714:	d100      	bne.n	8007718 <_printf_i+0xcc>
 8007716:	3f02      	subs	r7, #2
 8007718:	0023      	movs	r3, r4
 800771a:	2200      	movs	r2, #0
 800771c:	3343      	adds	r3, #67	@ 0x43
 800771e:	701a      	strb	r2, [r3, #0]
 8007720:	6863      	ldr	r3, [r4, #4]
 8007722:	60a3      	str	r3, [r4, #8]
 8007724:	2b00      	cmp	r3, #0
 8007726:	db03      	blt.n	8007730 <_printf_i+0xe4>
 8007728:	2104      	movs	r1, #4
 800772a:	6822      	ldr	r2, [r4, #0]
 800772c:	438a      	bics	r2, r1
 800772e:	6022      	str	r2, [r4, #0]
 8007730:	2e00      	cmp	r6, #0
 8007732:	d102      	bne.n	800773a <_printf_i+0xee>
 8007734:	9d03      	ldr	r5, [sp, #12]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00c      	beq.n	8007754 <_printf_i+0x108>
 800773a:	9d03      	ldr	r5, [sp, #12]
 800773c:	0030      	movs	r0, r6
 800773e:	0039      	movs	r1, r7
 8007740:	f7f8 fd7a 	bl	8000238 <__aeabi_uidivmod>
 8007744:	9b04      	ldr	r3, [sp, #16]
 8007746:	3d01      	subs	r5, #1
 8007748:	5c5b      	ldrb	r3, [r3, r1]
 800774a:	702b      	strb	r3, [r5, #0]
 800774c:	0033      	movs	r3, r6
 800774e:	0006      	movs	r6, r0
 8007750:	429f      	cmp	r7, r3
 8007752:	d9f3      	bls.n	800773c <_printf_i+0xf0>
 8007754:	2f08      	cmp	r7, #8
 8007756:	d109      	bne.n	800776c <_printf_i+0x120>
 8007758:	6823      	ldr	r3, [r4, #0]
 800775a:	07db      	lsls	r3, r3, #31
 800775c:	d506      	bpl.n	800776c <_printf_i+0x120>
 800775e:	6862      	ldr	r2, [r4, #4]
 8007760:	6923      	ldr	r3, [r4, #16]
 8007762:	429a      	cmp	r2, r3
 8007764:	dc02      	bgt.n	800776c <_printf_i+0x120>
 8007766:	2330      	movs	r3, #48	@ 0x30
 8007768:	3d01      	subs	r5, #1
 800776a:	702b      	strb	r3, [r5, #0]
 800776c:	9b03      	ldr	r3, [sp, #12]
 800776e:	1b5b      	subs	r3, r3, r5
 8007770:	6123      	str	r3, [r4, #16]
 8007772:	9b07      	ldr	r3, [sp, #28]
 8007774:	0021      	movs	r1, r4
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	9805      	ldr	r0, [sp, #20]
 800777a:	9b06      	ldr	r3, [sp, #24]
 800777c:	aa09      	add	r2, sp, #36	@ 0x24
 800777e:	f7ff fef5 	bl	800756c <_printf_common>
 8007782:	3001      	adds	r0, #1
 8007784:	d148      	bne.n	8007818 <_printf_i+0x1cc>
 8007786:	2001      	movs	r0, #1
 8007788:	4240      	negs	r0, r0
 800778a:	b00b      	add	sp, #44	@ 0x2c
 800778c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800778e:	2220      	movs	r2, #32
 8007790:	6809      	ldr	r1, [r1, #0]
 8007792:	430a      	orrs	r2, r1
 8007794:	6022      	str	r2, [r4, #0]
 8007796:	2278      	movs	r2, #120	@ 0x78
 8007798:	4932      	ldr	r1, [pc, #200]	@ (8007864 <_printf_i+0x218>)
 800779a:	9104      	str	r1, [sp, #16]
 800779c:	0021      	movs	r1, r4
 800779e:	3145      	adds	r1, #69	@ 0x45
 80077a0:	700a      	strb	r2, [r1, #0]
 80077a2:	6819      	ldr	r1, [r3, #0]
 80077a4:	6822      	ldr	r2, [r4, #0]
 80077a6:	c940      	ldmia	r1!, {r6}
 80077a8:	0610      	lsls	r0, r2, #24
 80077aa:	d402      	bmi.n	80077b2 <_printf_i+0x166>
 80077ac:	0650      	lsls	r0, r2, #25
 80077ae:	d500      	bpl.n	80077b2 <_printf_i+0x166>
 80077b0:	b2b6      	uxth	r6, r6
 80077b2:	6019      	str	r1, [r3, #0]
 80077b4:	07d3      	lsls	r3, r2, #31
 80077b6:	d502      	bpl.n	80077be <_printf_i+0x172>
 80077b8:	2320      	movs	r3, #32
 80077ba:	4313      	orrs	r3, r2
 80077bc:	6023      	str	r3, [r4, #0]
 80077be:	2e00      	cmp	r6, #0
 80077c0:	d001      	beq.n	80077c6 <_printf_i+0x17a>
 80077c2:	2710      	movs	r7, #16
 80077c4:	e7a8      	b.n	8007718 <_printf_i+0xcc>
 80077c6:	2220      	movs	r2, #32
 80077c8:	6823      	ldr	r3, [r4, #0]
 80077ca:	4393      	bics	r3, r2
 80077cc:	6023      	str	r3, [r4, #0]
 80077ce:	e7f8      	b.n	80077c2 <_printf_i+0x176>
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	680d      	ldr	r5, [r1, #0]
 80077d4:	1d10      	adds	r0, r2, #4
 80077d6:	6949      	ldr	r1, [r1, #20]
 80077d8:	6018      	str	r0, [r3, #0]
 80077da:	6813      	ldr	r3, [r2, #0]
 80077dc:	062e      	lsls	r6, r5, #24
 80077de:	d501      	bpl.n	80077e4 <_printf_i+0x198>
 80077e0:	6019      	str	r1, [r3, #0]
 80077e2:	e002      	b.n	80077ea <_printf_i+0x19e>
 80077e4:	066d      	lsls	r5, r5, #25
 80077e6:	d5fb      	bpl.n	80077e0 <_printf_i+0x194>
 80077e8:	8019      	strh	r1, [r3, #0]
 80077ea:	2300      	movs	r3, #0
 80077ec:	9d03      	ldr	r5, [sp, #12]
 80077ee:	6123      	str	r3, [r4, #16]
 80077f0:	e7bf      	b.n	8007772 <_printf_i+0x126>
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	1d11      	adds	r1, r2, #4
 80077f6:	6019      	str	r1, [r3, #0]
 80077f8:	6815      	ldr	r5, [r2, #0]
 80077fa:	2100      	movs	r1, #0
 80077fc:	0028      	movs	r0, r5
 80077fe:	6862      	ldr	r2, [r4, #4]
 8007800:	f000 f858 	bl	80078b4 <memchr>
 8007804:	2800      	cmp	r0, #0
 8007806:	d001      	beq.n	800780c <_printf_i+0x1c0>
 8007808:	1b40      	subs	r0, r0, r5
 800780a:	6060      	str	r0, [r4, #4]
 800780c:	6863      	ldr	r3, [r4, #4]
 800780e:	6123      	str	r3, [r4, #16]
 8007810:	2300      	movs	r3, #0
 8007812:	9a03      	ldr	r2, [sp, #12]
 8007814:	7013      	strb	r3, [r2, #0]
 8007816:	e7ac      	b.n	8007772 <_printf_i+0x126>
 8007818:	002a      	movs	r2, r5
 800781a:	6923      	ldr	r3, [r4, #16]
 800781c:	9906      	ldr	r1, [sp, #24]
 800781e:	9805      	ldr	r0, [sp, #20]
 8007820:	9d07      	ldr	r5, [sp, #28]
 8007822:	47a8      	blx	r5
 8007824:	3001      	adds	r0, #1
 8007826:	d0ae      	beq.n	8007786 <_printf_i+0x13a>
 8007828:	6823      	ldr	r3, [r4, #0]
 800782a:	079b      	lsls	r3, r3, #30
 800782c:	d415      	bmi.n	800785a <_printf_i+0x20e>
 800782e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007830:	68e0      	ldr	r0, [r4, #12]
 8007832:	4298      	cmp	r0, r3
 8007834:	daa9      	bge.n	800778a <_printf_i+0x13e>
 8007836:	0018      	movs	r0, r3
 8007838:	e7a7      	b.n	800778a <_printf_i+0x13e>
 800783a:	0022      	movs	r2, r4
 800783c:	2301      	movs	r3, #1
 800783e:	9906      	ldr	r1, [sp, #24]
 8007840:	9805      	ldr	r0, [sp, #20]
 8007842:	9e07      	ldr	r6, [sp, #28]
 8007844:	3219      	adds	r2, #25
 8007846:	47b0      	blx	r6
 8007848:	3001      	adds	r0, #1
 800784a:	d09c      	beq.n	8007786 <_printf_i+0x13a>
 800784c:	3501      	adds	r5, #1
 800784e:	68e3      	ldr	r3, [r4, #12]
 8007850:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007852:	1a9b      	subs	r3, r3, r2
 8007854:	42ab      	cmp	r3, r5
 8007856:	dcf0      	bgt.n	800783a <_printf_i+0x1ee>
 8007858:	e7e9      	b.n	800782e <_printf_i+0x1e2>
 800785a:	2500      	movs	r5, #0
 800785c:	e7f7      	b.n	800784e <_printf_i+0x202>
 800785e:	46c0      	nop			@ (mov r8, r8)
 8007860:	08007bc9 	.word	0x08007bc9
 8007864:	08007bda 	.word	0x08007bda

08007868 <memmove>:
 8007868:	b510      	push	{r4, lr}
 800786a:	4288      	cmp	r0, r1
 800786c:	d806      	bhi.n	800787c <memmove+0x14>
 800786e:	2300      	movs	r3, #0
 8007870:	429a      	cmp	r2, r3
 8007872:	d008      	beq.n	8007886 <memmove+0x1e>
 8007874:	5ccc      	ldrb	r4, [r1, r3]
 8007876:	54c4      	strb	r4, [r0, r3]
 8007878:	3301      	adds	r3, #1
 800787a:	e7f9      	b.n	8007870 <memmove+0x8>
 800787c:	188b      	adds	r3, r1, r2
 800787e:	4298      	cmp	r0, r3
 8007880:	d2f5      	bcs.n	800786e <memmove+0x6>
 8007882:	3a01      	subs	r2, #1
 8007884:	d200      	bcs.n	8007888 <memmove+0x20>
 8007886:	bd10      	pop	{r4, pc}
 8007888:	5c8b      	ldrb	r3, [r1, r2]
 800788a:	5483      	strb	r3, [r0, r2]
 800788c:	e7f9      	b.n	8007882 <memmove+0x1a>
	...

08007890 <_sbrk_r>:
 8007890:	2300      	movs	r3, #0
 8007892:	b570      	push	{r4, r5, r6, lr}
 8007894:	4d06      	ldr	r5, [pc, #24]	@ (80078b0 <_sbrk_r+0x20>)
 8007896:	0004      	movs	r4, r0
 8007898:	0008      	movs	r0, r1
 800789a:	602b      	str	r3, [r5, #0]
 800789c:	f7f9 fcec 	bl	8001278 <_sbrk>
 80078a0:	1c43      	adds	r3, r0, #1
 80078a2:	d103      	bne.n	80078ac <_sbrk_r+0x1c>
 80078a4:	682b      	ldr	r3, [r5, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d000      	beq.n	80078ac <_sbrk_r+0x1c>
 80078aa:	6023      	str	r3, [r4, #0]
 80078ac:	bd70      	pop	{r4, r5, r6, pc}
 80078ae:	46c0      	nop			@ (mov r8, r8)
 80078b0:	20000760 	.word	0x20000760

080078b4 <memchr>:
 80078b4:	b2c9      	uxtb	r1, r1
 80078b6:	1882      	adds	r2, r0, r2
 80078b8:	4290      	cmp	r0, r2
 80078ba:	d101      	bne.n	80078c0 <memchr+0xc>
 80078bc:	2000      	movs	r0, #0
 80078be:	4770      	bx	lr
 80078c0:	7803      	ldrb	r3, [r0, #0]
 80078c2:	428b      	cmp	r3, r1
 80078c4:	d0fb      	beq.n	80078be <memchr+0xa>
 80078c6:	3001      	adds	r0, #1
 80078c8:	e7f6      	b.n	80078b8 <memchr+0x4>

080078ca <_realloc_r>:
 80078ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078cc:	0006      	movs	r6, r0
 80078ce:	000c      	movs	r4, r1
 80078d0:	0015      	movs	r5, r2
 80078d2:	2900      	cmp	r1, #0
 80078d4:	d105      	bne.n	80078e2 <_realloc_r+0x18>
 80078d6:	0011      	movs	r1, r2
 80078d8:	f7ff fc5a 	bl	8007190 <_malloc_r>
 80078dc:	0004      	movs	r4, r0
 80078de:	0020      	movs	r0, r4
 80078e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80078e2:	2a00      	cmp	r2, #0
 80078e4:	d103      	bne.n	80078ee <_realloc_r+0x24>
 80078e6:	f7ff fbe7 	bl	80070b8 <_free_r>
 80078ea:	2400      	movs	r4, #0
 80078ec:	e7f7      	b.n	80078de <_realloc_r+0x14>
 80078ee:	f000 f81b 	bl	8007928 <_malloc_usable_size_r>
 80078f2:	0007      	movs	r7, r0
 80078f4:	4285      	cmp	r5, r0
 80078f6:	d802      	bhi.n	80078fe <_realloc_r+0x34>
 80078f8:	0843      	lsrs	r3, r0, #1
 80078fa:	42ab      	cmp	r3, r5
 80078fc:	d3ef      	bcc.n	80078de <_realloc_r+0x14>
 80078fe:	0029      	movs	r1, r5
 8007900:	0030      	movs	r0, r6
 8007902:	f7ff fc45 	bl	8007190 <_malloc_r>
 8007906:	9001      	str	r0, [sp, #4]
 8007908:	2800      	cmp	r0, #0
 800790a:	d0ee      	beq.n	80078ea <_realloc_r+0x20>
 800790c:	002a      	movs	r2, r5
 800790e:	42bd      	cmp	r5, r7
 8007910:	d900      	bls.n	8007914 <_realloc_r+0x4a>
 8007912:	003a      	movs	r2, r7
 8007914:	0021      	movs	r1, r4
 8007916:	9801      	ldr	r0, [sp, #4]
 8007918:	f7ff fbc4 	bl	80070a4 <memcpy>
 800791c:	0021      	movs	r1, r4
 800791e:	0030      	movs	r0, r6
 8007920:	f7ff fbca 	bl	80070b8 <_free_r>
 8007924:	9c01      	ldr	r4, [sp, #4]
 8007926:	e7da      	b.n	80078de <_realloc_r+0x14>

08007928 <_malloc_usable_size_r>:
 8007928:	1f0b      	subs	r3, r1, #4
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	1f18      	subs	r0, r3, #4
 800792e:	2b00      	cmp	r3, #0
 8007930:	da01      	bge.n	8007936 <_malloc_usable_size_r+0xe>
 8007932:	580b      	ldr	r3, [r1, r0]
 8007934:	18c0      	adds	r0, r0, r3
 8007936:	4770      	bx	lr

08007938 <_init>:
 8007938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800793a:	46c0      	nop			@ (mov r8, r8)
 800793c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800793e:	bc08      	pop	{r3}
 8007940:	469e      	mov	lr, r3
 8007942:	4770      	bx	lr

08007944 <_fini>:
 8007944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007946:	46c0      	nop			@ (mov r8, r8)
 8007948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800794a:	bc08      	pop	{r3}
 800794c:	469e      	mov	lr, r3
 800794e:	4770      	bx	lr


22-008_Voiture_RC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004134  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080041f4  080041f4  000051f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004260  08004260  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004260  08004260  00005260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004268  08004268  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004268  08004268  00005268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800426c  0800426c  0000526c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004270  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  2000000c  0800427c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  0800427c  00006220  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f2b  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027df  00000000  00000000  00018f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  0001b740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e9c  00000000  00000000  0001c9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002674  00000000  00000000  0001d86c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016bd4  00000000  00000000  0001fee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074447  00000000  00000000  00036ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aaefb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004440  00000000  00000000  000aaf40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000af380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080041dc 	.word	0x080041dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080041dc 	.word	0x080041dc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <APP_process>:
{
  // Initialize the bride manager
  RADIO_Init(treatment_function_B_PF, NRF_HAL_function_STR,NUMERO_VERSION_PROTOCOLE_RADIO_U8,NUMERO_RESEAU_U8,DEFAULT_ADDRESS_U8);
}
void APP_process(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  // Process the bride manager
}
 80004ac:	46c0      	nop			@ (mov r8, r8)
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b2:	b580      	push	{r7, lr}
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b6:	f000 fd3f 	bl	8000f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ba:	f000 f811 	bl	80004e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004be:	f000 fa97 	bl	80009f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004c2:	f000 fa65 	bl	8000990 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004c6:	f000 f9d9 	bl	800087c <MX_TIM2_Init>
  MX_ADC_Init();
 80004ca:	f000 f87f 	bl	80005cc <MX_ADC_Init>
  MX_SPI1_Init();
 80004ce:	f000 f99d 	bl	800080c <MX_SPI1_Init>
  MX_I2C1_Init();
 80004d2:	f000 f8ef 	bl	80006b4 <MX_I2C1_Init>
  MX_RTC_Init();
 80004d6:	f000 f92b 	bl	8000730 <MX_RTC_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    //test du debug avec un toggle de la led
    APP_process();
 80004da:	f7ff ffe5 	bl	80004a8 <APP_process>
 80004de:	e7fc      	b.n	80004da <main+0x28>

080004e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e0:	b590      	push	{r4, r7, lr}
 80004e2:	b099      	sub	sp, #100	@ 0x64
 80004e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e6:	242c      	movs	r4, #44	@ 0x2c
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	0018      	movs	r0, r3
 80004ec:	2334      	movs	r3, #52	@ 0x34
 80004ee:	001a      	movs	r2, r3
 80004f0:	2100      	movs	r1, #0
 80004f2:	f003 fe47 	bl	8004184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f6:	2318      	movs	r3, #24
 80004f8:	18fb      	adds	r3, r7, r3
 80004fa:	0018      	movs	r0, r3
 80004fc:	2314      	movs	r3, #20
 80004fe:	001a      	movs	r2, r3
 8000500:	2100      	movs	r1, #0
 8000502:	f003 fe3f 	bl	8004184 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000506:	003b      	movs	r3, r7
 8000508:	0018      	movs	r0, r3
 800050a:	2318      	movs	r3, #24
 800050c:	001a      	movs	r2, r3
 800050e:	2100      	movs	r1, #0
 8000510:	f003 fe38 	bl	8004184 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000514:	4b2b      	ldr	r3, [pc, #172]	@ (80005c4 <SystemClock_Config+0xe4>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a2b      	ldr	r2, [pc, #172]	@ (80005c8 <SystemClock_Config+0xe8>)
 800051a:	401a      	ands	r2, r3
 800051c:	4b29      	ldr	r3, [pc, #164]	@ (80005c4 <SystemClock_Config+0xe4>)
 800051e:	2180      	movs	r1, #128	@ 0x80
 8000520:	0109      	lsls	r1, r1, #4
 8000522:	430a      	orrs	r2, r1
 8000524:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000526:	0021      	movs	r1, r4
 8000528:	187b      	adds	r3, r7, r1
 800052a:	2218      	movs	r2, #24
 800052c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800052e:	187b      	adds	r3, r7, r1
 8000530:	2201      	movs	r2, #1
 8000532:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000534:	187b      	adds	r3, r7, r1
 8000536:	2201      	movs	r2, #1
 8000538:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800053a:	187b      	adds	r3, r7, r1
 800053c:	2200      	movs	r2, #0
 800053e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000540:	187b      	adds	r3, r7, r1
 8000542:	22a0      	movs	r2, #160	@ 0xa0
 8000544:	0212      	lsls	r2, r2, #8
 8000546:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2200      	movs	r2, #0
 800054c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054e:	187b      	adds	r3, r7, r1
 8000550:	0018      	movs	r0, r3
 8000552:	f001 faab 	bl	8001aac <HAL_RCC_OscConfig>
 8000556:	1e03      	subs	r3, r0, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800055a:	f000 fae3 	bl	8000b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055e:	2118      	movs	r1, #24
 8000560:	187b      	adds	r3, r7, r1
 8000562:	220f      	movs	r2, #15
 8000564:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2200      	movs	r2, #0
 800056a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2200      	movs	r2, #0
 8000576:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2200      	movs	r2, #0
 800057c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2100      	movs	r1, #0
 8000582:	0018      	movs	r0, r3
 8000584:	f001 fe0e 	bl	80021a4 <HAL_RCC_ClockConfig>
 8000588:	1e03      	subs	r3, r0, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800058c:	f000 faca 	bl	8000b24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8000590:	003b      	movs	r3, r7
 8000592:	222a      	movs	r2, #42	@ 0x2a
 8000594:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000596:	003b      	movs	r3, r7
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800059c:	003b      	movs	r3, r7
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80005a2:	003b      	movs	r3, r7
 80005a4:	2280      	movs	r2, #128	@ 0x80
 80005a6:	0292      	lsls	r2, r2, #10
 80005a8:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005aa:	003b      	movs	r3, r7
 80005ac:	0018      	movs	r0, r3
 80005ae:	f002 f81d 	bl	80025ec <HAL_RCCEx_PeriphCLKConfig>
 80005b2:	1e03      	subs	r3, r0, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0xda>
  {
    Error_Handler();
 80005b6:	f000 fab5 	bl	8000b24 <Error_Handler>
  }
}
 80005ba:	46c0      	nop			@ (mov r8, r8)
 80005bc:	46bd      	mov	sp, r7
 80005be:	b019      	add	sp, #100	@ 0x64
 80005c0:	bd90      	pop	{r4, r7, pc}
 80005c2:	46c0      	nop			@ (mov r8, r8)
 80005c4:	40007000 	.word	0x40007000
 80005c8:	ffffe7ff 	.word	0xffffe7ff

080005cc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005d2:	003b      	movs	r3, r7
 80005d4:	0018      	movs	r0, r3
 80005d6:	2308      	movs	r3, #8
 80005d8:	001a      	movs	r2, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	f003 fdd2 	bl	8004184 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80005e0:	4b30      	ldr	r3, [pc, #192]	@ (80006a4 <MX_ADC_Init+0xd8>)
 80005e2:	4a31      	ldr	r2, [pc, #196]	@ (80006a8 <MX_ADC_Init+0xdc>)
 80005e4:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80005e6:	4b2f      	ldr	r3, [pc, #188]	@ (80006a4 <MX_ADC_Init+0xd8>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80005ec:	4b2d      	ldr	r3, [pc, #180]	@ (80006a4 <MX_ADC_Init+0xd8>)
 80005ee:	22c0      	movs	r2, #192	@ 0xc0
 80005f0:	0612      	lsls	r2, r2, #24
 80005f2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80005f4:	4b2b      	ldr	r3, [pc, #172]	@ (80006a4 <MX_ADC_Init+0xd8>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005fa:	4b2a      	ldr	r3, [pc, #168]	@ (80006a4 <MX_ADC_Init+0xd8>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000600:	4b28      	ldr	r3, [pc, #160]	@ (80006a4 <MX_ADC_Init+0xd8>)
 8000602:	2201      	movs	r2, #1
 8000604:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000606:	4b27      	ldr	r3, [pc, #156]	@ (80006a4 <MX_ADC_Init+0xd8>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800060c:	4b25      	ldr	r3, [pc, #148]	@ (80006a4 <MX_ADC_Init+0xd8>)
 800060e:	2220      	movs	r2, #32
 8000610:	2100      	movs	r1, #0
 8000612:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000614:	4b23      	ldr	r3, [pc, #140]	@ (80006a4 <MX_ADC_Init+0xd8>)
 8000616:	2221      	movs	r2, #33	@ 0x21
 8000618:	2100      	movs	r1, #0
 800061a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800061c:	4b21      	ldr	r3, [pc, #132]	@ (80006a4 <MX_ADC_Init+0xd8>)
 800061e:	2200      	movs	r2, #0
 8000620:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000622:	4b20      	ldr	r3, [pc, #128]	@ (80006a4 <MX_ADC_Init+0xd8>)
 8000624:	22c2      	movs	r2, #194	@ 0xc2
 8000626:	32ff      	adds	r2, #255	@ 0xff
 8000628:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800062a:	4b1e      	ldr	r3, [pc, #120]	@ (80006a4 <MX_ADC_Init+0xd8>)
 800062c:	222c      	movs	r2, #44	@ 0x2c
 800062e:	2100      	movs	r1, #0
 8000630:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b1c      	ldr	r3, [pc, #112]	@ (80006a4 <MX_ADC_Init+0xd8>)
 8000634:	2204      	movs	r2, #4
 8000636:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000638:	4b1a      	ldr	r3, [pc, #104]	@ (80006a4 <MX_ADC_Init+0xd8>)
 800063a:	2200      	movs	r2, #0
 800063c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800063e:	4b19      	ldr	r3, [pc, #100]	@ (80006a4 <MX_ADC_Init+0xd8>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8000644:	4b17      	ldr	r3, [pc, #92]	@ (80006a4 <MX_ADC_Init+0xd8>)
 8000646:	2201      	movs	r2, #1
 8000648:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800064a:	4b16      	ldr	r3, [pc, #88]	@ (80006a4 <MX_ADC_Init+0xd8>)
 800064c:	2200      	movs	r2, #0
 800064e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000650:	4b14      	ldr	r3, [pc, #80]	@ (80006a4 <MX_ADC_Init+0xd8>)
 8000652:	0018      	movs	r0, r3
 8000654:	f000 fce0 	bl	8001018 <HAL_ADC_Init>
 8000658:	1e03      	subs	r3, r0, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800065c:	f000 fa62 	bl	8000b24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000660:	003b      	movs	r3, r7
 8000662:	4a12      	ldr	r2, [pc, #72]	@ (80006ac <MX_ADC_Init+0xe0>)
 8000664:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000666:	003b      	movs	r3, r7
 8000668:	2280      	movs	r2, #128	@ 0x80
 800066a:	0152      	lsls	r2, r2, #5
 800066c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800066e:	003a      	movs	r2, r7
 8000670:	4b0c      	ldr	r3, [pc, #48]	@ (80006a4 <MX_ADC_Init+0xd8>)
 8000672:	0011      	movs	r1, r2
 8000674:	0018      	movs	r0, r3
 8000676:	f000 fe43 	bl	8001300 <HAL_ADC_ConfigChannel>
 800067a:	1e03      	subs	r3, r0, #0
 800067c:	d001      	beq.n	8000682 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800067e:	f000 fa51 	bl	8000b24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000682:	003b      	movs	r3, r7
 8000684:	4a0a      	ldr	r2, [pc, #40]	@ (80006b0 <MX_ADC_Init+0xe4>)
 8000686:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000688:	003a      	movs	r2, r7
 800068a:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <MX_ADC_Init+0xd8>)
 800068c:	0011      	movs	r1, r2
 800068e:	0018      	movs	r0, r3
 8000690:	f000 fe36 	bl	8001300 <HAL_ADC_ConfigChannel>
 8000694:	1e03      	subs	r3, r0, #0
 8000696:	d001      	beq.n	800069c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000698:	f000 fa44 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800069c:	46c0      	nop			@ (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	b002      	add	sp, #8
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000028 	.word	0x20000028
 80006a8:	40012400 	.word	0x40012400
 80006ac:	10000010 	.word	0x10000010
 80006b0:	24000200 	.word	0x24000200

080006b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000728 <MX_I2C1_Init+0x74>)
 80006ba:	4a1c      	ldr	r2, [pc, #112]	@ (800072c <MX_I2C1_Init+0x78>)
 80006bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000000;
 80006be:	4b1a      	ldr	r3, [pc, #104]	@ (8000728 <MX_I2C1_Init+0x74>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006c4:	4b18      	ldr	r3, [pc, #96]	@ (8000728 <MX_I2C1_Init+0x74>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ca:	4b17      	ldr	r3, [pc, #92]	@ (8000728 <MX_I2C1_Init+0x74>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d0:	4b15      	ldr	r3, [pc, #84]	@ (8000728 <MX_I2C1_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006d6:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <MX_I2C1_Init+0x74>)
 80006d8:	2200      	movs	r2, #0
 80006da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006dc:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <MX_I2C1_Init+0x74>)
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e2:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <MX_I2C1_Init+0x74>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <MX_I2C1_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <MX_I2C1_Init+0x74>)
 80006f0:	0018      	movs	r0, r3
 80006f2:	f001 f8ad 	bl	8001850 <HAL_I2C_Init>
 80006f6:	1e03      	subs	r3, r0, #0
 80006f8:	d001      	beq.n	80006fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006fa:	f000 fa13 	bl	8000b24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000728 <MX_I2C1_Init+0x74>)
 8000700:	2100      	movs	r1, #0
 8000702:	0018      	movs	r0, r3
 8000704:	f001 f93a 	bl	800197c <HAL_I2CEx_ConfigAnalogFilter>
 8000708:	1e03      	subs	r3, r0, #0
 800070a:	d001      	beq.n	8000710 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800070c:	f000 fa0a 	bl	8000b24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000710:	4b05      	ldr	r3, [pc, #20]	@ (8000728 <MX_I2C1_Init+0x74>)
 8000712:	2100      	movs	r1, #0
 8000714:	0018      	movs	r0, r3
 8000716:	f001 f97d 	bl	8001a14 <HAL_I2CEx_ConfigDigitalFilter>
 800071a:	1e03      	subs	r3, r0, #0
 800071c:	d001      	beq.n	8000722 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800071e:	f000 fa01 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000084 	.word	0x20000084
 800072c:	40005400 	.word	0x40005400

08000730 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	0018      	movs	r0, r3
 800073a:	2314      	movs	r3, #20
 800073c:	001a      	movs	r2, r3
 800073e:	2100      	movs	r1, #0
 8000740:	f003 fd20 	bl	8004184 <memset>
  RTC_DateTypeDef sDate = {0};
 8000744:	003b      	movs	r3, r7
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800074a:	4b2e      	ldr	r3, [pc, #184]	@ (8000804 <MX_RTC_Init+0xd4>)
 800074c:	4a2e      	ldr	r2, [pc, #184]	@ (8000808 <MX_RTC_Init+0xd8>)
 800074e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000750:	4b2c      	ldr	r3, [pc, #176]	@ (8000804 <MX_RTC_Init+0xd4>)
 8000752:	2200      	movs	r2, #0
 8000754:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000756:	4b2b      	ldr	r3, [pc, #172]	@ (8000804 <MX_RTC_Init+0xd4>)
 8000758:	227f      	movs	r2, #127	@ 0x7f
 800075a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800075c:	4b29      	ldr	r3, [pc, #164]	@ (8000804 <MX_RTC_Init+0xd4>)
 800075e:	22ff      	movs	r2, #255	@ 0xff
 8000760:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000762:	4b28      	ldr	r3, [pc, #160]	@ (8000804 <MX_RTC_Init+0xd4>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000768:	4b26      	ldr	r3, [pc, #152]	@ (8000804 <MX_RTC_Init+0xd4>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800076e:	4b25      	ldr	r3, [pc, #148]	@ (8000804 <MX_RTC_Init+0xd4>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000774:	4b23      	ldr	r3, [pc, #140]	@ (8000804 <MX_RTC_Init+0xd4>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800077a:	4b22      	ldr	r3, [pc, #136]	@ (8000804 <MX_RTC_Init+0xd4>)
 800077c:	0018      	movs	r0, r3
 800077e:	f002 f861 	bl	8002844 <HAL_RTC_Init>
 8000782:	1e03      	subs	r3, r0, #0
 8000784:	d001      	beq.n	800078a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8000786:	f000 f9cd 	bl	8000b24 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2200      	movs	r2, #0
 8000794:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2200      	movs	r2, #0
 800079a:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80007a8:	1d39      	adds	r1, r7, #4
 80007aa:	4b16      	ldr	r3, [pc, #88]	@ (8000804 <MX_RTC_Init+0xd4>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	0018      	movs	r0, r3
 80007b0:	f002 f8e4 	bl	800297c <HAL_RTC_SetTime>
 80007b4:	1e03      	subs	r3, r0, #0
 80007b6:	d001      	beq.n	80007bc <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 80007b8:	f000 f9b4 	bl	8000b24 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007bc:	003b      	movs	r3, r7
 80007be:	2201      	movs	r2, #1
 80007c0:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80007c2:	003b      	movs	r3, r7
 80007c4:	2201      	movs	r2, #1
 80007c6:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80007c8:	003b      	movs	r3, r7
 80007ca:	2201      	movs	r2, #1
 80007cc:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x70;
 80007ce:	003b      	movs	r3, r7
 80007d0:	2270      	movs	r2, #112	@ 0x70
 80007d2:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80007d4:	0039      	movs	r1, r7
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <MX_RTC_Init+0xd4>)
 80007d8:	2201      	movs	r2, #1
 80007da:	0018      	movs	r0, r3
 80007dc:	f002 f978 	bl	8002ad0 <HAL_RTC_SetDate>
 80007e0:	1e03      	subs	r3, r0, #0
 80007e2:	d001      	beq.n	80007e8 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 80007e4:	f000 f99e 	bl	8000b24 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_DEFAULT) != HAL_OK)
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <MX_RTC_Init+0xd4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	2100      	movs	r1, #0
 80007ee:	0018      	movs	r0, r3
 80007f0:	f002 faba 	bl	8002d68 <HAL_RTCEx_SetTimeStamp>
 80007f4:	1e03      	subs	r3, r0, #0
 80007f6:	d001      	beq.n	80007fc <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 80007f8:	f000 f994 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007fc:	46c0      	nop			@ (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	b006      	add	sp, #24
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200000d8 	.word	0x200000d8
 8000808:	40002800 	.word	0x40002800

0800080c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000810:	4b18      	ldr	r3, [pc, #96]	@ (8000874 <MX_SPI1_Init+0x68>)
 8000812:	4a19      	ldr	r2, [pc, #100]	@ (8000878 <MX_SPI1_Init+0x6c>)
 8000814:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000816:	4b17      	ldr	r3, [pc, #92]	@ (8000874 <MX_SPI1_Init+0x68>)
 8000818:	2282      	movs	r2, #130	@ 0x82
 800081a:	0052      	lsls	r2, r2, #1
 800081c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800081e:	4b15      	ldr	r3, [pc, #84]	@ (8000874 <MX_SPI1_Init+0x68>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000824:	4b13      	ldr	r3, [pc, #76]	@ (8000874 <MX_SPI1_Init+0x68>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800082a:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <MX_SPI1_Init+0x68>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000830:	4b10      	ldr	r3, [pc, #64]	@ (8000874 <MX_SPI1_Init+0x68>)
 8000832:	2200      	movs	r2, #0
 8000834:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000836:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <MX_SPI1_Init+0x68>)
 8000838:	2280      	movs	r2, #128	@ 0x80
 800083a:	0092      	lsls	r2, r2, #2
 800083c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800083e:	4b0d      	ldr	r3, [pc, #52]	@ (8000874 <MX_SPI1_Init+0x68>)
 8000840:	2200      	movs	r2, #0
 8000842:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000844:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <MX_SPI1_Init+0x68>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800084a:	4b0a      	ldr	r3, [pc, #40]	@ (8000874 <MX_SPI1_Init+0x68>)
 800084c:	2200      	movs	r2, #0
 800084e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000850:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <MX_SPI1_Init+0x68>)
 8000852:	2200      	movs	r2, #0
 8000854:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000856:	4b07      	ldr	r3, [pc, #28]	@ (8000874 <MX_SPI1_Init+0x68>)
 8000858:	2207      	movs	r2, #7
 800085a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800085c:	4b05      	ldr	r3, [pc, #20]	@ (8000874 <MX_SPI1_Init+0x68>)
 800085e:	0018      	movs	r0, r3
 8000860:	f002 fae4 	bl	8002e2c <HAL_SPI_Init>
 8000864:	1e03      	subs	r3, r0, #0
 8000866:	d001      	beq.n	800086c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000868:	f000 f95c 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800086c:	46c0      	nop			@ (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			@ (mov r8, r8)
 8000874:	200000fc 	.word	0x200000fc
 8000878:	40013000 	.word	0x40013000

0800087c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	@ 0x28
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000882:	2318      	movs	r3, #24
 8000884:	18fb      	adds	r3, r7, r3
 8000886:	0018      	movs	r0, r3
 8000888:	2310      	movs	r3, #16
 800088a:	001a      	movs	r2, r3
 800088c:	2100      	movs	r1, #0
 800088e:	f003 fc79 	bl	8004184 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000892:	2310      	movs	r3, #16
 8000894:	18fb      	adds	r3, r7, r3
 8000896:	0018      	movs	r0, r3
 8000898:	2308      	movs	r3, #8
 800089a:	001a      	movs	r2, r3
 800089c:	2100      	movs	r1, #0
 800089e:	f003 fc71 	bl	8004184 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008a2:	003b      	movs	r3, r7
 80008a4:	0018      	movs	r0, r3
 80008a6:	2310      	movs	r3, #16
 80008a8:	001a      	movs	r2, r3
 80008aa:	2100      	movs	r1, #0
 80008ac:	f003 fc6a 	bl	8004184 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008b0:	4b35      	ldr	r3, [pc, #212]	@ (8000988 <MX_TIM2_Init+0x10c>)
 80008b2:	2280      	movs	r2, #128	@ 0x80
 80008b4:	05d2      	lsls	r2, r2, #23
 80008b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008b8:	4b33      	ldr	r3, [pc, #204]	@ (8000988 <MX_TIM2_Init+0x10c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008be:	4b32      	ldr	r3, [pc, #200]	@ (8000988 <MX_TIM2_Init+0x10c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80008c4:	4b30      	ldr	r3, [pc, #192]	@ (8000988 <MX_TIM2_Init+0x10c>)
 80008c6:	4a31      	ldr	r2, [pc, #196]	@ (800098c <MX_TIM2_Init+0x110>)
 80008c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ca:	4b2f      	ldr	r3, [pc, #188]	@ (8000988 <MX_TIM2_Init+0x10c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000988 <MX_TIM2_Init+0x10c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008d6:	4b2c      	ldr	r3, [pc, #176]	@ (8000988 <MX_TIM2_Init+0x10c>)
 80008d8:	0018      	movs	r0, r3
 80008da:	f002 fb30 	bl	8002f3e <HAL_TIM_Base_Init>
 80008de:	1e03      	subs	r3, r0, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80008e2:	f000 f91f 	bl	8000b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e6:	2118      	movs	r1, #24
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2280      	movs	r2, #128	@ 0x80
 80008ec:	0152      	lsls	r2, r2, #5
 80008ee:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008f0:	187a      	adds	r2, r7, r1
 80008f2:	4b25      	ldr	r3, [pc, #148]	@ (8000988 <MX_TIM2_Init+0x10c>)
 80008f4:	0011      	movs	r1, r2
 80008f6:	0018      	movs	r0, r3
 80008f8:	f002 fc70 	bl	80031dc <HAL_TIM_ConfigClockSource>
 80008fc:	1e03      	subs	r3, r0, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000900:	f000 f910 	bl	8000b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000904:	4b20      	ldr	r3, [pc, #128]	@ (8000988 <MX_TIM2_Init+0x10c>)
 8000906:	0018      	movs	r0, r3
 8000908:	f002 fb59 	bl	8002fbe <HAL_TIM_PWM_Init>
 800090c:	1e03      	subs	r3, r0, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000910:	f000 f908 	bl	8000b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000914:	2110      	movs	r1, #16
 8000916:	187b      	adds	r3, r7, r1
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091c:	187b      	adds	r3, r7, r1
 800091e:	2200      	movs	r2, #0
 8000920:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000922:	187a      	adds	r2, r7, r1
 8000924:	4b18      	ldr	r3, [pc, #96]	@ (8000988 <MX_TIM2_Init+0x10c>)
 8000926:	0011      	movs	r1, r2
 8000928:	0018      	movs	r0, r3
 800092a:	f002 ff13 	bl	8003754 <HAL_TIMEx_MasterConfigSynchronization>
 800092e:	1e03      	subs	r3, r0, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000932:	f000 f8f7 	bl	8000b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000936:	003b      	movs	r3, r7
 8000938:	2260      	movs	r2, #96	@ 0x60
 800093a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800093c:	003b      	movs	r3, r7
 800093e:	2200      	movs	r2, #0
 8000940:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000942:	003b      	movs	r3, r7
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000948:	003b      	movs	r3, r7
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800094e:	0039      	movs	r1, r7
 8000950:	4b0d      	ldr	r3, [pc, #52]	@ (8000988 <MX_TIM2_Init+0x10c>)
 8000952:	2200      	movs	r2, #0
 8000954:	0018      	movs	r0, r3
 8000956:	f002 fb7b 	bl	8003050 <HAL_TIM_PWM_ConfigChannel>
 800095a:	1e03      	subs	r3, r0, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 800095e:	f000 f8e1 	bl	8000b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000962:	0039      	movs	r1, r7
 8000964:	4b08      	ldr	r3, [pc, #32]	@ (8000988 <MX_TIM2_Init+0x10c>)
 8000966:	2204      	movs	r2, #4
 8000968:	0018      	movs	r0, r3
 800096a:	f002 fb71 	bl	8003050 <HAL_TIM_PWM_ConfigChannel>
 800096e:	1e03      	subs	r3, r0, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8000972:	f000 f8d7 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000976:	4b04      	ldr	r3, [pc, #16]	@ (8000988 <MX_TIM2_Init+0x10c>)
 8000978:	0018      	movs	r0, r3
 800097a:	f000 f9fd 	bl	8000d78 <HAL_TIM_MspPostInit>

}
 800097e:	46c0      	nop			@ (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	b00a      	add	sp, #40	@ 0x28
 8000984:	bd80      	pop	{r7, pc}
 8000986:	46c0      	nop			@ (mov r8, r8)
 8000988:	20000154 	.word	0x20000154
 800098c:	0000ffff 	.word	0x0000ffff

08000990 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000994:	4b14      	ldr	r3, [pc, #80]	@ (80009e8 <MX_USART2_UART_Init+0x58>)
 8000996:	4a15      	ldr	r2, [pc, #84]	@ (80009ec <MX_USART2_UART_Init+0x5c>)
 8000998:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800099a:	4b13      	ldr	r3, [pc, #76]	@ (80009e8 <MX_USART2_UART_Init+0x58>)
 800099c:	22e1      	movs	r2, #225	@ 0xe1
 800099e:	0252      	lsls	r2, r2, #9
 80009a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009a2:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <MX_USART2_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <MX_USART2_UART_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <MX_USART2_UART_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <MX_USART2_UART_Init+0x58>)
 80009b6:	220c      	movs	r2, #12
 80009b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	@ (80009e8 <MX_USART2_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c0:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <MX_USART2_UART_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <MX_USART2_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009cc:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <MX_USART2_UART_Init+0x58>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009d2:	4b05      	ldr	r3, [pc, #20]	@ (80009e8 <MX_USART2_UART_Init+0x58>)
 80009d4:	0018      	movs	r0, r3
 80009d6:	f002 ff0d 	bl	80037f4 <HAL_UART_Init>
 80009da:	1e03      	subs	r3, r0, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009de:	f000 f8a1 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009e2:	46c0      	nop			@ (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000194 	.word	0x20000194
 80009ec:	40004400 	.word	0x40004400

080009f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b089      	sub	sp, #36	@ 0x24
 80009f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	240c      	movs	r4, #12
 80009f8:	193b      	adds	r3, r7, r4
 80009fa:	0018      	movs	r0, r3
 80009fc:	2314      	movs	r3, #20
 80009fe:	001a      	movs	r2, r3
 8000a00:	2100      	movs	r1, #0
 8000a02:	f003 fbbf 	bl	8004184 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a06:	4b44      	ldr	r3, [pc, #272]	@ (8000b18 <MX_GPIO_Init+0x128>)
 8000a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a0a:	4b43      	ldr	r3, [pc, #268]	@ (8000b18 <MX_GPIO_Init+0x128>)
 8000a0c:	2180      	movs	r1, #128	@ 0x80
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a12:	4b41      	ldr	r3, [pc, #260]	@ (8000b18 <MX_GPIO_Init+0x128>)
 8000a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a16:	2280      	movs	r2, #128	@ 0x80
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	4b3e      	ldr	r3, [pc, #248]	@ (8000b18 <MX_GPIO_Init+0x128>)
 8000a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a22:	4b3d      	ldr	r3, [pc, #244]	@ (8000b18 <MX_GPIO_Init+0x128>)
 8000a24:	2101      	movs	r1, #1
 8000a26:	430a      	orrs	r2, r1
 8000a28:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8000b18 <MX_GPIO_Init+0x128>)
 8000a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4013      	ands	r3, r2
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a36:	4b38      	ldr	r3, [pc, #224]	@ (8000b18 <MX_GPIO_Init+0x128>)
 8000a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a3a:	4b37      	ldr	r3, [pc, #220]	@ (8000b18 <MX_GPIO_Init+0x128>)
 8000a3c:	2102      	movs	r1, #2
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a42:	4b35      	ldr	r3, [pc, #212]	@ (8000b18 <MX_GPIO_Init+0x128>)
 8000a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a46:	2202      	movs	r2, #2
 8000a48:	4013      	ands	r3, r2
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, offb_Pin|off_Pin, GPIO_PIN_RESET);
 8000a4e:	4b33      	ldr	r3, [pc, #204]	@ (8000b1c <MX_GPIO_Init+0x12c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	2103      	movs	r1, #3
 8000a54:	0018      	movs	r0, r3
 8000a56:	f000 fedd 	bl	8001814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, cmd_pleins_phares_Pin|direction_Pin|IRQ_Pin|CE_Pin, GPIO_PIN_RESET);
 8000a5a:	238e      	movs	r3, #142	@ 0x8e
 8000a5c:	01db      	lsls	r3, r3, #7
 8000a5e:	4830      	ldr	r0, [pc, #192]	@ (8000b20 <MX_GPIO_Init+0x130>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	0019      	movs	r1, r3
 8000a64:	f000 fed6 	bl	8001814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_v_GPIO_Port, led_v_Pin, GPIO_PIN_SET);
 8000a68:	2380      	movs	r3, #128	@ 0x80
 8000a6a:	019b      	lsls	r3, r3, #6
 8000a6c:	482c      	ldr	r0, [pc, #176]	@ (8000b20 <MX_GPIO_Init+0x130>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	0019      	movs	r1, r3
 8000a72:	f000 fecf 	bl	8001814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_r_GPIO_Port, led_r_Pin, GPIO_PIN_SET);
 8000a76:	2380      	movs	r3, #128	@ 0x80
 8000a78:	0059      	lsls	r1, r3, #1
 8000a7a:	23a0      	movs	r3, #160	@ 0xa0
 8000a7c:	05db      	lsls	r3, r3, #23
 8000a7e:	2201      	movs	r2, #1
 8000a80:	0018      	movs	r0, r3
 8000a82:	f000 fec7 	bl	8001814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 8000a86:	2380      	movs	r3, #128	@ 0x80
 8000a88:	0219      	lsls	r1, r3, #8
 8000a8a:	23a0      	movs	r3, #160	@ 0xa0
 8000a8c:	05db      	lsls	r3, r3, #23
 8000a8e:	2200      	movs	r2, #0
 8000a90:	0018      	movs	r0, r3
 8000a92:	f000 febf 	bl	8001814 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : offb_Pin off_Pin */
  GPIO_InitStruct.Pin = offb_Pin|off_Pin;
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	2203      	movs	r2, #3
 8000a9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	193b      	adds	r3, r7, r4
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000aa2:	193b      	adds	r3, r7, r4
 8000aa4:	2202      	movs	r2, #2
 8000aa6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	193b      	adds	r3, r7, r4
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000aae:	193b      	adds	r3, r7, r4
 8000ab0:	4a1a      	ldr	r2, [pc, #104]	@ (8000b1c <MX_GPIO_Init+0x12c>)
 8000ab2:	0019      	movs	r1, r3
 8000ab4:	0010      	movs	r0, r2
 8000ab6:	f000 fd3f 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pins : cmd_pleins_phares_Pin led_v_Pin direction_Pin IRQ_Pin
                           CE_Pin */
  GPIO_InitStruct.Pin = cmd_pleins_phares_Pin|led_v_Pin|direction_Pin|IRQ_Pin
 8000aba:	0021      	movs	r1, r4
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	22ce      	movs	r2, #206	@ 0xce
 8000ac0:	01d2      	lsls	r2, r2, #7
 8000ac2:	601a      	str	r2, [r3, #0]
                          |CE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	000c      	movs	r4, r1
 8000ac6:	193b      	adds	r3, r7, r4
 8000ac8:	2201      	movs	r2, #1
 8000aca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	193b      	adds	r3, r7, r4
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	193b      	adds	r3, r7, r4
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad8:	193b      	adds	r3, r7, r4
 8000ada:	4a11      	ldr	r2, [pc, #68]	@ (8000b20 <MX_GPIO_Init+0x130>)
 8000adc:	0019      	movs	r1, r3
 8000ade:	0010      	movs	r0, r2
 8000ae0:	f000 fd2a 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_r_Pin CSN_Pin */
  GPIO_InitStruct.Pin = led_r_Pin|CSN_Pin;
 8000ae4:	0021      	movs	r1, r4
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	2281      	movs	r2, #129	@ 0x81
 8000aea:	0212      	lsls	r2, r2, #8
 8000aec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	2201      	movs	r2, #1
 8000af2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	2200      	movs	r2, #0
 8000afe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	187a      	adds	r2, r7, r1
 8000b02:	23a0      	movs	r3, #160	@ 0xa0
 8000b04:	05db      	lsls	r3, r3, #23
 8000b06:	0011      	movs	r1, r2
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f000 fd15 	bl	8001538 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b0e:	46c0      	nop			@ (mov r8, r8)
 8000b10:	46bd      	mov	sp, r7
 8000b12:	b009      	add	sp, #36	@ 0x24
 8000b14:	bd90      	pop	{r4, r7, pc}
 8000b16:	46c0      	nop			@ (mov r8, r8)
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	50001c00 	.word	0x50001c00
 8000b20:	50000400 	.word	0x50000400

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2c:	46c0      	nop			@ (mov r8, r8)
 8000b2e:	e7fd      	b.n	8000b2c <Error_Handler+0x8>

08000b30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b34:	4b07      	ldr	r3, [pc, #28]	@ (8000b54 <HAL_MspInit+0x24>)
 8000b36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <HAL_MspInit+0x24>)
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b40:	4b04      	ldr	r3, [pc, #16]	@ (8000b54 <HAL_MspInit+0x24>)
 8000b42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b44:	4b03      	ldr	r3, [pc, #12]	@ (8000b54 <HAL_MspInit+0x24>)
 8000b46:	2180      	movs	r1, #128	@ 0x80
 8000b48:	0549      	lsls	r1, r1, #21
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4e:	46c0      	nop			@ (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40021000 	.word	0x40021000

08000b58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b08b      	sub	sp, #44	@ 0x2c
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	2414      	movs	r4, #20
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	0018      	movs	r0, r3
 8000b66:	2314      	movs	r3, #20
 8000b68:	001a      	movs	r2, r3
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	f003 fb0a 	bl	8004184 <memset>
  if(hadc->Instance==ADC1)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a22      	ldr	r2, [pc, #136]	@ (8000c00 <HAL_ADC_MspInit+0xa8>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d13d      	bne.n	8000bf6 <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b7a:	4b22      	ldr	r3, [pc, #136]	@ (8000c04 <HAL_ADC_MspInit+0xac>)
 8000b7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b7e:	4b21      	ldr	r3, [pc, #132]	@ (8000c04 <HAL_ADC_MspInit+0xac>)
 8000b80:	2180      	movs	r1, #128	@ 0x80
 8000b82:	0089      	lsls	r1, r1, #2
 8000b84:	430a      	orrs	r2, r1
 8000b86:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b88:	4b1e      	ldr	r3, [pc, #120]	@ (8000c04 <HAL_ADC_MspInit+0xac>)
 8000b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000c04 <HAL_ADC_MspInit+0xac>)
 8000b8e:	2101      	movs	r1, #1
 8000b90:	430a      	orrs	r2, r1
 8000b92:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b94:	4b1b      	ldr	r3, [pc, #108]	@ (8000c04 <HAL_ADC_MspInit+0xac>)
 8000b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b98:	2201      	movs	r2, #1
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba0:	4b18      	ldr	r3, [pc, #96]	@ (8000c04 <HAL_ADC_MspInit+0xac>)
 8000ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ba4:	4b17      	ldr	r3, [pc, #92]	@ (8000c04 <HAL_ADC_MspInit+0xac>)
 8000ba6:	2102      	movs	r1, #2
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000bac:	4b15      	ldr	r3, [pc, #84]	@ (8000c04 <HAL_ADC_MspInit+0xac>)
 8000bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = Courant_moteur_Pin;
 8000bb8:	193b      	adds	r3, r7, r4
 8000bba:	2210      	movs	r2, #16
 8000bbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bbe:	193b      	adds	r3, r7, r4
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	193b      	adds	r3, r7, r4
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Courant_moteur_GPIO_Port, &GPIO_InitStruct);
 8000bca:	193a      	adds	r2, r7, r4
 8000bcc:	23a0      	movs	r3, #160	@ 0xa0
 8000bce:	05db      	lsls	r3, r3, #23
 8000bd0:	0011      	movs	r1, r2
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f000 fcb0 	bl	8001538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Tension_batterie_Pin;
 8000bd8:	193b      	adds	r3, r7, r4
 8000bda:	2202      	movs	r2, #2
 8000bdc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bde:	193b      	adds	r3, r7, r4
 8000be0:	2203      	movs	r2, #3
 8000be2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Tension_batterie_GPIO_Port, &GPIO_InitStruct);
 8000bea:	193b      	adds	r3, r7, r4
 8000bec:	4a06      	ldr	r2, [pc, #24]	@ (8000c08 <HAL_ADC_MspInit+0xb0>)
 8000bee:	0019      	movs	r1, r3
 8000bf0:	0010      	movs	r0, r2
 8000bf2:	f000 fca1 	bl	8001538 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000bf6:	46c0      	nop			@ (mov r8, r8)
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b00b      	add	sp, #44	@ 0x2c
 8000bfc:	bd90      	pop	{r4, r7, pc}
 8000bfe:	46c0      	nop			@ (mov r8, r8)
 8000c00:	40012400 	.word	0x40012400
 8000c04:	40021000 	.word	0x40021000
 8000c08:	50000400 	.word	0x50000400

08000c0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b089      	sub	sp, #36	@ 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	240c      	movs	r4, #12
 8000c16:	193b      	adds	r3, r7, r4
 8000c18:	0018      	movs	r0, r3
 8000c1a:	2314      	movs	r3, #20
 8000c1c:	001a      	movs	r2, r3
 8000c1e:	2100      	movs	r1, #0
 8000c20:	f003 fab0 	bl	8004184 <memset>
  if(hi2c->Instance==I2C1)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a17      	ldr	r2, [pc, #92]	@ (8000c88 <HAL_I2C_MspInit+0x7c>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d128      	bne.n	8000c80 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	4b17      	ldr	r3, [pc, #92]	@ (8000c8c <HAL_I2C_MspInit+0x80>)
 8000c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c32:	4b16      	ldr	r3, [pc, #88]	@ (8000c8c <HAL_I2C_MspInit+0x80>)
 8000c34:	2102      	movs	r1, #2
 8000c36:	430a      	orrs	r2, r1
 8000c38:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c3a:	4b14      	ldr	r3, [pc, #80]	@ (8000c8c <HAL_I2C_MspInit+0x80>)
 8000c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c3e:	2202      	movs	r2, #2
 8000c40:	4013      	ands	r3, r2
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c46:	0021      	movs	r1, r4
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	22c0      	movs	r2, #192	@ 0xc0
 8000c4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	2212      	movs	r2, #18
 8000c52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	2201      	movs	r2, #1
 8000c64:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	4a09      	ldr	r2, [pc, #36]	@ (8000c90 <HAL_I2C_MspInit+0x84>)
 8000c6a:	0019      	movs	r1, r3
 8000c6c:	0010      	movs	r0, r2
 8000c6e:	f000 fc63 	bl	8001538 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c72:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <HAL_I2C_MspInit+0x80>)
 8000c74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c76:	4b05      	ldr	r3, [pc, #20]	@ (8000c8c <HAL_I2C_MspInit+0x80>)
 8000c78:	2180      	movs	r1, #128	@ 0x80
 8000c7a:	0389      	lsls	r1, r1, #14
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c80:	46c0      	nop			@ (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b009      	add	sp, #36	@ 0x24
 8000c86:	bd90      	pop	{r4, r7, pc}
 8000c88:	40005400 	.word	0x40005400
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	50000400 	.word	0x50000400

08000c94 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a06      	ldr	r2, [pc, #24]	@ (8000cbc <HAL_RTC_MspInit+0x28>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d106      	bne.n	8000cb4 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ca6:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <HAL_RTC_MspInit+0x2c>)
 8000ca8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000caa:	4b05      	ldr	r3, [pc, #20]	@ (8000cc0 <HAL_RTC_MspInit+0x2c>)
 8000cac:	2180      	movs	r1, #128	@ 0x80
 8000cae:	02c9      	lsls	r1, r1, #11
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000cb4:	46c0      	nop			@ (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b002      	add	sp, #8
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40002800 	.word	0x40002800
 8000cc0:	40021000 	.word	0x40021000

08000cc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b089      	sub	sp, #36	@ 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	240c      	movs	r4, #12
 8000cce:	193b      	adds	r3, r7, r4
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	2314      	movs	r3, #20
 8000cd4:	001a      	movs	r2, r3
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	f003 fa54 	bl	8004184 <memset>
  if(hspi->Instance==SPI1)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a17      	ldr	r2, [pc, #92]	@ (8000d40 <HAL_SPI_MspInit+0x7c>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d128      	bne.n	8000d38 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ce6:	4b17      	ldr	r3, [pc, #92]	@ (8000d44 <HAL_SPI_MspInit+0x80>)
 8000ce8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cea:	4b16      	ldr	r3, [pc, #88]	@ (8000d44 <HAL_SPI_MspInit+0x80>)
 8000cec:	2180      	movs	r1, #128	@ 0x80
 8000cee:	0149      	lsls	r1, r1, #5
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf4:	4b13      	ldr	r3, [pc, #76]	@ (8000d44 <HAL_SPI_MspInit+0x80>)
 8000cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cf8:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <HAL_SPI_MspInit+0x80>)
 8000cfa:	2102      	movs	r1, #2
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d00:	4b10      	ldr	r3, [pc, #64]	@ (8000d44 <HAL_SPI_MspInit+0x80>)
 8000d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d04:	2202      	movs	r2, #2
 8000d06:	4013      	ands	r3, r2
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000d0c:	0021      	movs	r1, r4
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	2238      	movs	r2, #56	@ 0x38
 8000d12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	2202      	movs	r2, #2
 8000d18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	2203      	movs	r2, #3
 8000d24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000d26:	187b      	adds	r3, r7, r1
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	4a06      	ldr	r2, [pc, #24]	@ (8000d48 <HAL_SPI_MspInit+0x84>)
 8000d30:	0019      	movs	r1, r3
 8000d32:	0010      	movs	r0, r2
 8000d34:	f000 fc00 	bl	8001538 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d38:	46c0      	nop			@ (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b009      	add	sp, #36	@ 0x24
 8000d3e:	bd90      	pop	{r4, r7, pc}
 8000d40:	40013000 	.word	0x40013000
 8000d44:	40021000 	.word	0x40021000
 8000d48:	50000400 	.word	0x50000400

08000d4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	2380      	movs	r3, #128	@ 0x80
 8000d5a:	05db      	lsls	r3, r3, #23
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d105      	bne.n	8000d6c <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d60:	4b04      	ldr	r3, [pc, #16]	@ (8000d74 <HAL_TIM_Base_MspInit+0x28>)
 8000d62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000d64:	4b03      	ldr	r3, [pc, #12]	@ (8000d74 <HAL_TIM_Base_MspInit+0x28>)
 8000d66:	2101      	movs	r1, #1
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000d6c:	46c0      	nop			@ (mov r8, r8)
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	b002      	add	sp, #8
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40021000 	.word	0x40021000

08000d78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	b089      	sub	sp, #36	@ 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	240c      	movs	r4, #12
 8000d82:	193b      	adds	r3, r7, r4
 8000d84:	0018      	movs	r0, r3
 8000d86:	2314      	movs	r3, #20
 8000d88:	001a      	movs	r2, r3
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	f003 f9fa 	bl	8004184 <memset>
  if(htim->Instance==TIM2)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	2380      	movs	r3, #128	@ 0x80
 8000d96:	05db      	lsls	r3, r3, #23
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d122      	bne.n	8000de2 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9c:	4b13      	ldr	r3, [pc, #76]	@ (8000dec <HAL_TIM_MspPostInit+0x74>)
 8000d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000da0:	4b12      	ldr	r3, [pc, #72]	@ (8000dec <HAL_TIM_MspPostInit+0x74>)
 8000da2:	2101      	movs	r1, #1
 8000da4:	430a      	orrs	r2, r1
 8000da6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000da8:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <HAL_TIM_MspPostInit+0x74>)
 8000daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dac:	2201      	movs	r2, #1
 8000dae:	4013      	ands	r3, r2
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = onb_Pin|on_Pin;
 8000db4:	0021      	movs	r1, r4
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	2203      	movs	r2, #3
 8000dba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	187a      	adds	r2, r7, r1
 8000dd6:	23a0      	movs	r3, #160	@ 0xa0
 8000dd8:	05db      	lsls	r3, r3, #23
 8000dda:	0011      	movs	r1, r2
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f000 fbab 	bl	8001538 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000de2:	46c0      	nop			@ (mov r8, r8)
 8000de4:	46bd      	mov	sp, r7
 8000de6:	b009      	add	sp, #36	@ 0x24
 8000de8:	bd90      	pop	{r4, r7, pc}
 8000dea:	46c0      	nop			@ (mov r8, r8)
 8000dec:	40021000 	.word	0x40021000

08000df0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df0:	b590      	push	{r4, r7, lr}
 8000df2:	b089      	sub	sp, #36	@ 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	240c      	movs	r4, #12
 8000dfa:	193b      	adds	r3, r7, r4
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	2314      	movs	r3, #20
 8000e00:	001a      	movs	r2, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	f003 f9be 	bl	8004184 <memset>
  if(huart->Instance==USART2)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a18      	ldr	r2, [pc, #96]	@ (8000e70 <HAL_UART_MspInit+0x80>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d12a      	bne.n	8000e68 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e12:	4b18      	ldr	r3, [pc, #96]	@ (8000e74 <HAL_UART_MspInit+0x84>)
 8000e14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e16:	4b17      	ldr	r3, [pc, #92]	@ (8000e74 <HAL_UART_MspInit+0x84>)
 8000e18:	2180      	movs	r1, #128	@ 0x80
 8000e1a:	0289      	lsls	r1, r1, #10
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e20:	4b14      	ldr	r3, [pc, #80]	@ (8000e74 <HAL_UART_MspInit+0x84>)
 8000e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e24:	4b13      	ldr	r3, [pc, #76]	@ (8000e74 <HAL_UART_MspInit+0x84>)
 8000e26:	2101      	movs	r1, #1
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e2c:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <HAL_UART_MspInit+0x84>)
 8000e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e30:	2201      	movs	r2, #1
 8000e32:	4013      	ands	r3, r2
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA9     ------> USART2_TX
    PA10     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e38:	193b      	adds	r3, r7, r4
 8000e3a:	22c0      	movs	r2, #192	@ 0xc0
 8000e3c:	00d2      	lsls	r2, r2, #3
 8000e3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	0021      	movs	r1, r4
 8000e42:	187b      	adds	r3, r7, r1
 8000e44:	2202      	movs	r2, #2
 8000e46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	2203      	movs	r2, #3
 8000e52:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	2204      	movs	r2, #4
 8000e58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	187a      	adds	r2, r7, r1
 8000e5c:	23a0      	movs	r3, #160	@ 0xa0
 8000e5e:	05db      	lsls	r3, r3, #23
 8000e60:	0011      	movs	r1, r2
 8000e62:	0018      	movs	r0, r3
 8000e64:	f000 fb68 	bl	8001538 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e68:	46c0      	nop			@ (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b009      	add	sp, #36	@ 0x24
 8000e6e:	bd90      	pop	{r4, r7, pc}
 8000e70:	40004400 	.word	0x40004400
 8000e74:	40021000 	.word	0x40021000

08000e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e7c:	46c0      	nop			@ (mov r8, r8)
 8000e7e:	e7fd      	b.n	8000e7c <NMI_Handler+0x4>

08000e80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e84:	46c0      	nop			@ (mov r8, r8)
 8000e86:	e7fd      	b.n	8000e84 <HardFault_Handler+0x4>

08000e88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e8c:	46c0      	nop			@ (mov r8, r8)
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e96:	46c0      	nop			@ (mov r8, r8)
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea0:	f000 f89e 	bl	8000fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea4:	46c0      	nop			@ (mov r8, r8)
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eae:	46c0      	nop			@ (mov r8, r8)
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000eb4:	4813      	ldr	r0, [pc, #76]	@ (8000f04 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000eb6:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000eb8:	f7ff fff7 	bl	8000eaa <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000ebc:	4812      	ldr	r0, [pc, #72]	@ (8000f08 <LoopForever+0x6>)
    LDR R1, [R0]
 8000ebe:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000ec0:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000ec2:	4a12      	ldr	r2, [pc, #72]	@ (8000f0c <LoopForever+0xa>)
    CMP R1, R2
 8000ec4:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000ec6:	d105      	bne.n	8000ed4 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000ec8:	4811      	ldr	r0, [pc, #68]	@ (8000f10 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000eca:	4912      	ldr	r1, [pc, #72]	@ (8000f14 <LoopForever+0x12>)
    STR R1, [R0]
 8000ecc:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000ece:	4812      	ldr	r0, [pc, #72]	@ (8000f18 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000ed0:	4912      	ldr	r1, [pc, #72]	@ (8000f1c <LoopForever+0x1a>)
    STR R1, [R0]
 8000ed2:	6001      	str	r1, [r0, #0]

08000ed4 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ed4:	4812      	ldr	r0, [pc, #72]	@ (8000f20 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000ed6:	4913      	ldr	r1, [pc, #76]	@ (8000f24 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000ed8:	4a13      	ldr	r2, [pc, #76]	@ (8000f28 <LoopForever+0x26>)
  movs r3, #0
 8000eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000edc:	e002      	b.n	8000ee4 <LoopCopyDataInit>

08000ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee2:	3304      	adds	r3, #4

08000ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee8:	d3f9      	bcc.n	8000ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eea:	4a10      	ldr	r2, [pc, #64]	@ (8000f2c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000eec:	4c10      	ldr	r4, [pc, #64]	@ (8000f30 <LoopForever+0x2e>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef0:	e001      	b.n	8000ef6 <LoopFillZerobss>

08000ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef4:	3204      	adds	r2, #4

08000ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef8:	d3fb      	bcc.n	8000ef2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000efa:	f003 f94b 	bl	8004194 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000efe:	f7ff fad8 	bl	80004b2 <main>

08000f02 <LoopForever>:

LoopForever:
    b LoopForever
 8000f02:	e7fe      	b.n	8000f02 <LoopForever>
   ldr   r0, =_estack
 8000f04:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8000f08:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000f0c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000f10:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000f14:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000f18:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000f1c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f28:	08004270 	.word	0x08004270
  ldr r2, =_sbss
 8000f2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f30:	20000220 	.word	0x20000220

08000f34 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f34:	e7fe      	b.n	8000f34 <ADC1_IRQHandler>
	...

08000f38 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f3e:	1dfb      	adds	r3, r7, #7
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000f44:	4b0b      	ldr	r3, [pc, #44]	@ (8000f74 <HAL_Init+0x3c>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <HAL_Init+0x3c>)
 8000f4a:	2140      	movs	r1, #64	@ 0x40
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f50:	2003      	movs	r0, #3
 8000f52:	f000 f811 	bl	8000f78 <HAL_InitTick>
 8000f56:	1e03      	subs	r3, r0, #0
 8000f58:	d003      	beq.n	8000f62 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000f5a:	1dfb      	adds	r3, r7, #7
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	701a      	strb	r2, [r3, #0]
 8000f60:	e001      	b.n	8000f66 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f62:	f7ff fde5 	bl	8000b30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f66:	1dfb      	adds	r3, r7, #7
 8000f68:	781b      	ldrb	r3, [r3, #0]
}
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b002      	add	sp, #8
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	46c0      	nop			@ (mov r8, r8)
 8000f74:	40022000 	.word	0x40022000

08000f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f80:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <HAL_InitTick+0x5c>)
 8000f82:	681c      	ldr	r4, [r3, #0]
 8000f84:	4b14      	ldr	r3, [pc, #80]	@ (8000fd8 <HAL_InitTick+0x60>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	0019      	movs	r1, r3
 8000f8a:	23fa      	movs	r3, #250	@ 0xfa
 8000f8c:	0098      	lsls	r0, r3, #2
 8000f8e:	f7ff f8bb 	bl	8000108 <__udivsi3>
 8000f92:	0003      	movs	r3, r0
 8000f94:	0019      	movs	r1, r3
 8000f96:	0020      	movs	r0, r4
 8000f98:	f7ff f8b6 	bl	8000108 <__udivsi3>
 8000f9c:	0003      	movs	r3, r0
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f000 fabd 	bl	800151e <HAL_SYSTICK_Config>
 8000fa4:	1e03      	subs	r3, r0, #0
 8000fa6:	d001      	beq.n	8000fac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e00f      	b.n	8000fcc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b03      	cmp	r3, #3
 8000fb0:	d80b      	bhi.n	8000fca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	425b      	negs	r3, r3
 8000fb8:	2200      	movs	r2, #0
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f000 fa9a 	bl	80014f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <HAL_InitTick+0x64>)
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e000      	b.n	8000fcc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
}
 8000fcc:	0018      	movs	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b003      	add	sp, #12
 8000fd2:	bd90      	pop	{r4, r7, pc}
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	20000004 	.word	0x20000004

08000fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe4:	4b05      	ldr	r3, [pc, #20]	@ (8000ffc <HAL_IncTick+0x1c>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	001a      	movs	r2, r3
 8000fea:	4b05      	ldr	r3, [pc, #20]	@ (8001000 <HAL_IncTick+0x20>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	18d2      	adds	r2, r2, r3
 8000ff0:	4b03      	ldr	r3, [pc, #12]	@ (8001000 <HAL_IncTick+0x20>)
 8000ff2:	601a      	str	r2, [r3, #0]
}
 8000ff4:	46c0      	nop			@ (mov r8, r8)
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	46c0      	nop			@ (mov r8, r8)
 8000ffc:	20000008 	.word	0x20000008
 8001000:	2000021c 	.word	0x2000021c

08001004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b02      	ldr	r3, [pc, #8]	@ (8001014 <HAL_GetTick+0x10>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	0018      	movs	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	46c0      	nop			@ (mov r8, r8)
 8001014:	2000021c 	.word	0x2000021c

08001018 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e159      	b.n	80012de <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800102e:	2b00      	cmp	r3, #0
 8001030:	d10a      	bne.n	8001048 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2250      	movs	r2, #80	@ 0x50
 800103c:	2100      	movs	r1, #0
 800103e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	0018      	movs	r0, r3
 8001044:	f7ff fd88 	bl	8000b58 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800104c:	2210      	movs	r2, #16
 800104e:	4013      	ands	r3, r2
 8001050:	2b10      	cmp	r3, #16
 8001052:	d005      	beq.n	8001060 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	2204      	movs	r2, #4
 800105c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800105e:	d00b      	beq.n	8001078 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001064:	2210      	movs	r2, #16
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2250      	movs	r2, #80	@ 0x50
 8001070:	2100      	movs	r1, #0
 8001072:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e132      	b.n	80012de <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800107c:	4a9a      	ldr	r2, [pc, #616]	@ (80012e8 <HAL_ADC_Init+0x2d0>)
 800107e:	4013      	ands	r3, r2
 8001080:	2202      	movs	r2, #2
 8001082:	431a      	orrs	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	2203      	movs	r2, #3
 8001090:	4013      	ands	r3, r2
 8001092:	2b01      	cmp	r3, #1
 8001094:	d108      	bne.n	80010a8 <HAL_ADC_Init+0x90>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2201      	movs	r2, #1
 800109e:	4013      	ands	r3, r2
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d101      	bne.n	80010a8 <HAL_ADC_Init+0x90>
 80010a4:	2301      	movs	r3, #1
 80010a6:	e000      	b.n	80010aa <HAL_ADC_Init+0x92>
 80010a8:	2300      	movs	r3, #0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d149      	bne.n	8001142 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	23c0      	movs	r3, #192	@ 0xc0
 80010b4:	061b      	lsls	r3, r3, #24
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d00b      	beq.n	80010d2 <HAL_ADC_Init+0xba>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	2380      	movs	r3, #128	@ 0x80
 80010c0:	05db      	lsls	r3, r3, #23
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d005      	beq.n	80010d2 <HAL_ADC_Init+0xba>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	2380      	movs	r3, #128	@ 0x80
 80010cc:	061b      	lsls	r3, r3, #24
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d111      	bne.n	80010f6 <HAL_ADC_Init+0xde>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	691a      	ldr	r2, [r3, #16]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	0092      	lsls	r2, r2, #2
 80010de:	0892      	lsrs	r2, r2, #2
 80010e0:	611a      	str	r2, [r3, #16]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6919      	ldr	r1, [r3, #16]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685a      	ldr	r2, [r3, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	430a      	orrs	r2, r1
 80010f2:	611a      	str	r2, [r3, #16]
 80010f4:	e014      	b.n	8001120 <HAL_ADC_Init+0x108>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	691a      	ldr	r2, [r3, #16]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	0092      	lsls	r2, r2, #2
 8001102:	0892      	lsrs	r2, r2, #2
 8001104:	611a      	str	r2, [r3, #16]
 8001106:	4b79      	ldr	r3, [pc, #484]	@ (80012ec <HAL_ADC_Init+0x2d4>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	4b78      	ldr	r3, [pc, #480]	@ (80012ec <HAL_ADC_Init+0x2d4>)
 800110c:	4978      	ldr	r1, [pc, #480]	@ (80012f0 <HAL_ADC_Init+0x2d8>)
 800110e:	400a      	ands	r2, r1
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	4b76      	ldr	r3, [pc, #472]	@ (80012ec <HAL_ADC_Init+0x2d4>)
 8001114:	6819      	ldr	r1, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	4b74      	ldr	r3, [pc, #464]	@ (80012ec <HAL_ADC_Init+0x2d4>)
 800111c:	430a      	orrs	r2, r1
 800111e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	68da      	ldr	r2, [r3, #12]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2118      	movs	r1, #24
 800112c:	438a      	bics	r2, r1
 800112e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	68d9      	ldr	r1, [r3, #12]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	430a      	orrs	r2, r1
 8001140:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001142:	4b6a      	ldr	r3, [pc, #424]	@ (80012ec <HAL_ADC_Init+0x2d4>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4b69      	ldr	r3, [pc, #420]	@ (80012ec <HAL_ADC_Init+0x2d4>)
 8001148:	496a      	ldr	r1, [pc, #424]	@ (80012f4 <HAL_ADC_Init+0x2dc>)
 800114a:	400a      	ands	r2, r1
 800114c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800114e:	4b67      	ldr	r3, [pc, #412]	@ (80012ec <HAL_ADC_Init+0x2d4>)
 8001150:	6819      	ldr	r1, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001156:	065a      	lsls	r2, r3, #25
 8001158:	4b64      	ldr	r3, [pc, #400]	@ (80012ec <HAL_ADC_Init+0x2d4>)
 800115a:	430a      	orrs	r2, r1
 800115c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	2380      	movs	r3, #128	@ 0x80
 8001166:	055b      	lsls	r3, r3, #21
 8001168:	4013      	ands	r3, r2
 800116a:	d108      	bne.n	800117e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2180      	movs	r1, #128	@ 0x80
 8001178:	0549      	lsls	r1, r1, #21
 800117a:	430a      	orrs	r2, r1
 800117c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	68da      	ldr	r2, [r3, #12]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	495b      	ldr	r1, [pc, #364]	@ (80012f8 <HAL_ADC_Init+0x2e0>)
 800118a:	400a      	ands	r2, r1
 800118c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	68d9      	ldr	r1, [r3, #12]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	2b02      	cmp	r3, #2
 800119e:	d101      	bne.n	80011a4 <HAL_ADC_Init+0x18c>
 80011a0:	2304      	movs	r3, #4
 80011a2:	e000      	b.n	80011a6 <HAL_ADC_Init+0x18e>
 80011a4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80011a6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2020      	movs	r0, #32
 80011ac:	5c1b      	ldrb	r3, [r3, r0]
 80011ae:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80011b0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	202c      	movs	r0, #44	@ 0x2c
 80011b6:	5c1b      	ldrb	r3, [r3, r0]
 80011b8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80011ba:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80011c0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80011c8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80011d0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	430a      	orrs	r2, r1
 80011d8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011de:	23c2      	movs	r3, #194	@ 0xc2
 80011e0:	33ff      	adds	r3, #255	@ 0xff
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d00b      	beq.n	80011fe <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	68d9      	ldr	r1, [r3, #12]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2221      	movs	r2, #33	@ 0x21
 8001202:	5c9b      	ldrb	r3, [r3, r2]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d11a      	bne.n	800123e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2220      	movs	r2, #32
 800120c:	5c9b      	ldrb	r3, [r3, r2]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d109      	bne.n	8001226 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	68da      	ldr	r2, [r3, #12]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2180      	movs	r1, #128	@ 0x80
 800121e:	0249      	lsls	r1, r1, #9
 8001220:	430a      	orrs	r2, r1
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	e00b      	b.n	800123e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800122a:	2220      	movs	r2, #32
 800122c:	431a      	orrs	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001236:	2201      	movs	r2, #1
 8001238:	431a      	orrs	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001242:	2b01      	cmp	r3, #1
 8001244:	d11f      	bne.n	8001286 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	691a      	ldr	r2, [r3, #16]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	492a      	ldr	r1, [pc, #168]	@ (80012fc <HAL_ADC_Init+0x2e4>)
 8001252:	400a      	ands	r2, r1
 8001254:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6919      	ldr	r1, [r3, #16]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001264:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800126a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	430a      	orrs	r2, r1
 8001272:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	691a      	ldr	r2, [r3, #16]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2101      	movs	r1, #1
 8001280:	430a      	orrs	r2, r1
 8001282:	611a      	str	r2, [r3, #16]
 8001284:	e00e      	b.n	80012a4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	691b      	ldr	r3, [r3, #16]
 800128c:	2201      	movs	r2, #1
 800128e:	4013      	ands	r3, r2
 8001290:	2b01      	cmp	r3, #1
 8001292:	d107      	bne.n	80012a4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	691a      	ldr	r2, [r3, #16]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2101      	movs	r1, #1
 80012a0:	438a      	bics	r2, r1
 80012a2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	695a      	ldr	r2, [r3, #20]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2107      	movs	r1, #7
 80012b0:	438a      	bics	r2, r1
 80012b2:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6959      	ldr	r1, [r3, #20]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	430a      	orrs	r2, r1
 80012c4:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012d0:	2203      	movs	r2, #3
 80012d2:	4393      	bics	r3, r2
 80012d4:	2201      	movs	r2, #1
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	0018      	movs	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	b002      	add	sp, #8
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	46c0      	nop			@ (mov r8, r8)
 80012e8:	fffffefd 	.word	0xfffffefd
 80012ec:	40012708 	.word	0x40012708
 80012f0:	ffc3ffff 	.word	0xffc3ffff
 80012f4:	fdffffff 	.word	0xfdffffff
 80012f8:	fffe0219 	.word	0xfffe0219
 80012fc:	fffffc03 	.word	0xfffffc03

08001300 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2250      	movs	r2, #80	@ 0x50
 800130e:	5c9b      	ldrb	r3, [r3, r2]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d101      	bne.n	8001318 <HAL_ADC_ConfigChannel+0x18>
 8001314:	2302      	movs	r3, #2
 8001316:	e050      	b.n	80013ba <HAL_ADC_ConfigChannel+0xba>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2250      	movs	r2, #80	@ 0x50
 800131c:	2101      	movs	r1, #1
 800131e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	2204      	movs	r2, #4
 8001328:	4013      	ands	r3, r2
 800132a:	d00b      	beq.n	8001344 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001330:	2220      	movs	r2, #32
 8001332:	431a      	orrs	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2250      	movs	r2, #80	@ 0x50
 800133c:	2100      	movs	r1, #0
 800133e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e03a      	b.n	80013ba <HAL_ADC_ConfigChannel+0xba>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	4a1e      	ldr	r2, [pc, #120]	@ (80013c4 <HAL_ADC_ConfigChannel+0xc4>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d018      	beq.n	8001380 <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	035b      	lsls	r3, r3, #13
 800135a:	0b5a      	lsrs	r2, r3, #13
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	629a      	str	r2, [r3, #40]	@ 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	2380      	movs	r3, #128	@ 0x80
 800136a:	029b      	lsls	r3, r3, #10
 800136c:	4013      	ands	r3, r2
 800136e:	d01f      	beq.n	80013b0 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001370:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <HAL_ADC_ConfigChannel+0xc8>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b14      	ldr	r3, [pc, #80]	@ (80013c8 <HAL_ADC_ConfigChannel+0xc8>)
 8001376:	2180      	movs	r1, #128	@ 0x80
 8001378:	03c9      	lsls	r1, r1, #15
 800137a:	430a      	orrs	r2, r1
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	e017      	b.n	80013b0 <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	035b      	lsls	r3, r3, #13
 800138c:	0b5b      	lsrs	r3, r3, #13
 800138e:	43d9      	mvns	r1, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	400a      	ands	r2, r1
 8001396:	629a      	str	r2, [r3, #40]	@ 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	2380      	movs	r3, #128	@ 0x80
 800139e:	029b      	lsls	r3, r3, #10
 80013a0:	4013      	ands	r3, r2
 80013a2:	d005      	beq.n	80013b0 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80013a4:	4b08      	ldr	r3, [pc, #32]	@ (80013c8 <HAL_ADC_ConfigChannel+0xc8>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b07      	ldr	r3, [pc, #28]	@ (80013c8 <HAL_ADC_ConfigChannel+0xc8>)
 80013aa:	4908      	ldr	r1, [pc, #32]	@ (80013cc <HAL_ADC_ConfigChannel+0xcc>)
 80013ac:	400a      	ands	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2250      	movs	r2, #80	@ 0x50
 80013b4:	2100      	movs	r1, #0
 80013b6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	0018      	movs	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	b002      	add	sp, #8
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	46c0      	nop			@ (mov r8, r8)
 80013c4:	00001001 	.word	0x00001001
 80013c8:	40012708 	.word	0x40012708
 80013cc:	ffbfffff 	.word	0xffbfffff

080013d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	0002      	movs	r2, r0
 80013d8:	6039      	str	r1, [r7, #0]
 80013da:	1dfb      	adds	r3, r7, #7
 80013dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013de:	1dfb      	adds	r3, r7, #7
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80013e4:	d828      	bhi.n	8001438 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013e6:	4a2f      	ldr	r2, [pc, #188]	@ (80014a4 <__NVIC_SetPriority+0xd4>)
 80013e8:	1dfb      	adds	r3, r7, #7
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	089b      	lsrs	r3, r3, #2
 80013f0:	33c0      	adds	r3, #192	@ 0xc0
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	589b      	ldr	r3, [r3, r2]
 80013f6:	1dfa      	adds	r2, r7, #7
 80013f8:	7812      	ldrb	r2, [r2, #0]
 80013fa:	0011      	movs	r1, r2
 80013fc:	2203      	movs	r2, #3
 80013fe:	400a      	ands	r2, r1
 8001400:	00d2      	lsls	r2, r2, #3
 8001402:	21ff      	movs	r1, #255	@ 0xff
 8001404:	4091      	lsls	r1, r2
 8001406:	000a      	movs	r2, r1
 8001408:	43d2      	mvns	r2, r2
 800140a:	401a      	ands	r2, r3
 800140c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	019b      	lsls	r3, r3, #6
 8001412:	22ff      	movs	r2, #255	@ 0xff
 8001414:	401a      	ands	r2, r3
 8001416:	1dfb      	adds	r3, r7, #7
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	0018      	movs	r0, r3
 800141c:	2303      	movs	r3, #3
 800141e:	4003      	ands	r3, r0
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001424:	481f      	ldr	r0, [pc, #124]	@ (80014a4 <__NVIC_SetPriority+0xd4>)
 8001426:	1dfb      	adds	r3, r7, #7
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	b25b      	sxtb	r3, r3
 800142c:	089b      	lsrs	r3, r3, #2
 800142e:	430a      	orrs	r2, r1
 8001430:	33c0      	adds	r3, #192	@ 0xc0
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001436:	e031      	b.n	800149c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001438:	4a1b      	ldr	r2, [pc, #108]	@ (80014a8 <__NVIC_SetPriority+0xd8>)
 800143a:	1dfb      	adds	r3, r7, #7
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	0019      	movs	r1, r3
 8001440:	230f      	movs	r3, #15
 8001442:	400b      	ands	r3, r1
 8001444:	3b08      	subs	r3, #8
 8001446:	089b      	lsrs	r3, r3, #2
 8001448:	3306      	adds	r3, #6
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	18d3      	adds	r3, r2, r3
 800144e:	3304      	adds	r3, #4
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	1dfa      	adds	r2, r7, #7
 8001454:	7812      	ldrb	r2, [r2, #0]
 8001456:	0011      	movs	r1, r2
 8001458:	2203      	movs	r2, #3
 800145a:	400a      	ands	r2, r1
 800145c:	00d2      	lsls	r2, r2, #3
 800145e:	21ff      	movs	r1, #255	@ 0xff
 8001460:	4091      	lsls	r1, r2
 8001462:	000a      	movs	r2, r1
 8001464:	43d2      	mvns	r2, r2
 8001466:	401a      	ands	r2, r3
 8001468:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	019b      	lsls	r3, r3, #6
 800146e:	22ff      	movs	r2, #255	@ 0xff
 8001470:	401a      	ands	r2, r3
 8001472:	1dfb      	adds	r3, r7, #7
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	0018      	movs	r0, r3
 8001478:	2303      	movs	r3, #3
 800147a:	4003      	ands	r3, r0
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001480:	4809      	ldr	r0, [pc, #36]	@ (80014a8 <__NVIC_SetPriority+0xd8>)
 8001482:	1dfb      	adds	r3, r7, #7
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	001c      	movs	r4, r3
 8001488:	230f      	movs	r3, #15
 800148a:	4023      	ands	r3, r4
 800148c:	3b08      	subs	r3, #8
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	430a      	orrs	r2, r1
 8001492:	3306      	adds	r3, #6
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	18c3      	adds	r3, r0, r3
 8001498:	3304      	adds	r3, #4
 800149a:	601a      	str	r2, [r3, #0]
}
 800149c:	46c0      	nop			@ (mov r8, r8)
 800149e:	46bd      	mov	sp, r7
 80014a0:	b003      	add	sp, #12
 80014a2:	bd90      	pop	{r4, r7, pc}
 80014a4:	e000e100 	.word	0xe000e100
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	1e5a      	subs	r2, r3, #1
 80014b8:	2380      	movs	r3, #128	@ 0x80
 80014ba:	045b      	lsls	r3, r3, #17
 80014bc:	429a      	cmp	r2, r3
 80014be:	d301      	bcc.n	80014c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c0:	2301      	movs	r3, #1
 80014c2:	e010      	b.n	80014e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c4:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <SysTick_Config+0x44>)
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	3a01      	subs	r2, #1
 80014ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014cc:	2301      	movs	r3, #1
 80014ce:	425b      	negs	r3, r3
 80014d0:	2103      	movs	r1, #3
 80014d2:	0018      	movs	r0, r3
 80014d4:	f7ff ff7c 	bl	80013d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d8:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <SysTick_Config+0x44>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014de:	4b04      	ldr	r3, [pc, #16]	@ (80014f0 <SysTick_Config+0x44>)
 80014e0:	2207      	movs	r2, #7
 80014e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	0018      	movs	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	b002      	add	sp, #8
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	46c0      	nop			@ (mov r8, r8)
 80014f0:	e000e010 	.word	0xe000e010

080014f4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
 80014fe:	210f      	movs	r1, #15
 8001500:	187b      	adds	r3, r7, r1
 8001502:	1c02      	adds	r2, r0, #0
 8001504:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	187b      	adds	r3, r7, r1
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	b25b      	sxtb	r3, r3
 800150e:	0011      	movs	r1, r2
 8001510:	0018      	movs	r0, r3
 8001512:	f7ff ff5d 	bl	80013d0 <__NVIC_SetPriority>
}
 8001516:	46c0      	nop			@ (mov r8, r8)
 8001518:	46bd      	mov	sp, r7
 800151a:	b004      	add	sp, #16
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	0018      	movs	r0, r3
 800152a:	f7ff ffbf 	bl	80014ac <SysTick_Config>
 800152e:	0003      	movs	r3, r0
}
 8001530:	0018      	movs	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	b002      	add	sp, #8
 8001536:	bd80      	pop	{r7, pc}

08001538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800154e:	e149      	b.n	80017e4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2101      	movs	r1, #1
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	4091      	lsls	r1, r2
 800155a:	000a      	movs	r2, r1
 800155c:	4013      	ands	r3, r2
 800155e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d100      	bne.n	8001568 <HAL_GPIO_Init+0x30>
 8001566:	e13a      	b.n	80017de <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2203      	movs	r2, #3
 800156e:	4013      	ands	r3, r2
 8001570:	2b01      	cmp	r3, #1
 8001572:	d005      	beq.n	8001580 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2203      	movs	r2, #3
 800157a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800157c:	2b02      	cmp	r3, #2
 800157e:	d130      	bne.n	80015e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	2203      	movs	r2, #3
 800158c:	409a      	lsls	r2, r3
 800158e:	0013      	movs	r3, r2
 8001590:	43da      	mvns	r2, r3
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	68da      	ldr	r2, [r3, #12]
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	409a      	lsls	r2, r3
 80015a2:	0013      	movs	r3, r2
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015b6:	2201      	movs	r2, #1
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	409a      	lsls	r2, r3
 80015bc:	0013      	movs	r3, r2
 80015be:	43da      	mvns	r2, r3
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	4013      	ands	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	091b      	lsrs	r3, r3, #4
 80015cc:	2201      	movs	r2, #1
 80015ce:	401a      	ands	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	409a      	lsls	r2, r3
 80015d4:	0013      	movs	r3, r2
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2203      	movs	r2, #3
 80015e8:	4013      	ands	r3, r2
 80015ea:	2b03      	cmp	r3, #3
 80015ec:	d017      	beq.n	800161e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	2203      	movs	r2, #3
 80015fa:	409a      	lsls	r2, r3
 80015fc:	0013      	movs	r3, r2
 80015fe:	43da      	mvns	r2, r3
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	409a      	lsls	r2, r3
 8001610:	0013      	movs	r3, r2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2203      	movs	r2, #3
 8001624:	4013      	ands	r3, r2
 8001626:	2b02      	cmp	r3, #2
 8001628:	d123      	bne.n	8001672 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	08da      	lsrs	r2, r3, #3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3208      	adds	r2, #8
 8001632:	0092      	lsls	r2, r2, #2
 8001634:	58d3      	ldr	r3, [r2, r3]
 8001636:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	2207      	movs	r2, #7
 800163c:	4013      	ands	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	220f      	movs	r2, #15
 8001642:	409a      	lsls	r2, r3
 8001644:	0013      	movs	r3, r2
 8001646:	43da      	mvns	r2, r3
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	4013      	ands	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	691a      	ldr	r2, [r3, #16]
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	2107      	movs	r1, #7
 8001656:	400b      	ands	r3, r1
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	409a      	lsls	r2, r3
 800165c:	0013      	movs	r3, r2
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	08da      	lsrs	r2, r3, #3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3208      	adds	r2, #8
 800166c:	0092      	lsls	r2, r2, #2
 800166e:	6939      	ldr	r1, [r7, #16]
 8001670:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	2203      	movs	r2, #3
 800167e:	409a      	lsls	r2, r3
 8001680:	0013      	movs	r3, r2
 8001682:	43da      	mvns	r2, r3
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2203      	movs	r2, #3
 8001690:	401a      	ands	r2, r3
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	409a      	lsls	r2, r3
 8001698:	0013      	movs	r3, r2
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	23c0      	movs	r3, #192	@ 0xc0
 80016ac:	029b      	lsls	r3, r3, #10
 80016ae:	4013      	ands	r3, r2
 80016b0:	d100      	bne.n	80016b4 <HAL_GPIO_Init+0x17c>
 80016b2:	e094      	b.n	80017de <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b4:	4b51      	ldr	r3, [pc, #324]	@ (80017fc <HAL_GPIO_Init+0x2c4>)
 80016b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016b8:	4b50      	ldr	r3, [pc, #320]	@ (80017fc <HAL_GPIO_Init+0x2c4>)
 80016ba:	2101      	movs	r1, #1
 80016bc:	430a      	orrs	r2, r1
 80016be:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80016c0:	4a4f      	ldr	r2, [pc, #316]	@ (8001800 <HAL_GPIO_Init+0x2c8>)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	089b      	lsrs	r3, r3, #2
 80016c6:	3302      	adds	r3, #2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	589b      	ldr	r3, [r3, r2]
 80016cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	2203      	movs	r2, #3
 80016d2:	4013      	ands	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	220f      	movs	r2, #15
 80016d8:	409a      	lsls	r2, r3
 80016da:	0013      	movs	r3, r2
 80016dc:	43da      	mvns	r2, r3
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	4013      	ands	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	23a0      	movs	r3, #160	@ 0xa0
 80016e8:	05db      	lsls	r3, r3, #23
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d013      	beq.n	8001716 <HAL_GPIO_Init+0x1de>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a44      	ldr	r2, [pc, #272]	@ (8001804 <HAL_GPIO_Init+0x2cc>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d00d      	beq.n	8001712 <HAL_GPIO_Init+0x1da>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a43      	ldr	r2, [pc, #268]	@ (8001808 <HAL_GPIO_Init+0x2d0>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d007      	beq.n	800170e <HAL_GPIO_Init+0x1d6>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a42      	ldr	r2, [pc, #264]	@ (800180c <HAL_GPIO_Init+0x2d4>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d101      	bne.n	800170a <HAL_GPIO_Init+0x1d2>
 8001706:	2305      	movs	r3, #5
 8001708:	e006      	b.n	8001718 <HAL_GPIO_Init+0x1e0>
 800170a:	2306      	movs	r3, #6
 800170c:	e004      	b.n	8001718 <HAL_GPIO_Init+0x1e0>
 800170e:	2302      	movs	r3, #2
 8001710:	e002      	b.n	8001718 <HAL_GPIO_Init+0x1e0>
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <HAL_GPIO_Init+0x1e0>
 8001716:	2300      	movs	r3, #0
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	2103      	movs	r1, #3
 800171c:	400a      	ands	r2, r1
 800171e:	0092      	lsls	r2, r2, #2
 8001720:	4093      	lsls	r3, r2
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001728:	4935      	ldr	r1, [pc, #212]	@ (8001800 <HAL_GPIO_Init+0x2c8>)
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	089b      	lsrs	r3, r3, #2
 800172e:	3302      	adds	r3, #2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001736:	4b36      	ldr	r3, [pc, #216]	@ (8001810 <HAL_GPIO_Init+0x2d8>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	43da      	mvns	r2, r3
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	4013      	ands	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	2380      	movs	r3, #128	@ 0x80
 800174c:	035b      	lsls	r3, r3, #13
 800174e:	4013      	ands	r3, r2
 8001750:	d003      	beq.n	800175a <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4313      	orrs	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800175a:	4b2d      	ldr	r3, [pc, #180]	@ (8001810 <HAL_GPIO_Init+0x2d8>)
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001760:	4b2b      	ldr	r3, [pc, #172]	@ (8001810 <HAL_GPIO_Init+0x2d8>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	43da      	mvns	r2, r3
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	4013      	ands	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	2380      	movs	r3, #128	@ 0x80
 8001776:	039b      	lsls	r3, r3, #14
 8001778:	4013      	ands	r3, r2
 800177a:	d003      	beq.n	8001784 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	4313      	orrs	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001784:	4b22      	ldr	r3, [pc, #136]	@ (8001810 <HAL_GPIO_Init+0x2d8>)
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800178a:	4b21      	ldr	r3, [pc, #132]	@ (8001810 <HAL_GPIO_Init+0x2d8>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	43da      	mvns	r2, r3
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	4013      	ands	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	2380      	movs	r3, #128	@ 0x80
 80017a0:	029b      	lsls	r3, r3, #10
 80017a2:	4013      	ands	r3, r2
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017ae:	4b18      	ldr	r3, [pc, #96]	@ (8001810 <HAL_GPIO_Init+0x2d8>)
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017b4:	4b16      	ldr	r3, [pc, #88]	@ (8001810 <HAL_GPIO_Init+0x2d8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	43da      	mvns	r2, r3
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	2380      	movs	r3, #128	@ 0x80
 80017ca:	025b      	lsls	r3, r3, #9
 80017cc:	4013      	ands	r3, r2
 80017ce:	d003      	beq.n	80017d8 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001810 <HAL_GPIO_Init+0x2d8>)
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	3301      	adds	r3, #1
 80017e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	40da      	lsrs	r2, r3
 80017ec:	1e13      	subs	r3, r2, #0
 80017ee:	d000      	beq.n	80017f2 <HAL_GPIO_Init+0x2ba>
 80017f0:	e6ae      	b.n	8001550 <HAL_GPIO_Init+0x18>
  }
}
 80017f2:	46c0      	nop			@ (mov r8, r8)
 80017f4:	46c0      	nop			@ (mov r8, r8)
 80017f6:	46bd      	mov	sp, r7
 80017f8:	b006      	add	sp, #24
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40021000 	.word	0x40021000
 8001800:	40010000 	.word	0x40010000
 8001804:	50000400 	.word	0x50000400
 8001808:	50000800 	.word	0x50000800
 800180c:	50001c00 	.word	0x50001c00
 8001810:	40010400 	.word	0x40010400

08001814 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	0008      	movs	r0, r1
 800181e:	0011      	movs	r1, r2
 8001820:	1cbb      	adds	r3, r7, #2
 8001822:	1c02      	adds	r2, r0, #0
 8001824:	801a      	strh	r2, [r3, #0]
 8001826:	1c7b      	adds	r3, r7, #1
 8001828:	1c0a      	adds	r2, r1, #0
 800182a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800182c:	1c7b      	adds	r3, r7, #1
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d004      	beq.n	800183e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001834:	1cbb      	adds	r3, r7, #2
 8001836:	881a      	ldrh	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800183c:	e003      	b.n	8001846 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800183e:	1cbb      	adds	r3, r7, #2
 8001840:	881a      	ldrh	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001846:	46c0      	nop			@ (mov r8, r8)
 8001848:	46bd      	mov	sp, r7
 800184a:	b002      	add	sp, #8
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e082      	b.n	8001968 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2241      	movs	r2, #65	@ 0x41
 8001866:	5c9b      	ldrb	r3, [r3, r2]
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d107      	bne.n	800187e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2240      	movs	r2, #64	@ 0x40
 8001872:	2100      	movs	r1, #0
 8001874:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	0018      	movs	r0, r3
 800187a:	f7ff f9c7 	bl	8000c0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2241      	movs	r2, #65	@ 0x41
 8001882:	2124      	movs	r1, #36	@ 0x24
 8001884:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2101      	movs	r1, #1
 8001892:	438a      	bics	r2, r1
 8001894:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4934      	ldr	r1, [pc, #208]	@ (8001970 <HAL_I2C_Init+0x120>)
 80018a0:	400a      	ands	r2, r1
 80018a2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4931      	ldr	r1, [pc, #196]	@ (8001974 <HAL_I2C_Init+0x124>)
 80018b0:	400a      	ands	r2, r1
 80018b2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d108      	bne.n	80018ce <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2180      	movs	r1, #128	@ 0x80
 80018c6:	0209      	lsls	r1, r1, #8
 80018c8:	430a      	orrs	r2, r1
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	e007      	b.n	80018de <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2184      	movs	r1, #132	@ 0x84
 80018d8:	0209      	lsls	r1, r1, #8
 80018da:	430a      	orrs	r2, r1
 80018dc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d104      	bne.n	80018f0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2280      	movs	r2, #128	@ 0x80
 80018ec:	0112      	lsls	r2, r2, #4
 80018ee:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	491f      	ldr	r1, [pc, #124]	@ (8001978 <HAL_I2C_Init+0x128>)
 80018fc:	430a      	orrs	r2, r1
 80018fe:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	491a      	ldr	r1, [pc, #104]	@ (8001974 <HAL_I2C_Init+0x124>)
 800190c:	400a      	ands	r2, r1
 800190e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	691a      	ldr	r2, [r3, #16]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	431a      	orrs	r2, r3
 800191a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69d9      	ldr	r1, [r3, #28]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a1a      	ldr	r2, [r3, #32]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2101      	movs	r1, #1
 8001946:	430a      	orrs	r2, r1
 8001948:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2241      	movs	r2, #65	@ 0x41
 8001954:	2120      	movs	r1, #32
 8001956:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2242      	movs	r2, #66	@ 0x42
 8001962:	2100      	movs	r1, #0
 8001964:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	0018      	movs	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	b002      	add	sp, #8
 800196e:	bd80      	pop	{r7, pc}
 8001970:	f0ffffff 	.word	0xf0ffffff
 8001974:	ffff7fff 	.word	0xffff7fff
 8001978:	02008000 	.word	0x02008000

0800197c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2241      	movs	r2, #65	@ 0x41
 800198a:	5c9b      	ldrb	r3, [r3, r2]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b20      	cmp	r3, #32
 8001990:	d138      	bne.n	8001a04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2240      	movs	r2, #64	@ 0x40
 8001996:	5c9b      	ldrb	r3, [r3, r2]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d101      	bne.n	80019a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800199c:	2302      	movs	r3, #2
 800199e:	e032      	b.n	8001a06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2240      	movs	r2, #64	@ 0x40
 80019a4:	2101      	movs	r1, #1
 80019a6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2241      	movs	r2, #65	@ 0x41
 80019ac:	2124      	movs	r1, #36	@ 0x24
 80019ae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2101      	movs	r1, #1
 80019bc:	438a      	bics	r2, r1
 80019be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4911      	ldr	r1, [pc, #68]	@ (8001a10 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80019cc:	400a      	ands	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6819      	ldr	r1, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2101      	movs	r1, #1
 80019ec:	430a      	orrs	r2, r1
 80019ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2241      	movs	r2, #65	@ 0x41
 80019f4:	2120      	movs	r1, #32
 80019f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2240      	movs	r2, #64	@ 0x40
 80019fc:	2100      	movs	r1, #0
 80019fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	e000      	b.n	8001a06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a04:	2302      	movs	r3, #2
  }
}
 8001a06:	0018      	movs	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	b002      	add	sp, #8
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	46c0      	nop			@ (mov r8, r8)
 8001a10:	ffffefff 	.word	0xffffefff

08001a14 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2241      	movs	r2, #65	@ 0x41
 8001a22:	5c9b      	ldrb	r3, [r3, r2]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b20      	cmp	r3, #32
 8001a28:	d139      	bne.n	8001a9e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2240      	movs	r2, #64	@ 0x40
 8001a2e:	5c9b      	ldrb	r3, [r3, r2]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d101      	bne.n	8001a38 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e033      	b.n	8001aa0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2240      	movs	r2, #64	@ 0x40
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2241      	movs	r2, #65	@ 0x41
 8001a44:	2124      	movs	r1, #36	@ 0x24
 8001a46:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2101      	movs	r1, #1
 8001a54:	438a      	bics	r2, r1
 8001a56:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4a11      	ldr	r2, [pc, #68]	@ (8001aa8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	021b      	lsls	r3, r3, #8
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2101      	movs	r1, #1
 8001a86:	430a      	orrs	r2, r1
 8001a88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2241      	movs	r2, #65	@ 0x41
 8001a8e:	2120      	movs	r1, #32
 8001a90:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2240      	movs	r2, #64	@ 0x40
 8001a96:	2100      	movs	r1, #0
 8001a98:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e000      	b.n	8001aa0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a9e:	2302      	movs	r3, #2
  }
}
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b004      	add	sp, #16
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	fffff0ff 	.word	0xfffff0ff

08001aac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aac:	b5b0      	push	{r4, r5, r7, lr}
 8001aae:	b08a      	sub	sp, #40	@ 0x28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d102      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	f000 fb6c 	bl	8002198 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ac0:	4bc8      	ldr	r3, [pc, #800]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	220c      	movs	r2, #12
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001aca:	4bc6      	ldr	r3, [pc, #792]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	2380      	movs	r3, #128	@ 0x80
 8001ad0:	025b      	lsls	r3, r3, #9
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2201      	movs	r2, #1
 8001adc:	4013      	ands	r3, r2
 8001ade:	d100      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x36>
 8001ae0:	e07d      	b.n	8001bde <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	d007      	beq.n	8001af8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	2b0c      	cmp	r3, #12
 8001aec:	d112      	bne.n	8001b14 <HAL_RCC_OscConfig+0x68>
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	2380      	movs	r3, #128	@ 0x80
 8001af2:	025b      	lsls	r3, r3, #9
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d10d      	bne.n	8001b14 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af8:	4bba      	ldr	r3, [pc, #744]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	2380      	movs	r3, #128	@ 0x80
 8001afe:	029b      	lsls	r3, r3, #10
 8001b00:	4013      	ands	r3, r2
 8001b02:	d100      	bne.n	8001b06 <HAL_RCC_OscConfig+0x5a>
 8001b04:	e06a      	b.n	8001bdc <HAL_RCC_OscConfig+0x130>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d166      	bne.n	8001bdc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	f000 fb42 	bl	8002198 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	2380      	movs	r3, #128	@ 0x80
 8001b1a:	025b      	lsls	r3, r3, #9
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d107      	bne.n	8001b30 <HAL_RCC_OscConfig+0x84>
 8001b20:	4bb0      	ldr	r3, [pc, #704]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4baf      	ldr	r3, [pc, #700]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001b26:	2180      	movs	r1, #128	@ 0x80
 8001b28:	0249      	lsls	r1, r1, #9
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	e027      	b.n	8001b80 <HAL_RCC_OscConfig+0xd4>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	23a0      	movs	r3, #160	@ 0xa0
 8001b36:	02db      	lsls	r3, r3, #11
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d10e      	bne.n	8001b5a <HAL_RCC_OscConfig+0xae>
 8001b3c:	4ba9      	ldr	r3, [pc, #676]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4ba8      	ldr	r3, [pc, #672]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001b42:	2180      	movs	r1, #128	@ 0x80
 8001b44:	02c9      	lsls	r1, r1, #11
 8001b46:	430a      	orrs	r2, r1
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	4ba6      	ldr	r3, [pc, #664]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	4ba5      	ldr	r3, [pc, #660]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001b50:	2180      	movs	r1, #128	@ 0x80
 8001b52:	0249      	lsls	r1, r1, #9
 8001b54:	430a      	orrs	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	e012      	b.n	8001b80 <HAL_RCC_OscConfig+0xd4>
 8001b5a:	4ba2      	ldr	r3, [pc, #648]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	4ba1      	ldr	r3, [pc, #644]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001b60:	49a1      	ldr	r1, [pc, #644]	@ (8001de8 <HAL_RCC_OscConfig+0x33c>)
 8001b62:	400a      	ands	r2, r1
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	4b9f      	ldr	r3, [pc, #636]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	2380      	movs	r3, #128	@ 0x80
 8001b6c:	025b      	lsls	r3, r3, #9
 8001b6e:	4013      	ands	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4b9b      	ldr	r3, [pc, #620]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b9a      	ldr	r3, [pc, #616]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001b7a:	499c      	ldr	r1, [pc, #624]	@ (8001dec <HAL_RCC_OscConfig+0x340>)
 8001b7c:	400a      	ands	r2, r1
 8001b7e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d014      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7ff fa3c 	bl	8001004 <HAL_GetTick>
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b92:	f7ff fa37 	bl	8001004 <HAL_GetTick>
 8001b96:	0002      	movs	r2, r0
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b64      	cmp	r3, #100	@ 0x64
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e2f9      	b.n	8002198 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ba4:	4b8f      	ldr	r3, [pc, #572]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	2380      	movs	r3, #128	@ 0x80
 8001baa:	029b      	lsls	r3, r3, #10
 8001bac:	4013      	ands	r3, r2
 8001bae:	d0f0      	beq.n	8001b92 <HAL_RCC_OscConfig+0xe6>
 8001bb0:	e015      	b.n	8001bde <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb2:	f7ff fa27 	bl	8001004 <HAL_GetTick>
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bbc:	f7ff fa22 	bl	8001004 <HAL_GetTick>
 8001bc0:	0002      	movs	r2, r0
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b64      	cmp	r3, #100	@ 0x64
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e2e4      	b.n	8002198 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bce:	4b85      	ldr	r3, [pc, #532]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	2380      	movs	r3, #128	@ 0x80
 8001bd4:	029b      	lsls	r3, r3, #10
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d1f0      	bne.n	8001bbc <HAL_RCC_OscConfig+0x110>
 8001bda:	e000      	b.n	8001bde <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bdc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2202      	movs	r2, #2
 8001be4:	4013      	ands	r3, r2
 8001be6:	d100      	bne.n	8001bea <HAL_RCC_OscConfig+0x13e>
 8001be8:	e099      	b.n	8001d1e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d009      	beq.n	8001c0c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001bf8:	4b7a      	ldr	r3, [pc, #488]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b79      	ldr	r3, [pc, #484]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001bfe:	2120      	movs	r1, #32
 8001c00:	430a      	orrs	r2, r1
 8001c02:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c06:	2220      	movs	r2, #32
 8001c08:	4393      	bics	r3, r2
 8001c0a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	d005      	beq.n	8001c1e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	2b0c      	cmp	r3, #12
 8001c16:	d13e      	bne.n	8001c96 <HAL_RCC_OscConfig+0x1ea>
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d13b      	bne.n	8001c96 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001c1e:	4b71      	ldr	r3, [pc, #452]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2204      	movs	r2, #4
 8001c24:	4013      	ands	r3, r2
 8001c26:	d004      	beq.n	8001c32 <HAL_RCC_OscConfig+0x186>
 8001c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e2b2      	b.n	8002198 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c32:	4b6c      	ldr	r3, [pc, #432]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	4a6e      	ldr	r2, [pc, #440]	@ (8001df0 <HAL_RCC_OscConfig+0x344>)
 8001c38:	4013      	ands	r3, r2
 8001c3a:	0019      	movs	r1, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	021a      	lsls	r2, r3, #8
 8001c42:	4b68      	ldr	r3, [pc, #416]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001c44:	430a      	orrs	r2, r1
 8001c46:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c48:	4b66      	ldr	r3, [pc, #408]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2209      	movs	r2, #9
 8001c4e:	4393      	bics	r3, r2
 8001c50:	0019      	movs	r1, r3
 8001c52:	4b64      	ldr	r3, [pc, #400]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001c54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c56:	430a      	orrs	r2, r1
 8001c58:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c5a:	f000 fbeb 	bl	8002434 <HAL_RCC_GetSysClockFreq>
 8001c5e:	0001      	movs	r1, r0
 8001c60:	4b60      	ldr	r3, [pc, #384]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	091b      	lsrs	r3, r3, #4
 8001c66:	220f      	movs	r2, #15
 8001c68:	4013      	ands	r3, r2
 8001c6a:	4a62      	ldr	r2, [pc, #392]	@ (8001df4 <HAL_RCC_OscConfig+0x348>)
 8001c6c:	5cd3      	ldrb	r3, [r2, r3]
 8001c6e:	000a      	movs	r2, r1
 8001c70:	40da      	lsrs	r2, r3
 8001c72:	4b61      	ldr	r3, [pc, #388]	@ (8001df8 <HAL_RCC_OscConfig+0x34c>)
 8001c74:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001c76:	4b61      	ldr	r3, [pc, #388]	@ (8001dfc <HAL_RCC_OscConfig+0x350>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2513      	movs	r5, #19
 8001c7c:	197c      	adds	r4, r7, r5
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f7ff f97a 	bl	8000f78 <HAL_InitTick>
 8001c84:	0003      	movs	r3, r0
 8001c86:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001c88:	197b      	adds	r3, r7, r5
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d046      	beq.n	8001d1e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001c90:	197b      	adds	r3, r7, r5
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	e280      	b.n	8002198 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d027      	beq.n	8001cec <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c9c:	4b51      	ldr	r3, [pc, #324]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2209      	movs	r2, #9
 8001ca2:	4393      	bics	r3, r2
 8001ca4:	0019      	movs	r1, r3
 8001ca6:	4b4f      	ldr	r3, [pc, #316]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001ca8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001caa:	430a      	orrs	r2, r1
 8001cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cae:	f7ff f9a9 	bl	8001004 <HAL_GetTick>
 8001cb2:	0003      	movs	r3, r0
 8001cb4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cb8:	f7ff f9a4 	bl	8001004 <HAL_GetTick>
 8001cbc:	0002      	movs	r2, r0
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e266      	b.n	8002198 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cca:	4b46      	ldr	r3, [pc, #280]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2204      	movs	r2, #4
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d0f1      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd4:	4b43      	ldr	r3, [pc, #268]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	4a45      	ldr	r2, [pc, #276]	@ (8001df0 <HAL_RCC_OscConfig+0x344>)
 8001cda:	4013      	ands	r3, r2
 8001cdc:	0019      	movs	r1, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	021a      	lsls	r2, r3, #8
 8001ce4:	4b3f      	ldr	r3, [pc, #252]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	e018      	b.n	8001d1e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cec:	4b3d      	ldr	r3, [pc, #244]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4b3c      	ldr	r3, [pc, #240]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	438a      	bics	r2, r1
 8001cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf8:	f7ff f984 	bl	8001004 <HAL_GetTick>
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d02:	f7ff f97f 	bl	8001004 <HAL_GetTick>
 8001d06:	0002      	movs	r2, r0
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e241      	b.n	8002198 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d14:	4b33      	ldr	r3, [pc, #204]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2204      	movs	r2, #4
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d1f1      	bne.n	8001d02 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2210      	movs	r2, #16
 8001d24:	4013      	ands	r3, r2
 8001d26:	d100      	bne.n	8001d2a <HAL_RCC_OscConfig+0x27e>
 8001d28:	e0a1      	b.n	8001e6e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d140      	bne.n	8001db2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d30:	4b2c      	ldr	r3, [pc, #176]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	2380      	movs	r3, #128	@ 0x80
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d005      	beq.n	8001d48 <HAL_RCC_OscConfig+0x29c>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e227      	b.n	8002198 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d48:	4b26      	ldr	r3, [pc, #152]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	4a2c      	ldr	r2, [pc, #176]	@ (8001e00 <HAL_RCC_OscConfig+0x354>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	0019      	movs	r1, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a1a      	ldr	r2, [r3, #32]
 8001d56:	4b23      	ldr	r3, [pc, #140]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d5c:	4b21      	ldr	r3, [pc, #132]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	021b      	lsls	r3, r3, #8
 8001d62:	0a19      	lsrs	r1, r3, #8
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	061a      	lsls	r2, r3, #24
 8001d6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	0b5b      	lsrs	r3, r3, #13
 8001d76:	3301      	adds	r3, #1
 8001d78:	2280      	movs	r2, #128	@ 0x80
 8001d7a:	0212      	lsls	r2, r2, #8
 8001d7c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001d7e:	4b19      	ldr	r3, [pc, #100]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	091b      	lsrs	r3, r3, #4
 8001d84:	210f      	movs	r1, #15
 8001d86:	400b      	ands	r3, r1
 8001d88:	491a      	ldr	r1, [pc, #104]	@ (8001df4 <HAL_RCC_OscConfig+0x348>)
 8001d8a:	5ccb      	ldrb	r3, [r1, r3]
 8001d8c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001df8 <HAL_RCC_OscConfig+0x34c>)
 8001d90:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001d92:	4b1a      	ldr	r3, [pc, #104]	@ (8001dfc <HAL_RCC_OscConfig+0x350>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2513      	movs	r5, #19
 8001d98:	197c      	adds	r4, r7, r5
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f7ff f8ec 	bl	8000f78 <HAL_InitTick>
 8001da0:	0003      	movs	r3, r0
 8001da2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001da4:	197b      	adds	r3, r7, r5
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d060      	beq.n	8001e6e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001dac:	197b      	adds	r3, r7, r5
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	e1f2      	b.n	8002198 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d03f      	beq.n	8001e3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001dba:	4b0a      	ldr	r3, [pc, #40]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	4b09      	ldr	r3, [pc, #36]	@ (8001de4 <HAL_RCC_OscConfig+0x338>)
 8001dc0:	2180      	movs	r1, #128	@ 0x80
 8001dc2:	0049      	lsls	r1, r1, #1
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7ff f91c 	bl	8001004 <HAL_GetTick>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001dd0:	e018      	b.n	8001e04 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dd2:	f7ff f917 	bl	8001004 <HAL_GetTick>
 8001dd6:	0002      	movs	r2, r0
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d911      	bls.n	8001e04 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e1d9      	b.n	8002198 <HAL_RCC_OscConfig+0x6ec>
 8001de4:	40021000 	.word	0x40021000
 8001de8:	fffeffff 	.word	0xfffeffff
 8001dec:	fffbffff 	.word	0xfffbffff
 8001df0:	ffffe0ff 	.word	0xffffe0ff
 8001df4:	080041f4 	.word	0x080041f4
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	20000004 	.word	0x20000004
 8001e00:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e04:	4bc9      	ldr	r3, [pc, #804]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	2380      	movs	r3, #128	@ 0x80
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d0e0      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e10:	4bc6      	ldr	r3, [pc, #792]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	4ac6      	ldr	r2, [pc, #792]	@ (8002130 <HAL_RCC_OscConfig+0x684>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	0019      	movs	r1, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a1a      	ldr	r2, [r3, #32]
 8001e1e:	4bc3      	ldr	r3, [pc, #780]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8001e20:	430a      	orrs	r2, r1
 8001e22:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e24:	4bc1      	ldr	r3, [pc, #772]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	021b      	lsls	r3, r3, #8
 8001e2a:	0a19      	lsrs	r1, r3, #8
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69db      	ldr	r3, [r3, #28]
 8001e30:	061a      	lsls	r2, r3, #24
 8001e32:	4bbe      	ldr	r3, [pc, #760]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8001e34:	430a      	orrs	r2, r1
 8001e36:	605a      	str	r2, [r3, #4]
 8001e38:	e019      	b.n	8001e6e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e3a:	4bbc      	ldr	r3, [pc, #752]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	4bbb      	ldr	r3, [pc, #748]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8001e40:	49bc      	ldr	r1, [pc, #752]	@ (8002134 <HAL_RCC_OscConfig+0x688>)
 8001e42:	400a      	ands	r2, r1
 8001e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e46:	f7ff f8dd 	bl	8001004 <HAL_GetTick>
 8001e4a:	0003      	movs	r3, r0
 8001e4c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e50:	f7ff f8d8 	bl	8001004 <HAL_GetTick>
 8001e54:	0002      	movs	r2, r0
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e19a      	b.n	8002198 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e62:	4bb2      	ldr	r3, [pc, #712]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	2380      	movs	r3, #128	@ 0x80
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2208      	movs	r2, #8
 8001e74:	4013      	ands	r3, r2
 8001e76:	d036      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d019      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e80:	4baa      	ldr	r3, [pc, #680]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8001e82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e84:	4ba9      	ldr	r3, [pc, #676]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8001e86:	2101      	movs	r1, #1
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e8c:	f7ff f8ba 	bl	8001004 <HAL_GetTick>
 8001e90:	0003      	movs	r3, r0
 8001e92:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e96:	f7ff f8b5 	bl	8001004 <HAL_GetTick>
 8001e9a:	0002      	movs	r2, r0
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e177      	b.n	8002198 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ea8:	4ba0      	ldr	r3, [pc, #640]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8001eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eac:	2202      	movs	r2, #2
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d0f1      	beq.n	8001e96 <HAL_RCC_OscConfig+0x3ea>
 8001eb2:	e018      	b.n	8001ee6 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb4:	4b9d      	ldr	r3, [pc, #628]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8001eb6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001eb8:	4b9c      	ldr	r3, [pc, #624]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8001eba:	2101      	movs	r1, #1
 8001ebc:	438a      	bics	r2, r1
 8001ebe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec0:	f7ff f8a0 	bl	8001004 <HAL_GetTick>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eca:	f7ff f89b 	bl	8001004 <HAL_GetTick>
 8001ece:	0002      	movs	r2, r0
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e15d      	b.n	8002198 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001edc:	4b93      	ldr	r3, [pc, #588]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8001ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d1f1      	bne.n	8001eca <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2204      	movs	r2, #4
 8001eec:	4013      	ands	r3, r2
 8001eee:	d100      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x446>
 8001ef0:	e0ae      	b.n	8002050 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ef2:	2023      	movs	r0, #35	@ 0x23
 8001ef4:	183b      	adds	r3, r7, r0
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001efa:	4b8c      	ldr	r3, [pc, #560]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8001efc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001efe:	2380      	movs	r3, #128	@ 0x80
 8001f00:	055b      	lsls	r3, r3, #21
 8001f02:	4013      	ands	r3, r2
 8001f04:	d109      	bne.n	8001f1a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f06:	4b89      	ldr	r3, [pc, #548]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8001f08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f0a:	4b88      	ldr	r3, [pc, #544]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8001f0c:	2180      	movs	r1, #128	@ 0x80
 8001f0e:	0549      	lsls	r1, r1, #21
 8001f10:	430a      	orrs	r2, r1
 8001f12:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001f14:	183b      	adds	r3, r7, r0
 8001f16:	2201      	movs	r2, #1
 8001f18:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1a:	4b87      	ldr	r3, [pc, #540]	@ (8002138 <HAL_RCC_OscConfig+0x68c>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	2380      	movs	r3, #128	@ 0x80
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	4013      	ands	r3, r2
 8001f24:	d11a      	bne.n	8001f5c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f26:	4b84      	ldr	r3, [pc, #528]	@ (8002138 <HAL_RCC_OscConfig+0x68c>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	4b83      	ldr	r3, [pc, #524]	@ (8002138 <HAL_RCC_OscConfig+0x68c>)
 8001f2c:	2180      	movs	r1, #128	@ 0x80
 8001f2e:	0049      	lsls	r1, r1, #1
 8001f30:	430a      	orrs	r2, r1
 8001f32:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f34:	f7ff f866 	bl	8001004 <HAL_GetTick>
 8001f38:	0003      	movs	r3, r0
 8001f3a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f3e:	f7ff f861 	bl	8001004 <HAL_GetTick>
 8001f42:	0002      	movs	r2, r0
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b64      	cmp	r3, #100	@ 0x64
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e123      	b.n	8002198 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f50:	4b79      	ldr	r3, [pc, #484]	@ (8002138 <HAL_RCC_OscConfig+0x68c>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	2380      	movs	r3, #128	@ 0x80
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d0f0      	beq.n	8001f3e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	2380      	movs	r3, #128	@ 0x80
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d107      	bne.n	8001f78 <HAL_RCC_OscConfig+0x4cc>
 8001f68:	4b70      	ldr	r3, [pc, #448]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8001f6a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f6c:	4b6f      	ldr	r3, [pc, #444]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8001f6e:	2180      	movs	r1, #128	@ 0x80
 8001f70:	0049      	lsls	r1, r1, #1
 8001f72:	430a      	orrs	r2, r1
 8001f74:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f76:	e031      	b.n	8001fdc <HAL_RCC_OscConfig+0x530>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10c      	bne.n	8001f9a <HAL_RCC_OscConfig+0x4ee>
 8001f80:	4b6a      	ldr	r3, [pc, #424]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8001f82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f84:	4b69      	ldr	r3, [pc, #420]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8001f86:	496b      	ldr	r1, [pc, #428]	@ (8002134 <HAL_RCC_OscConfig+0x688>)
 8001f88:	400a      	ands	r2, r1
 8001f8a:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f8c:	4b67      	ldr	r3, [pc, #412]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8001f8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f90:	4b66      	ldr	r3, [pc, #408]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8001f92:	496a      	ldr	r1, [pc, #424]	@ (800213c <HAL_RCC_OscConfig+0x690>)
 8001f94:	400a      	ands	r2, r1
 8001f96:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f98:	e020      	b.n	8001fdc <HAL_RCC_OscConfig+0x530>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	23a0      	movs	r3, #160	@ 0xa0
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d10e      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x518>
 8001fa6:	4b61      	ldr	r3, [pc, #388]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8001fa8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001faa:	4b60      	ldr	r3, [pc, #384]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8001fac:	2180      	movs	r1, #128	@ 0x80
 8001fae:	00c9      	lsls	r1, r1, #3
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	651a      	str	r2, [r3, #80]	@ 0x50
 8001fb4:	4b5d      	ldr	r3, [pc, #372]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8001fb6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001fb8:	4b5c      	ldr	r3, [pc, #368]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8001fba:	2180      	movs	r1, #128	@ 0x80
 8001fbc:	0049      	lsls	r1, r1, #1
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	651a      	str	r2, [r3, #80]	@ 0x50
 8001fc2:	e00b      	b.n	8001fdc <HAL_RCC_OscConfig+0x530>
 8001fc4:	4b59      	ldr	r3, [pc, #356]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8001fc6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001fc8:	4b58      	ldr	r3, [pc, #352]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8001fca:	495a      	ldr	r1, [pc, #360]	@ (8002134 <HAL_RCC_OscConfig+0x688>)
 8001fcc:	400a      	ands	r2, r1
 8001fce:	651a      	str	r2, [r3, #80]	@ 0x50
 8001fd0:	4b56      	ldr	r3, [pc, #344]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8001fd2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001fd4:	4b55      	ldr	r3, [pc, #340]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8001fd6:	4959      	ldr	r1, [pc, #356]	@ (800213c <HAL_RCC_OscConfig+0x690>)
 8001fd8:	400a      	ands	r2, r1
 8001fda:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d015      	beq.n	8002010 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe4:	f7ff f80e 	bl	8001004 <HAL_GetTick>
 8001fe8:	0003      	movs	r3, r0
 8001fea:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fec:	e009      	b.n	8002002 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fee:	f7ff f809 	bl	8001004 <HAL_GetTick>
 8001ff2:	0002      	movs	r2, r0
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	4a51      	ldr	r2, [pc, #324]	@ (8002140 <HAL_RCC_OscConfig+0x694>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e0ca      	b.n	8002198 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002002:	4b4a      	ldr	r3, [pc, #296]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8002004:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002006:	2380      	movs	r3, #128	@ 0x80
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4013      	ands	r3, r2
 800200c:	d0ef      	beq.n	8001fee <HAL_RCC_OscConfig+0x542>
 800200e:	e014      	b.n	800203a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002010:	f7fe fff8 	bl	8001004 <HAL_GetTick>
 8002014:	0003      	movs	r3, r0
 8002016:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002018:	e009      	b.n	800202e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800201a:	f7fe fff3 	bl	8001004 <HAL_GetTick>
 800201e:	0002      	movs	r2, r0
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	4a46      	ldr	r2, [pc, #280]	@ (8002140 <HAL_RCC_OscConfig+0x694>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e0b4      	b.n	8002198 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800202e:	4b3f      	ldr	r3, [pc, #252]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8002030:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002032:	2380      	movs	r3, #128	@ 0x80
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4013      	ands	r3, r2
 8002038:	d1ef      	bne.n	800201a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800203a:	2323      	movs	r3, #35	@ 0x23
 800203c:	18fb      	adds	r3, r7, r3
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d105      	bne.n	8002050 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002044:	4b39      	ldr	r3, [pc, #228]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8002046:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002048:	4b38      	ldr	r3, [pc, #224]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 800204a:	493e      	ldr	r1, [pc, #248]	@ (8002144 <HAL_RCC_OscConfig+0x698>)
 800204c:	400a      	ands	r2, r1
 800204e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002054:	2b00      	cmp	r3, #0
 8002056:	d100      	bne.n	800205a <HAL_RCC_OscConfig+0x5ae>
 8002058:	e09d      	b.n	8002196 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	2b0c      	cmp	r3, #12
 800205e:	d100      	bne.n	8002062 <HAL_RCC_OscConfig+0x5b6>
 8002060:	e076      	b.n	8002150 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002066:	2b02      	cmp	r3, #2
 8002068:	d145      	bne.n	80020f6 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206a:	4b30      	ldr	r3, [pc, #192]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	4b2f      	ldr	r3, [pc, #188]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8002070:	4935      	ldr	r1, [pc, #212]	@ (8002148 <HAL_RCC_OscConfig+0x69c>)
 8002072:	400a      	ands	r2, r1
 8002074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002076:	f7fe ffc5 	bl	8001004 <HAL_GetTick>
 800207a:	0003      	movs	r3, r0
 800207c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002080:	f7fe ffc0 	bl	8001004 <HAL_GetTick>
 8002084:	0002      	movs	r2, r0
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e082      	b.n	8002198 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002092:	4b26      	ldr	r3, [pc, #152]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	2380      	movs	r3, #128	@ 0x80
 8002098:	049b      	lsls	r3, r3, #18
 800209a:	4013      	ands	r3, r2
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800209e:	4b23      	ldr	r3, [pc, #140]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	4a2a      	ldr	r2, [pc, #168]	@ (800214c <HAL_RCC_OscConfig+0x6a0>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	0019      	movs	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b0:	431a      	orrs	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b6:	431a      	orrs	r2, r3
 80020b8:	4b1c      	ldr	r3, [pc, #112]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 80020ba:	430a      	orrs	r2, r1
 80020bc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020be:	4b1b      	ldr	r3, [pc, #108]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	4b1a      	ldr	r3, [pc, #104]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 80020c4:	2180      	movs	r1, #128	@ 0x80
 80020c6:	0449      	lsls	r1, r1, #17
 80020c8:	430a      	orrs	r2, r1
 80020ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020cc:	f7fe ff9a 	bl	8001004 <HAL_GetTick>
 80020d0:	0003      	movs	r3, r0
 80020d2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d6:	f7fe ff95 	bl	8001004 <HAL_GetTick>
 80020da:	0002      	movs	r2, r0
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e057      	b.n	8002198 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80020e8:	4b10      	ldr	r3, [pc, #64]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	2380      	movs	r3, #128	@ 0x80
 80020ee:	049b      	lsls	r3, r3, #18
 80020f0:	4013      	ands	r3, r2
 80020f2:	d0f0      	beq.n	80020d6 <HAL_RCC_OscConfig+0x62a>
 80020f4:	e04f      	b.n	8002196 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f6:	4b0d      	ldr	r3, [pc, #52]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	4b0c      	ldr	r3, [pc, #48]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 80020fc:	4912      	ldr	r1, [pc, #72]	@ (8002148 <HAL_RCC_OscConfig+0x69c>)
 80020fe:	400a      	ands	r2, r1
 8002100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002102:	f7fe ff7f 	bl	8001004 <HAL_GetTick>
 8002106:	0003      	movs	r3, r0
 8002108:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800210c:	f7fe ff7a 	bl	8001004 <HAL_GetTick>
 8002110:	0002      	movs	r2, r0
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e03c      	b.n	8002198 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800211e:	4b03      	ldr	r3, [pc, #12]	@ (800212c <HAL_RCC_OscConfig+0x680>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	2380      	movs	r3, #128	@ 0x80
 8002124:	049b      	lsls	r3, r3, #18
 8002126:	4013      	ands	r3, r2
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x660>
 800212a:	e034      	b.n	8002196 <HAL_RCC_OscConfig+0x6ea>
 800212c:	40021000 	.word	0x40021000
 8002130:	ffff1fff 	.word	0xffff1fff
 8002134:	fffffeff 	.word	0xfffffeff
 8002138:	40007000 	.word	0x40007000
 800213c:	fffffbff 	.word	0xfffffbff
 8002140:	00001388 	.word	0x00001388
 8002144:	efffffff 	.word	0xefffffff
 8002148:	feffffff 	.word	0xfeffffff
 800214c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e01d      	b.n	8002198 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800215c:	4b10      	ldr	r3, [pc, #64]	@ (80021a0 <HAL_RCC_OscConfig+0x6f4>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	2380      	movs	r3, #128	@ 0x80
 8002166:	025b      	lsls	r3, r3, #9
 8002168:	401a      	ands	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800216e:	429a      	cmp	r2, r3
 8002170:	d10f      	bne.n	8002192 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	23f0      	movs	r3, #240	@ 0xf0
 8002176:	039b      	lsls	r3, r3, #14
 8002178:	401a      	ands	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217e:	429a      	cmp	r2, r3
 8002180:	d107      	bne.n	8002192 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	23c0      	movs	r3, #192	@ 0xc0
 8002186:	041b      	lsls	r3, r3, #16
 8002188:	401a      	ands	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800218e:	429a      	cmp	r2, r3
 8002190:	d001      	beq.n	8002196 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	0018      	movs	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	b00a      	add	sp, #40	@ 0x28
 800219e:	bdb0      	pop	{r4, r5, r7, pc}
 80021a0:	40021000 	.word	0x40021000

080021a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021a4:	b5b0      	push	{r4, r5, r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e128      	b.n	800240a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021b8:	4b96      	ldr	r3, [pc, #600]	@ (8002414 <HAL_RCC_ClockConfig+0x270>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2201      	movs	r2, #1
 80021be:	4013      	ands	r3, r2
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d91e      	bls.n	8002204 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c6:	4b93      	ldr	r3, [pc, #588]	@ (8002414 <HAL_RCC_ClockConfig+0x270>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2201      	movs	r2, #1
 80021cc:	4393      	bics	r3, r2
 80021ce:	0019      	movs	r1, r3
 80021d0:	4b90      	ldr	r3, [pc, #576]	@ (8002414 <HAL_RCC_ClockConfig+0x270>)
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80021d8:	f7fe ff14 	bl	8001004 <HAL_GetTick>
 80021dc:	0003      	movs	r3, r0
 80021de:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e0:	e009      	b.n	80021f6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e2:	f7fe ff0f 	bl	8001004 <HAL_GetTick>
 80021e6:	0002      	movs	r2, r0
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	4a8a      	ldr	r2, [pc, #552]	@ (8002418 <HAL_RCC_ClockConfig+0x274>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e109      	b.n	800240a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f6:	4b87      	ldr	r3, [pc, #540]	@ (8002414 <HAL_RCC_ClockConfig+0x270>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2201      	movs	r2, #1
 80021fc:	4013      	ands	r3, r2
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d1ee      	bne.n	80021e2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2202      	movs	r2, #2
 800220a:	4013      	ands	r3, r2
 800220c:	d009      	beq.n	8002222 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800220e:	4b83      	ldr	r3, [pc, #524]	@ (800241c <HAL_RCC_ClockConfig+0x278>)
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	22f0      	movs	r2, #240	@ 0xf0
 8002214:	4393      	bics	r3, r2
 8002216:	0019      	movs	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	4b7f      	ldr	r3, [pc, #508]	@ (800241c <HAL_RCC_ClockConfig+0x278>)
 800221e:	430a      	orrs	r2, r1
 8002220:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2201      	movs	r2, #1
 8002228:	4013      	ands	r3, r2
 800222a:	d100      	bne.n	800222e <HAL_RCC_ClockConfig+0x8a>
 800222c:	e089      	b.n	8002342 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d107      	bne.n	8002246 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002236:	4b79      	ldr	r3, [pc, #484]	@ (800241c <HAL_RCC_ClockConfig+0x278>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	2380      	movs	r3, #128	@ 0x80
 800223c:	029b      	lsls	r3, r3, #10
 800223e:	4013      	ands	r3, r2
 8002240:	d120      	bne.n	8002284 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e0e1      	b.n	800240a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b03      	cmp	r3, #3
 800224c:	d107      	bne.n	800225e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800224e:	4b73      	ldr	r3, [pc, #460]	@ (800241c <HAL_RCC_ClockConfig+0x278>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	2380      	movs	r3, #128	@ 0x80
 8002254:	049b      	lsls	r3, r3, #18
 8002256:	4013      	ands	r3, r2
 8002258:	d114      	bne.n	8002284 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e0d5      	b.n	800240a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d106      	bne.n	8002274 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002266:	4b6d      	ldr	r3, [pc, #436]	@ (800241c <HAL_RCC_ClockConfig+0x278>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2204      	movs	r2, #4
 800226c:	4013      	ands	r3, r2
 800226e:	d109      	bne.n	8002284 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e0ca      	b.n	800240a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002274:	4b69      	ldr	r3, [pc, #420]	@ (800241c <HAL_RCC_ClockConfig+0x278>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	2380      	movs	r3, #128	@ 0x80
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4013      	ands	r3, r2
 800227e:	d101      	bne.n	8002284 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0c2      	b.n	800240a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002284:	4b65      	ldr	r3, [pc, #404]	@ (800241c <HAL_RCC_ClockConfig+0x278>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	2203      	movs	r2, #3
 800228a:	4393      	bics	r3, r2
 800228c:	0019      	movs	r1, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	4b62      	ldr	r3, [pc, #392]	@ (800241c <HAL_RCC_ClockConfig+0x278>)
 8002294:	430a      	orrs	r2, r1
 8002296:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002298:	f7fe feb4 	bl	8001004 <HAL_GetTick>
 800229c:	0003      	movs	r3, r0
 800229e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d111      	bne.n	80022cc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022a8:	e009      	b.n	80022be <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022aa:	f7fe feab 	bl	8001004 <HAL_GetTick>
 80022ae:	0002      	movs	r2, r0
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	4a58      	ldr	r2, [pc, #352]	@ (8002418 <HAL_RCC_ClockConfig+0x274>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e0a5      	b.n	800240a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022be:	4b57      	ldr	r3, [pc, #348]	@ (800241c <HAL_RCC_ClockConfig+0x278>)
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	220c      	movs	r2, #12
 80022c4:	4013      	ands	r3, r2
 80022c6:	2b08      	cmp	r3, #8
 80022c8:	d1ef      	bne.n	80022aa <HAL_RCC_ClockConfig+0x106>
 80022ca:	e03a      	b.n	8002342 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d111      	bne.n	80022f8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022d4:	e009      	b.n	80022ea <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d6:	f7fe fe95 	bl	8001004 <HAL_GetTick>
 80022da:	0002      	movs	r2, r0
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	4a4d      	ldr	r2, [pc, #308]	@ (8002418 <HAL_RCC_ClockConfig+0x274>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e08f      	b.n	800240a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ea:	4b4c      	ldr	r3, [pc, #304]	@ (800241c <HAL_RCC_ClockConfig+0x278>)
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	220c      	movs	r2, #12
 80022f0:	4013      	ands	r3, r2
 80022f2:	2b0c      	cmp	r3, #12
 80022f4:	d1ef      	bne.n	80022d6 <HAL_RCC_ClockConfig+0x132>
 80022f6:	e024      	b.n	8002342 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d11b      	bne.n	8002338 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002300:	e009      	b.n	8002316 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002302:	f7fe fe7f 	bl	8001004 <HAL_GetTick>
 8002306:	0002      	movs	r2, r0
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	4a42      	ldr	r2, [pc, #264]	@ (8002418 <HAL_RCC_ClockConfig+0x274>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e079      	b.n	800240a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002316:	4b41      	ldr	r3, [pc, #260]	@ (800241c <HAL_RCC_ClockConfig+0x278>)
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	220c      	movs	r2, #12
 800231c:	4013      	ands	r3, r2
 800231e:	2b04      	cmp	r3, #4
 8002320:	d1ef      	bne.n	8002302 <HAL_RCC_ClockConfig+0x15e>
 8002322:	e00e      	b.n	8002342 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002324:	f7fe fe6e 	bl	8001004 <HAL_GetTick>
 8002328:	0002      	movs	r2, r0
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	4a3a      	ldr	r2, [pc, #232]	@ (8002418 <HAL_RCC_ClockConfig+0x274>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e068      	b.n	800240a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002338:	4b38      	ldr	r3, [pc, #224]	@ (800241c <HAL_RCC_ClockConfig+0x278>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	220c      	movs	r2, #12
 800233e:	4013      	ands	r3, r2
 8002340:	d1f0      	bne.n	8002324 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002342:	4b34      	ldr	r3, [pc, #208]	@ (8002414 <HAL_RCC_ClockConfig+0x270>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2201      	movs	r2, #1
 8002348:	4013      	ands	r3, r2
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d21e      	bcs.n	800238e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002350:	4b30      	ldr	r3, [pc, #192]	@ (8002414 <HAL_RCC_ClockConfig+0x270>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2201      	movs	r2, #1
 8002356:	4393      	bics	r3, r2
 8002358:	0019      	movs	r1, r3
 800235a:	4b2e      	ldr	r3, [pc, #184]	@ (8002414 <HAL_RCC_ClockConfig+0x270>)
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002362:	f7fe fe4f 	bl	8001004 <HAL_GetTick>
 8002366:	0003      	movs	r3, r0
 8002368:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800236a:	e009      	b.n	8002380 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800236c:	f7fe fe4a 	bl	8001004 <HAL_GetTick>
 8002370:	0002      	movs	r2, r0
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	4a28      	ldr	r2, [pc, #160]	@ (8002418 <HAL_RCC_ClockConfig+0x274>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e044      	b.n	800240a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002380:	4b24      	ldr	r3, [pc, #144]	@ (8002414 <HAL_RCC_ClockConfig+0x270>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2201      	movs	r2, #1
 8002386:	4013      	ands	r3, r2
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d1ee      	bne.n	800236c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2204      	movs	r2, #4
 8002394:	4013      	ands	r3, r2
 8002396:	d009      	beq.n	80023ac <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002398:	4b20      	ldr	r3, [pc, #128]	@ (800241c <HAL_RCC_ClockConfig+0x278>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	4a20      	ldr	r2, [pc, #128]	@ (8002420 <HAL_RCC_ClockConfig+0x27c>)
 800239e:	4013      	ands	r3, r2
 80023a0:	0019      	movs	r1, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	4b1d      	ldr	r3, [pc, #116]	@ (800241c <HAL_RCC_ClockConfig+0x278>)
 80023a8:	430a      	orrs	r2, r1
 80023aa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2208      	movs	r2, #8
 80023b2:	4013      	ands	r3, r2
 80023b4:	d00a      	beq.n	80023cc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023b6:	4b19      	ldr	r3, [pc, #100]	@ (800241c <HAL_RCC_ClockConfig+0x278>)
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002424 <HAL_RCC_ClockConfig+0x280>)
 80023bc:	4013      	ands	r3, r2
 80023be:	0019      	movs	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	00da      	lsls	r2, r3, #3
 80023c6:	4b15      	ldr	r3, [pc, #84]	@ (800241c <HAL_RCC_ClockConfig+0x278>)
 80023c8:	430a      	orrs	r2, r1
 80023ca:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023cc:	f000 f832 	bl	8002434 <HAL_RCC_GetSysClockFreq>
 80023d0:	0001      	movs	r1, r0
 80023d2:	4b12      	ldr	r3, [pc, #72]	@ (800241c <HAL_RCC_ClockConfig+0x278>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	091b      	lsrs	r3, r3, #4
 80023d8:	220f      	movs	r2, #15
 80023da:	4013      	ands	r3, r2
 80023dc:	4a12      	ldr	r2, [pc, #72]	@ (8002428 <HAL_RCC_ClockConfig+0x284>)
 80023de:	5cd3      	ldrb	r3, [r2, r3]
 80023e0:	000a      	movs	r2, r1
 80023e2:	40da      	lsrs	r2, r3
 80023e4:	4b11      	ldr	r3, [pc, #68]	@ (800242c <HAL_RCC_ClockConfig+0x288>)
 80023e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023e8:	4b11      	ldr	r3, [pc, #68]	@ (8002430 <HAL_RCC_ClockConfig+0x28c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	250b      	movs	r5, #11
 80023ee:	197c      	adds	r4, r7, r5
 80023f0:	0018      	movs	r0, r3
 80023f2:	f7fe fdc1 	bl	8000f78 <HAL_InitTick>
 80023f6:	0003      	movs	r3, r0
 80023f8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80023fa:	197b      	adds	r3, r7, r5
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002402:	197b      	adds	r3, r7, r5
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	e000      	b.n	800240a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	0018      	movs	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	b004      	add	sp, #16
 8002410:	bdb0      	pop	{r4, r5, r7, pc}
 8002412:	46c0      	nop			@ (mov r8, r8)
 8002414:	40022000 	.word	0x40022000
 8002418:	00001388 	.word	0x00001388
 800241c:	40021000 	.word	0x40021000
 8002420:	fffff8ff 	.word	0xfffff8ff
 8002424:	ffffc7ff 	.word	0xffffc7ff
 8002428:	080041f4 	.word	0x080041f4
 800242c:	20000000 	.word	0x20000000
 8002430:	20000004 	.word	0x20000004

08002434 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002434:	b5b0      	push	{r4, r5, r7, lr}
 8002436:	b08e      	sub	sp, #56	@ 0x38
 8002438:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800243a:	4b4c      	ldr	r3, [pc, #304]	@ (800256c <HAL_RCC_GetSysClockFreq+0x138>)
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002440:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002442:	230c      	movs	r3, #12
 8002444:	4013      	ands	r3, r2
 8002446:	2b0c      	cmp	r3, #12
 8002448:	d014      	beq.n	8002474 <HAL_RCC_GetSysClockFreq+0x40>
 800244a:	d900      	bls.n	800244e <HAL_RCC_GetSysClockFreq+0x1a>
 800244c:	e07b      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0x112>
 800244e:	2b04      	cmp	r3, #4
 8002450:	d002      	beq.n	8002458 <HAL_RCC_GetSysClockFreq+0x24>
 8002452:	2b08      	cmp	r3, #8
 8002454:	d00b      	beq.n	800246e <HAL_RCC_GetSysClockFreq+0x3a>
 8002456:	e076      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002458:	4b44      	ldr	r3, [pc, #272]	@ (800256c <HAL_RCC_GetSysClockFreq+0x138>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2210      	movs	r2, #16
 800245e:	4013      	ands	r3, r2
 8002460:	d002      	beq.n	8002468 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002462:	4b43      	ldr	r3, [pc, #268]	@ (8002570 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002464:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002466:	e07c      	b.n	8002562 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002468:	4b42      	ldr	r3, [pc, #264]	@ (8002574 <HAL_RCC_GetSysClockFreq+0x140>)
 800246a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800246c:	e079      	b.n	8002562 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800246e:	4b42      	ldr	r3, [pc, #264]	@ (8002578 <HAL_RCC_GetSysClockFreq+0x144>)
 8002470:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002472:	e076      	b.n	8002562 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002476:	0c9a      	lsrs	r2, r3, #18
 8002478:	230f      	movs	r3, #15
 800247a:	401a      	ands	r2, r3
 800247c:	4b3f      	ldr	r3, [pc, #252]	@ (800257c <HAL_RCC_GetSysClockFreq+0x148>)
 800247e:	5c9b      	ldrb	r3, [r3, r2]
 8002480:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002484:	0d9a      	lsrs	r2, r3, #22
 8002486:	2303      	movs	r3, #3
 8002488:	4013      	ands	r3, r2
 800248a:	3301      	adds	r3, #1
 800248c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800248e:	4b37      	ldr	r3, [pc, #220]	@ (800256c <HAL_RCC_GetSysClockFreq+0x138>)
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	2380      	movs	r3, #128	@ 0x80
 8002494:	025b      	lsls	r3, r3, #9
 8002496:	4013      	ands	r3, r2
 8002498:	d01a      	beq.n	80024d0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800249a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800249c:	61bb      	str	r3, [r7, #24]
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
 80024a2:	4a35      	ldr	r2, [pc, #212]	@ (8002578 <HAL_RCC_GetSysClockFreq+0x144>)
 80024a4:	2300      	movs	r3, #0
 80024a6:	69b8      	ldr	r0, [r7, #24]
 80024a8:	69f9      	ldr	r1, [r7, #28]
 80024aa:	f7fd fed9 	bl	8000260 <__aeabi_lmul>
 80024ae:	0002      	movs	r2, r0
 80024b0:	000b      	movs	r3, r1
 80024b2:	0010      	movs	r0, r2
 80024b4:	0019      	movs	r1, r3
 80024b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b8:	613b      	str	r3, [r7, #16]
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	f7fd fead 	bl	8000220 <__aeabi_uldivmod>
 80024c6:	0002      	movs	r2, r0
 80024c8:	000b      	movs	r3, r1
 80024ca:	0013      	movs	r3, r2
 80024cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80024ce:	e037      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80024d0:	4b26      	ldr	r3, [pc, #152]	@ (800256c <HAL_RCC_GetSysClockFreq+0x138>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2210      	movs	r2, #16
 80024d6:	4013      	ands	r3, r2
 80024d8:	d01a      	beq.n	8002510 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80024da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	4a23      	ldr	r2, [pc, #140]	@ (8002570 <HAL_RCC_GetSysClockFreq+0x13c>)
 80024e4:	2300      	movs	r3, #0
 80024e6:	68b8      	ldr	r0, [r7, #8]
 80024e8:	68f9      	ldr	r1, [r7, #12]
 80024ea:	f7fd feb9 	bl	8000260 <__aeabi_lmul>
 80024ee:	0002      	movs	r2, r0
 80024f0:	000b      	movs	r3, r1
 80024f2:	0010      	movs	r0, r2
 80024f4:	0019      	movs	r1, r3
 80024f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f8:	603b      	str	r3, [r7, #0]
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f7fd fe8d 	bl	8000220 <__aeabi_uldivmod>
 8002506:	0002      	movs	r2, r0
 8002508:	000b      	movs	r3, r1
 800250a:	0013      	movs	r3, r2
 800250c:	637b      	str	r3, [r7, #52]	@ 0x34
 800250e:	e017      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002512:	0018      	movs	r0, r3
 8002514:	2300      	movs	r3, #0
 8002516:	0019      	movs	r1, r3
 8002518:	4a16      	ldr	r2, [pc, #88]	@ (8002574 <HAL_RCC_GetSysClockFreq+0x140>)
 800251a:	2300      	movs	r3, #0
 800251c:	f7fd fea0 	bl	8000260 <__aeabi_lmul>
 8002520:	0002      	movs	r2, r0
 8002522:	000b      	movs	r3, r1
 8002524:	0010      	movs	r0, r2
 8002526:	0019      	movs	r1, r3
 8002528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252a:	001c      	movs	r4, r3
 800252c:	2300      	movs	r3, #0
 800252e:	001d      	movs	r5, r3
 8002530:	0022      	movs	r2, r4
 8002532:	002b      	movs	r3, r5
 8002534:	f7fd fe74 	bl	8000220 <__aeabi_uldivmod>
 8002538:	0002      	movs	r2, r0
 800253a:	000b      	movs	r3, r1
 800253c:	0013      	movs	r3, r2
 800253e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8002540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002542:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002544:	e00d      	b.n	8002562 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002546:	4b09      	ldr	r3, [pc, #36]	@ (800256c <HAL_RCC_GetSysClockFreq+0x138>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	0b5b      	lsrs	r3, r3, #13
 800254c:	2207      	movs	r2, #7
 800254e:	4013      	ands	r3, r2
 8002550:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002552:	6a3b      	ldr	r3, [r7, #32]
 8002554:	3301      	adds	r3, #1
 8002556:	2280      	movs	r2, #128	@ 0x80
 8002558:	0212      	lsls	r2, r2, #8
 800255a:	409a      	lsls	r2, r3
 800255c:	0013      	movs	r3, r2
 800255e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002560:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002564:	0018      	movs	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	b00e      	add	sp, #56	@ 0x38
 800256a:	bdb0      	pop	{r4, r5, r7, pc}
 800256c:	40021000 	.word	0x40021000
 8002570:	003d0900 	.word	0x003d0900
 8002574:	00f42400 	.word	0x00f42400
 8002578:	007a1200 	.word	0x007a1200
 800257c:	0800420c 	.word	0x0800420c

08002580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002584:	4b02      	ldr	r3, [pc, #8]	@ (8002590 <HAL_RCC_GetHCLKFreq+0x10>)
 8002586:	681b      	ldr	r3, [r3, #0]
}
 8002588:	0018      	movs	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	46c0      	nop			@ (mov r8, r8)
 8002590:	20000000 	.word	0x20000000

08002594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002598:	f7ff fff2 	bl	8002580 <HAL_RCC_GetHCLKFreq>
 800259c:	0001      	movs	r1, r0
 800259e:	4b06      	ldr	r3, [pc, #24]	@ (80025b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	0a1b      	lsrs	r3, r3, #8
 80025a4:	2207      	movs	r2, #7
 80025a6:	4013      	ands	r3, r2
 80025a8:	4a04      	ldr	r2, [pc, #16]	@ (80025bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80025aa:	5cd3      	ldrb	r3, [r2, r3]
 80025ac:	40d9      	lsrs	r1, r3
 80025ae:	000b      	movs	r3, r1
}
 80025b0:	0018      	movs	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	46c0      	nop			@ (mov r8, r8)
 80025b8:	40021000 	.word	0x40021000
 80025bc:	08004204 	.word	0x08004204

080025c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025c4:	f7ff ffdc 	bl	8002580 <HAL_RCC_GetHCLKFreq>
 80025c8:	0001      	movs	r1, r0
 80025ca:	4b06      	ldr	r3, [pc, #24]	@ (80025e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	0adb      	lsrs	r3, r3, #11
 80025d0:	2207      	movs	r2, #7
 80025d2:	4013      	ands	r3, r2
 80025d4:	4a04      	ldr	r2, [pc, #16]	@ (80025e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025d6:	5cd3      	ldrb	r3, [r2, r3]
 80025d8:	40d9      	lsrs	r1, r3
 80025da:	000b      	movs	r3, r1
}
 80025dc:	0018      	movs	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	46c0      	nop			@ (mov r8, r8)
 80025e4:	40021000 	.word	0x40021000
 80025e8:	08004204 	.word	0x08004204

080025ec <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80025f4:	2017      	movs	r0, #23
 80025f6:	183b      	adds	r3, r7, r0
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2220      	movs	r2, #32
 8002602:	4013      	ands	r3, r2
 8002604:	d100      	bne.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002606:	e0c7      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002608:	4b84      	ldr	r3, [pc, #528]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800260a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800260c:	2380      	movs	r3, #128	@ 0x80
 800260e:	055b      	lsls	r3, r3, #21
 8002610:	4013      	ands	r3, r2
 8002612:	d109      	bne.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002614:	4b81      	ldr	r3, [pc, #516]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002616:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002618:	4b80      	ldr	r3, [pc, #512]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800261a:	2180      	movs	r1, #128	@ 0x80
 800261c:	0549      	lsls	r1, r1, #21
 800261e:	430a      	orrs	r2, r1
 8002620:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002622:	183b      	adds	r3, r7, r0
 8002624:	2201      	movs	r2, #1
 8002626:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002628:	4b7d      	ldr	r3, [pc, #500]	@ (8002820 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	2380      	movs	r3, #128	@ 0x80
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4013      	ands	r3, r2
 8002632:	d11a      	bne.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002634:	4b7a      	ldr	r3, [pc, #488]	@ (8002820 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b79      	ldr	r3, [pc, #484]	@ (8002820 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800263a:	2180      	movs	r1, #128	@ 0x80
 800263c:	0049      	lsls	r1, r1, #1
 800263e:	430a      	orrs	r2, r1
 8002640:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002642:	f7fe fcdf 	bl	8001004 <HAL_GetTick>
 8002646:	0003      	movs	r3, r0
 8002648:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264a:	e008      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264c:	f7fe fcda 	bl	8001004 <HAL_GetTick>
 8002650:	0002      	movs	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b64      	cmp	r3, #100	@ 0x64
 8002658:	d901      	bls.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e0d9      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265e:	4b70      	ldr	r3, [pc, #448]	@ (8002820 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	2380      	movs	r3, #128	@ 0x80
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4013      	ands	r3, r2
 8002668:	d0f0      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800266a:	4b6c      	ldr	r3, [pc, #432]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	23c0      	movs	r3, #192	@ 0xc0
 8002670:	039b      	lsls	r3, r3, #14
 8002672:	4013      	ands	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	23c0      	movs	r3, #192	@ 0xc0
 800267c:	039b      	lsls	r3, r3, #14
 800267e:	4013      	ands	r3, r2
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	429a      	cmp	r2, r3
 8002684:	d013      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	23c0      	movs	r3, #192	@ 0xc0
 800268c:	029b      	lsls	r3, r3, #10
 800268e:	401a      	ands	r2, r3
 8002690:	23c0      	movs	r3, #192	@ 0xc0
 8002692:	029b      	lsls	r3, r3, #10
 8002694:	429a      	cmp	r2, r3
 8002696:	d10a      	bne.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002698:	4b60      	ldr	r3, [pc, #384]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	2380      	movs	r3, #128	@ 0x80
 800269e:	029b      	lsls	r3, r3, #10
 80026a0:	401a      	ands	r2, r3
 80026a2:	2380      	movs	r3, #128	@ 0x80
 80026a4:	029b      	lsls	r3, r3, #10
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d101      	bne.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e0b1      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80026ae:	4b5b      	ldr	r3, [pc, #364]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026b2:	23c0      	movs	r3, #192	@ 0xc0
 80026b4:	029b      	lsls	r3, r3, #10
 80026b6:	4013      	ands	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d03b      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	23c0      	movs	r3, #192	@ 0xc0
 80026c6:	029b      	lsls	r3, r3, #10
 80026c8:	4013      	ands	r3, r2
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d033      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2220      	movs	r2, #32
 80026d6:	4013      	ands	r3, r2
 80026d8:	d02e      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80026da:	4b50      	ldr	r3, [pc, #320]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026de:	4a51      	ldr	r2, [pc, #324]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026e4:	4b4d      	ldr	r3, [pc, #308]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026e8:	4b4c      	ldr	r3, [pc, #304]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026ea:	2180      	movs	r1, #128	@ 0x80
 80026ec:	0309      	lsls	r1, r1, #12
 80026ee:	430a      	orrs	r2, r1
 80026f0:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026f2:	4b4a      	ldr	r3, [pc, #296]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026f6:	4b49      	ldr	r3, [pc, #292]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026f8:	494b      	ldr	r1, [pc, #300]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80026fa:	400a      	ands	r2, r1
 80026fc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80026fe:	4b47      	ldr	r3, [pc, #284]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	2380      	movs	r3, #128	@ 0x80
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	4013      	ands	r3, r2
 800270c:	d014      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270e:	f7fe fc79 	bl	8001004 <HAL_GetTick>
 8002712:	0003      	movs	r3, r0
 8002714:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002716:	e009      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002718:	f7fe fc74 	bl	8001004 <HAL_GetTick>
 800271c:	0002      	movs	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	4a42      	ldr	r2, [pc, #264]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d901      	bls.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e072      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800272c:	4b3b      	ldr	r3, [pc, #236]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800272e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002730:	2380      	movs	r3, #128	@ 0x80
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4013      	ands	r3, r2
 8002736:	d0ef      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2220      	movs	r2, #32
 800273e:	4013      	ands	r3, r2
 8002740:	d01f      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	23c0      	movs	r3, #192	@ 0xc0
 8002748:	029b      	lsls	r3, r3, #10
 800274a:	401a      	ands	r2, r3
 800274c:	23c0      	movs	r3, #192	@ 0xc0
 800274e:	029b      	lsls	r3, r3, #10
 8002750:	429a      	cmp	r2, r3
 8002752:	d10c      	bne.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002754:	4b31      	ldr	r3, [pc, #196]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a35      	ldr	r2, [pc, #212]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800275a:	4013      	ands	r3, r2
 800275c:	0019      	movs	r1, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	23c0      	movs	r3, #192	@ 0xc0
 8002764:	039b      	lsls	r3, r3, #14
 8002766:	401a      	ands	r2, r3
 8002768:	4b2c      	ldr	r3, [pc, #176]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800276a:	430a      	orrs	r2, r1
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	4b2b      	ldr	r3, [pc, #172]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002770:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	23c0      	movs	r3, #192	@ 0xc0
 8002778:	029b      	lsls	r3, r3, #10
 800277a:	401a      	ands	r2, r3
 800277c:	4b27      	ldr	r3, [pc, #156]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800277e:	430a      	orrs	r2, r1
 8002780:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002782:	2317      	movs	r3, #23
 8002784:	18fb      	adds	r3, r7, r3
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d105      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278c:	4b23      	ldr	r3, [pc, #140]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800278e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002790:	4b22      	ldr	r3, [pc, #136]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002792:	4928      	ldr	r1, [pc, #160]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002794:	400a      	ands	r2, r1
 8002796:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2202      	movs	r2, #2
 800279e:	4013      	ands	r3, r2
 80027a0:	d009      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027a2:	4b1e      	ldr	r3, [pc, #120]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027a6:	220c      	movs	r2, #12
 80027a8:	4393      	bics	r3, r2
 80027aa:	0019      	movs	r1, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	4b1a      	ldr	r3, [pc, #104]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027b2:	430a      	orrs	r2, r1
 80027b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2204      	movs	r2, #4
 80027bc:	4013      	ands	r3, r2
 80027be:	d009      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027c0:	4b16      	ldr	r3, [pc, #88]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	0019      	movs	r1, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	4b13      	ldr	r3, [pc, #76]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027d0:	430a      	orrs	r2, r1
 80027d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2208      	movs	r2, #8
 80027da:	4013      	ands	r3, r2
 80027dc:	d009      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027de:	4b0f      	ldr	r3, [pc, #60]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027e2:	4a16      	ldr	r2, [pc, #88]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	0019      	movs	r1, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	4b0b      	ldr	r3, [pc, #44]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027ee:	430a      	orrs	r2, r1
 80027f0:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2280      	movs	r2, #128	@ 0x80
 80027f8:	4013      	ands	r3, r2
 80027fa:	d009      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80027fc:	4b07      	ldr	r3, [pc, #28]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002800:	4a0f      	ldr	r2, [pc, #60]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002802:	4013      	ands	r3, r2
 8002804:	0019      	movs	r1, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695a      	ldr	r2, [r3, #20]
 800280a:	4b04      	ldr	r3, [pc, #16]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800280c:	430a      	orrs	r2, r1
 800280e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	0018      	movs	r0, r3
 8002814:	46bd      	mov	sp, r7
 8002816:	b006      	add	sp, #24
 8002818:	bd80      	pop	{r7, pc}
 800281a:	46c0      	nop			@ (mov r8, r8)
 800281c:	40021000 	.word	0x40021000
 8002820:	40007000 	.word	0x40007000
 8002824:	fffcffff 	.word	0xfffcffff
 8002828:	fff7ffff 	.word	0xfff7ffff
 800282c:	00001388 	.word	0x00001388
 8002830:	ffcfffff 	.word	0xffcfffff
 8002834:	efffffff 	.word	0xefffffff
 8002838:	fffff3ff 	.word	0xfffff3ff
 800283c:	ffffcfff 	.word	0xffffcfff
 8002840:	fff3ffff 	.word	0xfff3ffff

08002844 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002844:	b5b0      	push	{r4, r5, r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800284c:	230f      	movs	r3, #15
 800284e:	18fb      	adds	r3, r7, r3
 8002850:	2201      	movs	r2, #1
 8002852:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e088      	b.n	8002970 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2221      	movs	r2, #33	@ 0x21
 8002862:	5c9b      	ldrb	r3, [r3, r2]
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d107      	bne.n	800287a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2220      	movs	r2, #32
 800286e:	2100      	movs	r1, #0
 8002870:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	0018      	movs	r0, r3
 8002876:	f7fe fa0d 	bl	8000c94 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2221      	movs	r2, #33	@ 0x21
 800287e:	2102      	movs	r1, #2
 8002880:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	2210      	movs	r2, #16
 800288a:	4013      	ands	r3, r2
 800288c:	2b10      	cmp	r3, #16
 800288e:	d05f      	beq.n	8002950 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	22ca      	movs	r2, #202	@ 0xca
 8002896:	625a      	str	r2, [r3, #36]	@ 0x24
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2253      	movs	r2, #83	@ 0x53
 800289e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80028a0:	250f      	movs	r5, #15
 80028a2:	197c      	adds	r4, r7, r5
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	0018      	movs	r0, r3
 80028a8:	f000 f9ce 	bl	8002c48 <RTC_EnterInitMode>
 80028ac:	0003      	movs	r3, r0
 80028ae:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80028b0:	0028      	movs	r0, r5
 80028b2:	183b      	adds	r3, r7, r0
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d12c      	bne.n	8002914 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	492c      	ldr	r1, [pc, #176]	@ (8002978 <HAL_RTC_Init+0x134>)
 80028c6:	400a      	ands	r2, r1
 80028c8:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6899      	ldr	r1, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	431a      	orrs	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	431a      	orrs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	68d2      	ldr	r2, [r2, #12]
 80028f0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6919      	ldr	r1, [r3, #16]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	041a      	lsls	r2, r3, #16
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002906:	183c      	adds	r4, r7, r0
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	0018      	movs	r0, r3
 800290c:	f000 f9e0 	bl	8002cd0 <RTC_ExitInitMode>
 8002910:	0003      	movs	r3, r0
 8002912:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8002914:	230f      	movs	r3, #15
 8002916:	18fb      	adds	r3, r7, r3
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d113      	bne.n	8002946 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2103      	movs	r1, #3
 800292a:	438a      	bics	r2, r1
 800292c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69da      	ldr	r2, [r3, #28]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	431a      	orrs	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	22ff      	movs	r2, #255	@ 0xff
 800294c:	625a      	str	r2, [r3, #36]	@ 0x24
 800294e:	e003      	b.n	8002958 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002950:	230f      	movs	r3, #15
 8002952:	18fb      	adds	r3, r7, r3
 8002954:	2200      	movs	r2, #0
 8002956:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8002958:	230f      	movs	r3, #15
 800295a:	18fb      	adds	r3, r7, r3
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d103      	bne.n	800296a <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2221      	movs	r2, #33	@ 0x21
 8002966:	2101      	movs	r1, #1
 8002968:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800296a:	230f      	movs	r3, #15
 800296c:	18fb      	adds	r3, r7, r3
 800296e:	781b      	ldrb	r3, [r3, #0]
}
 8002970:	0018      	movs	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	b004      	add	sp, #16
 8002976:	bdb0      	pop	{r4, r5, r7, pc}
 8002978:	ff8fffbf 	.word	0xff8fffbf

0800297c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800297c:	b5b0      	push	{r4, r5, r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2220      	movs	r2, #32
 8002990:	5c9b      	ldrb	r3, [r3, r2]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d101      	bne.n	800299a <HAL_RTC_SetTime+0x1e>
 8002996:	2302      	movs	r3, #2
 8002998:	e092      	b.n	8002ac0 <HAL_RTC_SetTime+0x144>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2220      	movs	r2, #32
 800299e:	2101      	movs	r1, #1
 80029a0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2221      	movs	r2, #33	@ 0x21
 80029a6:	2102      	movs	r1, #2
 80029a8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d125      	bne.n	80029fc <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2240      	movs	r2, #64	@ 0x40
 80029b8:	4013      	ands	r3, r2
 80029ba:	d102      	bne.n	80029c2 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2200      	movs	r2, #0
 80029c0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	0018      	movs	r0, r3
 80029c8:	f000 f9ac 	bl	8002d24 <RTC_ByteToBcd2>
 80029cc:	0003      	movs	r3, r0
 80029ce:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	785b      	ldrb	r3, [r3, #1]
 80029d4:	0018      	movs	r0, r3
 80029d6:	f000 f9a5 	bl	8002d24 <RTC_ByteToBcd2>
 80029da:	0003      	movs	r3, r0
 80029dc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80029de:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	789b      	ldrb	r3, [r3, #2]
 80029e4:	0018      	movs	r0, r3
 80029e6:	f000 f99d 	bl	8002d24 <RTC_ByteToBcd2>
 80029ea:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80029ec:	0022      	movs	r2, r4
 80029ee:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	78db      	ldrb	r3, [r3, #3]
 80029f4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80029f6:	4313      	orrs	r3, r2
 80029f8:	617b      	str	r3, [r7, #20]
 80029fa:	e017      	b.n	8002a2c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	2240      	movs	r2, #64	@ 0x40
 8002a04:	4013      	ands	r3, r2
 8002a06:	d102      	bne.n	8002a0e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	785b      	ldrb	r3, [r3, #1]
 8002a18:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002a1a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002a20:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	78db      	ldrb	r3, [r3, #3]
 8002a26:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	22ca      	movs	r2, #202	@ 0xca
 8002a32:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2253      	movs	r2, #83	@ 0x53
 8002a3a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002a3c:	2513      	movs	r5, #19
 8002a3e:	197c      	adds	r4, r7, r5
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	0018      	movs	r0, r3
 8002a44:	f000 f900 	bl	8002c48 <RTC_EnterInitMode>
 8002a48:	0003      	movs	r3, r0
 8002a4a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002a4c:	0028      	movs	r0, r5
 8002a4e:	183b      	adds	r3, r7, r0
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d120      	bne.n	8002a98 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	491a      	ldr	r1, [pc, #104]	@ (8002ac8 <HAL_RTC_SetTime+0x14c>)
 8002a5e:	400a      	ands	r2, r1
 8002a60:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4917      	ldr	r1, [pc, #92]	@ (8002acc <HAL_RTC_SetTime+0x150>)
 8002a6e:	400a      	ands	r2, r1
 8002a70:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6899      	ldr	r1, [r3, #8]
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	431a      	orrs	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002a8a:	183c      	adds	r4, r7, r0
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f000 f91e 	bl	8002cd0 <RTC_ExitInitMode>
 8002a94:	0003      	movs	r3, r0
 8002a96:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8002a98:	2313      	movs	r3, #19
 8002a9a:	18fb      	adds	r3, r7, r3
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d103      	bne.n	8002aaa <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2221      	movs	r2, #33	@ 0x21
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	22ff      	movs	r2, #255	@ 0xff
 8002ab0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	5499      	strb	r1, [r3, r2]

  return status;
 8002aba:	2313      	movs	r3, #19
 8002abc:	18fb      	adds	r3, r7, r3
 8002abe:	781b      	ldrb	r3, [r3, #0]
}
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b006      	add	sp, #24
 8002ac6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ac8:	007f7f7f 	.word	0x007f7f7f
 8002acc:	fffbffff 	.word	0xfffbffff

08002ad0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002ad0:	b5b0      	push	{r4, r5, r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	5c9b      	ldrb	r3, [r3, r2]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d101      	bne.n	8002aee <HAL_RTC_SetDate+0x1e>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e07e      	b.n	8002bec <HAL_RTC_SetDate+0x11c>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2220      	movs	r2, #32
 8002af2:	2101      	movs	r1, #1
 8002af4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2221      	movs	r2, #33	@ 0x21
 8002afa:	2102      	movs	r1, #2
 8002afc:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10e      	bne.n	8002b22 <HAL_RTC_SetDate+0x52>
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	785b      	ldrb	r3, [r3, #1]
 8002b08:	001a      	movs	r2, r3
 8002b0a:	2310      	movs	r3, #16
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d008      	beq.n	8002b22 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	785b      	ldrb	r3, [r3, #1]
 8002b14:	2210      	movs	r2, #16
 8002b16:	4393      	bics	r3, r2
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	330a      	adds	r3, #10
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d11c      	bne.n	8002b62 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	78db      	ldrb	r3, [r3, #3]
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f000 f8f9 	bl	8002d24 <RTC_ByteToBcd2>
 8002b32:	0003      	movs	r3, r0
 8002b34:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	785b      	ldrb	r3, [r3, #1]
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f000 f8f2 	bl	8002d24 <RTC_ByteToBcd2>
 8002b40:	0003      	movs	r3, r0
 8002b42:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002b44:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	789b      	ldrb	r3, [r3, #2]
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f000 f8ea 	bl	8002d24 <RTC_ByteToBcd2>
 8002b50:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002b52:	0022      	movs	r2, r4
 8002b54:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	e00e      	b.n	8002b80 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	78db      	ldrb	r3, [r3, #3]
 8002b66:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	785b      	ldrb	r3, [r3, #1]
 8002b6c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002b6e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002b74:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	22ca      	movs	r2, #202	@ 0xca
 8002b86:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2253      	movs	r2, #83	@ 0x53
 8002b8e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002b90:	2513      	movs	r5, #19
 8002b92:	197c      	adds	r4, r7, r5
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	0018      	movs	r0, r3
 8002b98:	f000 f856 	bl	8002c48 <RTC_EnterInitMode>
 8002b9c:	0003      	movs	r3, r0
 8002b9e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002ba0:	0028      	movs	r0, r5
 8002ba2:	183b      	adds	r3, r7, r0
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10c      	bne.n	8002bc4 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	4910      	ldr	r1, [pc, #64]	@ (8002bf4 <HAL_RTC_SetDate+0x124>)
 8002bb2:	400a      	ands	r2, r1
 8002bb4:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002bb6:	183c      	adds	r4, r7, r0
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f000 f888 	bl	8002cd0 <RTC_ExitInitMode>
 8002bc0:	0003      	movs	r3, r0
 8002bc2:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8002bc4:	2313      	movs	r3, #19
 8002bc6:	18fb      	adds	r3, r7, r3
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d103      	bne.n	8002bd6 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2221      	movs	r2, #33	@ 0x21
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	22ff      	movs	r2, #255	@ 0xff
 8002bdc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2220      	movs	r2, #32
 8002be2:	2100      	movs	r1, #0
 8002be4:	5499      	strb	r1, [r3, r2]

  return status;
 8002be6:	2313      	movs	r3, #19
 8002be8:	18fb      	adds	r3, r7, r3
 8002bea:	781b      	ldrb	r3, [r3, #0]
}
 8002bec:	0018      	movs	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	b006      	add	sp, #24
 8002bf2:	bdb0      	pop	{r4, r5, r7, pc}
 8002bf4:	00ffff3f 	.word	0x00ffff3f

08002bf8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a0e      	ldr	r2, [pc, #56]	@ (8002c44 <HAL_RTC_WaitForSynchro+0x4c>)
 8002c0a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c0c:	f7fe f9fa 	bl	8001004 <HAL_GetTick>
 8002c10:	0003      	movs	r3, r0
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002c14:	e00a      	b.n	8002c2c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c16:	f7fe f9f5 	bl	8001004 <HAL_GetTick>
 8002c1a:	0002      	movs	r2, r0
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	1ad2      	subs	r2, r2, r3
 8002c20:	23fa      	movs	r3, #250	@ 0xfa
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d901      	bls.n	8002c2c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e006      	b.n	8002c3a <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	4013      	ands	r3, r2
 8002c36:	d0ee      	beq.n	8002c16 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	b004      	add	sp, #16
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	46c0      	nop			@ (mov r8, r8)
 8002c44:	0001ff5f 	.word	0x0001ff5f

08002c48 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002c54:	230f      	movs	r3, #15
 8002c56:	18fb      	adds	r3, r7, r3
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	2240      	movs	r2, #64	@ 0x40
 8002c64:	4013      	ands	r3, r2
 8002c66:	d12c      	bne.n	8002cc2 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2180      	movs	r1, #128	@ 0x80
 8002c74:	430a      	orrs	r2, r1
 8002c76:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c78:	f7fe f9c4 	bl	8001004 <HAL_GetTick>
 8002c7c:	0003      	movs	r3, r0
 8002c7e:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002c80:	e014      	b.n	8002cac <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c82:	f7fe f9bf 	bl	8001004 <HAL_GetTick>
 8002c86:	0002      	movs	r2, r0
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	1ad2      	subs	r2, r2, r3
 8002c8c:	200f      	movs	r0, #15
 8002c8e:	183b      	adds	r3, r7, r0
 8002c90:	1839      	adds	r1, r7, r0
 8002c92:	7809      	ldrb	r1, [r1, #0]
 8002c94:	7019      	strb	r1, [r3, #0]
 8002c96:	23fa      	movs	r3, #250	@ 0xfa
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d906      	bls.n	8002cac <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2221      	movs	r2, #33	@ 0x21
 8002ca2:	2104      	movs	r1, #4
 8002ca4:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8002ca6:	183b      	adds	r3, r7, r0
 8002ca8:	2201      	movs	r2, #1
 8002caa:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	2240      	movs	r2, #64	@ 0x40
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d104      	bne.n	8002cc2 <RTC_EnterInitMode+0x7a>
 8002cb8:	230f      	movs	r3, #15
 8002cba:	18fb      	adds	r3, r7, r3
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d1df      	bne.n	8002c82 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8002cc2:	230f      	movs	r3, #15
 8002cc4:	18fb      	adds	r3, r7, r3
 8002cc6:	781b      	ldrb	r3, [r3, #0]
}
 8002cc8:	0018      	movs	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b004      	add	sp, #16
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002cd0:	b590      	push	{r4, r7, lr}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd8:	240f      	movs	r4, #15
 8002cda:	193b      	adds	r3, r7, r4
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2180      	movs	r1, #128	@ 0x80
 8002cec:	438a      	bics	r2, r1
 8002cee:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d10c      	bne.n	8002d16 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f7ff ff7a 	bl	8002bf8 <HAL_RTC_WaitForSynchro>
 8002d04:	1e03      	subs	r3, r0, #0
 8002d06:	d006      	beq.n	8002d16 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2221      	movs	r2, #33	@ 0x21
 8002d0c:	2104      	movs	r1, #4
 8002d0e:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8002d10:	193b      	adds	r3, r7, r4
 8002d12:	2201      	movs	r2, #1
 8002d14:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002d16:	230f      	movs	r3, #15
 8002d18:	18fb      	adds	r3, r7, r3
 8002d1a:	781b      	ldrb	r3, [r3, #0]
}
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b005      	add	sp, #20
 8002d22:	bd90      	pop	{r4, r7, pc}

08002d24 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	0002      	movs	r2, r0
 8002d2c:	1dfb      	adds	r3, r7, #7
 8002d2e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002d34:	e007      	b.n	8002d46 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002d3c:	1dfb      	adds	r3, r7, #7
 8002d3e:	1dfa      	adds	r2, r7, #7
 8002d40:	7812      	ldrb	r2, [r2, #0]
 8002d42:	3a0a      	subs	r2, #10
 8002d44:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8002d46:	1dfb      	adds	r3, r7, #7
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b09      	cmp	r3, #9
 8002d4c:	d8f3      	bhi.n	8002d36 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	011b      	lsls	r3, r3, #4
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	1dfb      	adds	r3, r7, #7
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	b2db      	uxtb	r3, r3
}
 8002d5e:	0018      	movs	r0, r3
 8002d60:	46bd      	mov	sp, r7
 8002d62:	b004      	add	sp, #16
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <HAL_RTCEx_SetTimeStamp>:
  * @note Although unused, parameter RTC_TimeStampPin has been kept for portability
  *       reasons.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
  /* Prevent compilation warning due to unused argument(s) if assert_param check
     is disabled */
  UNUSED(RTC_TimeStampPin);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	5c9b      	ldrb	r3, [r3, r2]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_RTCEx_SetTimeStamp+0x1e>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e047      	b.n	8002e16 <HAL_RTCEx_SetTimeStamp+0xae>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	5499      	strb	r1, [r3, r2]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2221      	movs	r2, #33	@ 0x21
 8002d92:	2102      	movs	r1, #2
 8002d94:	5499      	strb	r1, [r3, r2]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4a20      	ldr	r2, [pc, #128]	@ (8002e20 <HAL_RTCEx_SetTimeStamp+0xb8>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	22ca      	movs	r2, #202	@ 0xca
 8002db0:	625a      	str	r2, [r3, #36]	@ 0x24
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2253      	movs	r2, #83	@ 0x53
 8002db8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	22ff      	movs	r2, #255	@ 0xff
 8002dca:	401a      	ands	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4914      	ldr	r1, [pc, #80]	@ (8002e24 <HAL_RTCEx_SetTimeStamp+0xbc>)
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	22ff      	movs	r2, #255	@ 0xff
 8002dde:	401a      	ands	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4910      	ldr	r1, [pc, #64]	@ (8002e28 <HAL_RTCEx_SetTimeStamp+0xc0>)
 8002de6:	430a      	orrs	r2, r1
 8002de8:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2180      	movs	r1, #128	@ 0x80
 8002df6:	0109      	lsls	r1, r1, #4
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	22ff      	movs	r2, #255	@ 0xff
 8002e02:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2221      	movs	r2, #33	@ 0x21
 8002e08:	2101      	movs	r1, #1
 8002e0a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	2100      	movs	r1, #0
 8002e12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	0018      	movs	r0, r3
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	b006      	add	sp, #24
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	46c0      	nop			@ (mov r8, r8)
 8002e20:	fffff7f7 	.word	0xfffff7f7
 8002e24:	fffff77f 	.word	0xfffff77f
 8002e28:	ffffef7f 	.word	0xffffef7f

08002e2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e07b      	b.n	8002f36 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d109      	bne.n	8002e5a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	2382      	movs	r3, #130	@ 0x82
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d009      	beq.n	8002e66 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	61da      	str	r2, [r3, #28]
 8002e58:	e005      	b.n	8002e66 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2251      	movs	r2, #81	@ 0x51
 8002e70:	5c9b      	ldrb	r3, [r3, r2]
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d107      	bne.n	8002e88 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2250      	movs	r2, #80	@ 0x50
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	0018      	movs	r0, r3
 8002e84:	f7fd ff1e 	bl	8000cc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2251      	movs	r2, #81	@ 0x51
 8002e8c:	2102      	movs	r1, #2
 8002e8e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2140      	movs	r1, #64	@ 0x40
 8002e9c:	438a      	bics	r2, r1
 8002e9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	2382      	movs	r3, #130	@ 0x82
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	401a      	ands	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6899      	ldr	r1, [r3, #8]
 8002eae:	2384      	movs	r3, #132	@ 0x84
 8002eb0:	021b      	lsls	r3, r3, #8
 8002eb2:	400b      	ands	r3, r1
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68d9      	ldr	r1, [r3, #12]
 8002eba:	2380      	movs	r3, #128	@ 0x80
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	400b      	ands	r3, r1
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	2102      	movs	r1, #2
 8002ec8:	400b      	ands	r3, r1
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	400b      	ands	r3, r1
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6999      	ldr	r1, [r3, #24]
 8002eda:	2380      	movs	r3, #128	@ 0x80
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	400b      	ands	r3, r1
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	2138      	movs	r1, #56	@ 0x38
 8002ee8:	400b      	ands	r3, r1
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	2180      	movs	r1, #128	@ 0x80
 8002ef2:	400b      	ands	r3, r1
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	0011      	movs	r1, r2
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002efc:	2380      	movs	r3, #128	@ 0x80
 8002efe:	019b      	lsls	r3, r3, #6
 8002f00:	401a      	ands	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	0c1b      	lsrs	r3, r3, #16
 8002f10:	2204      	movs	r2, #4
 8002f12:	4013      	ands	r3, r2
 8002f14:	0019      	movs	r1, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1a:	2210      	movs	r2, #16
 8002f1c:	401a      	ands	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2251      	movs	r2, #81	@ 0x51
 8002f30:	2101      	movs	r1, #1
 8002f32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	0018      	movs	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b002      	add	sp, #8
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e032      	b.n	8002fb6 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2239      	movs	r2, #57	@ 0x39
 8002f54:	5c9b      	ldrb	r3, [r3, r2]
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d107      	bne.n	8002f6c <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2238      	movs	r2, #56	@ 0x38
 8002f60:	2100      	movs	r1, #0
 8002f62:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	0018      	movs	r0, r3
 8002f68:	f7fd fef0 	bl	8000d4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2239      	movs	r2, #57	@ 0x39
 8002f70:	2102      	movs	r1, #2
 8002f72:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	0019      	movs	r1, r3
 8002f7e:	0010      	movs	r0, r2
 8002f80:	f000 fa00 	bl	8003384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	223e      	movs	r2, #62	@ 0x3e
 8002f88:	2101      	movs	r1, #1
 8002f8a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	223a      	movs	r2, #58	@ 0x3a
 8002f90:	2101      	movs	r1, #1
 8002f92:	5499      	strb	r1, [r3, r2]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	223b      	movs	r2, #59	@ 0x3b
 8002f98:	2101      	movs	r1, #1
 8002f9a:	5499      	strb	r1, [r3, r2]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	223c      	movs	r2, #60	@ 0x3c
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	5499      	strb	r1, [r3, r2]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	223d      	movs	r2, #61	@ 0x3d
 8002fa8:	2101      	movs	r1, #1
 8002faa:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2239      	movs	r2, #57	@ 0x39
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b002      	add	sp, #8
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e032      	b.n	8003036 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2239      	movs	r2, #57	@ 0x39
 8002fd4:	5c9b      	ldrb	r3, [r3, r2]
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d107      	bne.n	8002fec <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2238      	movs	r2, #56	@ 0x38
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f000 f829 	bl	800303e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2239      	movs	r2, #57	@ 0x39
 8002ff0:	2102      	movs	r1, #2
 8002ff2:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3304      	adds	r3, #4
 8002ffc:	0019      	movs	r1, r3
 8002ffe:	0010      	movs	r0, r2
 8003000:	f000 f9c0 	bl	8003384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	223e      	movs	r2, #62	@ 0x3e
 8003008:	2101      	movs	r1, #1
 800300a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	223a      	movs	r2, #58	@ 0x3a
 8003010:	2101      	movs	r1, #1
 8003012:	5499      	strb	r1, [r3, r2]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	223b      	movs	r2, #59	@ 0x3b
 8003018:	2101      	movs	r1, #1
 800301a:	5499      	strb	r1, [r3, r2]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	223c      	movs	r2, #60	@ 0x3c
 8003020:	2101      	movs	r1, #1
 8003022:	5499      	strb	r1, [r3, r2]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	223d      	movs	r2, #61	@ 0x3d
 8003028:	2101      	movs	r1, #1
 800302a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2239      	movs	r2, #57	@ 0x39
 8003030:	2101      	movs	r1, #1
 8003032:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	0018      	movs	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	b002      	add	sp, #8
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003046:	46c0      	nop			@ (mov r8, r8)
 8003048:	46bd      	mov	sp, r7
 800304a:	b002      	add	sp, #8
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800305c:	2317      	movs	r3, #23
 800305e:	18fb      	adds	r3, r7, r3
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2238      	movs	r2, #56	@ 0x38
 8003068:	5c9b      	ldrb	r3, [r3, r2]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d101      	bne.n	8003072 <HAL_TIM_PWM_ConfigChannel+0x22>
 800306e:	2302      	movs	r3, #2
 8003070:	e0ad      	b.n	80031ce <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2238      	movs	r2, #56	@ 0x38
 8003076:	2101      	movs	r1, #1
 8003078:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b0c      	cmp	r3, #12
 800307e:	d100      	bne.n	8003082 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003080:	e076      	b.n	8003170 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b0c      	cmp	r3, #12
 8003086:	d900      	bls.n	800308a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003088:	e095      	b.n	80031b6 <HAL_TIM_PWM_ConfigChannel+0x166>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b08      	cmp	r3, #8
 800308e:	d04e      	beq.n	800312e <HAL_TIM_PWM_ConfigChannel+0xde>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b08      	cmp	r3, #8
 8003094:	d900      	bls.n	8003098 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003096:	e08e      	b.n	80031b6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_TIM_PWM_ConfigChannel+0x56>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d021      	beq.n	80030e8 <HAL_TIM_PWM_ConfigChannel+0x98>
 80030a4:	e087      	b.n	80031b6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	0011      	movs	r1, r2
 80030ae:	0018      	movs	r0, r3
 80030b0:	f000 f9b2 	bl	8003418 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699a      	ldr	r2, [r3, #24]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2108      	movs	r1, #8
 80030c0:	430a      	orrs	r2, r1
 80030c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	699a      	ldr	r2, [r3, #24]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2104      	movs	r1, #4
 80030d0:	438a      	bics	r2, r1
 80030d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6999      	ldr	r1, [r3, #24]
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	619a      	str	r2, [r3, #24]
      break;
 80030e6:	e06b      	b.n	80031c0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	0011      	movs	r1, r2
 80030f0:	0018      	movs	r0, r3
 80030f2:	f000 f9cd 	bl	8003490 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	699a      	ldr	r2, [r3, #24]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2180      	movs	r1, #128	@ 0x80
 8003102:	0109      	lsls	r1, r1, #4
 8003104:	430a      	orrs	r2, r1
 8003106:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699a      	ldr	r2, [r3, #24]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4931      	ldr	r1, [pc, #196]	@ (80031d8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003114:	400a      	ands	r2, r1
 8003116:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6999      	ldr	r1, [r3, #24]
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	021a      	lsls	r2, r3, #8
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	619a      	str	r2, [r3, #24]
      break;
 800312c:	e048      	b.n	80031c0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	0011      	movs	r1, r2
 8003136:	0018      	movs	r0, r3
 8003138:	f000 f9ec 	bl	8003514 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	69da      	ldr	r2, [r3, #28]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2108      	movs	r1, #8
 8003148:	430a      	orrs	r2, r1
 800314a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	69da      	ldr	r2, [r3, #28]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2104      	movs	r1, #4
 8003158:	438a      	bics	r2, r1
 800315a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	69d9      	ldr	r1, [r3, #28]
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	61da      	str	r2, [r3, #28]
      break;
 800316e:	e027      	b.n	80031c0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	0011      	movs	r1, r2
 8003178:	0018      	movs	r0, r3
 800317a:	f000 fa0b 	bl	8003594 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	69da      	ldr	r2, [r3, #28]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2180      	movs	r1, #128	@ 0x80
 800318a:	0109      	lsls	r1, r1, #4
 800318c:	430a      	orrs	r2, r1
 800318e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	69da      	ldr	r2, [r3, #28]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	490f      	ldr	r1, [pc, #60]	@ (80031d8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800319c:	400a      	ands	r2, r1
 800319e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	69d9      	ldr	r1, [r3, #28]
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	021a      	lsls	r2, r3, #8
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	61da      	str	r2, [r3, #28]
      break;
 80031b4:	e004      	b.n	80031c0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80031b6:	2317      	movs	r3, #23
 80031b8:	18fb      	adds	r3, r7, r3
 80031ba:	2201      	movs	r2, #1
 80031bc:	701a      	strb	r2, [r3, #0]
      break;
 80031be:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2238      	movs	r2, #56	@ 0x38
 80031c4:	2100      	movs	r1, #0
 80031c6:	5499      	strb	r1, [r3, r2]

  return status;
 80031c8:	2317      	movs	r3, #23
 80031ca:	18fb      	adds	r3, r7, r3
 80031cc:	781b      	ldrb	r3, [r3, #0]
}
 80031ce:	0018      	movs	r0, r3
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b006      	add	sp, #24
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	46c0      	nop			@ (mov r8, r8)
 80031d8:	fffffbff 	.word	0xfffffbff

080031dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031e6:	230f      	movs	r3, #15
 80031e8:	18fb      	adds	r3, r7, r3
 80031ea:	2200      	movs	r2, #0
 80031ec:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2238      	movs	r2, #56	@ 0x38
 80031f2:	5c9b      	ldrb	r3, [r3, r2]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <HAL_TIM_ConfigClockSource+0x20>
 80031f8:	2302      	movs	r3, #2
 80031fa:	e0bc      	b.n	8003376 <HAL_TIM_ConfigClockSource+0x19a>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2238      	movs	r2, #56	@ 0x38
 8003200:	2101      	movs	r1, #1
 8003202:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2239      	movs	r2, #57	@ 0x39
 8003208:	2102      	movs	r1, #2
 800320a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2277      	movs	r2, #119	@ 0x77
 8003218:	4393      	bics	r3, r2
 800321a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	4a58      	ldr	r2, [pc, #352]	@ (8003380 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003220:	4013      	ands	r3, r2
 8003222:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2280      	movs	r2, #128	@ 0x80
 8003232:	0192      	lsls	r2, r2, #6
 8003234:	4293      	cmp	r3, r2
 8003236:	d040      	beq.n	80032ba <HAL_TIM_ConfigClockSource+0xde>
 8003238:	2280      	movs	r2, #128	@ 0x80
 800323a:	0192      	lsls	r2, r2, #6
 800323c:	4293      	cmp	r3, r2
 800323e:	d900      	bls.n	8003242 <HAL_TIM_ConfigClockSource+0x66>
 8003240:	e088      	b.n	8003354 <HAL_TIM_ConfigClockSource+0x178>
 8003242:	2280      	movs	r2, #128	@ 0x80
 8003244:	0152      	lsls	r2, r2, #5
 8003246:	4293      	cmp	r3, r2
 8003248:	d100      	bne.n	800324c <HAL_TIM_ConfigClockSource+0x70>
 800324a:	e088      	b.n	800335e <HAL_TIM_ConfigClockSource+0x182>
 800324c:	2280      	movs	r2, #128	@ 0x80
 800324e:	0152      	lsls	r2, r2, #5
 8003250:	4293      	cmp	r3, r2
 8003252:	d900      	bls.n	8003256 <HAL_TIM_ConfigClockSource+0x7a>
 8003254:	e07e      	b.n	8003354 <HAL_TIM_ConfigClockSource+0x178>
 8003256:	2b70      	cmp	r3, #112	@ 0x70
 8003258:	d018      	beq.n	800328c <HAL_TIM_ConfigClockSource+0xb0>
 800325a:	d900      	bls.n	800325e <HAL_TIM_ConfigClockSource+0x82>
 800325c:	e07a      	b.n	8003354 <HAL_TIM_ConfigClockSource+0x178>
 800325e:	2b60      	cmp	r3, #96	@ 0x60
 8003260:	d04f      	beq.n	8003302 <HAL_TIM_ConfigClockSource+0x126>
 8003262:	d900      	bls.n	8003266 <HAL_TIM_ConfigClockSource+0x8a>
 8003264:	e076      	b.n	8003354 <HAL_TIM_ConfigClockSource+0x178>
 8003266:	2b50      	cmp	r3, #80	@ 0x50
 8003268:	d03b      	beq.n	80032e2 <HAL_TIM_ConfigClockSource+0x106>
 800326a:	d900      	bls.n	800326e <HAL_TIM_ConfigClockSource+0x92>
 800326c:	e072      	b.n	8003354 <HAL_TIM_ConfigClockSource+0x178>
 800326e:	2b40      	cmp	r3, #64	@ 0x40
 8003270:	d057      	beq.n	8003322 <HAL_TIM_ConfigClockSource+0x146>
 8003272:	d900      	bls.n	8003276 <HAL_TIM_ConfigClockSource+0x9a>
 8003274:	e06e      	b.n	8003354 <HAL_TIM_ConfigClockSource+0x178>
 8003276:	2b30      	cmp	r3, #48	@ 0x30
 8003278:	d063      	beq.n	8003342 <HAL_TIM_ConfigClockSource+0x166>
 800327a:	d86b      	bhi.n	8003354 <HAL_TIM_ConfigClockSource+0x178>
 800327c:	2b20      	cmp	r3, #32
 800327e:	d060      	beq.n	8003342 <HAL_TIM_ConfigClockSource+0x166>
 8003280:	d868      	bhi.n	8003354 <HAL_TIM_ConfigClockSource+0x178>
 8003282:	2b00      	cmp	r3, #0
 8003284:	d05d      	beq.n	8003342 <HAL_TIM_ConfigClockSource+0x166>
 8003286:	2b10      	cmp	r3, #16
 8003288:	d05b      	beq.n	8003342 <HAL_TIM_ConfigClockSource+0x166>
 800328a:	e063      	b.n	8003354 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800329c:	f000 fa3a 	bl	8003714 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2277      	movs	r2, #119	@ 0x77
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	609a      	str	r2, [r3, #8]
      break;
 80032b8:	e052      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032ca:	f000 fa23 	bl	8003714 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2180      	movs	r1, #128	@ 0x80
 80032da:	01c9      	lsls	r1, r1, #7
 80032dc:	430a      	orrs	r2, r1
 80032de:	609a      	str	r2, [r3, #8]
      break;
 80032e0:	e03e      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ee:	001a      	movs	r2, r3
 80032f0:	f000 f996 	bl	8003620 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2150      	movs	r1, #80	@ 0x50
 80032fa:	0018      	movs	r0, r3
 80032fc:	f000 f9f0 	bl	80036e0 <TIM_ITRx_SetConfig>
      break;
 8003300:	e02e      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800330e:	001a      	movs	r2, r3
 8003310:	f000 f9b4 	bl	800367c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2160      	movs	r1, #96	@ 0x60
 800331a:	0018      	movs	r0, r3
 800331c:	f000 f9e0 	bl	80036e0 <TIM_ITRx_SetConfig>
      break;
 8003320:	e01e      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800332e:	001a      	movs	r2, r3
 8003330:	f000 f976 	bl	8003620 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2140      	movs	r1, #64	@ 0x40
 800333a:	0018      	movs	r0, r3
 800333c:	f000 f9d0 	bl	80036e0 <TIM_ITRx_SetConfig>
      break;
 8003340:	e00e      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	0019      	movs	r1, r3
 800334c:	0010      	movs	r0, r2
 800334e:	f000 f9c7 	bl	80036e0 <TIM_ITRx_SetConfig>
      break;
 8003352:	e005      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003354:	230f      	movs	r3, #15
 8003356:	18fb      	adds	r3, r7, r3
 8003358:	2201      	movs	r2, #1
 800335a:	701a      	strb	r2, [r3, #0]
      break;
 800335c:	e000      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800335e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2239      	movs	r2, #57	@ 0x39
 8003364:	2101      	movs	r1, #1
 8003366:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2238      	movs	r2, #56	@ 0x38
 800336c:	2100      	movs	r1, #0
 800336e:	5499      	strb	r1, [r3, r2]

  return status;
 8003370:	230f      	movs	r3, #15
 8003372:	18fb      	adds	r3, r7, r3
 8003374:	781b      	ldrb	r3, [r3, #0]
}
 8003376:	0018      	movs	r0, r3
 8003378:	46bd      	mov	sp, r7
 800337a:	b004      	add	sp, #16
 800337c:	bd80      	pop	{r7, pc}
 800337e:	46c0      	nop			@ (mov r8, r8)
 8003380:	ffff00ff 	.word	0xffff00ff

08003384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	2380      	movs	r3, #128	@ 0x80
 8003398:	05db      	lsls	r3, r3, #23
 800339a:	429a      	cmp	r2, r3
 800339c:	d003      	beq.n	80033a6 <TIM_Base_SetConfig+0x22>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a1b      	ldr	r2, [pc, #108]	@ (8003410 <TIM_Base_SetConfig+0x8c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d108      	bne.n	80033b8 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2270      	movs	r2, #112	@ 0x70
 80033aa:	4393      	bics	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	2380      	movs	r3, #128	@ 0x80
 80033bc:	05db      	lsls	r3, r3, #23
 80033be:	429a      	cmp	r2, r3
 80033c0:	d003      	beq.n	80033ca <TIM_Base_SetConfig+0x46>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a12      	ldr	r2, [pc, #72]	@ (8003410 <TIM_Base_SetConfig+0x8c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d108      	bne.n	80033dc <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4a11      	ldr	r2, [pc, #68]	@ (8003414 <TIM_Base_SetConfig+0x90>)
 80033ce:	4013      	ands	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4313      	orrs	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2280      	movs	r2, #128	@ 0x80
 80033e0:	4393      	bics	r3, r2
 80033e2:	001a      	movs	r2, r3
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	615a      	str	r2, [r3, #20]
}
 8003408:	46c0      	nop			@ (mov r8, r8)
 800340a:	46bd      	mov	sp, r7
 800340c:	b004      	add	sp, #16
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40010800 	.word	0x40010800
 8003414:	fffffcff 	.word	0xfffffcff

08003418 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	2201      	movs	r2, #1
 8003428:	4393      	bics	r3, r2
 800342a:	001a      	movs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2270      	movs	r2, #112	@ 0x70
 8003446:	4393      	bics	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2203      	movs	r2, #3
 800344e:	4393      	bics	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	4313      	orrs	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	2202      	movs	r2, #2
 8003460:	4393      	bics	r3, r2
 8003462:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	4313      	orrs	r3, r2
 800346c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	621a      	str	r2, [r3, #32]
}
 8003488:	46c0      	nop			@ (mov r8, r8)
 800348a:	46bd      	mov	sp, r7
 800348c:	b006      	add	sp, #24
 800348e:	bd80      	pop	{r7, pc}

08003490 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	2210      	movs	r2, #16
 80034a0:	4393      	bics	r3, r2
 80034a2:	001a      	movs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	4a13      	ldr	r2, [pc, #76]	@ (800350c <TIM_OC2_SetConfig+0x7c>)
 80034be:	4013      	ands	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4a12      	ldr	r2, [pc, #72]	@ (8003510 <TIM_OC2_SetConfig+0x80>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	021b      	lsls	r3, r3, #8
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2220      	movs	r2, #32
 80034da:	4393      	bics	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	621a      	str	r2, [r3, #32]
}
 8003504:	46c0      	nop			@ (mov r8, r8)
 8003506:	46bd      	mov	sp, r7
 8003508:	b006      	add	sp, #24
 800350a:	bd80      	pop	{r7, pc}
 800350c:	ffff8fff 	.word	0xffff8fff
 8003510:	fffffcff 	.word	0xfffffcff

08003514 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	4a1a      	ldr	r2, [pc, #104]	@ (800358c <TIM_OC3_SetConfig+0x78>)
 8003524:	401a      	ands	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2270      	movs	r2, #112	@ 0x70
 8003540:	4393      	bics	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2203      	movs	r2, #3
 8003548:	4393      	bics	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4313      	orrs	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	4a0d      	ldr	r2, [pc, #52]	@ (8003590 <TIM_OC3_SetConfig+0x7c>)
 800355a:	4013      	ands	r3, r2
 800355c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	021b      	lsls	r3, r3, #8
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	4313      	orrs	r3, r2
 8003568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	621a      	str	r2, [r3, #32]
}
 8003584:	46c0      	nop			@ (mov r8, r8)
 8003586:	46bd      	mov	sp, r7
 8003588:	b006      	add	sp, #24
 800358a:	bd80      	pop	{r7, pc}
 800358c:	fffffeff 	.word	0xfffffeff
 8003590:	fffffdff 	.word	0xfffffdff

08003594 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003610 <TIM_OC4_SetConfig+0x7c>)
 80035a4:	401a      	ands	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4a15      	ldr	r2, [pc, #84]	@ (8003614 <TIM_OC4_SetConfig+0x80>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4a14      	ldr	r2, [pc, #80]	@ (8003618 <TIM_OC4_SetConfig+0x84>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	021b      	lsls	r3, r3, #8
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	4a10      	ldr	r2, [pc, #64]	@ (800361c <TIM_OC4_SetConfig+0x88>)
 80035dc:	4013      	ands	r3, r2
 80035de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	031b      	lsls	r3, r3, #12
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	621a      	str	r2, [r3, #32]
}
 8003606:	46c0      	nop			@ (mov r8, r8)
 8003608:	46bd      	mov	sp, r7
 800360a:	b006      	add	sp, #24
 800360c:	bd80      	pop	{r7, pc}
 800360e:	46c0      	nop			@ (mov r8, r8)
 8003610:	ffffefff 	.word	0xffffefff
 8003614:	ffff8fff 	.word	0xffff8fff
 8003618:	fffffcff 	.word	0xfffffcff
 800361c:	ffffdfff 	.word	0xffffdfff

08003620 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	2201      	movs	r2, #1
 8003638:	4393      	bics	r3, r2
 800363a:	001a      	movs	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	22f0      	movs	r2, #240	@ 0xf0
 800364a:	4393      	bics	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	220a      	movs	r2, #10
 800365c:	4393      	bics	r3, r2
 800365e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	4313      	orrs	r3, r2
 8003666:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	621a      	str	r2, [r3, #32]
}
 8003674:	46c0      	nop			@ (mov r8, r8)
 8003676:	46bd      	mov	sp, r7
 8003678:	b006      	add	sp, #24
 800367a:	bd80      	pop	{r7, pc}

0800367c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	2210      	movs	r2, #16
 800368e:	4393      	bics	r3, r2
 8003690:	001a      	movs	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	4a0d      	ldr	r2, [pc, #52]	@ (80036dc <TIM_TI2_ConfigInputStage+0x60>)
 80036a6:	4013      	ands	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	031b      	lsls	r3, r3, #12
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	22a0      	movs	r2, #160	@ 0xa0
 80036b8:	4393      	bics	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	621a      	str	r2, [r3, #32]
}
 80036d2:	46c0      	nop			@ (mov r8, r8)
 80036d4:	46bd      	mov	sp, r7
 80036d6:	b006      	add	sp, #24
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	46c0      	nop			@ (mov r8, r8)
 80036dc:	ffff0fff 	.word	0xffff0fff

080036e0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2270      	movs	r2, #112	@ 0x70
 80036f4:	4393      	bics	r3, r2
 80036f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	2207      	movs	r2, #7
 8003700:	4313      	orrs	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	609a      	str	r2, [r3, #8]
}
 800370a:	46c0      	nop			@ (mov r8, r8)
 800370c:	46bd      	mov	sp, r7
 800370e:	b004      	add	sp, #16
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
 8003720:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	4a09      	ldr	r2, [pc, #36]	@ (8003750 <TIM_ETR_SetConfig+0x3c>)
 800372c:	4013      	ands	r3, r2
 800372e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	021a      	lsls	r2, r3, #8
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	431a      	orrs	r2, r3
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	4313      	orrs	r3, r2
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	4313      	orrs	r3, r2
 8003740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	609a      	str	r2, [r3, #8]
}
 8003748:	46c0      	nop			@ (mov r8, r8)
 800374a:	46bd      	mov	sp, r7
 800374c:	b006      	add	sp, #24
 800374e:	bd80      	pop	{r7, pc}
 8003750:	ffff00ff 	.word	0xffff00ff

08003754 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2238      	movs	r2, #56	@ 0x38
 8003762:	5c9b      	ldrb	r3, [r3, r2]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003768:	2302      	movs	r3, #2
 800376a:	e03d      	b.n	80037e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2238      	movs	r2, #56	@ 0x38
 8003770:	2101      	movs	r1, #1
 8003772:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2239      	movs	r2, #57	@ 0x39
 8003778:	2102      	movs	r1, #2
 800377a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2270      	movs	r2, #112	@ 0x70
 8003790:	4393      	bics	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	2380      	movs	r3, #128	@ 0x80
 80037ac:	05db      	lsls	r3, r3, #23
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d004      	beq.n	80037bc <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a0e      	ldr	r2, [pc, #56]	@ (80037f0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d10c      	bne.n	80037d6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2280      	movs	r2, #128	@ 0x80
 80037c0:	4393      	bics	r3, r2
 80037c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2239      	movs	r2, #57	@ 0x39
 80037da:	2101      	movs	r1, #1
 80037dc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2238      	movs	r2, #56	@ 0x38
 80037e2:	2100      	movs	r1, #0
 80037e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	0018      	movs	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	b004      	add	sp, #16
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40010800 	.word	0x40010800

080037f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e044      	b.n	8003890 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800380a:	2b00      	cmp	r3, #0
 800380c:	d107      	bne.n	800381e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2278      	movs	r2, #120	@ 0x78
 8003812:	2100      	movs	r1, #0
 8003814:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	0018      	movs	r0, r3
 800381a:	f7fd fae9 	bl	8000df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2224      	movs	r2, #36	@ 0x24
 8003822:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2101      	movs	r1, #1
 8003830:	438a      	bics	r2, r1
 8003832:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	0018      	movs	r0, r3
 8003838:	f000 f830 	bl	800389c <UART_SetConfig>
 800383c:	0003      	movs	r3, r0
 800383e:	2b01      	cmp	r3, #1
 8003840:	d101      	bne.n	8003846 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e024      	b.n	8003890 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	0018      	movs	r0, r3
 8003852:	f000 fa6d 	bl	8003d30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	490d      	ldr	r1, [pc, #52]	@ (8003898 <HAL_UART_Init+0xa4>)
 8003862:	400a      	ands	r2, r1
 8003864:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	212a      	movs	r1, #42	@ 0x2a
 8003872:	438a      	bics	r2, r1
 8003874:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2101      	movs	r1, #1
 8003882:	430a      	orrs	r2, r1
 8003884:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	0018      	movs	r0, r3
 800388a:	f000 fb05 	bl	8003e98 <UART_CheckIdleState>
 800388e:	0003      	movs	r3, r0
}
 8003890:	0018      	movs	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	b002      	add	sp, #8
 8003896:	bd80      	pop	{r7, pc}
 8003898:	ffffb7ff 	.word	0xffffb7ff

0800389c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800389c:	b5b0      	push	{r4, r5, r7, lr}
 800389e:	b08e      	sub	sp, #56	@ 0x38
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038a4:	231a      	movs	r3, #26
 80038a6:	2218      	movs	r2, #24
 80038a8:	189b      	adds	r3, r3, r2
 80038aa:	19db      	adds	r3, r3, r7
 80038ac:	2200      	movs	r2, #0
 80038ae:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	431a      	orrs	r2, r3
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	431a      	orrs	r2, r3
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4ab4      	ldr	r2, [pc, #720]	@ (8003ba0 <UART_SetConfig+0x304>)
 80038d0:	4013      	ands	r3, r2
 80038d2:	0019      	movs	r1, r3
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038da:	430a      	orrs	r2, r1
 80038dc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	4aaf      	ldr	r2, [pc, #700]	@ (8003ba4 <UART_SetConfig+0x308>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	0019      	movs	r1, r3
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4aa9      	ldr	r2, [pc, #676]	@ (8003ba8 <UART_SetConfig+0x30c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d004      	beq.n	8003910 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800390c:	4313      	orrs	r3, r2
 800390e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	4aa5      	ldr	r2, [pc, #660]	@ (8003bac <UART_SetConfig+0x310>)
 8003918:	4013      	ands	r3, r2
 800391a:	0019      	movs	r1, r3
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003922:	430a      	orrs	r2, r1
 8003924:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4aa1      	ldr	r2, [pc, #644]	@ (8003bb0 <UART_SetConfig+0x314>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d131      	bne.n	8003994 <UART_SetConfig+0xf8>
 8003930:	4ba0      	ldr	r3, [pc, #640]	@ (8003bb4 <UART_SetConfig+0x318>)
 8003932:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003934:	220c      	movs	r2, #12
 8003936:	4013      	ands	r3, r2
 8003938:	2b0c      	cmp	r3, #12
 800393a:	d01d      	beq.n	8003978 <UART_SetConfig+0xdc>
 800393c:	d823      	bhi.n	8003986 <UART_SetConfig+0xea>
 800393e:	2b08      	cmp	r3, #8
 8003940:	d00c      	beq.n	800395c <UART_SetConfig+0xc0>
 8003942:	d820      	bhi.n	8003986 <UART_SetConfig+0xea>
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <UART_SetConfig+0xb2>
 8003948:	2b04      	cmp	r3, #4
 800394a:	d00e      	beq.n	800396a <UART_SetConfig+0xce>
 800394c:	e01b      	b.n	8003986 <UART_SetConfig+0xea>
 800394e:	231b      	movs	r3, #27
 8003950:	2218      	movs	r2, #24
 8003952:	189b      	adds	r3, r3, r2
 8003954:	19db      	adds	r3, r3, r7
 8003956:	2200      	movs	r2, #0
 8003958:	701a      	strb	r2, [r3, #0]
 800395a:	e065      	b.n	8003a28 <UART_SetConfig+0x18c>
 800395c:	231b      	movs	r3, #27
 800395e:	2218      	movs	r2, #24
 8003960:	189b      	adds	r3, r3, r2
 8003962:	19db      	adds	r3, r3, r7
 8003964:	2202      	movs	r2, #2
 8003966:	701a      	strb	r2, [r3, #0]
 8003968:	e05e      	b.n	8003a28 <UART_SetConfig+0x18c>
 800396a:	231b      	movs	r3, #27
 800396c:	2218      	movs	r2, #24
 800396e:	189b      	adds	r3, r3, r2
 8003970:	19db      	adds	r3, r3, r7
 8003972:	2204      	movs	r2, #4
 8003974:	701a      	strb	r2, [r3, #0]
 8003976:	e057      	b.n	8003a28 <UART_SetConfig+0x18c>
 8003978:	231b      	movs	r3, #27
 800397a:	2218      	movs	r2, #24
 800397c:	189b      	adds	r3, r3, r2
 800397e:	19db      	adds	r3, r3, r7
 8003980:	2208      	movs	r2, #8
 8003982:	701a      	strb	r2, [r3, #0]
 8003984:	e050      	b.n	8003a28 <UART_SetConfig+0x18c>
 8003986:	231b      	movs	r3, #27
 8003988:	2218      	movs	r2, #24
 800398a:	189b      	adds	r3, r3, r2
 800398c:	19db      	adds	r3, r3, r7
 800398e:	2210      	movs	r2, #16
 8003990:	701a      	strb	r2, [r3, #0]
 8003992:	e049      	b.n	8003a28 <UART_SetConfig+0x18c>
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a83      	ldr	r2, [pc, #524]	@ (8003ba8 <UART_SetConfig+0x30c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d13e      	bne.n	8003a1c <UART_SetConfig+0x180>
 800399e:	4b85      	ldr	r3, [pc, #532]	@ (8003bb4 <UART_SetConfig+0x318>)
 80039a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80039a2:	23c0      	movs	r3, #192	@ 0xc0
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	4013      	ands	r3, r2
 80039a8:	22c0      	movs	r2, #192	@ 0xc0
 80039aa:	0112      	lsls	r2, r2, #4
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d027      	beq.n	8003a00 <UART_SetConfig+0x164>
 80039b0:	22c0      	movs	r2, #192	@ 0xc0
 80039b2:	0112      	lsls	r2, r2, #4
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d82a      	bhi.n	8003a0e <UART_SetConfig+0x172>
 80039b8:	2280      	movs	r2, #128	@ 0x80
 80039ba:	0112      	lsls	r2, r2, #4
 80039bc:	4293      	cmp	r3, r2
 80039be:	d011      	beq.n	80039e4 <UART_SetConfig+0x148>
 80039c0:	2280      	movs	r2, #128	@ 0x80
 80039c2:	0112      	lsls	r2, r2, #4
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d822      	bhi.n	8003a0e <UART_SetConfig+0x172>
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d004      	beq.n	80039d6 <UART_SetConfig+0x13a>
 80039cc:	2280      	movs	r2, #128	@ 0x80
 80039ce:	00d2      	lsls	r2, r2, #3
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d00e      	beq.n	80039f2 <UART_SetConfig+0x156>
 80039d4:	e01b      	b.n	8003a0e <UART_SetConfig+0x172>
 80039d6:	231b      	movs	r3, #27
 80039d8:	2218      	movs	r2, #24
 80039da:	189b      	adds	r3, r3, r2
 80039dc:	19db      	adds	r3, r3, r7
 80039de:	2200      	movs	r2, #0
 80039e0:	701a      	strb	r2, [r3, #0]
 80039e2:	e021      	b.n	8003a28 <UART_SetConfig+0x18c>
 80039e4:	231b      	movs	r3, #27
 80039e6:	2218      	movs	r2, #24
 80039e8:	189b      	adds	r3, r3, r2
 80039ea:	19db      	adds	r3, r3, r7
 80039ec:	2202      	movs	r2, #2
 80039ee:	701a      	strb	r2, [r3, #0]
 80039f0:	e01a      	b.n	8003a28 <UART_SetConfig+0x18c>
 80039f2:	231b      	movs	r3, #27
 80039f4:	2218      	movs	r2, #24
 80039f6:	189b      	adds	r3, r3, r2
 80039f8:	19db      	adds	r3, r3, r7
 80039fa:	2204      	movs	r2, #4
 80039fc:	701a      	strb	r2, [r3, #0]
 80039fe:	e013      	b.n	8003a28 <UART_SetConfig+0x18c>
 8003a00:	231b      	movs	r3, #27
 8003a02:	2218      	movs	r2, #24
 8003a04:	189b      	adds	r3, r3, r2
 8003a06:	19db      	adds	r3, r3, r7
 8003a08:	2208      	movs	r2, #8
 8003a0a:	701a      	strb	r2, [r3, #0]
 8003a0c:	e00c      	b.n	8003a28 <UART_SetConfig+0x18c>
 8003a0e:	231b      	movs	r3, #27
 8003a10:	2218      	movs	r2, #24
 8003a12:	189b      	adds	r3, r3, r2
 8003a14:	19db      	adds	r3, r3, r7
 8003a16:	2210      	movs	r2, #16
 8003a18:	701a      	strb	r2, [r3, #0]
 8003a1a:	e005      	b.n	8003a28 <UART_SetConfig+0x18c>
 8003a1c:	231b      	movs	r3, #27
 8003a1e:	2218      	movs	r2, #24
 8003a20:	189b      	adds	r3, r3, r2
 8003a22:	19db      	adds	r3, r3, r7
 8003a24:	2210      	movs	r2, #16
 8003a26:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a5e      	ldr	r2, [pc, #376]	@ (8003ba8 <UART_SetConfig+0x30c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d000      	beq.n	8003a34 <UART_SetConfig+0x198>
 8003a32:	e084      	b.n	8003b3e <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a34:	231b      	movs	r3, #27
 8003a36:	2218      	movs	r2, #24
 8003a38:	189b      	adds	r3, r3, r2
 8003a3a:	19db      	adds	r3, r3, r7
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d01d      	beq.n	8003a7e <UART_SetConfig+0x1e2>
 8003a42:	dc20      	bgt.n	8003a86 <UART_SetConfig+0x1ea>
 8003a44:	2b04      	cmp	r3, #4
 8003a46:	d015      	beq.n	8003a74 <UART_SetConfig+0x1d8>
 8003a48:	dc1d      	bgt.n	8003a86 <UART_SetConfig+0x1ea>
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <UART_SetConfig+0x1b8>
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d005      	beq.n	8003a5e <UART_SetConfig+0x1c2>
 8003a52:	e018      	b.n	8003a86 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a54:	f7fe fd9e 	bl	8002594 <HAL_RCC_GetPCLK1Freq>
 8003a58:	0003      	movs	r3, r0
 8003a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003a5c:	e01c      	b.n	8003a98 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a5e:	4b55      	ldr	r3, [pc, #340]	@ (8003bb4 <UART_SetConfig+0x318>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2210      	movs	r2, #16
 8003a64:	4013      	ands	r3, r2
 8003a66:	d002      	beq.n	8003a6e <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003a68:	4b53      	ldr	r3, [pc, #332]	@ (8003bb8 <UART_SetConfig+0x31c>)
 8003a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003a6c:	e014      	b.n	8003a98 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8003a6e:	4b53      	ldr	r3, [pc, #332]	@ (8003bbc <UART_SetConfig+0x320>)
 8003a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003a72:	e011      	b.n	8003a98 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a74:	f7fe fcde 	bl	8002434 <HAL_RCC_GetSysClockFreq>
 8003a78:	0003      	movs	r3, r0
 8003a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003a7c:	e00c      	b.n	8003a98 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a7e:	2380      	movs	r3, #128	@ 0x80
 8003a80:	021b      	lsls	r3, r3, #8
 8003a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003a84:	e008      	b.n	8003a98 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003a8a:	231a      	movs	r3, #26
 8003a8c:	2218      	movs	r2, #24
 8003a8e:	189b      	adds	r3, r3, r2
 8003a90:	19db      	adds	r3, r3, r7
 8003a92:	2201      	movs	r2, #1
 8003a94:	701a      	strb	r2, [r3, #0]
        break;
 8003a96:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d100      	bne.n	8003aa0 <UART_SetConfig+0x204>
 8003a9e:	e12f      	b.n	8003d00 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	0013      	movs	r3, r2
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	189b      	adds	r3, r3, r2
 8003aaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d305      	bcc.n	8003abc <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ab6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d906      	bls.n	8003aca <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8003abc:	231a      	movs	r3, #26
 8003abe:	2218      	movs	r2, #24
 8003ac0:	189b      	adds	r3, r3, r2
 8003ac2:	19db      	adds	r3, r3, r7
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	701a      	strb	r2, [r3, #0]
 8003ac8:	e11a      	b.n	8003d00 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003acc:	613b      	str	r3, [r7, #16]
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]
 8003ad2:	6939      	ldr	r1, [r7, #16]
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	000b      	movs	r3, r1
 8003ad8:	0e1b      	lsrs	r3, r3, #24
 8003ada:	0010      	movs	r0, r2
 8003adc:	0205      	lsls	r5, r0, #8
 8003ade:	431d      	orrs	r5, r3
 8003ae0:	000b      	movs	r3, r1
 8003ae2:	021c      	lsls	r4, r3, #8
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	085b      	lsrs	r3, r3, #1
 8003aea:	60bb      	str	r3, [r7, #8]
 8003aec:	2300      	movs	r3, #0
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	68b8      	ldr	r0, [r7, #8]
 8003af2:	68f9      	ldr	r1, [r7, #12]
 8003af4:	1900      	adds	r0, r0, r4
 8003af6:	4169      	adcs	r1, r5
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	603b      	str	r3, [r7, #0]
 8003afe:	2300      	movs	r3, #0
 8003b00:	607b      	str	r3, [r7, #4]
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f7fc fb8b 	bl	8000220 <__aeabi_uldivmod>
 8003b0a:	0002      	movs	r2, r0
 8003b0c:	000b      	movs	r3, r1
 8003b0e:	0013      	movs	r3, r2
 8003b10:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b14:	23c0      	movs	r3, #192	@ 0xc0
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d309      	bcc.n	8003b30 <UART_SetConfig+0x294>
 8003b1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b1e:	2380      	movs	r3, #128	@ 0x80
 8003b20:	035b      	lsls	r3, r3, #13
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d204      	bcs.n	8003b30 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b2c:	60da      	str	r2, [r3, #12]
 8003b2e:	e0e7      	b.n	8003d00 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8003b30:	231a      	movs	r3, #26
 8003b32:	2218      	movs	r2, #24
 8003b34:	189b      	adds	r3, r3, r2
 8003b36:	19db      	adds	r3, r3, r7
 8003b38:	2201      	movs	r2, #1
 8003b3a:	701a      	strb	r2, [r3, #0]
 8003b3c:	e0e0      	b.n	8003d00 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	69da      	ldr	r2, [r3, #28]
 8003b42:	2380      	movs	r3, #128	@ 0x80
 8003b44:	021b      	lsls	r3, r3, #8
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d000      	beq.n	8003b4c <UART_SetConfig+0x2b0>
 8003b4a:	e082      	b.n	8003c52 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8003b4c:	231b      	movs	r3, #27
 8003b4e:	2218      	movs	r2, #24
 8003b50:	189b      	adds	r3, r3, r2
 8003b52:	19db      	adds	r3, r3, r7
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d834      	bhi.n	8003bc4 <UART_SetConfig+0x328>
 8003b5a:	009a      	lsls	r2, r3, #2
 8003b5c:	4b18      	ldr	r3, [pc, #96]	@ (8003bc0 <UART_SetConfig+0x324>)
 8003b5e:	18d3      	adds	r3, r2, r3
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b64:	f7fe fd16 	bl	8002594 <HAL_RCC_GetPCLK1Freq>
 8003b68:	0003      	movs	r3, r0
 8003b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003b6c:	e033      	b.n	8003bd6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b6e:	f7fe fd27 	bl	80025c0 <HAL_RCC_GetPCLK2Freq>
 8003b72:	0003      	movs	r3, r0
 8003b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003b76:	e02e      	b.n	8003bd6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b78:	4b0e      	ldr	r3, [pc, #56]	@ (8003bb4 <UART_SetConfig+0x318>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2210      	movs	r2, #16
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d002      	beq.n	8003b88 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003b82:	4b0d      	ldr	r3, [pc, #52]	@ (8003bb8 <UART_SetConfig+0x31c>)
 8003b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003b86:	e026      	b.n	8003bd6 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8003b88:	4b0c      	ldr	r3, [pc, #48]	@ (8003bbc <UART_SetConfig+0x320>)
 8003b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003b8c:	e023      	b.n	8003bd6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b8e:	f7fe fc51 	bl	8002434 <HAL_RCC_GetSysClockFreq>
 8003b92:	0003      	movs	r3, r0
 8003b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003b96:	e01e      	b.n	8003bd6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b98:	2380      	movs	r3, #128	@ 0x80
 8003b9a:	021b      	lsls	r3, r3, #8
 8003b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003b9e:	e01a      	b.n	8003bd6 <UART_SetConfig+0x33a>
 8003ba0:	efff69f3 	.word	0xefff69f3
 8003ba4:	ffffcfff 	.word	0xffffcfff
 8003ba8:	40004800 	.word	0x40004800
 8003bac:	fffff4ff 	.word	0xfffff4ff
 8003bb0:	40004400 	.word	0x40004400
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	003d0900 	.word	0x003d0900
 8003bbc:	00f42400 	.word	0x00f42400
 8003bc0:	08004218 	.word	0x08004218
      default:
        pclk = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003bc8:	231a      	movs	r3, #26
 8003bca:	2218      	movs	r2, #24
 8003bcc:	189b      	adds	r3, r3, r2
 8003bce:	19db      	adds	r3, r3, r7
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	701a      	strb	r2, [r3, #0]
        break;
 8003bd4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d100      	bne.n	8003bde <UART_SetConfig+0x342>
 8003bdc:	e090      	b.n	8003d00 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003be0:	005a      	lsls	r2, r3, #1
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	085b      	lsrs	r3, r3, #1
 8003be8:	18d2      	adds	r2, r2, r3
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	0019      	movs	r1, r3
 8003bf0:	0010      	movs	r0, r2
 8003bf2:	f7fc fa89 	bl	8000108 <__udivsi3>
 8003bf6:	0003      	movs	r3, r0
 8003bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bfc:	2b0f      	cmp	r3, #15
 8003bfe:	d921      	bls.n	8003c44 <UART_SetConfig+0x3a8>
 8003c00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c02:	2380      	movs	r3, #128	@ 0x80
 8003c04:	025b      	lsls	r3, r3, #9
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d21c      	bcs.n	8003c44 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	200e      	movs	r0, #14
 8003c10:	2418      	movs	r4, #24
 8003c12:	1903      	adds	r3, r0, r4
 8003c14:	19db      	adds	r3, r3, r7
 8003c16:	210f      	movs	r1, #15
 8003c18:	438a      	bics	r2, r1
 8003c1a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c1e:	085b      	lsrs	r3, r3, #1
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2207      	movs	r2, #7
 8003c24:	4013      	ands	r3, r2
 8003c26:	b299      	uxth	r1, r3
 8003c28:	1903      	adds	r3, r0, r4
 8003c2a:	19db      	adds	r3, r3, r7
 8003c2c:	1902      	adds	r2, r0, r4
 8003c2e:	19d2      	adds	r2, r2, r7
 8003c30:	8812      	ldrh	r2, [r2, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	1902      	adds	r2, r0, r4
 8003c3c:	19d2      	adds	r2, r2, r7
 8003c3e:	8812      	ldrh	r2, [r2, #0]
 8003c40:	60da      	str	r2, [r3, #12]
 8003c42:	e05d      	b.n	8003d00 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003c44:	231a      	movs	r3, #26
 8003c46:	2218      	movs	r2, #24
 8003c48:	189b      	adds	r3, r3, r2
 8003c4a:	19db      	adds	r3, r3, r7
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	701a      	strb	r2, [r3, #0]
 8003c50:	e056      	b.n	8003d00 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c52:	231b      	movs	r3, #27
 8003c54:	2218      	movs	r2, #24
 8003c56:	189b      	adds	r3, r3, r2
 8003c58:	19db      	adds	r3, r3, r7
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d822      	bhi.n	8003ca6 <UART_SetConfig+0x40a>
 8003c60:	009a      	lsls	r2, r3, #2
 8003c62:	4b2f      	ldr	r3, [pc, #188]	@ (8003d20 <UART_SetConfig+0x484>)
 8003c64:	18d3      	adds	r3, r2, r3
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c6a:	f7fe fc93 	bl	8002594 <HAL_RCC_GetPCLK1Freq>
 8003c6e:	0003      	movs	r3, r0
 8003c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003c72:	e021      	b.n	8003cb8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c74:	f7fe fca4 	bl	80025c0 <HAL_RCC_GetPCLK2Freq>
 8003c78:	0003      	movs	r3, r0
 8003c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003c7c:	e01c      	b.n	8003cb8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c7e:	4b29      	ldr	r3, [pc, #164]	@ (8003d24 <UART_SetConfig+0x488>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2210      	movs	r2, #16
 8003c84:	4013      	ands	r3, r2
 8003c86:	d002      	beq.n	8003c8e <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003c88:	4b27      	ldr	r3, [pc, #156]	@ (8003d28 <UART_SetConfig+0x48c>)
 8003c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003c8c:	e014      	b.n	8003cb8 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8003c8e:	4b27      	ldr	r3, [pc, #156]	@ (8003d2c <UART_SetConfig+0x490>)
 8003c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003c92:	e011      	b.n	8003cb8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c94:	f7fe fbce 	bl	8002434 <HAL_RCC_GetSysClockFreq>
 8003c98:	0003      	movs	r3, r0
 8003c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003c9c:	e00c      	b.n	8003cb8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c9e:	2380      	movs	r3, #128	@ 0x80
 8003ca0:	021b      	lsls	r3, r3, #8
 8003ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003ca4:	e008      	b.n	8003cb8 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003caa:	231a      	movs	r3, #26
 8003cac:	2218      	movs	r2, #24
 8003cae:	189b      	adds	r3, r3, r2
 8003cb0:	19db      	adds	r3, r3, r7
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	701a      	strb	r2, [r3, #0]
        break;
 8003cb6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d020      	beq.n	8003d00 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	085a      	lsrs	r2, r3, #1
 8003cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc6:	18d2      	adds	r2, r2, r3
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	0019      	movs	r1, r3
 8003cce:	0010      	movs	r0, r2
 8003cd0:	f7fc fa1a 	bl	8000108 <__udivsi3>
 8003cd4:	0003      	movs	r3, r0
 8003cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cda:	2b0f      	cmp	r3, #15
 8003cdc:	d90a      	bls.n	8003cf4 <UART_SetConfig+0x458>
 8003cde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ce0:	2380      	movs	r3, #128	@ 0x80
 8003ce2:	025b      	lsls	r3, r3, #9
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d205      	bcs.n	8003cf4 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	60da      	str	r2, [r3, #12]
 8003cf2:	e005      	b.n	8003d00 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003cf4:	231a      	movs	r3, #26
 8003cf6:	2218      	movs	r2, #24
 8003cf8:	189b      	adds	r3, r3, r2
 8003cfa:	19db      	adds	r3, r3, r7
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	2200      	movs	r2, #0
 8003d04:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003d0c:	231a      	movs	r3, #26
 8003d0e:	2218      	movs	r2, #24
 8003d10:	189b      	adds	r3, r3, r2
 8003d12:	19db      	adds	r3, r3, r7
 8003d14:	781b      	ldrb	r3, [r3, #0]
}
 8003d16:	0018      	movs	r0, r3
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	b00e      	add	sp, #56	@ 0x38
 8003d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8003d1e:	46c0      	nop			@ (mov r8, r8)
 8003d20:	0800423c 	.word	0x0800423c
 8003d24:	40021000 	.word	0x40021000
 8003d28:	003d0900 	.word	0x003d0900
 8003d2c:	00f42400 	.word	0x00f42400

08003d30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d00b      	beq.n	8003d5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	4a4a      	ldr	r2, [pc, #296]	@ (8003e74 <UART_AdvFeatureConfig+0x144>)
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	0019      	movs	r1, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5e:	2202      	movs	r2, #2
 8003d60:	4013      	ands	r3, r2
 8003d62:	d00b      	beq.n	8003d7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	4a43      	ldr	r2, [pc, #268]	@ (8003e78 <UART_AdvFeatureConfig+0x148>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	0019      	movs	r1, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d80:	2204      	movs	r2, #4
 8003d82:	4013      	ands	r3, r2
 8003d84:	d00b      	beq.n	8003d9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	4a3b      	ldr	r2, [pc, #236]	@ (8003e7c <UART_AdvFeatureConfig+0x14c>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	0019      	movs	r1, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da2:	2208      	movs	r2, #8
 8003da4:	4013      	ands	r3, r2
 8003da6:	d00b      	beq.n	8003dc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	4a34      	ldr	r2, [pc, #208]	@ (8003e80 <UART_AdvFeatureConfig+0x150>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	0019      	movs	r1, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc4:	2210      	movs	r2, #16
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	d00b      	beq.n	8003de2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	4a2c      	ldr	r2, [pc, #176]	@ (8003e84 <UART_AdvFeatureConfig+0x154>)
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	0019      	movs	r1, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de6:	2220      	movs	r2, #32
 8003de8:	4013      	ands	r3, r2
 8003dea:	d00b      	beq.n	8003e04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	4a25      	ldr	r2, [pc, #148]	@ (8003e88 <UART_AdvFeatureConfig+0x158>)
 8003df4:	4013      	ands	r3, r2
 8003df6:	0019      	movs	r1, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e08:	2240      	movs	r2, #64	@ 0x40
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	d01d      	beq.n	8003e4a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	4a1d      	ldr	r2, [pc, #116]	@ (8003e8c <UART_AdvFeatureConfig+0x15c>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	0019      	movs	r1, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e2a:	2380      	movs	r3, #128	@ 0x80
 8003e2c:	035b      	lsls	r3, r3, #13
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d10b      	bne.n	8003e4a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	4a15      	ldr	r2, [pc, #84]	@ (8003e90 <UART_AdvFeatureConfig+0x160>)
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	0019      	movs	r1, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4e:	2280      	movs	r2, #128	@ 0x80
 8003e50:	4013      	ands	r3, r2
 8003e52:	d00b      	beq.n	8003e6c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	4a0e      	ldr	r2, [pc, #56]	@ (8003e94 <UART_AdvFeatureConfig+0x164>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	0019      	movs	r1, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	605a      	str	r2, [r3, #4]
  }
}
 8003e6c:	46c0      	nop			@ (mov r8, r8)
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	b002      	add	sp, #8
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	fffdffff 	.word	0xfffdffff
 8003e78:	fffeffff 	.word	0xfffeffff
 8003e7c:	fffbffff 	.word	0xfffbffff
 8003e80:	ffff7fff 	.word	0xffff7fff
 8003e84:	ffffefff 	.word	0xffffefff
 8003e88:	ffffdfff 	.word	0xffffdfff
 8003e8c:	ffefffff 	.word	0xffefffff
 8003e90:	ff9fffff 	.word	0xff9fffff
 8003e94:	fff7ffff 	.word	0xfff7ffff

08003e98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b092      	sub	sp, #72	@ 0x48
 8003e9c:	af02      	add	r7, sp, #8
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2284      	movs	r2, #132	@ 0x84
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ea8:	f7fd f8ac 	bl	8001004 <HAL_GetTick>
 8003eac:	0003      	movs	r3, r0
 8003eae:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2208      	movs	r2, #8
 8003eb8:	4013      	ands	r3, r2
 8003eba:	2b08      	cmp	r3, #8
 8003ebc:	d12c      	bne.n	8003f18 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ec0:	2280      	movs	r2, #128	@ 0x80
 8003ec2:	0391      	lsls	r1, r2, #14
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	4a46      	ldr	r2, [pc, #280]	@ (8003fe0 <UART_CheckIdleState+0x148>)
 8003ec8:	9200      	str	r2, [sp, #0]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f000 f88c 	bl	8003fe8 <UART_WaitOnFlagUntilTimeout>
 8003ed0:	1e03      	subs	r3, r0, #0
 8003ed2:	d021      	beq.n	8003f18 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003edc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ede:	2301      	movs	r3, #1
 8003ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee4:	f383 8810 	msr	PRIMASK, r3
}
 8003ee8:	46c0      	nop			@ (mov r8, r8)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2180      	movs	r1, #128	@ 0x80
 8003ef6:	438a      	bics	r2, r1
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f00:	f383 8810 	msr	PRIMASK, r3
}
 8003f04:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2278      	movs	r2, #120	@ 0x78
 8003f10:	2100      	movs	r1, #0
 8003f12:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e05f      	b.n	8003fd8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2204      	movs	r2, #4
 8003f20:	4013      	ands	r3, r2
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d146      	bne.n	8003fb4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f28:	2280      	movs	r2, #128	@ 0x80
 8003f2a:	03d1      	lsls	r1, r2, #15
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	4a2c      	ldr	r2, [pc, #176]	@ (8003fe0 <UART_CheckIdleState+0x148>)
 8003f30:	9200      	str	r2, [sp, #0]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f000 f858 	bl	8003fe8 <UART_WaitOnFlagUntilTimeout>
 8003f38:	1e03      	subs	r3, r0, #0
 8003f3a:	d03b      	beq.n	8003fb4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f3c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f40:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f42:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f44:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f46:	2301      	movs	r3, #1
 8003f48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f383 8810 	msr	PRIMASK, r3
}
 8003f50:	46c0      	nop			@ (mov r8, r8)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4921      	ldr	r1, [pc, #132]	@ (8003fe4 <UART_CheckIdleState+0x14c>)
 8003f5e:	400a      	ands	r2, r1
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f383 8810 	msr	PRIMASK, r3
}
 8003f6c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f72:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f74:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f76:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f78:	2301      	movs	r3, #1
 8003f7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f383 8810 	msr	PRIMASK, r3
}
 8003f82:	46c0      	nop			@ (mov r8, r8)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689a      	ldr	r2, [r3, #8]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2101      	movs	r1, #1
 8003f90:	438a      	bics	r2, r1
 8003f92:	609a      	str	r2, [r3, #8]
 8003f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f96:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	f383 8810 	msr	PRIMASK, r3
}
 8003f9e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2280      	movs	r2, #128	@ 0x80
 8003fa4:	2120      	movs	r1, #32
 8003fa6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2278      	movs	r2, #120	@ 0x78
 8003fac:	2100      	movs	r1, #0
 8003fae:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e011      	b.n	8003fd8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2280      	movs	r2, #128	@ 0x80
 8003fbe:	2120      	movs	r1, #32
 8003fc0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2278      	movs	r2, #120	@ 0x78
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	0018      	movs	r0, r3
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	b010      	add	sp, #64	@ 0x40
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	01ffffff 	.word	0x01ffffff
 8003fe4:	fffffedf 	.word	0xfffffedf

08003fe8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	603b      	str	r3, [r7, #0]
 8003ff4:	1dfb      	adds	r3, r7, #7
 8003ff6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff8:	e04b      	b.n	8004092 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	d048      	beq.n	8004092 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004000:	f7fd f800 	bl	8001004 <HAL_GetTick>
 8004004:	0002      	movs	r2, r0
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	429a      	cmp	r2, r3
 800400e:	d302      	bcc.n	8004016 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e04b      	b.n	80040b2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2204      	movs	r2, #4
 8004022:	4013      	ands	r3, r2
 8004024:	d035      	beq.n	8004092 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	2208      	movs	r2, #8
 800402e:	4013      	ands	r3, r2
 8004030:	2b08      	cmp	r3, #8
 8004032:	d111      	bne.n	8004058 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2208      	movs	r2, #8
 800403a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	0018      	movs	r0, r3
 8004040:	f000 f83c 	bl	80040bc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2284      	movs	r2, #132	@ 0x84
 8004048:	2108      	movs	r1, #8
 800404a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2278      	movs	r2, #120	@ 0x78
 8004050:	2100      	movs	r1, #0
 8004052:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e02c      	b.n	80040b2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	69da      	ldr	r2, [r3, #28]
 800405e:	2380      	movs	r3, #128	@ 0x80
 8004060:	011b      	lsls	r3, r3, #4
 8004062:	401a      	ands	r2, r3
 8004064:	2380      	movs	r3, #128	@ 0x80
 8004066:	011b      	lsls	r3, r3, #4
 8004068:	429a      	cmp	r2, r3
 800406a:	d112      	bne.n	8004092 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2280      	movs	r2, #128	@ 0x80
 8004072:	0112      	lsls	r2, r2, #4
 8004074:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	0018      	movs	r0, r3
 800407a:	f000 f81f 	bl	80040bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2284      	movs	r2, #132	@ 0x84
 8004082:	2120      	movs	r1, #32
 8004084:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2278      	movs	r2, #120	@ 0x78
 800408a:	2100      	movs	r1, #0
 800408c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e00f      	b.n	80040b2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	4013      	ands	r3, r2
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	425a      	negs	r2, r3
 80040a2:	4153      	adcs	r3, r2
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	001a      	movs	r2, r3
 80040a8:	1dfb      	adds	r3, r7, #7
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d0a4      	beq.n	8003ffa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	0018      	movs	r0, r3
 80040b4:	46bd      	mov	sp, r7
 80040b6:	b004      	add	sp, #16
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08e      	sub	sp, #56	@ 0x38
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040c4:	f3ef 8310 	mrs	r3, PRIMASK
 80040c8:	617b      	str	r3, [r7, #20]
  return(result);
 80040ca:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80040ce:	2301      	movs	r3, #1
 80040d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	f383 8810 	msr	PRIMASK, r3
}
 80040d8:	46c0      	nop			@ (mov r8, r8)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4926      	ldr	r1, [pc, #152]	@ (8004180 <UART_EndRxTransfer+0xc4>)
 80040e6:	400a      	ands	r2, r1
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	f383 8810 	msr	PRIMASK, r3
}
 80040f4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040f6:	f3ef 8310 	mrs	r3, PRIMASK
 80040fa:	623b      	str	r3, [r7, #32]
  return(result);
 80040fc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8004100:	2301      	movs	r3, #1
 8004102:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004106:	f383 8810 	msr	PRIMASK, r3
}
 800410a:	46c0      	nop			@ (mov r8, r8)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689a      	ldr	r2, [r3, #8]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2101      	movs	r1, #1
 8004118:	438a      	bics	r2, r1
 800411a:	609a      	str	r2, [r3, #8]
 800411c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004122:	f383 8810 	msr	PRIMASK, r3
}
 8004126:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800412c:	2b01      	cmp	r3, #1
 800412e:	d118      	bne.n	8004162 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004130:	f3ef 8310 	mrs	r3, PRIMASK
 8004134:	60bb      	str	r3, [r7, #8]
  return(result);
 8004136:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004138:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800413a:	2301      	movs	r3, #1
 800413c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f383 8810 	msr	PRIMASK, r3
}
 8004144:	46c0      	nop			@ (mov r8, r8)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2110      	movs	r1, #16
 8004152:	438a      	bics	r2, r1
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004158:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	f383 8810 	msr	PRIMASK, r3
}
 8004160:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2280      	movs	r2, #128	@ 0x80
 8004166:	2120      	movs	r1, #32
 8004168:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004176:	46c0      	nop			@ (mov r8, r8)
 8004178:	46bd      	mov	sp, r7
 800417a:	b00e      	add	sp, #56	@ 0x38
 800417c:	bd80      	pop	{r7, pc}
 800417e:	46c0      	nop			@ (mov r8, r8)
 8004180:	fffffedf 	.word	0xfffffedf

08004184 <memset>:
 8004184:	0003      	movs	r3, r0
 8004186:	1882      	adds	r2, r0, r2
 8004188:	4293      	cmp	r3, r2
 800418a:	d100      	bne.n	800418e <memset+0xa>
 800418c:	4770      	bx	lr
 800418e:	7019      	strb	r1, [r3, #0]
 8004190:	3301      	adds	r3, #1
 8004192:	e7f9      	b.n	8004188 <memset+0x4>

08004194 <__libc_init_array>:
 8004194:	b570      	push	{r4, r5, r6, lr}
 8004196:	2600      	movs	r6, #0
 8004198:	4c0c      	ldr	r4, [pc, #48]	@ (80041cc <__libc_init_array+0x38>)
 800419a:	4d0d      	ldr	r5, [pc, #52]	@ (80041d0 <__libc_init_array+0x3c>)
 800419c:	1b64      	subs	r4, r4, r5
 800419e:	10a4      	asrs	r4, r4, #2
 80041a0:	42a6      	cmp	r6, r4
 80041a2:	d109      	bne.n	80041b8 <__libc_init_array+0x24>
 80041a4:	2600      	movs	r6, #0
 80041a6:	f000 f819 	bl	80041dc <_init>
 80041aa:	4c0a      	ldr	r4, [pc, #40]	@ (80041d4 <__libc_init_array+0x40>)
 80041ac:	4d0a      	ldr	r5, [pc, #40]	@ (80041d8 <__libc_init_array+0x44>)
 80041ae:	1b64      	subs	r4, r4, r5
 80041b0:	10a4      	asrs	r4, r4, #2
 80041b2:	42a6      	cmp	r6, r4
 80041b4:	d105      	bne.n	80041c2 <__libc_init_array+0x2e>
 80041b6:	bd70      	pop	{r4, r5, r6, pc}
 80041b8:	00b3      	lsls	r3, r6, #2
 80041ba:	58eb      	ldr	r3, [r5, r3]
 80041bc:	4798      	blx	r3
 80041be:	3601      	adds	r6, #1
 80041c0:	e7ee      	b.n	80041a0 <__libc_init_array+0xc>
 80041c2:	00b3      	lsls	r3, r6, #2
 80041c4:	58eb      	ldr	r3, [r5, r3]
 80041c6:	4798      	blx	r3
 80041c8:	3601      	adds	r6, #1
 80041ca:	e7f2      	b.n	80041b2 <__libc_init_array+0x1e>
 80041cc:	08004268 	.word	0x08004268
 80041d0:	08004268 	.word	0x08004268
 80041d4:	0800426c 	.word	0x0800426c
 80041d8:	08004268 	.word	0x08004268

080041dc <_init>:
 80041dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041de:	46c0      	nop			@ (mov r8, r8)
 80041e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041e2:	bc08      	pop	{r3}
 80041e4:	469e      	mov	lr, r3
 80041e6:	4770      	bx	lr

080041e8 <_fini>:
 80041e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ea:	46c0      	nop			@ (mov r8, r8)
 80041ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ee:	bc08      	pop	{r3}
 80041f0:	469e      	mov	lr, r3
 80041f2:	4770      	bx	lr

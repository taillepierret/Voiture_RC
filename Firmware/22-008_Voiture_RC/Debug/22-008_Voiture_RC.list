
22-008_Voiture_RC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004904  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080049c4  080049c4  000149c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a40  08004a40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a40  08004a40  00014a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a48  08004a48  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a48  08004a48  00014a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a4c  08004a4c  00014a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  2000000c  08004a5c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08004a5c  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000114c3  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002478  00000000  00000000  0003153a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d0  00000000  00000000  000339b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d3b  00000000  00000000  00034a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000022d2  00000000  00000000  000357c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001424a  00000000  00000000  00037a95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006dac9  00000000  00000000  0004bcdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003dc4  00000000  00000000  000b97a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000bd56c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080049ac 	.word	0x080049ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080049ac 	.word	0x080049ac

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b08a      	sub	sp, #40	; 0x28
 80004ac:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004ae:	f000 fe8b 	bl	80011c8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004b2:	f000 f81d 	bl	80004f0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004b6:	f000 fa1f 	bl	80008f8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80004ba:	f000 f9ed 	bl	8000898 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 80004be:	f000 f961 	bl	8000784 <MX_TIM2_Init>
	MX_ADC_Init();
 80004c2:	f000 f883 	bl	80005cc <MX_ADC_Init>
	MX_SPI1_Init();
 80004c6:	f000 f925 	bl	8000714 <MX_SPI1_Init>
	MX_I2C1_Init();
 80004ca:	f000 f8e5 	bl	8000698 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	NRF24_Init();
 80004ce:	f000 fc21 	bl	8000d14 <NRF24_Init>
	uint8_t data[40] = {0};
 80004d2:	003b      	movs	r3, r7
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	3304      	adds	r3, #4
 80004da:	2224      	movs	r2, #36	; 0x24
 80004dc:	2100      	movs	r1, #0
 80004de:	0018      	movs	r0, r3
 80004e0:	f004 fa38 	bl	8004954 <memset>
	while (1) {
		NRF24_ReadAll (data);
 80004e4:	003b      	movs	r3, r7
 80004e6:	0018      	movs	r0, r3
 80004e8:	f000 fc3c 	bl	8000d64 <NRF24_ReadAll>
 80004ec:	e7fa      	b.n	80004e4 <main+0x3c>
	...

080004f0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80004f0:	b590      	push	{r4, r7, lr}
 80004f2:	b099      	sub	sp, #100	; 0x64
 80004f4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80004f6:	242c      	movs	r4, #44	; 0x2c
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	0018      	movs	r0, r3
 80004fc:	2334      	movs	r3, #52	; 0x34
 80004fe:	001a      	movs	r2, r3
 8000500:	2100      	movs	r1, #0
 8000502:	f004 fa27 	bl	8004954 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000506:	2318      	movs	r3, #24
 8000508:	18fb      	adds	r3, r7, r3
 800050a:	0018      	movs	r0, r3
 800050c:	2314      	movs	r3, #20
 800050e:	001a      	movs	r2, r3
 8000510:	2100      	movs	r1, #0
 8000512:	f004 fa1f 	bl	8004954 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000516:	003b      	movs	r3, r7
 8000518:	0018      	movs	r0, r3
 800051a:	2318      	movs	r3, #24
 800051c:	001a      	movs	r2, r3
 800051e:	2100      	movs	r1, #0
 8000520:	f004 fa18 	bl	8004954 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000524:	4b27      	ldr	r3, [pc, #156]	; (80005c4 <SystemClock_Config+0xd4>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a27      	ldr	r2, [pc, #156]	; (80005c8 <SystemClock_Config+0xd8>)
 800052a:	401a      	ands	r2, r3
 800052c:	4b25      	ldr	r3, [pc, #148]	; (80005c4 <SystemClock_Config+0xd4>)
 800052e:	2180      	movs	r1, #128	; 0x80
 8000530:	0109      	lsls	r1, r1, #4
 8000532:	430a      	orrs	r2, r1
 8000534:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000536:	0021      	movs	r1, r4
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2210      	movs	r2, #16
 800053c:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800053e:	187b      	adds	r3, r7, r1
 8000540:	2201      	movs	r2, #1
 8000542:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2200      	movs	r2, #0
 8000548:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	22a0      	movs	r2, #160	; 0xa0
 800054e:	0212      	lsls	r2, r2, #8
 8000550:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2200      	movs	r2, #0
 8000556:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000558:	187b      	adds	r3, r7, r1
 800055a:	0018      	movs	r0, r3
 800055c:	f001 fbee 	bl	8001d3c <HAL_RCC_OscConfig>
 8000560:	1e03      	subs	r3, r0, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0x78>
		Error_Handler();
 8000564:	f000 fa62 	bl	8000a2c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000568:	2118      	movs	r1, #24
 800056a:	187b      	adds	r3, r7, r1
 800056c:	220f      	movs	r2, #15
 800056e:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000570:	187b      	adds	r3, r7, r1
 8000572:	2200      	movs	r2, #0
 8000574:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2200      	movs	r2, #0
 800057a:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2200      	movs	r2, #0
 8000580:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2200      	movs	r2, #0
 8000586:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2100      	movs	r1, #0
 800058c:	0018      	movs	r0, r3
 800058e:	f001 ff51 	bl	8002434 <HAL_RCC_ClockConfig>
 8000592:	1e03      	subs	r3, r0, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0xaa>
		Error_Handler();
 8000596:	f000 fa49 	bl	8000a2c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 800059a:	003b      	movs	r3, r7
 800059c:	220a      	movs	r2, #10
 800059e:	601a      	str	r2, [r3, #0]
			| RCC_PERIPHCLK_I2C1;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005a0:	003b      	movs	r3, r7
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005a6:	003b      	movs	r3, r7
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80005ac:	003b      	movs	r3, r7
 80005ae:	0018      	movs	r0, r3
 80005b0:	f002 f964 	bl	800287c <HAL_RCCEx_PeriphCLKConfig>
 80005b4:	1e03      	subs	r3, r0, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0xcc>
		Error_Handler();
 80005b8:	f000 fa38 	bl	8000a2c <Error_Handler>
	}
}
 80005bc:	46c0      	nop			; (mov r8, r8)
 80005be:	46bd      	mov	sp, r7
 80005c0:	b019      	add	sp, #100	; 0x64
 80005c2:	bd90      	pop	{r4, r7, pc}
 80005c4:	40007000 	.word	0x40007000
 80005c8:	ffffe7ff 	.word	0xffffe7ff

080005cc <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80005d2:	003b      	movs	r3, r7
 80005d4:	0018      	movs	r0, r3
 80005d6:	2308      	movs	r3, #8
 80005d8:	001a      	movs	r2, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	f004 f9ba 	bl	8004954 <memset>

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 80005e0:	4b2a      	ldr	r3, [pc, #168]	; (800068c <MX_ADC_Init+0xc0>)
 80005e2:	4a2b      	ldr	r2, [pc, #172]	; (8000690 <MX_ADC_Init+0xc4>)
 80005e4:	601a      	str	r2, [r3, #0]
	hadc.Init.OversamplingMode = DISABLE;
 80005e6:	4b29      	ldr	r3, [pc, #164]	; (800068c <MX_ADC_Init+0xc0>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80005ec:	4b27      	ldr	r3, [pc, #156]	; (800068c <MX_ADC_Init+0xc0>)
 80005ee:	22c0      	movs	r2, #192	; 0xc0
 80005f0:	0612      	lsls	r2, r2, #24
 80005f2:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80005f4:	4b25      	ldr	r3, [pc, #148]	; (800068c <MX_ADC_Init+0xc0>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
	hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005fa:	4b24      	ldr	r3, [pc, #144]	; (800068c <MX_ADC_Init+0xc0>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000600:	4b22      	ldr	r3, [pc, #136]	; (800068c <MX_ADC_Init+0xc0>)
 8000602:	2201      	movs	r2, #1
 8000604:	611a      	str	r2, [r3, #16]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000606:	4b21      	ldr	r3, [pc, #132]	; (800068c <MX_ADC_Init+0xc0>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
	hadc.Init.ContinuousConvMode = DISABLE;
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <MX_ADC_Init+0xc0>)
 800060e:	2220      	movs	r2, #32
 8000610:	2100      	movs	r1, #0
 8000612:	5499      	strb	r1, [r3, r2]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8000614:	4b1d      	ldr	r3, [pc, #116]	; (800068c <MX_ADC_Init+0xc0>)
 8000616:	2221      	movs	r2, #33	; 0x21
 8000618:	2100      	movs	r1, #0
 800061a:	5499      	strb	r1, [r3, r2]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800061c:	4b1b      	ldr	r3, [pc, #108]	; (800068c <MX_ADC_Init+0xc0>)
 800061e:	2200      	movs	r2, #0
 8000620:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000622:	4b1a      	ldr	r3, [pc, #104]	; (800068c <MX_ADC_Init+0xc0>)
 8000624:	22c2      	movs	r2, #194	; 0xc2
 8000626:	32ff      	adds	r2, #255	; 0xff
 8000628:	625a      	str	r2, [r3, #36]	; 0x24
	hadc.Init.DMAContinuousRequests = DISABLE;
 800062a:	4b18      	ldr	r3, [pc, #96]	; (800068c <MX_ADC_Init+0xc0>)
 800062c:	222c      	movs	r2, #44	; 0x2c
 800062e:	2100      	movs	r1, #0
 8000630:	5499      	strb	r1, [r3, r2]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b16      	ldr	r3, [pc, #88]	; (800068c <MX_ADC_Init+0xc0>)
 8000634:	2204      	movs	r2, #4
 8000636:	615a      	str	r2, [r3, #20]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <MX_ADC_Init+0xc0>)
 800063a:	2200      	movs	r2, #0
 800063c:	631a      	str	r2, [r3, #48]	; 0x30
	hadc.Init.LowPowerAutoWait = DISABLE;
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <MX_ADC_Init+0xc0>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerFrequencyMode = ENABLE;
 8000644:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_ADC_Init+0xc0>)
 8000646:	2201      	movs	r2, #1
 8000648:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <MX_ADC_Init+0xc0>)
 800064c:	2200      	movs	r2, #0
 800064e:	61da      	str	r2, [r3, #28]
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8000650:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_ADC_Init+0xc0>)
 8000652:	0018      	movs	r0, r3
 8000654:	f000 fe28 	bl	80012a8 <HAL_ADC_Init>
 8000658:	1e03      	subs	r3, r0, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC_Init+0x94>
		Error_Handler();
 800065c:	f000 f9e6 	bl	8000a2c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8000660:	003b      	movs	r3, r7
 8000662:	4a0c      	ldr	r2, [pc, #48]	; (8000694 <MX_ADC_Init+0xc8>)
 8000664:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000666:	003b      	movs	r3, r7
 8000668:	2280      	movs	r2, #128	; 0x80
 800066a:	0152      	lsls	r2, r2, #5
 800066c:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800066e:	003a      	movs	r2, r7
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_ADC_Init+0xc0>)
 8000672:	0011      	movs	r1, r2
 8000674:	0018      	movs	r0, r3
 8000676:	f000 ff8b 	bl	8001590 <HAL_ADC_ConfigChannel>
 800067a:	1e03      	subs	r3, r0, #0
 800067c:	d001      	beq.n	8000682 <MX_ADC_Init+0xb6>
		Error_Handler();
 800067e:	f000 f9d5 	bl	8000a2c <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	b002      	add	sp, #8
 8000688:	bd80      	pop	{r7, pc}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	20000028 	.word	0x20000028
 8000690:	40012400 	.word	0x40012400
 8000694:	10000010 	.word	0x10000010

08000698 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800069c:	4b1b      	ldr	r3, [pc, #108]	; (800070c <MX_I2C1_Init+0x74>)
 800069e:	4a1c      	ldr	r2, [pc, #112]	; (8000710 <MX_I2C1_Init+0x78>)
 80006a0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00000000;
 80006a2:	4b1a      	ldr	r3, [pc, #104]	; (800070c <MX_I2C1_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80006a8:	4b18      	ldr	r3, [pc, #96]	; (800070c <MX_I2C1_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ae:	4b17      	ldr	r3, [pc, #92]	; (800070c <MX_I2C1_Init+0x74>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b4:	4b15      	ldr	r3, [pc, #84]	; (800070c <MX_I2C1_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_I2C1_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_I2C1_Init+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_I2C1_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_I2C1_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_I2C1_Init+0x74>)
 80006d4:	0018      	movs	r0, r3
 80006d6:	f001 fa03 	bl	8001ae0 <HAL_I2C_Init>
 80006da:	1e03      	subs	r3, r0, #0
 80006dc:	d001      	beq.n	80006e2 <MX_I2C1_Init+0x4a>
		Error_Handler();
 80006de:	f000 f9a5 	bl	8000a2c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80006e2:	4b0a      	ldr	r3, [pc, #40]	; (800070c <MX_I2C1_Init+0x74>)
 80006e4:	2100      	movs	r1, #0
 80006e6:	0018      	movs	r0, r3
 80006e8:	f001 fa90 	bl	8001c0c <HAL_I2CEx_ConfigAnalogFilter>
 80006ec:	1e03      	subs	r3, r0, #0
 80006ee:	d001      	beq.n	80006f4 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80006f0:	f000 f99c 	bl	8000a2c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <MX_I2C1_Init+0x74>)
 80006f6:	2100      	movs	r1, #0
 80006f8:	0018      	movs	r0, r3
 80006fa:	f001 fad3 	bl	8001ca4 <HAL_I2CEx_ConfigDigitalFilter>
 80006fe:	1e03      	subs	r3, r0, #0
 8000700:	d001      	beq.n	8000706 <MX_I2C1_Init+0x6e>
		Error_Handler();
 8000702:	f000 f993 	bl	8000a2c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000084 	.word	0x20000084
 8000710:	40005400 	.word	0x40005400

08000714 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000718:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_SPI1_Init+0x68>)
 800071a:	4a19      	ldr	r2, [pc, #100]	; (8000780 <MX_SPI1_Init+0x6c>)
 800071c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <MX_SPI1_Init+0x68>)
 8000720:	2282      	movs	r2, #130	; 0x82
 8000722:	0052      	lsls	r2, r2, #1
 8000724:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_SPI1_Init+0x68>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800072c:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_SPI1_Init+0x68>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000732:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_SPI1_Init+0x68>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000738:	4b10      	ldr	r3, [pc, #64]	; (800077c <MX_SPI1_Init+0x68>)
 800073a:	2200      	movs	r2, #0
 800073c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_SPI1_Init+0x68>)
 8000740:	2280      	movs	r2, #128	; 0x80
 8000742:	0092      	lsls	r2, r2, #2
 8000744:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000746:	4b0d      	ldr	r3, [pc, #52]	; (800077c <MX_SPI1_Init+0x68>)
 8000748:	2200      	movs	r2, #0
 800074a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800074c:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_SPI1_Init+0x68>)
 800074e:	2200      	movs	r2, #0
 8000750:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000752:	4b0a      	ldr	r3, [pc, #40]	; (800077c <MX_SPI1_Init+0x68>)
 8000754:	2200      	movs	r2, #0
 8000756:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_SPI1_Init+0x68>)
 800075a:	2200      	movs	r2, #0
 800075c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 800075e:	4b07      	ldr	r3, [pc, #28]	; (800077c <MX_SPI1_Init+0x68>)
 8000760:	2207      	movs	r2, #7
 8000762:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <MX_SPI1_Init+0x68>)
 8000766:	0018      	movs	r0, r3
 8000768:	f002 f9b4 	bl	8002ad4 <HAL_SPI_Init>
 800076c:	1e03      	subs	r3, r0, #0
 800076e:	d001      	beq.n	8000774 <MX_SPI1_Init+0x60>
		Error_Handler();
 8000770:	f000 f95c 	bl	8000a2c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	200000d8 	.word	0x200000d8
 8000780:	40013000 	.word	0x40013000

08000784 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	; 0x28
 8000788:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800078a:	2318      	movs	r3, #24
 800078c:	18fb      	adds	r3, r7, r3
 800078e:	0018      	movs	r0, r3
 8000790:	2310      	movs	r3, #16
 8000792:	001a      	movs	r2, r3
 8000794:	2100      	movs	r1, #0
 8000796:	f004 f8dd 	bl	8004954 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800079a:	2310      	movs	r3, #16
 800079c:	18fb      	adds	r3, r7, r3
 800079e:	0018      	movs	r0, r3
 80007a0:	2308      	movs	r3, #8
 80007a2:	001a      	movs	r2, r3
 80007a4:	2100      	movs	r1, #0
 80007a6:	f004 f8d5 	bl	8004954 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80007aa:	003b      	movs	r3, r7
 80007ac:	0018      	movs	r0, r3
 80007ae:	2310      	movs	r3, #16
 80007b0:	001a      	movs	r2, r3
 80007b2:	2100      	movs	r1, #0
 80007b4:	f004 f8ce 	bl	8004954 <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80007b8:	4b35      	ldr	r3, [pc, #212]	; (8000890 <MX_TIM2_Init+0x10c>)
 80007ba:	2280      	movs	r2, #128	; 0x80
 80007bc:	05d2      	lsls	r2, r2, #23
 80007be:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80007c0:	4b33      	ldr	r3, [pc, #204]	; (8000890 <MX_TIM2_Init+0x10c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c6:	4b32      	ldr	r3, [pc, #200]	; (8000890 <MX_TIM2_Init+0x10c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 80007cc:	4b30      	ldr	r3, [pc, #192]	; (8000890 <MX_TIM2_Init+0x10c>)
 80007ce:	4a31      	ldr	r2, [pc, #196]	; (8000894 <MX_TIM2_Init+0x110>)
 80007d0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d2:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <MX_TIM2_Init+0x10c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d8:	4b2d      	ldr	r3, [pc, #180]	; (8000890 <MX_TIM2_Init+0x10c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80007de:	4b2c      	ldr	r3, [pc, #176]	; (8000890 <MX_TIM2_Init+0x10c>)
 80007e0:	0018      	movs	r0, r3
 80007e2:	f002 ff95 	bl	8003710 <HAL_TIM_Base_Init>
 80007e6:	1e03      	subs	r3, r0, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM2_Init+0x6a>
		Error_Handler();
 80007ea:	f000 f91f 	bl	8000a2c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ee:	2118      	movs	r1, #24
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2280      	movs	r2, #128	; 0x80
 80007f4:	0152      	lsls	r2, r2, #5
 80007f6:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80007f8:	187a      	adds	r2, r7, r1
 80007fa:	4b25      	ldr	r3, [pc, #148]	; (8000890 <MX_TIM2_Init+0x10c>)
 80007fc:	0011      	movs	r1, r2
 80007fe:	0018      	movs	r0, r3
 8000800:	f003 f8d4 	bl	80039ac <HAL_TIM_ConfigClockSource>
 8000804:	1e03      	subs	r3, r0, #0
 8000806:	d001      	beq.n	800080c <MX_TIM2_Init+0x88>
		Error_Handler();
 8000808:	f000 f910 	bl	8000a2c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <MX_TIM2_Init+0x10c>)
 800080e:	0018      	movs	r0, r3
 8000810:	f002 ffbe 	bl	8003790 <HAL_TIM_PWM_Init>
 8000814:	1e03      	subs	r3, r0, #0
 8000816:	d001      	beq.n	800081c <MX_TIM2_Init+0x98>
		Error_Handler();
 8000818:	f000 f908 	bl	8000a2c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081c:	2110      	movs	r1, #16
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2200      	movs	r2, #0
 8000828:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800082a:	187a      	adds	r2, r7, r1
 800082c:	4b18      	ldr	r3, [pc, #96]	; (8000890 <MX_TIM2_Init+0x10c>)
 800082e:	0011      	movs	r1, r2
 8000830:	0018      	movs	r0, r3
 8000832:	f003 fb77 	bl	8003f24 <HAL_TIMEx_MasterConfigSynchronization>
 8000836:	1e03      	subs	r3, r0, #0
 8000838:	d001      	beq.n	800083e <MX_TIM2_Init+0xba>
			!= HAL_OK) {
		Error_Handler();
 800083a:	f000 f8f7 	bl	8000a2c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800083e:	003b      	movs	r3, r7
 8000840:	2260      	movs	r2, #96	; 0x60
 8000842:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 8000844:	003b      	movs	r3, r7
 8000846:	2200      	movs	r2, #0
 8000848:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800084a:	003b      	movs	r3, r7
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000850:	003b      	movs	r3, r7
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8000856:	0039      	movs	r1, r7
 8000858:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <MX_TIM2_Init+0x10c>)
 800085a:	2200      	movs	r2, #0
 800085c:	0018      	movs	r0, r3
 800085e:	f002 ffdf 	bl	8003820 <HAL_TIM_PWM_ConfigChannel>
 8000862:	1e03      	subs	r3, r0, #0
 8000864:	d001      	beq.n	800086a <MX_TIM2_Init+0xe6>
			!= HAL_OK) {
		Error_Handler();
 8000866:	f000 f8e1 	bl	8000a2c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 800086a:	0039      	movs	r1, r7
 800086c:	4b08      	ldr	r3, [pc, #32]	; (8000890 <MX_TIM2_Init+0x10c>)
 800086e:	2204      	movs	r2, #4
 8000870:	0018      	movs	r0, r3
 8000872:	f002 ffd5 	bl	8003820 <HAL_TIM_PWM_ConfigChannel>
 8000876:	1e03      	subs	r3, r0, #0
 8000878:	d001      	beq.n	800087e <MX_TIM2_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 800087a:	f000 f8d7 	bl	8000a2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800087e:	4b04      	ldr	r3, [pc, #16]	; (8000890 <MX_TIM2_Init+0x10c>)
 8000880:	0018      	movs	r0, r3
 8000882:	f000 fbc3 	bl	800100c <HAL_TIM_MspPostInit>

}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	b00a      	add	sp, #40	; 0x28
 800088c:	bd80      	pop	{r7, pc}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	20000130 	.word	0x20000130
 8000894:	0000ffff 	.word	0x0000ffff

08000898 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 800089e:	4a15      	ldr	r2, [pc, #84]	; (80008f4 <MX_USART2_UART_Init+0x5c>)
 80008a0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80008a2:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008a4:	22e1      	movs	r2, #225	; 0xe1
 80008a6:	0252      	lsls	r2, r2, #9
 80008a8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80008da:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008dc:	0018      	movs	r0, r3
 80008de:	f003 fb71 	bl	8003fc4 <HAL_UART_Init>
 80008e2:	1e03      	subs	r3, r0, #0
 80008e4:	d001      	beq.n	80008ea <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80008e6:	f000 f8a1 	bl	8000a2c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000170 	.word	0x20000170
 80008f4:	40004400 	.word	0x40004400

080008f8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b089      	sub	sp, #36	; 0x24
 80008fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80008fe:	240c      	movs	r4, #12
 8000900:	193b      	adds	r3, r7, r4
 8000902:	0018      	movs	r0, r3
 8000904:	2314      	movs	r3, #20
 8000906:	001a      	movs	r2, r3
 8000908:	2100      	movs	r1, #0
 800090a:	f004 f823 	bl	8004954 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800090e:	4b44      	ldr	r3, [pc, #272]	; (8000a20 <MX_GPIO_Init+0x128>)
 8000910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000912:	4b43      	ldr	r3, [pc, #268]	; (8000a20 <MX_GPIO_Init+0x128>)
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	430a      	orrs	r2, r1
 8000918:	62da      	str	r2, [r3, #44]	; 0x2c
 800091a:	4b41      	ldr	r3, [pc, #260]	; (8000a20 <MX_GPIO_Init+0x128>)
 800091c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800091e:	2280      	movs	r2, #128	; 0x80
 8000920:	4013      	ands	r3, r2
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b3e      	ldr	r3, [pc, #248]	; (8000a20 <MX_GPIO_Init+0x128>)
 8000928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800092a:	4b3d      	ldr	r3, [pc, #244]	; (8000a20 <MX_GPIO_Init+0x128>)
 800092c:	2101      	movs	r1, #1
 800092e:	430a      	orrs	r2, r1
 8000930:	62da      	str	r2, [r3, #44]	; 0x2c
 8000932:	4b3b      	ldr	r3, [pc, #236]	; (8000a20 <MX_GPIO_Init+0x128>)
 8000934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000936:	2201      	movs	r2, #1
 8000938:	4013      	ands	r3, r2
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	4b38      	ldr	r3, [pc, #224]	; (8000a20 <MX_GPIO_Init+0x128>)
 8000940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000942:	4b37      	ldr	r3, [pc, #220]	; (8000a20 <MX_GPIO_Init+0x128>)
 8000944:	2102      	movs	r1, #2
 8000946:	430a      	orrs	r2, r1
 8000948:	62da      	str	r2, [r3, #44]	; 0x2c
 800094a:	4b35      	ldr	r3, [pc, #212]	; (8000a20 <MX_GPIO_Init+0x128>)
 800094c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800094e:	2202      	movs	r2, #2
 8000950:	4013      	ands	r3, r2
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOH, offb_Pin | off_Pin, GPIO_PIN_RESET);
 8000956:	4b33      	ldr	r3, [pc, #204]	; (8000a24 <MX_GPIO_Init+0x12c>)
 8000958:	2200      	movs	r2, #0
 800095a:	2103      	movs	r1, #3
 800095c:	0018      	movs	r0, r3
 800095e:	f001 f8a1 	bl	8001aa4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000962:	238e      	movs	r3, #142	; 0x8e
 8000964:	01db      	lsls	r3, r3, #7
 8000966:	4830      	ldr	r0, [pc, #192]	; (8000a28 <MX_GPIO_Init+0x130>)
 8000968:	2200      	movs	r2, #0
 800096a:	0019      	movs	r1, r3
 800096c:	f001 f89a 	bl	8001aa4 <HAL_GPIO_WritePin>
	cmd_pleins_phares_Pin | direction_Pin | IRQ_Pin | CE_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(led_v_GPIO_Port, led_v_Pin, GPIO_PIN_SET);
 8000970:	2380      	movs	r3, #128	; 0x80
 8000972:	019b      	lsls	r3, r3, #6
 8000974:	482c      	ldr	r0, [pc, #176]	; (8000a28 <MX_GPIO_Init+0x130>)
 8000976:	2201      	movs	r2, #1
 8000978:	0019      	movs	r1, r3
 800097a:	f001 f893 	bl	8001aa4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(led_r_GPIO_Port, led_r_Pin, GPIO_PIN_SET);
 800097e:	2380      	movs	r3, #128	; 0x80
 8000980:	0059      	lsls	r1, r3, #1
 8000982:	23a0      	movs	r3, #160	; 0xa0
 8000984:	05db      	lsls	r3, r3, #23
 8000986:	2201      	movs	r2, #1
 8000988:	0018      	movs	r0, r3
 800098a:	f001 f88b 	bl	8001aa4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 800098e:	2380      	movs	r3, #128	; 0x80
 8000990:	0219      	lsls	r1, r3, #8
 8000992:	23a0      	movs	r3, #160	; 0xa0
 8000994:	05db      	lsls	r3, r3, #23
 8000996:	2200      	movs	r2, #0
 8000998:	0018      	movs	r0, r3
 800099a:	f001 f883 	bl	8001aa4 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : offb_Pin off_Pin */
	GPIO_InitStruct.Pin = offb_Pin | off_Pin;
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	2203      	movs	r2, #3
 80009a2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	2201      	movs	r2, #1
 80009a8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	2202      	movs	r2, #2
 80009ae:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	193b      	adds	r3, r7, r4
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80009b6:	193b      	adds	r3, r7, r4
 80009b8:	4a1a      	ldr	r2, [pc, #104]	; (8000a24 <MX_GPIO_Init+0x12c>)
 80009ba:	0019      	movs	r1, r3
 80009bc:	0010      	movs	r0, r2
 80009be:	f000 ff03 	bl	80017c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : cmd_pleins_phares_Pin led_v_Pin direction_Pin IRQ_Pin
	 CE_Pin */
	GPIO_InitStruct.Pin = cmd_pleins_phares_Pin | led_v_Pin | direction_Pin
 80009c2:	0021      	movs	r1, r4
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	22ce      	movs	r2, #206	; 0xce
 80009c8:	01d2      	lsls	r2, r2, #7
 80009ca:	601a      	str	r2, [r3, #0]
			| IRQ_Pin | CE_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	000c      	movs	r4, r1
 80009ce:	193b      	adds	r3, r7, r4
 80009d0:	2201      	movs	r2, #1
 80009d2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	193b      	adds	r3, r7, r4
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	193b      	adds	r3, r7, r4
 80009dc:	2200      	movs	r2, #0
 80009de:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e0:	193b      	adds	r3, r7, r4
 80009e2:	4a11      	ldr	r2, [pc, #68]	; (8000a28 <MX_GPIO_Init+0x130>)
 80009e4:	0019      	movs	r1, r3
 80009e6:	0010      	movs	r0, r2
 80009e8:	f000 feee 	bl	80017c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : led_r_Pin CSN_Pin */
	GPIO_InitStruct.Pin = led_r_Pin | CSN_Pin;
 80009ec:	0021      	movs	r1, r4
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2281      	movs	r2, #129	; 0x81
 80009f2:	0212      	lsls	r2, r2, #8
 80009f4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2201      	movs	r2, #1
 80009fa:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2200      	movs	r2, #0
 8000a06:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a08:	187a      	adds	r2, r7, r1
 8000a0a:	23a0      	movs	r3, #160	; 0xa0
 8000a0c:	05db      	lsls	r3, r3, #23
 8000a0e:	0011      	movs	r1, r2
 8000a10:	0018      	movs	r0, r3
 8000a12:	f000 fed9 	bl	80017c8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	b009      	add	sp, #36	; 0x24
 8000a1c:	bd90      	pop	{r4, r7, pc}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	40021000 	.word	0x40021000
 8000a24:	50001c00 	.word	0x50001c00
 8000a28:	50000400 	.word	0x50000400

08000a2c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a34:	e7fe      	b.n	8000a34 <Error_Handler+0x8>

08000a36 <CS_Select>:
#define NRF24_SPI &hspi1



static void CS_Select (void)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 8000a3a:	2380      	movs	r3, #128	; 0x80
 8000a3c:	0219      	lsls	r1, r3, #8
 8000a3e:	23a0      	movs	r3, #160	; 0xa0
 8000a40:	05db      	lsls	r3, r3, #23
 8000a42:	2200      	movs	r2, #0
 8000a44:	0018      	movs	r0, r3
 8000a46:	f001 f82d 	bl	8001aa4 <HAL_GPIO_WritePin>
}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <CS_UnSelect>:

static void CS_UnSelect (void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 8000a54:	2380      	movs	r3, #128	; 0x80
 8000a56:	0219      	lsls	r1, r3, #8
 8000a58:	23a0      	movs	r3, #160	; 0xa0
 8000a5a:	05db      	lsls	r3, r3, #23
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f001 f820 	bl	8001aa4 <HAL_GPIO_WritePin>
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <CE_Enable>:


static void CE_Enable (void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, CE_Pin, 1);
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	4803      	ldr	r0, [pc, #12]	; (8000a84 <CE_Enable+0x18>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	0019      	movs	r1, r3
 8000a7a:	f001 f813 	bl	8001aa4 <HAL_GPIO_WritePin>
}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	50000400 	.word	0x50000400

08000a88 <CE_Disable>:

static void CE_Disable (void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, CE_Pin, 0);
 8000a8c:	2380      	movs	r3, #128	; 0x80
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	4803      	ldr	r0, [pc, #12]	; (8000aa0 <CE_Disable+0x18>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	0019      	movs	r1, r3
 8000a96:	f001 f805 	bl	8001aa4 <HAL_GPIO_WritePin>
}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	50000400 	.word	0x50000400

08000aa4 <nrf24_WriteReg>:



// write a single byte to the particular register
static void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8000aa4:	b590      	push	{r4, r7, lr}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	0002      	movs	r2, r0
 8000aac:	1dfb      	adds	r3, r7, #7
 8000aae:	701a      	strb	r2, [r3, #0]
 8000ab0:	1dbb      	adds	r3, r7, #6
 8000ab2:	1c0a      	adds	r2, r1, #0
 8000ab4:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000ab6:	1dfb      	adds	r3, r7, #7
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2220      	movs	r2, #32
 8000abc:	4313      	orrs	r3, r2
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	240c      	movs	r4, #12
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	701a      	strb	r2, [r3, #0]
	buf[1] = Data;
 8000ac6:	193b      	adds	r3, r7, r4
 8000ac8:	1dba      	adds	r2, r7, #6
 8000aca:	7812      	ldrb	r2, [r2, #0]
 8000acc:	705a      	strb	r2, [r3, #1]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000ace:	f7ff ffb2 	bl	8000a36 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 8000ad2:	23fa      	movs	r3, #250	; 0xfa
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	1939      	adds	r1, r7, r4
 8000ad8:	4804      	ldr	r0, [pc, #16]	; (8000aec <nrf24_WriteReg+0x48>)
 8000ada:	2202      	movs	r2, #2
 8000adc:	f002 f883 	bl	8002be6 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000ae0:	f7ff ffb6 	bl	8000a50 <CS_UnSelect>
}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b005      	add	sp, #20
 8000aea:	bd90      	pop	{r4, r7, pc}
 8000aec:	200000d8 	.word	0x200000d8

08000af0 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
static void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8000af0:	b590      	push	{r4, r7, lr}
 8000af2:	b087      	sub	sp, #28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	607a      	str	r2, [r7, #4]
 8000afa:	210f      	movs	r1, #15
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	1c02      	adds	r2, r0, #0
 8000b00:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2220      	movs	r2, #32
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	2414      	movs	r4, #20
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	701a      	strb	r2, [r3, #0]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000b12:	f7ff ff90 	bl	8000a36 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8000b16:	1939      	adds	r1, r7, r4
 8000b18:	4809      	ldr	r0, [pc, #36]	; (8000b40 <nrf24_WriteRegMulti+0x50>)
 8000b1a:	2364      	movs	r3, #100	; 0x64
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	f002 f862 	bl	8002be6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	b29a      	uxth	r2, r3
 8000b26:	23fa      	movs	r3, #250	; 0xfa
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	68b9      	ldr	r1, [r7, #8]
 8000b2c:	4804      	ldr	r0, [pc, #16]	; (8000b40 <nrf24_WriteRegMulti+0x50>)
 8000b2e:	f002 f85a 	bl	8002be6 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000b32:	f7ff ff8d 	bl	8000a50 <CS_UnSelect>
}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b007      	add	sp, #28
 8000b3c:	bd90      	pop	{r4, r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	200000d8 	.word	0x200000d8

08000b44 <nrf24_ReadReg>:


static uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8000b44:	b590      	push	{r4, r7, lr}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	0002      	movs	r2, r0
 8000b4c:	1dfb      	adds	r3, r7, #7
 8000b4e:	701a      	strb	r2, [r3, #0]
	uint8_t data=0;
 8000b50:	240f      	movs	r4, #15
 8000b52:	193b      	adds	r3, r7, r4
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000b58:	f7ff ff6d 	bl	8000a36 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000b5c:	1df9      	adds	r1, r7, #7
 8000b5e:	4809      	ldr	r0, [pc, #36]	; (8000b84 <nrf24_ReadReg+0x40>)
 8000b60:	2364      	movs	r3, #100	; 0x64
 8000b62:	2201      	movs	r2, #1
 8000b64:	f002 f83f 	bl	8002be6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8000b68:	1939      	adds	r1, r7, r4
 8000b6a:	4806      	ldr	r0, [pc, #24]	; (8000b84 <nrf24_ReadReg+0x40>)
 8000b6c:	2364      	movs	r3, #100	; 0x64
 8000b6e:	2201      	movs	r2, #1
 8000b70:	f002 f996 	bl	8002ea0 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000b74:	f7ff ff6c 	bl	8000a50 <CS_UnSelect>

	return data;
 8000b78:	193b      	adds	r3, r7, r4
 8000b7a:	781b      	ldrb	r3, [r3, #0]
}
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	b005      	add	sp, #20
 8000b82:	bd90      	pop	{r4, r7, pc}
 8000b84:	200000d8 	.word	0x200000d8

08000b88 <nrf24_ReadReg_Multi>:


/* Read multiple bytes from the register */
static void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 8000b88:	b590      	push	{r4, r7, lr}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
 8000b92:	240f      	movs	r4, #15
 8000b94:	193b      	adds	r3, r7, r4
 8000b96:	1c02      	adds	r2, r0, #0
 8000b98:	701a      	strb	r2, [r3, #0]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000b9a:	f7ff ff4c 	bl	8000a36 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000b9e:	1939      	adds	r1, r7, r4
 8000ba0:	4809      	ldr	r0, [pc, #36]	; (8000bc8 <nrf24_ReadReg_Multi+0x40>)
 8000ba2:	2364      	movs	r3, #100	; 0x64
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f002 f81e 	bl	8002be6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, data, size, 1000);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	23fa      	movs	r3, #250	; 0xfa
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	68b9      	ldr	r1, [r7, #8]
 8000bb4:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <nrf24_ReadReg_Multi+0x40>)
 8000bb6:	f002 f973 	bl	8002ea0 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000bba:	f7ff ff49 	bl	8000a50 <CS_UnSelect>
}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b005      	add	sp, #20
 8000bc4:	bd90      	pop	{r4, r7, pc}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	200000d8 	.word	0x200000d8

08000bcc <nrf24_reset>:
	// Pull the CS HIGH to release the device
	CS_UnSelect();
}

static void nrf24_reset(uint8_t REG)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	0002      	movs	r2, r0
 8000bd4:	1dfb      	adds	r3, r7, #7
 8000bd6:	701a      	strb	r2, [r3, #0]
	if (REG == STATUS)
 8000bd8:	1dfb      	adds	r3, r7, #7
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b07      	cmp	r3, #7
 8000bde:	d104      	bne.n	8000bea <nrf24_reset+0x1e>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8000be0:	2100      	movs	r1, #0
 8000be2:	2007      	movs	r0, #7
 8000be4:	f7ff ff5e 	bl	8000aa4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8000be8:	e08b      	b.n	8000d02 <nrf24_reset+0x136>
	else if (REG == FIFO_STATUS)
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b17      	cmp	r3, #23
 8000bf0:	d104      	bne.n	8000bfc <nrf24_reset+0x30>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000bf2:	2111      	movs	r1, #17
 8000bf4:	2017      	movs	r0, #23
 8000bf6:	f7ff ff55 	bl	8000aa4 <nrf24_WriteReg>
}
 8000bfa:	e082      	b.n	8000d02 <nrf24_reset+0x136>
	nrf24_WriteReg(CONFIG, 0x08);
 8000bfc:	2108      	movs	r1, #8
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f7ff ff50 	bl	8000aa4 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8000c04:	213f      	movs	r1, #63	; 0x3f
 8000c06:	2001      	movs	r0, #1
 8000c08:	f7ff ff4c 	bl	8000aa4 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 8000c0c:	2103      	movs	r1, #3
 8000c0e:	2002      	movs	r0, #2
 8000c10:	f7ff ff48 	bl	8000aa4 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8000c14:	2103      	movs	r1, #3
 8000c16:	2003      	movs	r0, #3
 8000c18:	f7ff ff44 	bl	8000aa4 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 8000c1c:	2103      	movs	r1, #3
 8000c1e:	2004      	movs	r0, #4
 8000c20:	f7ff ff40 	bl	8000aa4 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8000c24:	2102      	movs	r1, #2
 8000c26:	2005      	movs	r0, #5
 8000c28:	f7ff ff3c 	bl	8000aa4 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8000c2c:	210e      	movs	r1, #14
 8000c2e:	2006      	movs	r0, #6
 8000c30:	f7ff ff38 	bl	8000aa4 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8000c34:	2100      	movs	r1, #0
 8000c36:	2007      	movs	r0, #7
 8000c38:	f7ff ff34 	bl	8000aa4 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2008      	movs	r0, #8
 8000c40:	f7ff ff30 	bl	8000aa4 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8000c44:	2100      	movs	r1, #0
 8000c46:	2009      	movs	r0, #9
 8000c48:	f7ff ff2c 	bl	8000aa4 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000c4c:	2018      	movs	r0, #24
 8000c4e:	183b      	adds	r3, r7, r0
 8000c50:	4a2e      	ldr	r2, [pc, #184]	; (8000d0c <nrf24_reset+0x140>)
 8000c52:	6811      	ldr	r1, [r2, #0]
 8000c54:	6019      	str	r1, [r3, #0]
 8000c56:	7912      	ldrb	r2, [r2, #4]
 8000c58:	711a      	strb	r2, [r3, #4]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8000c5a:	183b      	adds	r3, r7, r0
 8000c5c:	2205      	movs	r2, #5
 8000c5e:	0019      	movs	r1, r3
 8000c60:	200a      	movs	r0, #10
 8000c62:	f7ff ff45 	bl	8000af0 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000c66:	2010      	movs	r0, #16
 8000c68:	183b      	adds	r3, r7, r0
 8000c6a:	4a29      	ldr	r2, [pc, #164]	; (8000d10 <nrf24_reset+0x144>)
 8000c6c:	6811      	ldr	r1, [r2, #0]
 8000c6e:	6019      	str	r1, [r3, #0]
 8000c70:	7912      	ldrb	r2, [r2, #4]
 8000c72:	711a      	strb	r2, [r3, #4]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000c74:	183b      	adds	r3, r7, r0
 8000c76:	2205      	movs	r2, #5
 8000c78:	0019      	movs	r1, r3
 8000c7a:	200b      	movs	r0, #11
 8000c7c:	f7ff ff38 	bl	8000af0 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8000c80:	21c3      	movs	r1, #195	; 0xc3
 8000c82:	200c      	movs	r0, #12
 8000c84:	f7ff ff0e 	bl	8000aa4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 8000c88:	21c4      	movs	r1, #196	; 0xc4
 8000c8a:	200d      	movs	r0, #13
 8000c8c:	f7ff ff0a 	bl	8000aa4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8000c90:	21c5      	movs	r1, #197	; 0xc5
 8000c92:	200e      	movs	r0, #14
 8000c94:	f7ff ff06 	bl	8000aa4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 8000c98:	21c6      	movs	r1, #198	; 0xc6
 8000c9a:	200f      	movs	r0, #15
 8000c9c:	f7ff ff02 	bl	8000aa4 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000ca0:	2008      	movs	r0, #8
 8000ca2:	183b      	adds	r3, r7, r0
 8000ca4:	4a19      	ldr	r2, [pc, #100]	; (8000d0c <nrf24_reset+0x140>)
 8000ca6:	6811      	ldr	r1, [r2, #0]
 8000ca8:	6019      	str	r1, [r3, #0]
 8000caa:	7912      	ldrb	r2, [r2, #4]
 8000cac:	711a      	strb	r2, [r3, #4]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8000cae:	183b      	adds	r3, r7, r0
 8000cb0:	2205      	movs	r2, #5
 8000cb2:	0019      	movs	r1, r3
 8000cb4:	2010      	movs	r0, #16
 8000cb6:	f7ff ff1b 	bl	8000af0 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2011      	movs	r0, #17
 8000cbe:	f7ff fef1 	bl	8000aa4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2012      	movs	r0, #18
 8000cc6:	f7ff feed 	bl	8000aa4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	2013      	movs	r0, #19
 8000cce:	f7ff fee9 	bl	8000aa4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	2014      	movs	r0, #20
 8000cd6:	f7ff fee5 	bl	8000aa4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2015      	movs	r0, #21
 8000cde:	f7ff fee1 	bl	8000aa4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2016      	movs	r0, #22
 8000ce6:	f7ff fedd 	bl	8000aa4 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000cea:	2111      	movs	r1, #17
 8000cec:	2017      	movs	r0, #23
 8000cee:	f7ff fed9 	bl	8000aa4 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	201c      	movs	r0, #28
 8000cf6:	f7ff fed5 	bl	8000aa4 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	201d      	movs	r0, #29
 8000cfe:	f7ff fed1 	bl	8000aa4 <nrf24_WriteReg>
}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b008      	add	sp, #32
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	080049c4 	.word	0x080049c4
 8000d10:	080049cc 	.word	0x080049cc

08000d14 <NRF24_Init>:




void NRF24_Init (void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8000d18:	f7ff feb6 	bl	8000a88 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f7ff ff55 	bl	8000bcc <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 8000d22:	2100      	movs	r1, #0
 8000d24:	2000      	movs	r0, #0
 8000d26:	f7ff febd 	bl	8000aa4 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f7ff feb9 	bl	8000aa4 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8000d32:	2100      	movs	r1, #0
 8000d34:	2002      	movs	r0, #2
 8000d36:	f7ff feb5 	bl	8000aa4 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8000d3a:	2103      	movs	r1, #3
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f7ff feb1 	bl	8000aa4 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 8000d42:	2100      	movs	r1, #0
 8000d44:	2004      	movs	r0, #4
 8000d46:	f7ff fead 	bl	8000aa4 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2005      	movs	r0, #5
 8000d4e:	f7ff fea9 	bl	8000aa4 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 8000d52:	210e      	movs	r1, #14
 8000d54:	2006      	movs	r0, #6
 8000d56:	f7ff fea5 	bl	8000aa4 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000d5a:	f7ff fe87 	bl	8000a6c <CE_Enable>

}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <NRF24_ReadAll>:



// Read all the Register data
void NRF24_ReadAll (uint8_t *data)
{
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	e00c      	b.n	8000d8c <NRF24_ReadAll+0x28>
	{
		*(data+i) = nrf24_ReadReg(i);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	b2d9      	uxtb	r1, r3
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	18d4      	adds	r4, r2, r3
 8000d7c:	0008      	movs	r0, r1
 8000d7e:	f7ff fee1 	bl	8000b44 <nrf24_ReadReg>
 8000d82:	0003      	movs	r3, r0
 8000d84:	7023      	strb	r3, [r4, #0]
	for (int i=0; i<10; i++)
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	2b09      	cmp	r3, #9
 8000d90:	ddef      	ble.n	8000d72 <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+10), 5);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	330a      	adds	r3, #10
 8000d96:	2205      	movs	r2, #5
 8000d98:	0019      	movs	r1, r3
 8000d9a:	200a      	movs	r0, #10
 8000d9c:	f7ff fef4 	bl	8000b88 <nrf24_ReadReg_Multi>

	nrf24_ReadReg_Multi(RX_ADDR_P1, (data+15), 5);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	330f      	adds	r3, #15
 8000da4:	2205      	movs	r2, #5
 8000da6:	0019      	movs	r1, r3
 8000da8:	200b      	movs	r0, #11
 8000daa:	f7ff feed 	bl	8000b88 <nrf24_ReadReg_Multi>

	*(data+20) = nrf24_ReadReg(RX_ADDR_P2);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3314      	adds	r3, #20
 8000db2:	001c      	movs	r4, r3
 8000db4:	200c      	movs	r0, #12
 8000db6:	f7ff fec5 	bl	8000b44 <nrf24_ReadReg>
 8000dba:	0003      	movs	r3, r0
 8000dbc:	7023      	strb	r3, [r4, #0]
	*(data+21) = nrf24_ReadReg(RX_ADDR_P3);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3315      	adds	r3, #21
 8000dc2:	001c      	movs	r4, r3
 8000dc4:	200d      	movs	r0, #13
 8000dc6:	f7ff febd 	bl	8000b44 <nrf24_ReadReg>
 8000dca:	0003      	movs	r3, r0
 8000dcc:	7023      	strb	r3, [r4, #0]
	*(data+22) = nrf24_ReadReg(RX_ADDR_P4);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	3316      	adds	r3, #22
 8000dd2:	001c      	movs	r4, r3
 8000dd4:	200e      	movs	r0, #14
 8000dd6:	f7ff feb5 	bl	8000b44 <nrf24_ReadReg>
 8000dda:	0003      	movs	r3, r0
 8000ddc:	7023      	strb	r3, [r4, #0]
	*(data+23) = nrf24_ReadReg(RX_ADDR_P5);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	3317      	adds	r3, #23
 8000de2:	001c      	movs	r4, r3
 8000de4:	200f      	movs	r0, #15
 8000de6:	f7ff fead 	bl	8000b44 <nrf24_ReadReg>
 8000dea:	0003      	movs	r3, r0
 8000dec:	7023      	strb	r3, [r4, #0]

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+24), 5);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	3318      	adds	r3, #24
 8000df2:	2205      	movs	r2, #5
 8000df4:	0019      	movs	r1, r3
 8000df6:	200a      	movs	r0, #10
 8000df8:	f7ff fec6 	bl	8000b88 <nrf24_ReadReg_Multi>

	for (int i=29; i<38; i++)
 8000dfc:	231d      	movs	r3, #29
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	e00e      	b.n	8000e20 <NRF24_ReadAll+0xbc>
	{
		*(data+i) = nrf24_ReadReg(i-12);
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	3b0c      	subs	r3, #12
 8000e08:	b2d9      	uxtb	r1, r3
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	18d4      	adds	r4, r2, r3
 8000e10:	0008      	movs	r0, r1
 8000e12:	f7ff fe97 	bl	8000b44 <nrf24_ReadReg>
 8000e16:	0003      	movs	r3, r0
 8000e18:	7023      	strb	r3, [r4, #0]
	for (int i=29; i<38; i++)
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	2b25      	cmp	r3, #37	; 0x25
 8000e24:	dded      	ble.n	8000e02 <NRF24_ReadAll+0x9e>
	}

}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	46c0      	nop			; (mov r8, r8)
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	b005      	add	sp, #20
 8000e2e:	bd90      	pop	{r4, r7, pc}

08000e30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <HAL_MspInit+0x24>)
 8000e36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_MspInit+0x24>)
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <HAL_MspInit+0x24>)
 8000e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <HAL_MspInit+0x24>)
 8000e46:	2180      	movs	r1, #128	; 0x80
 8000e48:	0549      	lsls	r1, r1, #21
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40021000 	.word	0x40021000

08000e58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e58:	b590      	push	{r4, r7, lr}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	240c      	movs	r4, #12
 8000e62:	193b      	adds	r3, r7, r4
 8000e64:	0018      	movs	r0, r3
 8000e66:	2314      	movs	r3, #20
 8000e68:	001a      	movs	r2, r3
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	f003 fd72 	bl	8004954 <memset>
  if(hadc->Instance==ADC1)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a14      	ldr	r2, [pc, #80]	; (8000ec8 <HAL_ADC_MspInit+0x70>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d122      	bne.n	8000ec0 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e7a:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <HAL_ADC_MspInit+0x74>)
 8000e7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e7e:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <HAL_ADC_MspInit+0x74>)
 8000e80:	2180      	movs	r1, #128	; 0x80
 8000e82:	0089      	lsls	r1, r1, #2
 8000e84:	430a      	orrs	r2, r1
 8000e86:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e88:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <HAL_ADC_MspInit+0x74>)
 8000e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <HAL_ADC_MspInit+0x74>)
 8000e8e:	2101      	movs	r1, #1
 8000e90:	430a      	orrs	r2, r1
 8000e92:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e94:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <HAL_ADC_MspInit+0x74>)
 8000e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e98:	2201      	movs	r2, #1
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ea0:	193b      	adds	r3, r7, r4
 8000ea2:	2210      	movs	r2, #16
 8000ea4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea6:	193b      	adds	r3, r7, r4
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	193b      	adds	r3, r7, r4
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	193a      	adds	r2, r7, r4
 8000eb4:	23a0      	movs	r3, #160	; 0xa0
 8000eb6:	05db      	lsls	r3, r3, #23
 8000eb8:	0011      	movs	r1, r2
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f000 fc84 	bl	80017c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ec0:	46c0      	nop			; (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b009      	add	sp, #36	; 0x24
 8000ec6:	bd90      	pop	{r4, r7, pc}
 8000ec8:	40012400 	.word	0x40012400
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b089      	sub	sp, #36	; 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	240c      	movs	r4, #12
 8000eda:	193b      	adds	r3, r7, r4
 8000edc:	0018      	movs	r0, r3
 8000ede:	2314      	movs	r3, #20
 8000ee0:	001a      	movs	r2, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	f003 fd36 	bl	8004954 <memset>
  if(hi2c->Instance==I2C1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a17      	ldr	r2, [pc, #92]	; (8000f4c <HAL_I2C_MspInit+0x7c>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d128      	bne.n	8000f44 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef2:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <HAL_I2C_MspInit+0x80>)
 8000ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ef6:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <HAL_I2C_MspInit+0x80>)
 8000ef8:	2102      	movs	r1, #2
 8000efa:	430a      	orrs	r2, r1
 8000efc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <HAL_I2C_MspInit+0x80>)
 8000f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f02:	2202      	movs	r2, #2
 8000f04:	4013      	ands	r3, r2
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f0a:	0021      	movs	r1, r4
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	22c0      	movs	r2, #192	; 0xc0
 8000f10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	2212      	movs	r2, #18
 8000f16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	2203      	movs	r2, #3
 8000f22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	2201      	movs	r2, #1
 8000f28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2a:	187b      	adds	r3, r7, r1
 8000f2c:	4a09      	ldr	r2, [pc, #36]	; (8000f54 <HAL_I2C_MspInit+0x84>)
 8000f2e:	0019      	movs	r1, r3
 8000f30:	0010      	movs	r0, r2
 8000f32:	f000 fc49 	bl	80017c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_I2C_MspInit+0x80>)
 8000f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f3a:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <HAL_I2C_MspInit+0x80>)
 8000f3c:	2180      	movs	r1, #128	; 0x80
 8000f3e:	0389      	lsls	r1, r1, #14
 8000f40:	430a      	orrs	r2, r1
 8000f42:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b009      	add	sp, #36	; 0x24
 8000f4a:	bd90      	pop	{r4, r7, pc}
 8000f4c:	40005400 	.word	0x40005400
 8000f50:	40021000 	.word	0x40021000
 8000f54:	50000400 	.word	0x50000400

08000f58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b089      	sub	sp, #36	; 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	240c      	movs	r4, #12
 8000f62:	193b      	adds	r3, r7, r4
 8000f64:	0018      	movs	r0, r3
 8000f66:	2314      	movs	r3, #20
 8000f68:	001a      	movs	r2, r3
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	f003 fcf2 	bl	8004954 <memset>
  if(hspi->Instance==SPI1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a17      	ldr	r2, [pc, #92]	; (8000fd4 <HAL_SPI_MspInit+0x7c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d128      	bne.n	8000fcc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <HAL_SPI_MspInit+0x80>)
 8000f7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <HAL_SPI_MspInit+0x80>)
 8000f80:	2180      	movs	r1, #128	; 0x80
 8000f82:	0149      	lsls	r1, r1, #5
 8000f84:	430a      	orrs	r2, r1
 8000f86:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <HAL_SPI_MspInit+0x80>)
 8000f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_SPI_MspInit+0x80>)
 8000f8e:	2102      	movs	r1, #2
 8000f90:	430a      	orrs	r2, r1
 8000f92:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f94:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <HAL_SPI_MspInit+0x80>)
 8000f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f98:	2202      	movs	r2, #2
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000fa0:	0021      	movs	r1, r4
 8000fa2:	187b      	adds	r3, r7, r1
 8000fa4:	2238      	movs	r2, #56	; 0x38
 8000fa6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	187b      	adds	r3, r7, r1
 8000faa:	2202      	movs	r2, #2
 8000fac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	187b      	adds	r3, r7, r1
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	4a06      	ldr	r2, [pc, #24]	; (8000fdc <HAL_SPI_MspInit+0x84>)
 8000fc4:	0019      	movs	r1, r3
 8000fc6:	0010      	movs	r0, r2
 8000fc8:	f000 fbfe 	bl	80017c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fcc:	46c0      	nop			; (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b009      	add	sp, #36	; 0x24
 8000fd2:	bd90      	pop	{r4, r7, pc}
 8000fd4:	40013000 	.word	0x40013000
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	50000400 	.word	0x50000400

08000fe0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	2380      	movs	r3, #128	; 0x80
 8000fee:	05db      	lsls	r3, r3, #23
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d105      	bne.n	8001000 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <HAL_TIM_Base_MspInit+0x28>)
 8000ff6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <HAL_TIM_Base_MspInit+0x28>)
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001000:	46c0      	nop			; (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	b002      	add	sp, #8
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40021000 	.word	0x40021000

0800100c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	240c      	movs	r4, #12
 8001016:	193b      	adds	r3, r7, r4
 8001018:	0018      	movs	r0, r3
 800101a:	2314      	movs	r3, #20
 800101c:	001a      	movs	r2, r3
 800101e:	2100      	movs	r1, #0
 8001020:	f003 fc98 	bl	8004954 <memset>
  if(htim->Instance==TIM2)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	05db      	lsls	r3, r3, #23
 800102c:	429a      	cmp	r2, r3
 800102e:	d122      	bne.n	8001076 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001030:	4b13      	ldr	r3, [pc, #76]	; (8001080 <HAL_TIM_MspPostInit+0x74>)
 8001032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_TIM_MspPostInit+0x74>)
 8001036:	2101      	movs	r1, #1
 8001038:	430a      	orrs	r2, r1
 800103a:	62da      	str	r2, [r3, #44]	; 0x2c
 800103c:	4b10      	ldr	r3, [pc, #64]	; (8001080 <HAL_TIM_MspPostInit+0x74>)
 800103e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001040:	2201      	movs	r2, #1
 8001042:	4013      	ands	r3, r2
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = onb_Pin|on_Pin;
 8001048:	0021      	movs	r1, r4
 800104a:	187b      	adds	r3, r7, r1
 800104c:	2203      	movs	r2, #3
 800104e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	187b      	adds	r3, r7, r1
 8001052:	2202      	movs	r2, #2
 8001054:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001056:	187b      	adds	r3, r7, r1
 8001058:	2202      	movs	r2, #2
 800105a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	187b      	adds	r3, r7, r1
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001062:	187b      	adds	r3, r7, r1
 8001064:	2202      	movs	r2, #2
 8001066:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001068:	187a      	adds	r2, r7, r1
 800106a:	23a0      	movs	r3, #160	; 0xa0
 800106c:	05db      	lsls	r3, r3, #23
 800106e:	0011      	movs	r1, r2
 8001070:	0018      	movs	r0, r3
 8001072:	f000 fba9 	bl	80017c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	46bd      	mov	sp, r7
 800107a:	b009      	add	sp, #36	; 0x24
 800107c:	bd90      	pop	{r4, r7, pc}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	40021000 	.word	0x40021000

08001084 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	b089      	sub	sp, #36	; 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	240c      	movs	r4, #12
 800108e:	193b      	adds	r3, r7, r4
 8001090:	0018      	movs	r0, r3
 8001092:	2314      	movs	r3, #20
 8001094:	001a      	movs	r2, r3
 8001096:	2100      	movs	r1, #0
 8001098:	f003 fc5c 	bl	8004954 <memset>
  if(huart->Instance==USART2)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a18      	ldr	r2, [pc, #96]	; (8001104 <HAL_UART_MspInit+0x80>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d12a      	bne.n	80010fc <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010a6:	4b18      	ldr	r3, [pc, #96]	; (8001108 <HAL_UART_MspInit+0x84>)
 80010a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <HAL_UART_MspInit+0x84>)
 80010ac:	2180      	movs	r1, #128	; 0x80
 80010ae:	0289      	lsls	r1, r1, #10
 80010b0:	430a      	orrs	r2, r1
 80010b2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <HAL_UART_MspInit+0x84>)
 80010b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010b8:	4b13      	ldr	r3, [pc, #76]	; (8001108 <HAL_UART_MspInit+0x84>)
 80010ba:	2101      	movs	r1, #1
 80010bc:	430a      	orrs	r2, r1
 80010be:	62da      	str	r2, [r3, #44]	; 0x2c
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <HAL_UART_MspInit+0x84>)
 80010c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c4:	2201      	movs	r2, #1
 80010c6:	4013      	ands	r3, r2
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA9     ------> USART2_TX
    PA10     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010cc:	193b      	adds	r3, r7, r4
 80010ce:	22c0      	movs	r2, #192	; 0xc0
 80010d0:	00d2      	lsls	r2, r2, #3
 80010d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	0021      	movs	r1, r4
 80010d6:	187b      	adds	r3, r7, r1
 80010d8:	2202      	movs	r2, #2
 80010da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	187b      	adds	r3, r7, r1
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e2:	187b      	adds	r3, r7, r1
 80010e4:	2203      	movs	r2, #3
 80010e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80010e8:	187b      	adds	r3, r7, r1
 80010ea:	2204      	movs	r2, #4
 80010ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ee:	187a      	adds	r2, r7, r1
 80010f0:	23a0      	movs	r3, #160	; 0xa0
 80010f2:	05db      	lsls	r3, r3, #23
 80010f4:	0011      	movs	r1, r2
 80010f6:	0018      	movs	r0, r3
 80010f8:	f000 fb66 	bl	80017c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010fc:	46c0      	nop			; (mov r8, r8)
 80010fe:	46bd      	mov	sp, r7
 8001100:	b009      	add	sp, #36	; 0x24
 8001102:	bd90      	pop	{r4, r7, pc}
 8001104:	40004400 	.word	0x40004400
 8001108:	40021000 	.word	0x40021000

0800110c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <NMI_Handler+0x4>

08001112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <HardFault_Handler+0x4>

08001118 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800111c:	46c0      	nop			; (mov r8, r8)
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001130:	f000 f89e 	bl	8001270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001134:	46c0      	nop			; (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001144:	4813      	ldr	r0, [pc, #76]	; (8001194 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001146:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001148:	f7ff fff7 	bl	800113a <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 800114c:	4812      	ldr	r0, [pc, #72]	; (8001198 <LoopForever+0x6>)
    LDR R1, [R0]
 800114e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001150:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001152:	4a12      	ldr	r2, [pc, #72]	; (800119c <LoopForever+0xa>)
    CMP R1, R2
 8001154:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001156:	d105      	bne.n	8001164 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001158:	4811      	ldr	r0, [pc, #68]	; (80011a0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800115a:	4912      	ldr	r1, [pc, #72]	; (80011a4 <LoopForever+0x12>)
    STR R1, [R0]
 800115c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800115e:	4812      	ldr	r0, [pc, #72]	; (80011a8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001160:	4912      	ldr	r1, [pc, #72]	; (80011ac <LoopForever+0x1a>)
    STR R1, [R0]
 8001162:	6001      	str	r1, [r0, #0]

08001164 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001164:	4812      	ldr	r0, [pc, #72]	; (80011b0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001166:	4913      	ldr	r1, [pc, #76]	; (80011b4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001168:	4a13      	ldr	r2, [pc, #76]	; (80011b8 <LoopForever+0x26>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800116c:	e002      	b.n	8001174 <LoopCopyDataInit>

0800116e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001172:	3304      	adds	r3, #4

08001174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001178:	d3f9      	bcc.n	800116e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117a:	4a10      	ldr	r2, [pc, #64]	; (80011bc <LoopForever+0x2a>)
  ldr r4, =_ebss
 800117c:	4c10      	ldr	r4, [pc, #64]	; (80011c0 <LoopForever+0x2e>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001180:	e001      	b.n	8001186 <LoopFillZerobss>

08001182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001184:	3204      	adds	r2, #4

08001186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001188:	d3fb      	bcc.n	8001182 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800118a:	f003 fbeb 	bl	8004964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800118e:	f7ff f98b 	bl	80004a8 <main>

08001192 <LoopForever>:

LoopForever:
    b LoopForever
 8001192:	e7fe      	b.n	8001192 <LoopForever>
   ldr   r0, =_estack
 8001194:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8001198:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800119c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80011a0:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80011a4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80011a8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80011ac:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80011b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011b8:	08004a50 	.word	0x08004a50
  ldr r2, =_sbss
 80011bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011c0:	200001fc 	.word	0x200001fc

080011c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c4:	e7fe      	b.n	80011c4 <ADC1_IRQHandler>
	...

080011c8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011ce:	1dfb      	adds	r3, r7, #7
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_Init+0x3c>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <HAL_Init+0x3c>)
 80011da:	2140      	movs	r1, #64	; 0x40
 80011dc:	430a      	orrs	r2, r1
 80011de:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011e0:	2003      	movs	r0, #3
 80011e2:	f000 f811 	bl	8001208 <HAL_InitTick>
 80011e6:	1e03      	subs	r3, r0, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80011ea:	1dfb      	adds	r3, r7, #7
 80011ec:	2201      	movs	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]
 80011f0:	e001      	b.n	80011f6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011f2:	f7ff fe1d 	bl	8000e30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011f6:	1dfb      	adds	r3, r7, #7
 80011f8:	781b      	ldrb	r3, [r3, #0]
}
 80011fa:	0018      	movs	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b002      	add	sp, #8
 8001200:	bd80      	pop	{r7, pc}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	40022000 	.word	0x40022000

08001208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001208:	b590      	push	{r4, r7, lr}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <HAL_InitTick+0x5c>)
 8001212:	681c      	ldr	r4, [r3, #0]
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <HAL_InitTick+0x60>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	0019      	movs	r1, r3
 800121a:	23fa      	movs	r3, #250	; 0xfa
 800121c:	0098      	lsls	r0, r3, #2
 800121e:	f7fe ff73 	bl	8000108 <__udivsi3>
 8001222:	0003      	movs	r3, r0
 8001224:	0019      	movs	r1, r3
 8001226:	0020      	movs	r0, r4
 8001228:	f7fe ff6e 	bl	8000108 <__udivsi3>
 800122c:	0003      	movs	r3, r0
 800122e:	0018      	movs	r0, r3
 8001230:	f000 fabd 	bl	80017ae <HAL_SYSTICK_Config>
 8001234:	1e03      	subs	r3, r0, #0
 8001236:	d001      	beq.n	800123c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e00f      	b.n	800125c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b03      	cmp	r3, #3
 8001240:	d80b      	bhi.n	800125a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	2301      	movs	r3, #1
 8001246:	425b      	negs	r3, r3
 8001248:	2200      	movs	r2, #0
 800124a:	0018      	movs	r0, r3
 800124c:	f000 fa9a 	bl	8001784 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_InitTick+0x64>)
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001256:	2300      	movs	r3, #0
 8001258:	e000      	b.n	800125c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
}
 800125c:	0018      	movs	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	b003      	add	sp, #12
 8001262:	bd90      	pop	{r4, r7, pc}
 8001264:	20000000 	.word	0x20000000
 8001268:	20000008 	.word	0x20000008
 800126c:	20000004 	.word	0x20000004

08001270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <HAL_IncTick+0x1c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	001a      	movs	r2, r3
 800127a:	4b05      	ldr	r3, [pc, #20]	; (8001290 <HAL_IncTick+0x20>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	18d2      	adds	r2, r2, r3
 8001280:	4b03      	ldr	r3, [pc, #12]	; (8001290 <HAL_IncTick+0x20>)
 8001282:	601a      	str	r2, [r3, #0]
}
 8001284:	46c0      	nop			; (mov r8, r8)
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	20000008 	.word	0x20000008
 8001290:	200001f8 	.word	0x200001f8

08001294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  return uwTick;
 8001298:	4b02      	ldr	r3, [pc, #8]	; (80012a4 <HAL_GetTick+0x10>)
 800129a:	681b      	ldr	r3, [r3, #0]
}
 800129c:	0018      	movs	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	200001f8 	.word	0x200001f8

080012a8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e159      	b.n	800156e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d10a      	bne.n	80012d8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2250      	movs	r2, #80	; 0x50
 80012cc:	2100      	movs	r1, #0
 80012ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	0018      	movs	r0, r3
 80012d4:	f7ff fdc0 	bl	8000e58 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012dc:	2210      	movs	r2, #16
 80012de:	4013      	ands	r3, r2
 80012e0:	2b10      	cmp	r3, #16
 80012e2:	d005      	beq.n	80012f0 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	2204      	movs	r2, #4
 80012ec:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80012ee:	d00b      	beq.n	8001308 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f4:	2210      	movs	r2, #16
 80012f6:	431a      	orrs	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2250      	movs	r2, #80	; 0x50
 8001300:	2100      	movs	r1, #0
 8001302:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e132      	b.n	800156e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800130c:	4a9a      	ldr	r2, [pc, #616]	; (8001578 <HAL_ADC_Init+0x2d0>)
 800130e:	4013      	ands	r3, r2
 8001310:	2202      	movs	r2, #2
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2203      	movs	r2, #3
 8001320:	4013      	ands	r3, r2
 8001322:	2b01      	cmp	r3, #1
 8001324:	d108      	bne.n	8001338 <HAL_ADC_Init+0x90>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2201      	movs	r2, #1
 800132e:	4013      	ands	r3, r2
 8001330:	2b01      	cmp	r3, #1
 8001332:	d101      	bne.n	8001338 <HAL_ADC_Init+0x90>
 8001334:	2301      	movs	r3, #1
 8001336:	e000      	b.n	800133a <HAL_ADC_Init+0x92>
 8001338:	2300      	movs	r3, #0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d149      	bne.n	80013d2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	23c0      	movs	r3, #192	; 0xc0
 8001344:	061b      	lsls	r3, r3, #24
 8001346:	429a      	cmp	r2, r3
 8001348:	d00b      	beq.n	8001362 <HAL_ADC_Init+0xba>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	2380      	movs	r3, #128	; 0x80
 8001350:	05db      	lsls	r3, r3, #23
 8001352:	429a      	cmp	r2, r3
 8001354:	d005      	beq.n	8001362 <HAL_ADC_Init+0xba>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	2380      	movs	r3, #128	; 0x80
 800135c:	061b      	lsls	r3, r3, #24
 800135e:	429a      	cmp	r2, r3
 8001360:	d111      	bne.n	8001386 <HAL_ADC_Init+0xde>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	691a      	ldr	r2, [r3, #16]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	0092      	lsls	r2, r2, #2
 800136e:	0892      	lsrs	r2, r2, #2
 8001370:	611a      	str	r2, [r3, #16]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6919      	ldr	r1, [r3, #16]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	430a      	orrs	r2, r1
 8001382:	611a      	str	r2, [r3, #16]
 8001384:	e014      	b.n	80013b0 <HAL_ADC_Init+0x108>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	691a      	ldr	r2, [r3, #16]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	0092      	lsls	r2, r2, #2
 8001392:	0892      	lsrs	r2, r2, #2
 8001394:	611a      	str	r2, [r3, #16]
 8001396:	4b79      	ldr	r3, [pc, #484]	; (800157c <HAL_ADC_Init+0x2d4>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	4b78      	ldr	r3, [pc, #480]	; (800157c <HAL_ADC_Init+0x2d4>)
 800139c:	4978      	ldr	r1, [pc, #480]	; (8001580 <HAL_ADC_Init+0x2d8>)
 800139e:	400a      	ands	r2, r1
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	4b76      	ldr	r3, [pc, #472]	; (800157c <HAL_ADC_Init+0x2d4>)
 80013a4:	6819      	ldr	r1, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	4b74      	ldr	r3, [pc, #464]	; (800157c <HAL_ADC_Init+0x2d4>)
 80013ac:	430a      	orrs	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68da      	ldr	r2, [r3, #12]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2118      	movs	r1, #24
 80013bc:	438a      	bics	r2, r1
 80013be:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	68d9      	ldr	r1, [r3, #12]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689a      	ldr	r2, [r3, #8]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	430a      	orrs	r2, r1
 80013d0:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80013d2:	4b6a      	ldr	r3, [pc, #424]	; (800157c <HAL_ADC_Init+0x2d4>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4b69      	ldr	r3, [pc, #420]	; (800157c <HAL_ADC_Init+0x2d4>)
 80013d8:	496a      	ldr	r1, [pc, #424]	; (8001584 <HAL_ADC_Init+0x2dc>)
 80013da:	400a      	ands	r2, r1
 80013dc:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80013de:	4b67      	ldr	r3, [pc, #412]	; (800157c <HAL_ADC_Init+0x2d4>)
 80013e0:	6819      	ldr	r1, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e6:	065a      	lsls	r2, r3, #25
 80013e8:	4b64      	ldr	r3, [pc, #400]	; (800157c <HAL_ADC_Init+0x2d4>)
 80013ea:	430a      	orrs	r2, r1
 80013ec:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	055b      	lsls	r3, r3, #21
 80013f8:	4013      	ands	r3, r2
 80013fa:	d108      	bne.n	800140e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2180      	movs	r1, #128	; 0x80
 8001408:	0549      	lsls	r1, r1, #21
 800140a:	430a      	orrs	r2, r1
 800140c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	68da      	ldr	r2, [r3, #12]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	495b      	ldr	r1, [pc, #364]	; (8001588 <HAL_ADC_Init+0x2e0>)
 800141a:	400a      	ands	r2, r1
 800141c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	68d9      	ldr	r1, [r3, #12]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d101      	bne.n	8001434 <HAL_ADC_Init+0x18c>
 8001430:	2304      	movs	r3, #4
 8001432:	e000      	b.n	8001436 <HAL_ADC_Init+0x18e>
 8001434:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001436:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2020      	movs	r0, #32
 800143c:	5c1b      	ldrb	r3, [r3, r0]
 800143e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001440:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	202c      	movs	r0, #44	; 0x2c
 8001446:	5c1b      	ldrb	r3, [r3, r0]
 8001448:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800144a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001450:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001458:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001460:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800146e:	23c2      	movs	r3, #194	; 0xc2
 8001470:	33ff      	adds	r3, #255	; 0xff
 8001472:	429a      	cmp	r2, r3
 8001474:	d00b      	beq.n	800148e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68d9      	ldr	r1, [r3, #12]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001484:	431a      	orrs	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	430a      	orrs	r2, r1
 800148c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2221      	movs	r2, #33	; 0x21
 8001492:	5c9b      	ldrb	r3, [r3, r2]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d11a      	bne.n	80014ce <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2220      	movs	r2, #32
 800149c:	5c9b      	ldrb	r3, [r3, r2]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d109      	bne.n	80014b6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68da      	ldr	r2, [r3, #12]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2180      	movs	r1, #128	; 0x80
 80014ae:	0249      	lsls	r1, r1, #9
 80014b0:	430a      	orrs	r2, r1
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	e00b      	b.n	80014ce <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ba:	2220      	movs	r2, #32
 80014bc:	431a      	orrs	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c6:	2201      	movs	r2, #1
 80014c8:	431a      	orrs	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d11f      	bne.n	8001516 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	691a      	ldr	r2, [r3, #16]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	492a      	ldr	r1, [pc, #168]	; (800158c <HAL_ADC_Init+0x2e4>)
 80014e2:	400a      	ands	r2, r1
 80014e4:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6919      	ldr	r1, [r3, #16]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80014f4:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80014fa:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	691a      	ldr	r2, [r3, #16]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2101      	movs	r1, #1
 8001510:	430a      	orrs	r2, r1
 8001512:	611a      	str	r2, [r3, #16]
 8001514:	e00e      	b.n	8001534 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	2201      	movs	r2, #1
 800151e:	4013      	ands	r3, r2
 8001520:	2b01      	cmp	r3, #1
 8001522:	d107      	bne.n	8001534 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	691a      	ldr	r2, [r3, #16]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2101      	movs	r1, #1
 8001530:	438a      	bics	r2, r1
 8001532:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	695a      	ldr	r2, [r3, #20]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2107      	movs	r1, #7
 8001540:	438a      	bics	r2, r1
 8001542:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6959      	ldr	r1, [r3, #20]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	430a      	orrs	r2, r1
 8001554:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001560:	2203      	movs	r2, #3
 8001562:	4393      	bics	r3, r2
 8001564:	2201      	movs	r2, #1
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	0018      	movs	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	b002      	add	sp, #8
 8001574:	bd80      	pop	{r7, pc}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	fffffefd 	.word	0xfffffefd
 800157c:	40012708 	.word	0x40012708
 8001580:	ffc3ffff 	.word	0xffc3ffff
 8001584:	fdffffff 	.word	0xfdffffff
 8001588:	fffe0219 	.word	0xfffe0219
 800158c:	fffffc03 	.word	0xfffffc03

08001590 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2250      	movs	r2, #80	; 0x50
 800159e:	5c9b      	ldrb	r3, [r3, r2]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d101      	bne.n	80015a8 <HAL_ADC_ConfigChannel+0x18>
 80015a4:	2302      	movs	r3, #2
 80015a6:	e050      	b.n	800164a <HAL_ADC_ConfigChannel+0xba>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2250      	movs	r2, #80	; 0x50
 80015ac:	2101      	movs	r1, #1
 80015ae:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2204      	movs	r2, #4
 80015b8:	4013      	ands	r3, r2
 80015ba:	d00b      	beq.n	80015d4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c0:	2220      	movs	r2, #32
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2250      	movs	r2, #80	; 0x50
 80015cc:	2100      	movs	r1, #0
 80015ce:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e03a      	b.n	800164a <HAL_ADC_ConfigChannel+0xba>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	4a1e      	ldr	r2, [pc, #120]	; (8001654 <HAL_ADC_ConfigChannel+0xc4>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d018      	beq.n	8001610 <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	035b      	lsls	r3, r3, #13
 80015ea:	0b5a      	lsrs	r2, r3, #13
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	2380      	movs	r3, #128	; 0x80
 80015fa:	029b      	lsls	r3, r3, #10
 80015fc:	4013      	ands	r3, r2
 80015fe:	d01f      	beq.n	8001640 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001600:	4b15      	ldr	r3, [pc, #84]	; (8001658 <HAL_ADC_ConfigChannel+0xc8>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b14      	ldr	r3, [pc, #80]	; (8001658 <HAL_ADC_ConfigChannel+0xc8>)
 8001606:	2180      	movs	r1, #128	; 0x80
 8001608:	03c9      	lsls	r1, r1, #15
 800160a:	430a      	orrs	r2, r1
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	e017      	b.n	8001640 <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	035b      	lsls	r3, r3, #13
 800161c:	0b5b      	lsrs	r3, r3, #13
 800161e:	43d9      	mvns	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	400a      	ands	r2, r1
 8001626:	629a      	str	r2, [r3, #40]	; 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	029b      	lsls	r3, r3, #10
 8001630:	4013      	ands	r3, r2
 8001632:	d005      	beq.n	8001640 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <HAL_ADC_ConfigChannel+0xc8>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <HAL_ADC_ConfigChannel+0xc8>)
 800163a:	4908      	ldr	r1, [pc, #32]	; (800165c <HAL_ADC_ConfigChannel+0xcc>)
 800163c:	400a      	ands	r2, r1
 800163e:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2250      	movs	r2, #80	; 0x50
 8001644:	2100      	movs	r1, #0
 8001646:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	0018      	movs	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	b002      	add	sp, #8
 8001650:	bd80      	pop	{r7, pc}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	00001001 	.word	0x00001001
 8001658:	40012708 	.word	0x40012708
 800165c:	ffbfffff 	.word	0xffbfffff

08001660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	0002      	movs	r2, r0
 8001668:	6039      	str	r1, [r7, #0]
 800166a:	1dfb      	adds	r3, r7, #7
 800166c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800166e:	1dfb      	adds	r3, r7, #7
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b7f      	cmp	r3, #127	; 0x7f
 8001674:	d828      	bhi.n	80016c8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001676:	4a2f      	ldr	r2, [pc, #188]	; (8001734 <__NVIC_SetPriority+0xd4>)
 8001678:	1dfb      	adds	r3, r7, #7
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	b25b      	sxtb	r3, r3
 800167e:	089b      	lsrs	r3, r3, #2
 8001680:	33c0      	adds	r3, #192	; 0xc0
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	589b      	ldr	r3, [r3, r2]
 8001686:	1dfa      	adds	r2, r7, #7
 8001688:	7812      	ldrb	r2, [r2, #0]
 800168a:	0011      	movs	r1, r2
 800168c:	2203      	movs	r2, #3
 800168e:	400a      	ands	r2, r1
 8001690:	00d2      	lsls	r2, r2, #3
 8001692:	21ff      	movs	r1, #255	; 0xff
 8001694:	4091      	lsls	r1, r2
 8001696:	000a      	movs	r2, r1
 8001698:	43d2      	mvns	r2, r2
 800169a:	401a      	ands	r2, r3
 800169c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	019b      	lsls	r3, r3, #6
 80016a2:	22ff      	movs	r2, #255	; 0xff
 80016a4:	401a      	ands	r2, r3
 80016a6:	1dfb      	adds	r3, r7, #7
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	0018      	movs	r0, r3
 80016ac:	2303      	movs	r3, #3
 80016ae:	4003      	ands	r3, r0
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016b4:	481f      	ldr	r0, [pc, #124]	; (8001734 <__NVIC_SetPriority+0xd4>)
 80016b6:	1dfb      	adds	r3, r7, #7
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	b25b      	sxtb	r3, r3
 80016bc:	089b      	lsrs	r3, r3, #2
 80016be:	430a      	orrs	r2, r1
 80016c0:	33c0      	adds	r3, #192	; 0xc0
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016c6:	e031      	b.n	800172c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016c8:	4a1b      	ldr	r2, [pc, #108]	; (8001738 <__NVIC_SetPriority+0xd8>)
 80016ca:	1dfb      	adds	r3, r7, #7
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	0019      	movs	r1, r3
 80016d0:	230f      	movs	r3, #15
 80016d2:	400b      	ands	r3, r1
 80016d4:	3b08      	subs	r3, #8
 80016d6:	089b      	lsrs	r3, r3, #2
 80016d8:	3306      	adds	r3, #6
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	18d3      	adds	r3, r2, r3
 80016de:	3304      	adds	r3, #4
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	1dfa      	adds	r2, r7, #7
 80016e4:	7812      	ldrb	r2, [r2, #0]
 80016e6:	0011      	movs	r1, r2
 80016e8:	2203      	movs	r2, #3
 80016ea:	400a      	ands	r2, r1
 80016ec:	00d2      	lsls	r2, r2, #3
 80016ee:	21ff      	movs	r1, #255	; 0xff
 80016f0:	4091      	lsls	r1, r2
 80016f2:	000a      	movs	r2, r1
 80016f4:	43d2      	mvns	r2, r2
 80016f6:	401a      	ands	r2, r3
 80016f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	019b      	lsls	r3, r3, #6
 80016fe:	22ff      	movs	r2, #255	; 0xff
 8001700:	401a      	ands	r2, r3
 8001702:	1dfb      	adds	r3, r7, #7
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	0018      	movs	r0, r3
 8001708:	2303      	movs	r3, #3
 800170a:	4003      	ands	r3, r0
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001710:	4809      	ldr	r0, [pc, #36]	; (8001738 <__NVIC_SetPriority+0xd8>)
 8001712:	1dfb      	adds	r3, r7, #7
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	001c      	movs	r4, r3
 8001718:	230f      	movs	r3, #15
 800171a:	4023      	ands	r3, r4
 800171c:	3b08      	subs	r3, #8
 800171e:	089b      	lsrs	r3, r3, #2
 8001720:	430a      	orrs	r2, r1
 8001722:	3306      	adds	r3, #6
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	18c3      	adds	r3, r0, r3
 8001728:	3304      	adds	r3, #4
 800172a:	601a      	str	r2, [r3, #0]
}
 800172c:	46c0      	nop			; (mov r8, r8)
 800172e:	46bd      	mov	sp, r7
 8001730:	b003      	add	sp, #12
 8001732:	bd90      	pop	{r4, r7, pc}
 8001734:	e000e100 	.word	0xe000e100
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	1e5a      	subs	r2, r3, #1
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	045b      	lsls	r3, r3, #17
 800174c:	429a      	cmp	r2, r3
 800174e:	d301      	bcc.n	8001754 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001750:	2301      	movs	r3, #1
 8001752:	e010      	b.n	8001776 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001754:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <SysTick_Config+0x44>)
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	3a01      	subs	r2, #1
 800175a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800175c:	2301      	movs	r3, #1
 800175e:	425b      	negs	r3, r3
 8001760:	2103      	movs	r1, #3
 8001762:	0018      	movs	r0, r3
 8001764:	f7ff ff7c 	bl	8001660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <SysTick_Config+0x44>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176e:	4b04      	ldr	r3, [pc, #16]	; (8001780 <SysTick_Config+0x44>)
 8001770:	2207      	movs	r2, #7
 8001772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001774:	2300      	movs	r3, #0
}
 8001776:	0018      	movs	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	b002      	add	sp, #8
 800177c:	bd80      	pop	{r7, pc}
 800177e:	46c0      	nop			; (mov r8, r8)
 8001780:	e000e010 	.word	0xe000e010

08001784 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
 800178e:	210f      	movs	r1, #15
 8001790:	187b      	adds	r3, r7, r1
 8001792:	1c02      	adds	r2, r0, #0
 8001794:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	187b      	adds	r3, r7, r1
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	b25b      	sxtb	r3, r3
 800179e:	0011      	movs	r1, r2
 80017a0:	0018      	movs	r0, r3
 80017a2:	f7ff ff5d 	bl	8001660 <__NVIC_SetPriority>
}
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b004      	add	sp, #16
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	0018      	movs	r0, r3
 80017ba:	f7ff ffbf 	bl	800173c <SysTick_Config>
 80017be:	0003      	movs	r3, r0
}
 80017c0:	0018      	movs	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	b002      	add	sp, #8
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80017de:	e149      	b.n	8001a74 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2101      	movs	r1, #1
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	4091      	lsls	r1, r2
 80017ea:	000a      	movs	r2, r1
 80017ec:	4013      	ands	r3, r2
 80017ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d100      	bne.n	80017f8 <HAL_GPIO_Init+0x30>
 80017f6:	e13a      	b.n	8001a6e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2203      	movs	r2, #3
 80017fe:	4013      	ands	r3, r2
 8001800:	2b01      	cmp	r3, #1
 8001802:	d005      	beq.n	8001810 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2203      	movs	r2, #3
 800180a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800180c:	2b02      	cmp	r3, #2
 800180e:	d130      	bne.n	8001872 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	2203      	movs	r2, #3
 800181c:	409a      	lsls	r2, r3
 800181e:	0013      	movs	r3, r2
 8001820:	43da      	mvns	r2, r3
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	4013      	ands	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	68da      	ldr	r2, [r3, #12]
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	409a      	lsls	r2, r3
 8001832:	0013      	movs	r3, r2
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4313      	orrs	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001846:	2201      	movs	r2, #1
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	409a      	lsls	r2, r3
 800184c:	0013      	movs	r3, r2
 800184e:	43da      	mvns	r2, r3
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	4013      	ands	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	091b      	lsrs	r3, r3, #4
 800185c:	2201      	movs	r2, #1
 800185e:	401a      	ands	r2, r3
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	409a      	lsls	r2, r3
 8001864:	0013      	movs	r3, r2
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2203      	movs	r2, #3
 8001878:	4013      	ands	r3, r2
 800187a:	2b03      	cmp	r3, #3
 800187c:	d017      	beq.n	80018ae <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	2203      	movs	r2, #3
 800188a:	409a      	lsls	r2, r3
 800188c:	0013      	movs	r3, r2
 800188e:	43da      	mvns	r2, r3
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	409a      	lsls	r2, r3
 80018a0:	0013      	movs	r3, r2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2203      	movs	r2, #3
 80018b4:	4013      	ands	r3, r2
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d123      	bne.n	8001902 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	08da      	lsrs	r2, r3, #3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3208      	adds	r2, #8
 80018c2:	0092      	lsls	r2, r2, #2
 80018c4:	58d3      	ldr	r3, [r2, r3]
 80018c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	2207      	movs	r2, #7
 80018cc:	4013      	ands	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	220f      	movs	r2, #15
 80018d2:	409a      	lsls	r2, r3
 80018d4:	0013      	movs	r3, r2
 80018d6:	43da      	mvns	r2, r3
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	691a      	ldr	r2, [r3, #16]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	2107      	movs	r1, #7
 80018e6:	400b      	ands	r3, r1
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	409a      	lsls	r2, r3
 80018ec:	0013      	movs	r3, r2
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	08da      	lsrs	r2, r3, #3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3208      	adds	r2, #8
 80018fc:	0092      	lsls	r2, r2, #2
 80018fe:	6939      	ldr	r1, [r7, #16]
 8001900:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	2203      	movs	r2, #3
 800190e:	409a      	lsls	r2, r3
 8001910:	0013      	movs	r3, r2
 8001912:	43da      	mvns	r2, r3
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2203      	movs	r2, #3
 8001920:	401a      	ands	r2, r3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	409a      	lsls	r2, r3
 8001928:	0013      	movs	r3, r2
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	23c0      	movs	r3, #192	; 0xc0
 800193c:	029b      	lsls	r3, r3, #10
 800193e:	4013      	ands	r3, r2
 8001940:	d100      	bne.n	8001944 <HAL_GPIO_Init+0x17c>
 8001942:	e094      	b.n	8001a6e <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001944:	4b51      	ldr	r3, [pc, #324]	; (8001a8c <HAL_GPIO_Init+0x2c4>)
 8001946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001948:	4b50      	ldr	r3, [pc, #320]	; (8001a8c <HAL_GPIO_Init+0x2c4>)
 800194a:	2101      	movs	r1, #1
 800194c:	430a      	orrs	r2, r1
 800194e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001950:	4a4f      	ldr	r2, [pc, #316]	; (8001a90 <HAL_GPIO_Init+0x2c8>)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	089b      	lsrs	r3, r3, #2
 8001956:	3302      	adds	r3, #2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	589b      	ldr	r3, [r3, r2]
 800195c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	2203      	movs	r2, #3
 8001962:	4013      	ands	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	220f      	movs	r2, #15
 8001968:	409a      	lsls	r2, r3
 800196a:	0013      	movs	r3, r2
 800196c:	43da      	mvns	r2, r3
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	23a0      	movs	r3, #160	; 0xa0
 8001978:	05db      	lsls	r3, r3, #23
 800197a:	429a      	cmp	r2, r3
 800197c:	d013      	beq.n	80019a6 <HAL_GPIO_Init+0x1de>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a44      	ldr	r2, [pc, #272]	; (8001a94 <HAL_GPIO_Init+0x2cc>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d00d      	beq.n	80019a2 <HAL_GPIO_Init+0x1da>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a43      	ldr	r2, [pc, #268]	; (8001a98 <HAL_GPIO_Init+0x2d0>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d007      	beq.n	800199e <HAL_GPIO_Init+0x1d6>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a42      	ldr	r2, [pc, #264]	; (8001a9c <HAL_GPIO_Init+0x2d4>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d101      	bne.n	800199a <HAL_GPIO_Init+0x1d2>
 8001996:	2305      	movs	r3, #5
 8001998:	e006      	b.n	80019a8 <HAL_GPIO_Init+0x1e0>
 800199a:	2306      	movs	r3, #6
 800199c:	e004      	b.n	80019a8 <HAL_GPIO_Init+0x1e0>
 800199e:	2302      	movs	r3, #2
 80019a0:	e002      	b.n	80019a8 <HAL_GPIO_Init+0x1e0>
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <HAL_GPIO_Init+0x1e0>
 80019a6:	2300      	movs	r3, #0
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	2103      	movs	r1, #3
 80019ac:	400a      	ands	r2, r1
 80019ae:	0092      	lsls	r2, r2, #2
 80019b0:	4093      	lsls	r3, r2
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019b8:	4935      	ldr	r1, [pc, #212]	; (8001a90 <HAL_GPIO_Init+0x2c8>)
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	089b      	lsrs	r3, r3, #2
 80019be:	3302      	adds	r3, #2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019c6:	4b36      	ldr	r3, [pc, #216]	; (8001aa0 <HAL_GPIO_Init+0x2d8>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	43da      	mvns	r2, r3
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4013      	ands	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	035b      	lsls	r3, r3, #13
 80019de:	4013      	ands	r3, r2
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019ea:	4b2d      	ldr	r3, [pc, #180]	; (8001aa0 <HAL_GPIO_Init+0x2d8>)
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80019f0:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <HAL_GPIO_Init+0x2d8>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	43da      	mvns	r2, r3
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	039b      	lsls	r3, r3, #14
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a14:	4b22      	ldr	r3, [pc, #136]	; (8001aa0 <HAL_GPIO_Init+0x2d8>)
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001a1a:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <HAL_GPIO_Init+0x2d8>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	43da      	mvns	r2, r3
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	4013      	ands	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	029b      	lsls	r3, r3, #10
 8001a32:	4013      	ands	r3, r2
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a3e:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <HAL_GPIO_Init+0x2d8>)
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a44:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <HAL_GPIO_Init+0x2d8>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	43da      	mvns	r2, r3
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	025b      	lsls	r3, r3, #9
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d003      	beq.n	8001a68 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a68:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <HAL_GPIO_Init+0x2d8>)
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	3301      	adds	r3, #1
 8001a72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	40da      	lsrs	r2, r3
 8001a7c:	1e13      	subs	r3, r2, #0
 8001a7e:	d000      	beq.n	8001a82 <HAL_GPIO_Init+0x2ba>
 8001a80:	e6ae      	b.n	80017e0 <HAL_GPIO_Init+0x18>
  }
}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	46c0      	nop			; (mov r8, r8)
 8001a86:	46bd      	mov	sp, r7
 8001a88:	b006      	add	sp, #24
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40010000 	.word	0x40010000
 8001a94:	50000400 	.word	0x50000400
 8001a98:	50000800 	.word	0x50000800
 8001a9c:	50001c00 	.word	0x50001c00
 8001aa0:	40010400 	.word	0x40010400

08001aa4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	0008      	movs	r0, r1
 8001aae:	0011      	movs	r1, r2
 8001ab0:	1cbb      	adds	r3, r7, #2
 8001ab2:	1c02      	adds	r2, r0, #0
 8001ab4:	801a      	strh	r2, [r3, #0]
 8001ab6:	1c7b      	adds	r3, r7, #1
 8001ab8:	1c0a      	adds	r2, r1, #0
 8001aba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001abc:	1c7b      	adds	r3, r7, #1
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d004      	beq.n	8001ace <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ac4:	1cbb      	adds	r3, r7, #2
 8001ac6:	881a      	ldrh	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001acc:	e003      	b.n	8001ad6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001ace:	1cbb      	adds	r3, r7, #2
 8001ad0:	881a      	ldrh	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	b002      	add	sp, #8
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e082      	b.n	8001bf8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2241      	movs	r2, #65	; 0x41
 8001af6:	5c9b      	ldrb	r3, [r3, r2]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d107      	bne.n	8001b0e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2240      	movs	r2, #64	; 0x40
 8001b02:	2100      	movs	r1, #0
 8001b04:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f7ff f9e1 	bl	8000ed0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2241      	movs	r2, #65	; 0x41
 8001b12:	2124      	movs	r1, #36	; 0x24
 8001b14:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2101      	movs	r1, #1
 8001b22:	438a      	bics	r2, r1
 8001b24:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4934      	ldr	r1, [pc, #208]	; (8001c00 <HAL_I2C_Init+0x120>)
 8001b30:	400a      	ands	r2, r1
 8001b32:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689a      	ldr	r2, [r3, #8]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4931      	ldr	r1, [pc, #196]	; (8001c04 <HAL_I2C_Init+0x124>)
 8001b40:	400a      	ands	r2, r1
 8001b42:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d108      	bne.n	8001b5e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2180      	movs	r1, #128	; 0x80
 8001b56:	0209      	lsls	r1, r1, #8
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	e007      	b.n	8001b6e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2184      	movs	r1, #132	; 0x84
 8001b68:	0209      	lsls	r1, r1, #8
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d104      	bne.n	8001b80 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2280      	movs	r2, #128	; 0x80
 8001b7c:	0112      	lsls	r2, r2, #4
 8001b7e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	491f      	ldr	r1, [pc, #124]	; (8001c08 <HAL_I2C_Init+0x128>)
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	491a      	ldr	r1, [pc, #104]	; (8001c04 <HAL_I2C_Init+0x124>)
 8001b9c:	400a      	ands	r2, r1
 8001b9e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691a      	ldr	r2, [r3, #16]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69d9      	ldr	r1, [r3, #28]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a1a      	ldr	r2, [r3, #32]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2241      	movs	r2, #65	; 0x41
 8001be4:	2120      	movs	r1, #32
 8001be6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2242      	movs	r2, #66	; 0x42
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b002      	add	sp, #8
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	f0ffffff 	.word	0xf0ffffff
 8001c04:	ffff7fff 	.word	0xffff7fff
 8001c08:	02008000 	.word	0x02008000

08001c0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2241      	movs	r2, #65	; 0x41
 8001c1a:	5c9b      	ldrb	r3, [r3, r2]
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b20      	cmp	r3, #32
 8001c20:	d138      	bne.n	8001c94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2240      	movs	r2, #64	; 0x40
 8001c26:	5c9b      	ldrb	r3, [r3, r2]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d101      	bne.n	8001c30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	e032      	b.n	8001c96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2240      	movs	r2, #64	; 0x40
 8001c34:	2101      	movs	r1, #1
 8001c36:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2241      	movs	r2, #65	; 0x41
 8001c3c:	2124      	movs	r1, #36	; 0x24
 8001c3e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	438a      	bics	r2, r1
 8001c4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4911      	ldr	r1, [pc, #68]	; (8001ca0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001c5c:	400a      	ands	r2, r1
 8001c5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6819      	ldr	r1, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2241      	movs	r2, #65	; 0x41
 8001c84:	2120      	movs	r1, #32
 8001c86:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2240      	movs	r2, #64	; 0x40
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	e000      	b.n	8001c96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c94:	2302      	movs	r3, #2
  }
}
 8001c96:	0018      	movs	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	b002      	add	sp, #8
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	ffffefff 	.word	0xffffefff

08001ca4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2241      	movs	r2, #65	; 0x41
 8001cb2:	5c9b      	ldrb	r3, [r3, r2]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b20      	cmp	r3, #32
 8001cb8:	d139      	bne.n	8001d2e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2240      	movs	r2, #64	; 0x40
 8001cbe:	5c9b      	ldrb	r3, [r3, r2]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d101      	bne.n	8001cc8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	e033      	b.n	8001d30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2240      	movs	r2, #64	; 0x40
 8001ccc:	2101      	movs	r1, #1
 8001cce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2241      	movs	r2, #65	; 0x41
 8001cd4:	2124      	movs	r1, #36	; 0x24
 8001cd6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	438a      	bics	r2, r1
 8001ce6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4a11      	ldr	r2, [pc, #68]	; (8001d38 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	021b      	lsls	r3, r3, #8
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2101      	movs	r1, #1
 8001d16:	430a      	orrs	r2, r1
 8001d18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2241      	movs	r2, #65	; 0x41
 8001d1e:	2120      	movs	r1, #32
 8001d20:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2240      	movs	r2, #64	; 0x40
 8001d26:	2100      	movs	r1, #0
 8001d28:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	e000      	b.n	8001d30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d2e:	2302      	movs	r3, #2
  }
}
 8001d30:	0018      	movs	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b004      	add	sp, #16
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	fffff0ff 	.word	0xfffff0ff

08001d3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d3c:	b5b0      	push	{r4, r5, r7, lr}
 8001d3e:	b08a      	sub	sp, #40	; 0x28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d102      	bne.n	8001d50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	f000 fb6c 	bl	8002428 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d50:	4bc8      	ldr	r3, [pc, #800]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	220c      	movs	r2, #12
 8001d56:	4013      	ands	r3, r2
 8001d58:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d5a:	4bc6      	ldr	r3, [pc, #792]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	025b      	lsls	r3, r3, #9
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d100      	bne.n	8001d72 <HAL_RCC_OscConfig+0x36>
 8001d70:	e07d      	b.n	8001e6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d007      	beq.n	8001d88 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	2b0c      	cmp	r3, #12
 8001d7c:	d112      	bne.n	8001da4 <HAL_RCC_OscConfig+0x68>
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	2380      	movs	r3, #128	; 0x80
 8001d82:	025b      	lsls	r3, r3, #9
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d10d      	bne.n	8001da4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d88:	4bba      	ldr	r3, [pc, #744]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	029b      	lsls	r3, r3, #10
 8001d90:	4013      	ands	r3, r2
 8001d92:	d100      	bne.n	8001d96 <HAL_RCC_OscConfig+0x5a>
 8001d94:	e06a      	b.n	8001e6c <HAL_RCC_OscConfig+0x130>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d166      	bne.n	8001e6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	f000 fb42 	bl	8002428 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	025b      	lsls	r3, r3, #9
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d107      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x84>
 8001db0:	4bb0      	ldr	r3, [pc, #704]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4baf      	ldr	r3, [pc, #700]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001db6:	2180      	movs	r1, #128	; 0x80
 8001db8:	0249      	lsls	r1, r1, #9
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	e027      	b.n	8001e10 <HAL_RCC_OscConfig+0xd4>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	23a0      	movs	r3, #160	; 0xa0
 8001dc6:	02db      	lsls	r3, r3, #11
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d10e      	bne.n	8001dea <HAL_RCC_OscConfig+0xae>
 8001dcc:	4ba9      	ldr	r3, [pc, #676]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4ba8      	ldr	r3, [pc, #672]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001dd2:	2180      	movs	r1, #128	; 0x80
 8001dd4:	02c9      	lsls	r1, r1, #11
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	4ba6      	ldr	r3, [pc, #664]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	4ba5      	ldr	r3, [pc, #660]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001de0:	2180      	movs	r1, #128	; 0x80
 8001de2:	0249      	lsls	r1, r1, #9
 8001de4:	430a      	orrs	r2, r1
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	e012      	b.n	8001e10 <HAL_RCC_OscConfig+0xd4>
 8001dea:	4ba2      	ldr	r3, [pc, #648]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	4ba1      	ldr	r3, [pc, #644]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001df0:	49a1      	ldr	r1, [pc, #644]	; (8002078 <HAL_RCC_OscConfig+0x33c>)
 8001df2:	400a      	ands	r2, r1
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	4b9f      	ldr	r3, [pc, #636]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	2380      	movs	r3, #128	; 0x80
 8001dfc:	025b      	lsls	r3, r3, #9
 8001dfe:	4013      	ands	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4b9b      	ldr	r3, [pc, #620]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b9a      	ldr	r3, [pc, #616]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001e0a:	499c      	ldr	r1, [pc, #624]	; (800207c <HAL_RCC_OscConfig+0x340>)
 8001e0c:	400a      	ands	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d014      	beq.n	8001e42 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e18:	f7ff fa3c 	bl	8001294 <HAL_GetTick>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e22:	f7ff fa37 	bl	8001294 <HAL_GetTick>
 8001e26:	0002      	movs	r2, r0
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b64      	cmp	r3, #100	; 0x64
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e2f9      	b.n	8002428 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e34:	4b8f      	ldr	r3, [pc, #572]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	2380      	movs	r3, #128	; 0x80
 8001e3a:	029b      	lsls	r3, r3, #10
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d0f0      	beq.n	8001e22 <HAL_RCC_OscConfig+0xe6>
 8001e40:	e015      	b.n	8001e6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e42:	f7ff fa27 	bl	8001294 <HAL_GetTick>
 8001e46:	0003      	movs	r3, r0
 8001e48:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e4c:	f7ff fa22 	bl	8001294 <HAL_GetTick>
 8001e50:	0002      	movs	r2, r0
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b64      	cmp	r3, #100	; 0x64
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e2e4      	b.n	8002428 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e5e:	4b85      	ldr	r3, [pc, #532]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	2380      	movs	r3, #128	; 0x80
 8001e64:	029b      	lsls	r3, r3, #10
 8001e66:	4013      	ands	r3, r2
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x110>
 8001e6a:	e000      	b.n	8001e6e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e6c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2202      	movs	r2, #2
 8001e74:	4013      	ands	r3, r2
 8001e76:	d100      	bne.n	8001e7a <HAL_RCC_OscConfig+0x13e>
 8001e78:	e099      	b.n	8001fae <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	2220      	movs	r2, #32
 8001e84:	4013      	ands	r3, r2
 8001e86:	d009      	beq.n	8001e9c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001e88:	4b7a      	ldr	r3, [pc, #488]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b79      	ldr	r3, [pc, #484]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001e8e:	2120      	movs	r1, #32
 8001e90:	430a      	orrs	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	2220      	movs	r2, #32
 8001e98:	4393      	bics	r3, r2
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d005      	beq.n	8001eae <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	2b0c      	cmp	r3, #12
 8001ea6:	d13e      	bne.n	8001f26 <HAL_RCC_OscConfig+0x1ea>
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d13b      	bne.n	8001f26 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001eae:	4b71      	ldr	r3, [pc, #452]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2204      	movs	r2, #4
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d004      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x186>
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e2b2      	b.n	8002428 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec2:	4b6c      	ldr	r3, [pc, #432]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	4a6e      	ldr	r2, [pc, #440]	; (8002080 <HAL_RCC_OscConfig+0x344>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	0019      	movs	r1, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	021a      	lsls	r2, r3, #8
 8001ed2:	4b68      	ldr	r3, [pc, #416]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001ed8:	4b66      	ldr	r3, [pc, #408]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2209      	movs	r2, #9
 8001ede:	4393      	bics	r3, r2
 8001ee0:	0019      	movs	r1, r3
 8001ee2:	4b64      	ldr	r3, [pc, #400]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001eea:	f000 fbeb 	bl	80026c4 <HAL_RCC_GetSysClockFreq>
 8001eee:	0001      	movs	r1, r0
 8001ef0:	4b60      	ldr	r3, [pc, #384]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	220f      	movs	r2, #15
 8001ef8:	4013      	ands	r3, r2
 8001efa:	4a62      	ldr	r2, [pc, #392]	; (8002084 <HAL_RCC_OscConfig+0x348>)
 8001efc:	5cd3      	ldrb	r3, [r2, r3]
 8001efe:	000a      	movs	r2, r1
 8001f00:	40da      	lsrs	r2, r3
 8001f02:	4b61      	ldr	r3, [pc, #388]	; (8002088 <HAL_RCC_OscConfig+0x34c>)
 8001f04:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001f06:	4b61      	ldr	r3, [pc, #388]	; (800208c <HAL_RCC_OscConfig+0x350>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2513      	movs	r5, #19
 8001f0c:	197c      	adds	r4, r7, r5
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f7ff f97a 	bl	8001208 <HAL_InitTick>
 8001f14:	0003      	movs	r3, r0
 8001f16:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001f18:	197b      	adds	r3, r7, r5
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d046      	beq.n	8001fae <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001f20:	197b      	adds	r3, r7, r5
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	e280      	b.n	8002428 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d027      	beq.n	8001f7c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001f2c:	4b51      	ldr	r3, [pc, #324]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2209      	movs	r2, #9
 8001f32:	4393      	bics	r3, r2
 8001f34:	0019      	movs	r1, r3
 8001f36:	4b4f      	ldr	r3, [pc, #316]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3e:	f7ff f9a9 	bl	8001294 <HAL_GetTick>
 8001f42:	0003      	movs	r3, r0
 8001f44:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f48:	f7ff f9a4 	bl	8001294 <HAL_GetTick>
 8001f4c:	0002      	movs	r2, r0
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e266      	b.n	8002428 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f5a:	4b46      	ldr	r3, [pc, #280]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2204      	movs	r2, #4
 8001f60:	4013      	ands	r3, r2
 8001f62:	d0f1      	beq.n	8001f48 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f64:	4b43      	ldr	r3, [pc, #268]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	4a45      	ldr	r2, [pc, #276]	; (8002080 <HAL_RCC_OscConfig+0x344>)
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	0019      	movs	r1, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	021a      	lsls	r2, r3, #8
 8001f74:	4b3f      	ldr	r3, [pc, #252]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001f76:	430a      	orrs	r2, r1
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	e018      	b.n	8001fae <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f7c:	4b3d      	ldr	r3, [pc, #244]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4b3c      	ldr	r3, [pc, #240]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001f82:	2101      	movs	r1, #1
 8001f84:	438a      	bics	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7ff f984 	bl	8001294 <HAL_GetTick>
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f92:	f7ff f97f 	bl	8001294 <HAL_GetTick>
 8001f96:	0002      	movs	r2, r0
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e241      	b.n	8002428 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fa4:	4b33      	ldr	r3, [pc, #204]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2204      	movs	r2, #4
 8001faa:	4013      	ands	r3, r2
 8001fac:	d1f1      	bne.n	8001f92 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2210      	movs	r2, #16
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d100      	bne.n	8001fba <HAL_RCC_OscConfig+0x27e>
 8001fb8:	e0a1      	b.n	80020fe <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d140      	bne.n	8002042 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fc0:	4b2c      	ldr	r3, [pc, #176]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	2380      	movs	r3, #128	; 0x80
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d005      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x29c>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e227      	b.n	8002428 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fd8:	4b26      	ldr	r3, [pc, #152]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4a2c      	ldr	r2, [pc, #176]	; (8002090 <HAL_RCC_OscConfig+0x354>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	0019      	movs	r1, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1a      	ldr	r2, [r3, #32]
 8001fe6:	4b23      	ldr	r3, [pc, #140]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fec:	4b21      	ldr	r3, [pc, #132]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	021b      	lsls	r3, r3, #8
 8001ff2:	0a19      	lsrs	r1, r3, #8
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	061a      	lsls	r2, r3, #24
 8001ffa:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	0b5b      	lsrs	r3, r3, #13
 8002006:	3301      	adds	r3, #1
 8002008:	2280      	movs	r2, #128	; 0x80
 800200a:	0212      	lsls	r2, r2, #8
 800200c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800200e:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	091b      	lsrs	r3, r3, #4
 8002014:	210f      	movs	r1, #15
 8002016:	400b      	ands	r3, r1
 8002018:	491a      	ldr	r1, [pc, #104]	; (8002084 <HAL_RCC_OscConfig+0x348>)
 800201a:	5ccb      	ldrb	r3, [r1, r3]
 800201c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800201e:	4b1a      	ldr	r3, [pc, #104]	; (8002088 <HAL_RCC_OscConfig+0x34c>)
 8002020:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002022:	4b1a      	ldr	r3, [pc, #104]	; (800208c <HAL_RCC_OscConfig+0x350>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2513      	movs	r5, #19
 8002028:	197c      	adds	r4, r7, r5
 800202a:	0018      	movs	r0, r3
 800202c:	f7ff f8ec 	bl	8001208 <HAL_InitTick>
 8002030:	0003      	movs	r3, r0
 8002032:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002034:	197b      	adds	r3, r7, r5
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d060      	beq.n	80020fe <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 800203c:	197b      	adds	r3, r7, r5
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	e1f2      	b.n	8002428 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d03f      	beq.n	80020ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800204a:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <HAL_RCC_OscConfig+0x338>)
 8002050:	2180      	movs	r1, #128	; 0x80
 8002052:	0049      	lsls	r1, r1, #1
 8002054:	430a      	orrs	r2, r1
 8002056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002058:	f7ff f91c 	bl	8001294 <HAL_GetTick>
 800205c:	0003      	movs	r3, r0
 800205e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002060:	e018      	b.n	8002094 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002062:	f7ff f917 	bl	8001294 <HAL_GetTick>
 8002066:	0002      	movs	r2, r0
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d911      	bls.n	8002094 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e1d9      	b.n	8002428 <HAL_RCC_OscConfig+0x6ec>
 8002074:	40021000 	.word	0x40021000
 8002078:	fffeffff 	.word	0xfffeffff
 800207c:	fffbffff 	.word	0xfffbffff
 8002080:	ffffe0ff 	.word	0xffffe0ff
 8002084:	080049d4 	.word	0x080049d4
 8002088:	20000000 	.word	0x20000000
 800208c:	20000004 	.word	0x20000004
 8002090:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002094:	4bc9      	ldr	r3, [pc, #804]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	2380      	movs	r3, #128	; 0x80
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4013      	ands	r3, r2
 800209e:	d0e0      	beq.n	8002062 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020a0:	4bc6      	ldr	r3, [pc, #792]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	4ac6      	ldr	r2, [pc, #792]	; (80023c0 <HAL_RCC_OscConfig+0x684>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	0019      	movs	r1, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a1a      	ldr	r2, [r3, #32]
 80020ae:	4bc3      	ldr	r3, [pc, #780]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 80020b0:	430a      	orrs	r2, r1
 80020b2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020b4:	4bc1      	ldr	r3, [pc, #772]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	021b      	lsls	r3, r3, #8
 80020ba:	0a19      	lsrs	r1, r3, #8
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	061a      	lsls	r2, r3, #24
 80020c2:	4bbe      	ldr	r3, [pc, #760]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 80020c4:	430a      	orrs	r2, r1
 80020c6:	605a      	str	r2, [r3, #4]
 80020c8:	e019      	b.n	80020fe <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020ca:	4bbc      	ldr	r3, [pc, #752]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	4bbb      	ldr	r3, [pc, #748]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 80020d0:	49bc      	ldr	r1, [pc, #752]	; (80023c4 <HAL_RCC_OscConfig+0x688>)
 80020d2:	400a      	ands	r2, r1
 80020d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d6:	f7ff f8dd 	bl	8001294 <HAL_GetTick>
 80020da:	0003      	movs	r3, r0
 80020dc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020e0:	f7ff f8d8 	bl	8001294 <HAL_GetTick>
 80020e4:	0002      	movs	r2, r0
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e19a      	b.n	8002428 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80020f2:	4bb2      	ldr	r3, [pc, #712]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4013      	ands	r3, r2
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2208      	movs	r2, #8
 8002104:	4013      	ands	r3, r2
 8002106:	d036      	beq.n	8002176 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d019      	beq.n	8002144 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002110:	4baa      	ldr	r3, [pc, #680]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 8002112:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002114:	4ba9      	ldr	r3, [pc, #676]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 8002116:	2101      	movs	r1, #1
 8002118:	430a      	orrs	r2, r1
 800211a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211c:	f7ff f8ba 	bl	8001294 <HAL_GetTick>
 8002120:	0003      	movs	r3, r0
 8002122:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002126:	f7ff f8b5 	bl	8001294 <HAL_GetTick>
 800212a:	0002      	movs	r2, r0
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e177      	b.n	8002428 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002138:	4ba0      	ldr	r3, [pc, #640]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 800213a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800213c:	2202      	movs	r2, #2
 800213e:	4013      	ands	r3, r2
 8002140:	d0f1      	beq.n	8002126 <HAL_RCC_OscConfig+0x3ea>
 8002142:	e018      	b.n	8002176 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002144:	4b9d      	ldr	r3, [pc, #628]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 8002146:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002148:	4b9c      	ldr	r3, [pc, #624]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 800214a:	2101      	movs	r1, #1
 800214c:	438a      	bics	r2, r1
 800214e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002150:	f7ff f8a0 	bl	8001294 <HAL_GetTick>
 8002154:	0003      	movs	r3, r0
 8002156:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800215a:	f7ff f89b 	bl	8001294 <HAL_GetTick>
 800215e:	0002      	movs	r2, r0
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e15d      	b.n	8002428 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800216c:	4b93      	ldr	r3, [pc, #588]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 800216e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002170:	2202      	movs	r2, #2
 8002172:	4013      	ands	r3, r2
 8002174:	d1f1      	bne.n	800215a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2204      	movs	r2, #4
 800217c:	4013      	ands	r3, r2
 800217e:	d100      	bne.n	8002182 <HAL_RCC_OscConfig+0x446>
 8002180:	e0ae      	b.n	80022e0 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002182:	2023      	movs	r0, #35	; 0x23
 8002184:	183b      	adds	r3, r7, r0
 8002186:	2200      	movs	r2, #0
 8002188:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800218a:	4b8c      	ldr	r3, [pc, #560]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 800218c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800218e:	2380      	movs	r3, #128	; 0x80
 8002190:	055b      	lsls	r3, r3, #21
 8002192:	4013      	ands	r3, r2
 8002194:	d109      	bne.n	80021aa <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002196:	4b89      	ldr	r3, [pc, #548]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 8002198:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800219a:	4b88      	ldr	r3, [pc, #544]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 800219c:	2180      	movs	r1, #128	; 0x80
 800219e:	0549      	lsls	r1, r1, #21
 80021a0:	430a      	orrs	r2, r1
 80021a2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80021a4:	183b      	adds	r3, r7, r0
 80021a6:	2201      	movs	r2, #1
 80021a8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021aa:	4b87      	ldr	r3, [pc, #540]	; (80023c8 <HAL_RCC_OscConfig+0x68c>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	2380      	movs	r3, #128	; 0x80
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4013      	ands	r3, r2
 80021b4:	d11a      	bne.n	80021ec <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021b6:	4b84      	ldr	r3, [pc, #528]	; (80023c8 <HAL_RCC_OscConfig+0x68c>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	4b83      	ldr	r3, [pc, #524]	; (80023c8 <HAL_RCC_OscConfig+0x68c>)
 80021bc:	2180      	movs	r1, #128	; 0x80
 80021be:	0049      	lsls	r1, r1, #1
 80021c0:	430a      	orrs	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021c4:	f7ff f866 	bl	8001294 <HAL_GetTick>
 80021c8:	0003      	movs	r3, r0
 80021ca:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ce:	f7ff f861 	bl	8001294 <HAL_GetTick>
 80021d2:	0002      	movs	r2, r0
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b64      	cmp	r3, #100	; 0x64
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e123      	b.n	8002428 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e0:	4b79      	ldr	r3, [pc, #484]	; (80023c8 <HAL_RCC_OscConfig+0x68c>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	2380      	movs	r3, #128	; 0x80
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	4013      	ands	r3, r2
 80021ea:	d0f0      	beq.n	80021ce <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d107      	bne.n	8002208 <HAL_RCC_OscConfig+0x4cc>
 80021f8:	4b70      	ldr	r3, [pc, #448]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 80021fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021fc:	4b6f      	ldr	r3, [pc, #444]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 80021fe:	2180      	movs	r1, #128	; 0x80
 8002200:	0049      	lsls	r1, r1, #1
 8002202:	430a      	orrs	r2, r1
 8002204:	651a      	str	r2, [r3, #80]	; 0x50
 8002206:	e031      	b.n	800226c <HAL_RCC_OscConfig+0x530>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10c      	bne.n	800222a <HAL_RCC_OscConfig+0x4ee>
 8002210:	4b6a      	ldr	r3, [pc, #424]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 8002212:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002214:	4b69      	ldr	r3, [pc, #420]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 8002216:	496b      	ldr	r1, [pc, #428]	; (80023c4 <HAL_RCC_OscConfig+0x688>)
 8002218:	400a      	ands	r2, r1
 800221a:	651a      	str	r2, [r3, #80]	; 0x50
 800221c:	4b67      	ldr	r3, [pc, #412]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 800221e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002220:	4b66      	ldr	r3, [pc, #408]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 8002222:	496a      	ldr	r1, [pc, #424]	; (80023cc <HAL_RCC_OscConfig+0x690>)
 8002224:	400a      	ands	r2, r1
 8002226:	651a      	str	r2, [r3, #80]	; 0x50
 8002228:	e020      	b.n	800226c <HAL_RCC_OscConfig+0x530>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	23a0      	movs	r3, #160	; 0xa0
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	429a      	cmp	r2, r3
 8002234:	d10e      	bne.n	8002254 <HAL_RCC_OscConfig+0x518>
 8002236:	4b61      	ldr	r3, [pc, #388]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 8002238:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800223a:	4b60      	ldr	r3, [pc, #384]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 800223c:	2180      	movs	r1, #128	; 0x80
 800223e:	00c9      	lsls	r1, r1, #3
 8002240:	430a      	orrs	r2, r1
 8002242:	651a      	str	r2, [r3, #80]	; 0x50
 8002244:	4b5d      	ldr	r3, [pc, #372]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 8002246:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002248:	4b5c      	ldr	r3, [pc, #368]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 800224a:	2180      	movs	r1, #128	; 0x80
 800224c:	0049      	lsls	r1, r1, #1
 800224e:	430a      	orrs	r2, r1
 8002250:	651a      	str	r2, [r3, #80]	; 0x50
 8002252:	e00b      	b.n	800226c <HAL_RCC_OscConfig+0x530>
 8002254:	4b59      	ldr	r3, [pc, #356]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 8002256:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002258:	4b58      	ldr	r3, [pc, #352]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 800225a:	495a      	ldr	r1, [pc, #360]	; (80023c4 <HAL_RCC_OscConfig+0x688>)
 800225c:	400a      	ands	r2, r1
 800225e:	651a      	str	r2, [r3, #80]	; 0x50
 8002260:	4b56      	ldr	r3, [pc, #344]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 8002262:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002264:	4b55      	ldr	r3, [pc, #340]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 8002266:	4959      	ldr	r1, [pc, #356]	; (80023cc <HAL_RCC_OscConfig+0x690>)
 8002268:	400a      	ands	r2, r1
 800226a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d015      	beq.n	80022a0 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002274:	f7ff f80e 	bl	8001294 <HAL_GetTick>
 8002278:	0003      	movs	r3, r0
 800227a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800227c:	e009      	b.n	8002292 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800227e:	f7ff f809 	bl	8001294 <HAL_GetTick>
 8002282:	0002      	movs	r2, r0
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	4a51      	ldr	r2, [pc, #324]	; (80023d0 <HAL_RCC_OscConfig+0x694>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e0ca      	b.n	8002428 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002292:	4b4a      	ldr	r3, [pc, #296]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 8002294:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002296:	2380      	movs	r3, #128	; 0x80
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4013      	ands	r3, r2
 800229c:	d0ef      	beq.n	800227e <HAL_RCC_OscConfig+0x542>
 800229e:	e014      	b.n	80022ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a0:	f7fe fff8 	bl	8001294 <HAL_GetTick>
 80022a4:	0003      	movs	r3, r0
 80022a6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022a8:	e009      	b.n	80022be <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022aa:	f7fe fff3 	bl	8001294 <HAL_GetTick>
 80022ae:	0002      	movs	r2, r0
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	4a46      	ldr	r2, [pc, #280]	; (80023d0 <HAL_RCC_OscConfig+0x694>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e0b4      	b.n	8002428 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022be:	4b3f      	ldr	r3, [pc, #252]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 80022c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4013      	ands	r3, r2
 80022c8:	d1ef      	bne.n	80022aa <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022ca:	2323      	movs	r3, #35	; 0x23
 80022cc:	18fb      	adds	r3, r7, r3
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d105      	bne.n	80022e0 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d4:	4b39      	ldr	r3, [pc, #228]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 80022d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022d8:	4b38      	ldr	r3, [pc, #224]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 80022da:	493e      	ldr	r1, [pc, #248]	; (80023d4 <HAL_RCC_OscConfig+0x698>)
 80022dc:	400a      	ands	r2, r1
 80022de:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d100      	bne.n	80022ea <HAL_RCC_OscConfig+0x5ae>
 80022e8:	e09d      	b.n	8002426 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	2b0c      	cmp	r3, #12
 80022ee:	d100      	bne.n	80022f2 <HAL_RCC_OscConfig+0x5b6>
 80022f0:	e076      	b.n	80023e0 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d145      	bne.n	8002386 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fa:	4b30      	ldr	r3, [pc, #192]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	4b2f      	ldr	r3, [pc, #188]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 8002300:	4935      	ldr	r1, [pc, #212]	; (80023d8 <HAL_RCC_OscConfig+0x69c>)
 8002302:	400a      	ands	r2, r1
 8002304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002306:	f7fe ffc5 	bl	8001294 <HAL_GetTick>
 800230a:	0003      	movs	r3, r0
 800230c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002310:	f7fe ffc0 	bl	8001294 <HAL_GetTick>
 8002314:	0002      	movs	r2, r0
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e082      	b.n	8002428 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002322:	4b26      	ldr	r3, [pc, #152]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	2380      	movs	r3, #128	; 0x80
 8002328:	049b      	lsls	r3, r3, #18
 800232a:	4013      	ands	r3, r2
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800232e:	4b23      	ldr	r3, [pc, #140]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	4a2a      	ldr	r2, [pc, #168]	; (80023dc <HAL_RCC_OscConfig+0x6a0>)
 8002334:	4013      	ands	r3, r2
 8002336:	0019      	movs	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002340:	431a      	orrs	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	431a      	orrs	r2, r3
 8002348:	4b1c      	ldr	r3, [pc, #112]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 800234a:	430a      	orrs	r2, r1
 800234c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800234e:	4b1b      	ldr	r3, [pc, #108]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	4b1a      	ldr	r3, [pc, #104]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 8002354:	2180      	movs	r1, #128	; 0x80
 8002356:	0449      	lsls	r1, r1, #17
 8002358:	430a      	orrs	r2, r1
 800235a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235c:	f7fe ff9a 	bl	8001294 <HAL_GetTick>
 8002360:	0003      	movs	r3, r0
 8002362:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002366:	f7fe ff95 	bl	8001294 <HAL_GetTick>
 800236a:	0002      	movs	r2, r0
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e057      	b.n	8002428 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002378:	4b10      	ldr	r3, [pc, #64]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	2380      	movs	r3, #128	; 0x80
 800237e:	049b      	lsls	r3, r3, #18
 8002380:	4013      	ands	r3, r2
 8002382:	d0f0      	beq.n	8002366 <HAL_RCC_OscConfig+0x62a>
 8002384:	e04f      	b.n	8002426 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002386:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 800238c:	4912      	ldr	r1, [pc, #72]	; (80023d8 <HAL_RCC_OscConfig+0x69c>)
 800238e:	400a      	ands	r2, r1
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002392:	f7fe ff7f 	bl	8001294 <HAL_GetTick>
 8002396:	0003      	movs	r3, r0
 8002398:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800239c:	f7fe ff7a 	bl	8001294 <HAL_GetTick>
 80023a0:	0002      	movs	r2, r0
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e03c      	b.n	8002428 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80023ae:	4b03      	ldr	r3, [pc, #12]	; (80023bc <HAL_RCC_OscConfig+0x680>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	2380      	movs	r3, #128	; 0x80
 80023b4:	049b      	lsls	r3, r3, #18
 80023b6:	4013      	ands	r3, r2
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x660>
 80023ba:	e034      	b.n	8002426 <HAL_RCC_OscConfig+0x6ea>
 80023bc:	40021000 	.word	0x40021000
 80023c0:	ffff1fff 	.word	0xffff1fff
 80023c4:	fffffeff 	.word	0xfffffeff
 80023c8:	40007000 	.word	0x40007000
 80023cc:	fffffbff 	.word	0xfffffbff
 80023d0:	00001388 	.word	0x00001388
 80023d4:	efffffff 	.word	0xefffffff
 80023d8:	feffffff 	.word	0xfeffffff
 80023dc:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d101      	bne.n	80023ec <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e01d      	b.n	8002428 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023ec:	4b10      	ldr	r3, [pc, #64]	; (8002430 <HAL_RCC_OscConfig+0x6f4>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	025b      	lsls	r3, r3, #9
 80023f8:	401a      	ands	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fe:	429a      	cmp	r2, r3
 8002400:	d10f      	bne.n	8002422 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	23f0      	movs	r3, #240	; 0xf0
 8002406:	039b      	lsls	r3, r3, #14
 8002408:	401a      	ands	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240e:	429a      	cmp	r2, r3
 8002410:	d107      	bne.n	8002422 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	23c0      	movs	r3, #192	; 0xc0
 8002416:	041b      	lsls	r3, r3, #16
 8002418:	401a      	ands	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800241e:	429a      	cmp	r2, r3
 8002420:	d001      	beq.n	8002426 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	0018      	movs	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	b00a      	add	sp, #40	; 0x28
 800242e:	bdb0      	pop	{r4, r5, r7, pc}
 8002430:	40021000 	.word	0x40021000

08002434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002434:	b5b0      	push	{r4, r5, r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e128      	b.n	800269a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002448:	4b96      	ldr	r3, [pc, #600]	; (80026a4 <HAL_RCC_ClockConfig+0x270>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2201      	movs	r2, #1
 800244e:	4013      	ands	r3, r2
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d91e      	bls.n	8002494 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002456:	4b93      	ldr	r3, [pc, #588]	; (80026a4 <HAL_RCC_ClockConfig+0x270>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2201      	movs	r2, #1
 800245c:	4393      	bics	r3, r2
 800245e:	0019      	movs	r1, r3
 8002460:	4b90      	ldr	r3, [pc, #576]	; (80026a4 <HAL_RCC_ClockConfig+0x270>)
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002468:	f7fe ff14 	bl	8001294 <HAL_GetTick>
 800246c:	0003      	movs	r3, r0
 800246e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002470:	e009      	b.n	8002486 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002472:	f7fe ff0f 	bl	8001294 <HAL_GetTick>
 8002476:	0002      	movs	r2, r0
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	4a8a      	ldr	r2, [pc, #552]	; (80026a8 <HAL_RCC_ClockConfig+0x274>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e109      	b.n	800269a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002486:	4b87      	ldr	r3, [pc, #540]	; (80026a4 <HAL_RCC_ClockConfig+0x270>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2201      	movs	r2, #1
 800248c:	4013      	ands	r3, r2
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d1ee      	bne.n	8002472 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2202      	movs	r2, #2
 800249a:	4013      	ands	r3, r2
 800249c:	d009      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800249e:	4b83      	ldr	r3, [pc, #524]	; (80026ac <HAL_RCC_ClockConfig+0x278>)
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	22f0      	movs	r2, #240	; 0xf0
 80024a4:	4393      	bics	r3, r2
 80024a6:	0019      	movs	r1, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	4b7f      	ldr	r3, [pc, #508]	; (80026ac <HAL_RCC_ClockConfig+0x278>)
 80024ae:	430a      	orrs	r2, r1
 80024b0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2201      	movs	r2, #1
 80024b8:	4013      	ands	r3, r2
 80024ba:	d100      	bne.n	80024be <HAL_RCC_ClockConfig+0x8a>
 80024bc:	e089      	b.n	80025d2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d107      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024c6:	4b79      	ldr	r3, [pc, #484]	; (80026ac <HAL_RCC_ClockConfig+0x278>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	2380      	movs	r3, #128	; 0x80
 80024cc:	029b      	lsls	r3, r3, #10
 80024ce:	4013      	ands	r3, r2
 80024d0:	d120      	bne.n	8002514 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e0e1      	b.n	800269a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d107      	bne.n	80024ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024de:	4b73      	ldr	r3, [pc, #460]	; (80026ac <HAL_RCC_ClockConfig+0x278>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	2380      	movs	r3, #128	; 0x80
 80024e4:	049b      	lsls	r3, r3, #18
 80024e6:	4013      	ands	r3, r2
 80024e8:	d114      	bne.n	8002514 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e0d5      	b.n	800269a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d106      	bne.n	8002504 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024f6:	4b6d      	ldr	r3, [pc, #436]	; (80026ac <HAL_RCC_ClockConfig+0x278>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2204      	movs	r2, #4
 80024fc:	4013      	ands	r3, r2
 80024fe:	d109      	bne.n	8002514 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0ca      	b.n	800269a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002504:	4b69      	ldr	r3, [pc, #420]	; (80026ac <HAL_RCC_ClockConfig+0x278>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	2380      	movs	r3, #128	; 0x80
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4013      	ands	r3, r2
 800250e:	d101      	bne.n	8002514 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e0c2      	b.n	800269a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002514:	4b65      	ldr	r3, [pc, #404]	; (80026ac <HAL_RCC_ClockConfig+0x278>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2203      	movs	r2, #3
 800251a:	4393      	bics	r3, r2
 800251c:	0019      	movs	r1, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	4b62      	ldr	r3, [pc, #392]	; (80026ac <HAL_RCC_ClockConfig+0x278>)
 8002524:	430a      	orrs	r2, r1
 8002526:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002528:	f7fe feb4 	bl	8001294 <HAL_GetTick>
 800252c:	0003      	movs	r3, r0
 800252e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b02      	cmp	r3, #2
 8002536:	d111      	bne.n	800255c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002538:	e009      	b.n	800254e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800253a:	f7fe feab 	bl	8001294 <HAL_GetTick>
 800253e:	0002      	movs	r2, r0
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	4a58      	ldr	r2, [pc, #352]	; (80026a8 <HAL_RCC_ClockConfig+0x274>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e0a5      	b.n	800269a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800254e:	4b57      	ldr	r3, [pc, #348]	; (80026ac <HAL_RCC_ClockConfig+0x278>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	220c      	movs	r2, #12
 8002554:	4013      	ands	r3, r2
 8002556:	2b08      	cmp	r3, #8
 8002558:	d1ef      	bne.n	800253a <HAL_RCC_ClockConfig+0x106>
 800255a:	e03a      	b.n	80025d2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b03      	cmp	r3, #3
 8002562:	d111      	bne.n	8002588 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002564:	e009      	b.n	800257a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002566:	f7fe fe95 	bl	8001294 <HAL_GetTick>
 800256a:	0002      	movs	r2, r0
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	4a4d      	ldr	r2, [pc, #308]	; (80026a8 <HAL_RCC_ClockConfig+0x274>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e08f      	b.n	800269a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800257a:	4b4c      	ldr	r3, [pc, #304]	; (80026ac <HAL_RCC_ClockConfig+0x278>)
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	220c      	movs	r2, #12
 8002580:	4013      	ands	r3, r2
 8002582:	2b0c      	cmp	r3, #12
 8002584:	d1ef      	bne.n	8002566 <HAL_RCC_ClockConfig+0x132>
 8002586:	e024      	b.n	80025d2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d11b      	bne.n	80025c8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002590:	e009      	b.n	80025a6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002592:	f7fe fe7f 	bl	8001294 <HAL_GetTick>
 8002596:	0002      	movs	r2, r0
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	4a42      	ldr	r2, [pc, #264]	; (80026a8 <HAL_RCC_ClockConfig+0x274>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e079      	b.n	800269a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80025a6:	4b41      	ldr	r3, [pc, #260]	; (80026ac <HAL_RCC_ClockConfig+0x278>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	220c      	movs	r2, #12
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d1ef      	bne.n	8002592 <HAL_RCC_ClockConfig+0x15e>
 80025b2:	e00e      	b.n	80025d2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b4:	f7fe fe6e 	bl	8001294 <HAL_GetTick>
 80025b8:	0002      	movs	r2, r0
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	4a3a      	ldr	r2, [pc, #232]	; (80026a8 <HAL_RCC_ClockConfig+0x274>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e068      	b.n	800269a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80025c8:	4b38      	ldr	r3, [pc, #224]	; (80026ac <HAL_RCC_ClockConfig+0x278>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	220c      	movs	r2, #12
 80025ce:	4013      	ands	r3, r2
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025d2:	4b34      	ldr	r3, [pc, #208]	; (80026a4 <HAL_RCC_ClockConfig+0x270>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2201      	movs	r2, #1
 80025d8:	4013      	ands	r3, r2
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d21e      	bcs.n	800261e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e0:	4b30      	ldr	r3, [pc, #192]	; (80026a4 <HAL_RCC_ClockConfig+0x270>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2201      	movs	r2, #1
 80025e6:	4393      	bics	r3, r2
 80025e8:	0019      	movs	r1, r3
 80025ea:	4b2e      	ldr	r3, [pc, #184]	; (80026a4 <HAL_RCC_ClockConfig+0x270>)
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025f2:	f7fe fe4f 	bl	8001294 <HAL_GetTick>
 80025f6:	0003      	movs	r3, r0
 80025f8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fa:	e009      	b.n	8002610 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025fc:	f7fe fe4a 	bl	8001294 <HAL_GetTick>
 8002600:	0002      	movs	r2, r0
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	4a28      	ldr	r2, [pc, #160]	; (80026a8 <HAL_RCC_ClockConfig+0x274>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e044      	b.n	800269a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002610:	4b24      	ldr	r3, [pc, #144]	; (80026a4 <HAL_RCC_ClockConfig+0x270>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2201      	movs	r2, #1
 8002616:	4013      	ands	r3, r2
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d1ee      	bne.n	80025fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2204      	movs	r2, #4
 8002624:	4013      	ands	r3, r2
 8002626:	d009      	beq.n	800263c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002628:	4b20      	ldr	r3, [pc, #128]	; (80026ac <HAL_RCC_ClockConfig+0x278>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	4a20      	ldr	r2, [pc, #128]	; (80026b0 <HAL_RCC_ClockConfig+0x27c>)
 800262e:	4013      	ands	r3, r2
 8002630:	0019      	movs	r1, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <HAL_RCC_ClockConfig+0x278>)
 8002638:	430a      	orrs	r2, r1
 800263a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2208      	movs	r2, #8
 8002642:	4013      	ands	r3, r2
 8002644:	d00a      	beq.n	800265c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002646:	4b19      	ldr	r3, [pc, #100]	; (80026ac <HAL_RCC_ClockConfig+0x278>)
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	4a1a      	ldr	r2, [pc, #104]	; (80026b4 <HAL_RCC_ClockConfig+0x280>)
 800264c:	4013      	ands	r3, r2
 800264e:	0019      	movs	r1, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	00da      	lsls	r2, r3, #3
 8002656:	4b15      	ldr	r3, [pc, #84]	; (80026ac <HAL_RCC_ClockConfig+0x278>)
 8002658:	430a      	orrs	r2, r1
 800265a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800265c:	f000 f832 	bl	80026c4 <HAL_RCC_GetSysClockFreq>
 8002660:	0001      	movs	r1, r0
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_RCC_ClockConfig+0x278>)
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	091b      	lsrs	r3, r3, #4
 8002668:	220f      	movs	r2, #15
 800266a:	4013      	ands	r3, r2
 800266c:	4a12      	ldr	r2, [pc, #72]	; (80026b8 <HAL_RCC_ClockConfig+0x284>)
 800266e:	5cd3      	ldrb	r3, [r2, r3]
 8002670:	000a      	movs	r2, r1
 8002672:	40da      	lsrs	r2, r3
 8002674:	4b11      	ldr	r3, [pc, #68]	; (80026bc <HAL_RCC_ClockConfig+0x288>)
 8002676:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002678:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <HAL_RCC_ClockConfig+0x28c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	250b      	movs	r5, #11
 800267e:	197c      	adds	r4, r7, r5
 8002680:	0018      	movs	r0, r3
 8002682:	f7fe fdc1 	bl	8001208 <HAL_InitTick>
 8002686:	0003      	movs	r3, r0
 8002688:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800268a:	197b      	adds	r3, r7, r5
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d002      	beq.n	8002698 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002692:	197b      	adds	r3, r7, r5
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	e000      	b.n	800269a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	0018      	movs	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	b004      	add	sp, #16
 80026a0:	bdb0      	pop	{r4, r5, r7, pc}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	40022000 	.word	0x40022000
 80026a8:	00001388 	.word	0x00001388
 80026ac:	40021000 	.word	0x40021000
 80026b0:	fffff8ff 	.word	0xfffff8ff
 80026b4:	ffffc7ff 	.word	0xffffc7ff
 80026b8:	080049d4 	.word	0x080049d4
 80026bc:	20000000 	.word	0x20000000
 80026c0:	20000004 	.word	0x20000004

080026c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c4:	b5b0      	push	{r4, r5, r7, lr}
 80026c6:	b08e      	sub	sp, #56	; 0x38
 80026c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80026ca:	4b4c      	ldr	r3, [pc, #304]	; (80027fc <HAL_RCC_GetSysClockFreq+0x138>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026d2:	230c      	movs	r3, #12
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b0c      	cmp	r3, #12
 80026d8:	d014      	beq.n	8002704 <HAL_RCC_GetSysClockFreq+0x40>
 80026da:	d900      	bls.n	80026de <HAL_RCC_GetSysClockFreq+0x1a>
 80026dc:	e07b      	b.n	80027d6 <HAL_RCC_GetSysClockFreq+0x112>
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d002      	beq.n	80026e8 <HAL_RCC_GetSysClockFreq+0x24>
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d00b      	beq.n	80026fe <HAL_RCC_GetSysClockFreq+0x3a>
 80026e6:	e076      	b.n	80027d6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80026e8:	4b44      	ldr	r3, [pc, #272]	; (80027fc <HAL_RCC_GetSysClockFreq+0x138>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2210      	movs	r2, #16
 80026ee:	4013      	ands	r3, r2
 80026f0:	d002      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80026f2:	4b43      	ldr	r3, [pc, #268]	; (8002800 <HAL_RCC_GetSysClockFreq+0x13c>)
 80026f4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80026f6:	e07c      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80026f8:	4b42      	ldr	r3, [pc, #264]	; (8002804 <HAL_RCC_GetSysClockFreq+0x140>)
 80026fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80026fc:	e079      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026fe:	4b42      	ldr	r3, [pc, #264]	; (8002808 <HAL_RCC_GetSysClockFreq+0x144>)
 8002700:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002702:	e076      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002706:	0c9a      	lsrs	r2, r3, #18
 8002708:	230f      	movs	r3, #15
 800270a:	401a      	ands	r2, r3
 800270c:	4b3f      	ldr	r3, [pc, #252]	; (800280c <HAL_RCC_GetSysClockFreq+0x148>)
 800270e:	5c9b      	ldrb	r3, [r3, r2]
 8002710:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002714:	0d9a      	lsrs	r2, r3, #22
 8002716:	2303      	movs	r3, #3
 8002718:	4013      	ands	r3, r2
 800271a:	3301      	adds	r3, #1
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800271e:	4b37      	ldr	r3, [pc, #220]	; (80027fc <HAL_RCC_GetSysClockFreq+0x138>)
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	2380      	movs	r3, #128	; 0x80
 8002724:	025b      	lsls	r3, r3, #9
 8002726:	4013      	ands	r3, r2
 8002728:	d01a      	beq.n	8002760 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800272a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272c:	61bb      	str	r3, [r7, #24]
 800272e:	2300      	movs	r3, #0
 8002730:	61fb      	str	r3, [r7, #28]
 8002732:	4a35      	ldr	r2, [pc, #212]	; (8002808 <HAL_RCC_GetSysClockFreq+0x144>)
 8002734:	2300      	movs	r3, #0
 8002736:	69b8      	ldr	r0, [r7, #24]
 8002738:	69f9      	ldr	r1, [r7, #28]
 800273a:	f7fd fd91 	bl	8000260 <__aeabi_lmul>
 800273e:	0002      	movs	r2, r0
 8002740:	000b      	movs	r3, r1
 8002742:	0010      	movs	r0, r2
 8002744:	0019      	movs	r1, r3
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f7fd fd65 	bl	8000220 <__aeabi_uldivmod>
 8002756:	0002      	movs	r2, r0
 8002758:	000b      	movs	r3, r1
 800275a:	0013      	movs	r3, r2
 800275c:	637b      	str	r3, [r7, #52]	; 0x34
 800275e:	e037      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002760:	4b26      	ldr	r3, [pc, #152]	; (80027fc <HAL_RCC_GetSysClockFreq+0x138>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2210      	movs	r2, #16
 8002766:	4013      	ands	r3, r2
 8002768:	d01a      	beq.n	80027a0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800276a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	4a23      	ldr	r2, [pc, #140]	; (8002800 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002774:	2300      	movs	r3, #0
 8002776:	68b8      	ldr	r0, [r7, #8]
 8002778:	68f9      	ldr	r1, [r7, #12]
 800277a:	f7fd fd71 	bl	8000260 <__aeabi_lmul>
 800277e:	0002      	movs	r2, r0
 8002780:	000b      	movs	r3, r1
 8002782:	0010      	movs	r0, r2
 8002784:	0019      	movs	r1, r3
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	603b      	str	r3, [r7, #0]
 800278a:	2300      	movs	r3, #0
 800278c:	607b      	str	r3, [r7, #4]
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f7fd fd45 	bl	8000220 <__aeabi_uldivmod>
 8002796:	0002      	movs	r2, r0
 8002798:	000b      	movs	r3, r1
 800279a:	0013      	movs	r3, r2
 800279c:	637b      	str	r3, [r7, #52]	; 0x34
 800279e:	e017      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80027a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a2:	0018      	movs	r0, r3
 80027a4:	2300      	movs	r3, #0
 80027a6:	0019      	movs	r1, r3
 80027a8:	4a16      	ldr	r2, [pc, #88]	; (8002804 <HAL_RCC_GetSysClockFreq+0x140>)
 80027aa:	2300      	movs	r3, #0
 80027ac:	f7fd fd58 	bl	8000260 <__aeabi_lmul>
 80027b0:	0002      	movs	r2, r0
 80027b2:	000b      	movs	r3, r1
 80027b4:	0010      	movs	r0, r2
 80027b6:	0019      	movs	r1, r3
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	001c      	movs	r4, r3
 80027bc:	2300      	movs	r3, #0
 80027be:	001d      	movs	r5, r3
 80027c0:	0022      	movs	r2, r4
 80027c2:	002b      	movs	r3, r5
 80027c4:	f7fd fd2c 	bl	8000220 <__aeabi_uldivmod>
 80027c8:	0002      	movs	r2, r0
 80027ca:	000b      	movs	r3, r1
 80027cc:	0013      	movs	r3, r2
 80027ce:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80027d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027d4:	e00d      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80027d6:	4b09      	ldr	r3, [pc, #36]	; (80027fc <HAL_RCC_GetSysClockFreq+0x138>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	0b5b      	lsrs	r3, r3, #13
 80027dc:	2207      	movs	r2, #7
 80027de:	4013      	ands	r3, r2
 80027e0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	3301      	adds	r3, #1
 80027e6:	2280      	movs	r2, #128	; 0x80
 80027e8:	0212      	lsls	r2, r2, #8
 80027ea:	409a      	lsls	r2, r3
 80027ec:	0013      	movs	r3, r2
 80027ee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027f0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80027f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80027f4:	0018      	movs	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	b00e      	add	sp, #56	; 0x38
 80027fa:	bdb0      	pop	{r4, r5, r7, pc}
 80027fc:	40021000 	.word	0x40021000
 8002800:	003d0900 	.word	0x003d0900
 8002804:	00f42400 	.word	0x00f42400
 8002808:	007a1200 	.word	0x007a1200
 800280c:	080049ec 	.word	0x080049ec

08002810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002814:	4b02      	ldr	r3, [pc, #8]	; (8002820 <HAL_RCC_GetHCLKFreq+0x10>)
 8002816:	681b      	ldr	r3, [r3, #0]
}
 8002818:	0018      	movs	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	46c0      	nop			; (mov r8, r8)
 8002820:	20000000 	.word	0x20000000

08002824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002828:	f7ff fff2 	bl	8002810 <HAL_RCC_GetHCLKFreq>
 800282c:	0001      	movs	r1, r0
 800282e:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	0a1b      	lsrs	r3, r3, #8
 8002834:	2207      	movs	r2, #7
 8002836:	4013      	ands	r3, r2
 8002838:	4a04      	ldr	r2, [pc, #16]	; (800284c <HAL_RCC_GetPCLK1Freq+0x28>)
 800283a:	5cd3      	ldrb	r3, [r2, r3]
 800283c:	40d9      	lsrs	r1, r3
 800283e:	000b      	movs	r3, r1
}
 8002840:	0018      	movs	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	40021000 	.word	0x40021000
 800284c:	080049e4 	.word	0x080049e4

08002850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002854:	f7ff ffdc 	bl	8002810 <HAL_RCC_GetHCLKFreq>
 8002858:	0001      	movs	r1, r0
 800285a:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HAL_RCC_GetPCLK2Freq+0x24>)
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	0adb      	lsrs	r3, r3, #11
 8002860:	2207      	movs	r2, #7
 8002862:	4013      	ands	r3, r2
 8002864:	4a04      	ldr	r2, [pc, #16]	; (8002878 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002866:	5cd3      	ldrb	r3, [r2, r3]
 8002868:	40d9      	lsrs	r1, r3
 800286a:	000b      	movs	r3, r1
}
 800286c:	0018      	movs	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	40021000 	.word	0x40021000
 8002878:	080049e4 	.word	0x080049e4

0800287c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002884:	2017      	movs	r0, #23
 8002886:	183b      	adds	r3, r7, r0
 8002888:	2200      	movs	r2, #0
 800288a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2220      	movs	r2, #32
 8002892:	4013      	ands	r3, r2
 8002894:	d100      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002896:	e0c7      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002898:	4b84      	ldr	r3, [pc, #528]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800289a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800289c:	2380      	movs	r3, #128	; 0x80
 800289e:	055b      	lsls	r3, r3, #21
 80028a0:	4013      	ands	r3, r2
 80028a2:	d109      	bne.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a4:	4b81      	ldr	r3, [pc, #516]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80028a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028a8:	4b80      	ldr	r3, [pc, #512]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80028aa:	2180      	movs	r1, #128	; 0x80
 80028ac:	0549      	lsls	r1, r1, #21
 80028ae:	430a      	orrs	r2, r1
 80028b0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80028b2:	183b      	adds	r3, r7, r0
 80028b4:	2201      	movs	r2, #1
 80028b6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b8:	4b7d      	ldr	r3, [pc, #500]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	2380      	movs	r3, #128	; 0x80
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	4013      	ands	r3, r2
 80028c2:	d11a      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028c4:	4b7a      	ldr	r3, [pc, #488]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4b79      	ldr	r3, [pc, #484]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80028ca:	2180      	movs	r1, #128	; 0x80
 80028cc:	0049      	lsls	r1, r1, #1
 80028ce:	430a      	orrs	r2, r1
 80028d0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028d2:	f7fe fcdf 	bl	8001294 <HAL_GetTick>
 80028d6:	0003      	movs	r3, r0
 80028d8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028da:	e008      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028dc:	f7fe fcda 	bl	8001294 <HAL_GetTick>
 80028e0:	0002      	movs	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b64      	cmp	r3, #100	; 0x64
 80028e8:	d901      	bls.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e0d9      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ee:	4b70      	ldr	r3, [pc, #448]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	2380      	movs	r3, #128	; 0x80
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	4013      	ands	r3, r2
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80028fa:	4b6c      	ldr	r3, [pc, #432]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	23c0      	movs	r3, #192	; 0xc0
 8002900:	039b      	lsls	r3, r3, #14
 8002902:	4013      	ands	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	23c0      	movs	r3, #192	; 0xc0
 800290c:	039b      	lsls	r3, r3, #14
 800290e:	4013      	ands	r3, r2
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	429a      	cmp	r2, r3
 8002914:	d013      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	23c0      	movs	r3, #192	; 0xc0
 800291c:	029b      	lsls	r3, r3, #10
 800291e:	401a      	ands	r2, r3
 8002920:	23c0      	movs	r3, #192	; 0xc0
 8002922:	029b      	lsls	r3, r3, #10
 8002924:	429a      	cmp	r2, r3
 8002926:	d10a      	bne.n	800293e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002928:	4b60      	ldr	r3, [pc, #384]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	2380      	movs	r3, #128	; 0x80
 800292e:	029b      	lsls	r3, r3, #10
 8002930:	401a      	ands	r2, r3
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	029b      	lsls	r3, r3, #10
 8002936:	429a      	cmp	r2, r3
 8002938:	d101      	bne.n	800293e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e0b1      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800293e:	4b5b      	ldr	r3, [pc, #364]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002940:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002942:	23c0      	movs	r3, #192	; 0xc0
 8002944:	029b      	lsls	r3, r3, #10
 8002946:	4013      	ands	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d03b      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	23c0      	movs	r3, #192	; 0xc0
 8002956:	029b      	lsls	r3, r3, #10
 8002958:	4013      	ands	r3, r2
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	429a      	cmp	r2, r3
 800295e:	d033      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2220      	movs	r2, #32
 8002966:	4013      	ands	r3, r2
 8002968:	d02e      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800296a:	4b50      	ldr	r3, [pc, #320]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800296c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800296e:	4a51      	ldr	r2, [pc, #324]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002970:	4013      	ands	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002974:	4b4d      	ldr	r3, [pc, #308]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002976:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002978:	4b4c      	ldr	r3, [pc, #304]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800297a:	2180      	movs	r1, #128	; 0x80
 800297c:	0309      	lsls	r1, r1, #12
 800297e:	430a      	orrs	r2, r1
 8002980:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002982:	4b4a      	ldr	r3, [pc, #296]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002984:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002986:	4b49      	ldr	r3, [pc, #292]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002988:	494b      	ldr	r1, [pc, #300]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800298a:	400a      	ands	r2, r1
 800298c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800298e:	4b47      	ldr	r3, [pc, #284]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	2380      	movs	r3, #128	; 0x80
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	4013      	ands	r3, r2
 800299c:	d014      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299e:	f7fe fc79 	bl	8001294 <HAL_GetTick>
 80029a2:	0003      	movs	r3, r0
 80029a4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029a6:	e009      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029a8:	f7fe fc74 	bl	8001294 <HAL_GetTick>
 80029ac:	0002      	movs	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	4a42      	ldr	r2, [pc, #264]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d901      	bls.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e072      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029bc:	4b3b      	ldr	r3, [pc, #236]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80029be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029c0:	2380      	movs	r3, #128	; 0x80
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4013      	ands	r3, r2
 80029c6:	d0ef      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2220      	movs	r2, #32
 80029ce:	4013      	ands	r3, r2
 80029d0:	d01f      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	23c0      	movs	r3, #192	; 0xc0
 80029d8:	029b      	lsls	r3, r3, #10
 80029da:	401a      	ands	r2, r3
 80029dc:	23c0      	movs	r3, #192	; 0xc0
 80029de:	029b      	lsls	r3, r3, #10
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d10c      	bne.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x182>
 80029e4:	4b31      	ldr	r3, [pc, #196]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a35      	ldr	r2, [pc, #212]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	0019      	movs	r1, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	23c0      	movs	r3, #192	; 0xc0
 80029f4:	039b      	lsls	r3, r3, #14
 80029f6:	401a      	ands	r2, r3
 80029f8:	4b2c      	ldr	r3, [pc, #176]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80029fa:	430a      	orrs	r2, r1
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	4b2b      	ldr	r3, [pc, #172]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a00:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	23c0      	movs	r3, #192	; 0xc0
 8002a08:	029b      	lsls	r3, r3, #10
 8002a0a:	401a      	ands	r2, r3
 8002a0c:	4b27      	ldr	r3, [pc, #156]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a12:	2317      	movs	r3, #23
 8002a14:	18fb      	adds	r3, r7, r3
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d105      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a1c:	4b23      	ldr	r3, [pc, #140]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a20:	4b22      	ldr	r3, [pc, #136]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a22:	4928      	ldr	r1, [pc, #160]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a24:	400a      	ands	r2, r1
 8002a26:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d009      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a32:	4b1e      	ldr	r3, [pc, #120]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a36:	220c      	movs	r2, #12
 8002a38:	4393      	bics	r3, r2
 8002a3a:	0019      	movs	r1, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a42:	430a      	orrs	r2, r1
 8002a44:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2204      	movs	r2, #4
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	d009      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a50:	4b16      	ldr	r3, [pc, #88]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a54:	4a1c      	ldr	r2, [pc, #112]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	0019      	movs	r1, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	4b13      	ldr	r3, [pc, #76]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a60:	430a      	orrs	r2, r1
 8002a62:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2208      	movs	r2, #8
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d009      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a6e:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a72:	4a16      	ldr	r2, [pc, #88]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002a74:	4013      	ands	r3, r2
 8002a76:	0019      	movs	r1, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691a      	ldr	r2, [r3, #16]
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2280      	movs	r2, #128	; 0x80
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d009      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002a8c:	4b07      	ldr	r3, [pc, #28]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a90:	4a0f      	ldr	r2, [pc, #60]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	0019      	movs	r1, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695a      	ldr	r2, [r3, #20]
 8002a9a:	4b04      	ldr	r3, [pc, #16]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	b006      	add	sp, #24
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	40007000 	.word	0x40007000
 8002ab4:	fffcffff 	.word	0xfffcffff
 8002ab8:	fff7ffff 	.word	0xfff7ffff
 8002abc:	00001388 	.word	0x00001388
 8002ac0:	ffcfffff 	.word	0xffcfffff
 8002ac4:	efffffff 	.word	0xefffffff
 8002ac8:	fffff3ff 	.word	0xfffff3ff
 8002acc:	ffffcfff 	.word	0xffffcfff
 8002ad0:	fff3ffff 	.word	0xfff3ffff

08002ad4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e07b      	b.n	8002bde <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d109      	bne.n	8002b02 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	2382      	movs	r3, #130	; 0x82
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d009      	beq.n	8002b0e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	61da      	str	r2, [r3, #28]
 8002b00:	e005      	b.n	8002b0e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2251      	movs	r2, #81	; 0x51
 8002b18:	5c9b      	ldrb	r3, [r3, r2]
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d107      	bne.n	8002b30 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2250      	movs	r2, #80	; 0x50
 8002b24:	2100      	movs	r1, #0
 8002b26:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f7fe fa14 	bl	8000f58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2251      	movs	r2, #81	; 0x51
 8002b34:	2102      	movs	r1, #2
 8002b36:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2140      	movs	r1, #64	; 0x40
 8002b44:	438a      	bics	r2, r1
 8002b46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	2382      	movs	r3, #130	; 0x82
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	401a      	ands	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6899      	ldr	r1, [r3, #8]
 8002b56:	2384      	movs	r3, #132	; 0x84
 8002b58:	021b      	lsls	r3, r3, #8
 8002b5a:	400b      	ands	r3, r1
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68d9      	ldr	r1, [r3, #12]
 8002b62:	2380      	movs	r3, #128	; 0x80
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	400b      	ands	r3, r1
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	2102      	movs	r1, #2
 8002b70:	400b      	ands	r3, r1
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	2101      	movs	r1, #1
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6999      	ldr	r1, [r3, #24]
 8002b82:	2380      	movs	r3, #128	; 0x80
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	400b      	ands	r3, r1
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	2138      	movs	r1, #56	; 0x38
 8002b90:	400b      	ands	r3, r1
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	2180      	movs	r1, #128	; 0x80
 8002b9a:	400b      	ands	r3, r1
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	0011      	movs	r1, r2
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ba4:	2380      	movs	r3, #128	; 0x80
 8002ba6:	019b      	lsls	r3, r3, #6
 8002ba8:	401a      	ands	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	0c1b      	lsrs	r3, r3, #16
 8002bb8:	2204      	movs	r2, #4
 8002bba:	4013      	ands	r3, r2
 8002bbc:	0019      	movs	r1, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	2210      	movs	r2, #16
 8002bc4:	401a      	ands	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2251      	movs	r2, #81	; 0x51
 8002bd8:	2101      	movs	r1, #1
 8002bda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	0018      	movs	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	b002      	add	sp, #8
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b088      	sub	sp, #32
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	603b      	str	r3, [r7, #0]
 8002bf2:	1dbb      	adds	r3, r7, #6
 8002bf4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bf6:	231f      	movs	r3, #31
 8002bf8:	18fb      	adds	r3, r7, r3
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2250      	movs	r2, #80	; 0x50
 8002c02:	5c9b      	ldrb	r3, [r3, r2]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d101      	bne.n	8002c0c <HAL_SPI_Transmit+0x26>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	e145      	b.n	8002e98 <HAL_SPI_Transmit+0x2b2>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2250      	movs	r2, #80	; 0x50
 8002c10:	2101      	movs	r1, #1
 8002c12:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c14:	f7fe fb3e 	bl	8001294 <HAL_GetTick>
 8002c18:	0003      	movs	r3, r0
 8002c1a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002c1c:	2316      	movs	r3, #22
 8002c1e:	18fb      	adds	r3, r7, r3
 8002c20:	1dba      	adds	r2, r7, #6
 8002c22:	8812      	ldrh	r2, [r2, #0]
 8002c24:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2251      	movs	r2, #81	; 0x51
 8002c2a:	5c9b      	ldrb	r3, [r3, r2]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d004      	beq.n	8002c3c <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002c32:	231f      	movs	r3, #31
 8002c34:	18fb      	adds	r3, r7, r3
 8002c36:	2202      	movs	r2, #2
 8002c38:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c3a:	e126      	b.n	8002e8a <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_SPI_Transmit+0x64>
 8002c42:	1dbb      	adds	r3, r7, #6
 8002c44:	881b      	ldrh	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d104      	bne.n	8002c54 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002c4a:	231f      	movs	r3, #31
 8002c4c:	18fb      	adds	r3, r7, r3
 8002c4e:	2201      	movs	r2, #1
 8002c50:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c52:	e11a      	b.n	8002e8a <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2251      	movs	r2, #81	; 0x51
 8002c58:	2103      	movs	r1, #3
 8002c5a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	1dba      	adds	r2, r7, #6
 8002c6c:	8812      	ldrh	r2, [r2, #0]
 8002c6e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	1dba      	adds	r2, r7, #6
 8002c74:	8812      	ldrh	r2, [r2, #0]
 8002c76:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	2380      	movs	r3, #128	; 0x80
 8002c9c:	021b      	lsls	r3, r3, #8
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d110      	bne.n	8002cc4 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2140      	movs	r1, #64	; 0x40
 8002cae:	438a      	bics	r2, r1
 8002cb0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2180      	movs	r1, #128	; 0x80
 8002cbe:	01c9      	lsls	r1, r1, #7
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2240      	movs	r2, #64	; 0x40
 8002ccc:	4013      	ands	r3, r2
 8002cce:	2b40      	cmp	r3, #64	; 0x40
 8002cd0:	d007      	beq.n	8002ce2 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2140      	movs	r1, #64	; 0x40
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	2380      	movs	r3, #128	; 0x80
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d152      	bne.n	8002d94 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d004      	beq.n	8002d00 <HAL_SPI_Transmit+0x11a>
 8002cf6:	2316      	movs	r3, #22
 8002cf8:	18fb      	adds	r3, r7, r3
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d143      	bne.n	8002d88 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d04:	881a      	ldrh	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	1c9a      	adds	r2, r3, #2
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d24:	e030      	b.n	8002d88 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d112      	bne.n	8002d5a <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	881a      	ldrh	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d44:	1c9a      	adds	r2, r3, #2
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d58:	e016      	b.n	8002d88 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d5a:	f7fe fa9b 	bl	8001294 <HAL_GetTick>
 8002d5e:	0002      	movs	r2, r0
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d802      	bhi.n	8002d70 <HAL_SPI_Transmit+0x18a>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	d102      	bne.n	8002d76 <HAL_SPI_Transmit+0x190>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d108      	bne.n	8002d88 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8002d76:	231f      	movs	r3, #31
 8002d78:	18fb      	adds	r3, r7, r3
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2251      	movs	r2, #81	; 0x51
 8002d82:	2101      	movs	r1, #1
 8002d84:	5499      	strb	r1, [r3, r2]
          goto error;
 8002d86:	e080      	b.n	8002e8a <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1c9      	bne.n	8002d26 <HAL_SPI_Transmit+0x140>
 8002d92:	e053      	b.n	8002e3c <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d004      	beq.n	8002da6 <HAL_SPI_Transmit+0x1c0>
 8002d9c:	2316      	movs	r3, #22
 8002d9e:	18fb      	adds	r3, r7, r3
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d145      	bne.n	8002e32 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	330c      	adds	r3, #12
 8002db0:	7812      	ldrb	r2, [r2, #0]
 8002db2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002dcc:	e031      	b.n	8002e32 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d113      	bne.n	8002e04 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	330c      	adds	r3, #12
 8002de6:	7812      	ldrb	r2, [r2, #0]
 8002de8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e02:	e016      	b.n	8002e32 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e04:	f7fe fa46 	bl	8001294 <HAL_GetTick>
 8002e08:	0002      	movs	r2, r0
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d802      	bhi.n	8002e1a <HAL_SPI_Transmit+0x234>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	3301      	adds	r3, #1
 8002e18:	d102      	bne.n	8002e20 <HAL_SPI_Transmit+0x23a>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d108      	bne.n	8002e32 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8002e20:	231f      	movs	r3, #31
 8002e22:	18fb      	adds	r3, r7, r3
 8002e24:	2203      	movs	r2, #3
 8002e26:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2251      	movs	r2, #81	; 0x51
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	5499      	strb	r1, [r3, r2]
          goto error;
 8002e30:	e02b      	b.n	8002e8a <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1c8      	bne.n	8002dce <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	6839      	ldr	r1, [r7, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	0018      	movs	r0, r3
 8002e44:	f000 fc1e 	bl	8003684 <SPI_EndRxTxTransaction>
 8002e48:	1e03      	subs	r3, r0, #0
 8002e4a:	d002      	beq.n	8002e52 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10a      	bne.n	8002e70 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	613b      	str	r3, [r7, #16]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	613b      	str	r3, [r7, #16]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d004      	beq.n	8002e82 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8002e78:	231f      	movs	r3, #31
 8002e7a:	18fb      	adds	r3, r7, r3
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	701a      	strb	r2, [r3, #0]
 8002e80:	e003      	b.n	8002e8a <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2251      	movs	r2, #81	; 0x51
 8002e86:	2101      	movs	r1, #1
 8002e88:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2250      	movs	r2, #80	; 0x50
 8002e8e:	2100      	movs	r1, #0
 8002e90:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002e92:	231f      	movs	r3, #31
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	781b      	ldrb	r3, [r3, #0]
}
 8002e98:	0018      	movs	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	b008      	add	sp, #32
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ea0:	b590      	push	{r4, r7, lr}
 8002ea2:	b089      	sub	sp, #36	; 0x24
 8002ea4:	af02      	add	r7, sp, #8
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	603b      	str	r3, [r7, #0]
 8002eac:	1dbb      	adds	r3, r7, #6
 8002eae:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002eb0:	2117      	movs	r1, #23
 8002eb2:	187b      	adds	r3, r7, r1
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2251      	movs	r2, #81	; 0x51
 8002ebc:	5c9b      	ldrb	r3, [r3, r2]
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d003      	beq.n	8002ecc <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8002ec4:	187b      	adds	r3, r7, r1
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	701a      	strb	r2, [r3, #0]
    goto error;
 8002eca:	e109      	b.n	80030e0 <HAL_SPI_Receive+0x240>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	2382      	movs	r3, #130	; 0x82
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d113      	bne.n	8002f00 <HAL_SPI_Receive+0x60>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10f      	bne.n	8002f00 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2251      	movs	r2, #81	; 0x51
 8002ee4:	2104      	movs	r1, #4
 8002ee6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002ee8:	1dbb      	adds	r3, r7, #6
 8002eea:	881c      	ldrh	r4, [r3, #0]
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	68b9      	ldr	r1, [r7, #8]
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	0023      	movs	r3, r4
 8002ef8:	f000 f900 	bl	80030fc <HAL_SPI_TransmitReceive>
 8002efc:	0003      	movs	r3, r0
 8002efe:	e0f6      	b.n	80030ee <HAL_SPI_Receive+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2250      	movs	r2, #80	; 0x50
 8002f04:	5c9b      	ldrb	r3, [r3, r2]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_SPI_Receive+0x6e>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e0ef      	b.n	80030ee <HAL_SPI_Receive+0x24e>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2250      	movs	r2, #80	; 0x50
 8002f12:	2101      	movs	r1, #1
 8002f14:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f16:	f7fe f9bd 	bl	8001294 <HAL_GetTick>
 8002f1a:	0003      	movs	r3, r0
 8002f1c:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_SPI_Receive+0x8c>
 8002f24:	1dbb      	adds	r3, r7, #6
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d104      	bne.n	8002f36 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8002f2c:	2317      	movs	r3, #23
 8002f2e:	18fb      	adds	r3, r7, r3
 8002f30:	2201      	movs	r2, #1
 8002f32:	701a      	strb	r2, [r3, #0]
    goto error;
 8002f34:	e0d4      	b.n	80030e0 <HAL_SPI_Receive+0x240>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2251      	movs	r2, #81	; 0x51
 8002f3a:	2104      	movs	r1, #4
 8002f3c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1dba      	adds	r2, r7, #6
 8002f4e:	8812      	ldrh	r2, [r2, #0]
 8002f50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1dba      	adds	r2, r7, #6
 8002f56:	8812      	ldrh	r2, [r2, #0]
 8002f58:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	2380      	movs	r3, #128	; 0x80
 8002f7e:	021b      	lsls	r3, r3, #8
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d10f      	bne.n	8002fa4 <HAL_SPI_Receive+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2140      	movs	r1, #64	; 0x40
 8002f90:	438a      	bics	r2, r1
 8002f92:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4956      	ldr	r1, [pc, #344]	; (80030f8 <HAL_SPI_Receive+0x258>)
 8002fa0:	400a      	ands	r2, r1
 8002fa2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2240      	movs	r2, #64	; 0x40
 8002fac:	4013      	ands	r3, r2
 8002fae:	2b40      	cmp	r3, #64	; 0x40
 8002fb0:	d007      	beq.n	8002fc2 <HAL_SPI_Receive+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2140      	movs	r1, #64	; 0x40
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d000      	beq.n	8002fcc <HAL_SPI_Receive+0x12c>
 8002fca:	e06c      	b.n	80030a6 <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002fcc:	e033      	b.n	8003036 <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d115      	bne.n	8003008 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	330c      	adds	r3, #12
 8002fe2:	001a      	movs	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe8:	7812      	ldrb	r2, [r2, #0]
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff2:	1c5a      	adds	r2, r3, #1
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b29a      	uxth	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003006:	e016      	b.n	8003036 <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003008:	f7fe f944 	bl	8001294 <HAL_GetTick>
 800300c:	0002      	movs	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d802      	bhi.n	800301e <HAL_SPI_Receive+0x17e>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	3301      	adds	r3, #1
 800301c:	d102      	bne.n	8003024 <HAL_SPI_Receive+0x184>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d108      	bne.n	8003036 <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 8003024:	2317      	movs	r3, #23
 8003026:	18fb      	adds	r3, r7, r3
 8003028:	2203      	movs	r2, #3
 800302a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2251      	movs	r2, #81	; 0x51
 8003030:	2101      	movs	r1, #1
 8003032:	5499      	strb	r1, [r3, r2]
          goto error;
 8003034:	e054      	b.n	80030e0 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800303a:	b29b      	uxth	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1c6      	bne.n	8002fce <HAL_SPI_Receive+0x12e>
 8003040:	e036      	b.n	80030b0 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	2201      	movs	r2, #1
 800304a:	4013      	ands	r3, r2
 800304c:	2b01      	cmp	r3, #1
 800304e:	d113      	bne.n	8003078 <HAL_SPI_Receive+0x1d8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305a:	b292      	uxth	r2, r2
 800305c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003062:	1c9a      	adds	r2, r3, #2
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800306c:	b29b      	uxth	r3, r3
 800306e:	3b01      	subs	r3, #1
 8003070:	b29a      	uxth	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003076:	e016      	b.n	80030a6 <HAL_SPI_Receive+0x206>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003078:	f7fe f90c 	bl	8001294 <HAL_GetTick>
 800307c:	0002      	movs	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	429a      	cmp	r2, r3
 8003086:	d802      	bhi.n	800308e <HAL_SPI_Receive+0x1ee>
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	3301      	adds	r3, #1
 800308c:	d102      	bne.n	8003094 <HAL_SPI_Receive+0x1f4>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d108      	bne.n	80030a6 <HAL_SPI_Receive+0x206>
        {
          errorcode = HAL_TIMEOUT;
 8003094:	2317      	movs	r3, #23
 8003096:	18fb      	adds	r3, r7, r3
 8003098:	2203      	movs	r2, #3
 800309a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2251      	movs	r2, #81	; 0x51
 80030a0:	2101      	movs	r1, #1
 80030a2:	5499      	strb	r1, [r3, r2]
          goto error;
 80030a4:	e01c      	b.n	80030e0 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1c8      	bne.n	8003042 <HAL_SPI_Receive+0x1a2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	6839      	ldr	r1, [r7, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	0018      	movs	r0, r3
 80030b8:	f000 fa7a 	bl	80035b0 <SPI_EndRxTransaction>
 80030bc:	1e03      	subs	r3, r0, #0
 80030be:	d002      	beq.n	80030c6 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2220      	movs	r2, #32
 80030c4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d004      	beq.n	80030d8 <HAL_SPI_Receive+0x238>
  {
    errorcode = HAL_ERROR;
 80030ce:	2317      	movs	r3, #23
 80030d0:	18fb      	adds	r3, r7, r3
 80030d2:	2201      	movs	r2, #1
 80030d4:	701a      	strb	r2, [r3, #0]
 80030d6:	e003      	b.n	80030e0 <HAL_SPI_Receive+0x240>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2251      	movs	r2, #81	; 0x51
 80030dc:	2101      	movs	r1, #1
 80030de:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2250      	movs	r2, #80	; 0x50
 80030e4:	2100      	movs	r1, #0
 80030e6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80030e8:	2317      	movs	r3, #23
 80030ea:	18fb      	adds	r3, r7, r3
 80030ec:	781b      	ldrb	r3, [r3, #0]
}
 80030ee:	0018      	movs	r0, r3
 80030f0:	46bd      	mov	sp, r7
 80030f2:	b007      	add	sp, #28
 80030f4:	bd90      	pop	{r4, r7, pc}
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	ffffbfff 	.word	0xffffbfff

080030fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08c      	sub	sp, #48	; 0x30
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
 8003108:	001a      	movs	r2, r3
 800310a:	1cbb      	adds	r3, r7, #2
 800310c:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800310e:	2301      	movs	r3, #1
 8003110:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003112:	232b      	movs	r3, #43	; 0x2b
 8003114:	18fb      	adds	r3, r7, r3
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2250      	movs	r2, #80	; 0x50
 800311e:	5c9b      	ldrb	r3, [r3, r2]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d101      	bne.n	8003128 <HAL_SPI_TransmitReceive+0x2c>
 8003124:	2302      	movs	r3, #2
 8003126:	e1b0      	b.n	800348a <HAL_SPI_TransmitReceive+0x38e>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2250      	movs	r2, #80	; 0x50
 800312c:	2101      	movs	r1, #1
 800312e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003130:	f7fe f8b0 	bl	8001294 <HAL_GetTick>
 8003134:	0003      	movs	r3, r0
 8003136:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003138:	2023      	movs	r0, #35	; 0x23
 800313a:	183b      	adds	r3, r7, r0
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	2151      	movs	r1, #81	; 0x51
 8003140:	5c52      	ldrb	r2, [r2, r1]
 8003142:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800314a:	231a      	movs	r3, #26
 800314c:	18fb      	adds	r3, r7, r3
 800314e:	1cba      	adds	r2, r7, #2
 8003150:	8812      	ldrh	r2, [r2, #0]
 8003152:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003154:	183b      	adds	r3, r7, r0
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d011      	beq.n	8003180 <HAL_SPI_TransmitReceive+0x84>
 800315c:	69fa      	ldr	r2, [r7, #28]
 800315e:	2382      	movs	r3, #130	; 0x82
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	429a      	cmp	r2, r3
 8003164:	d107      	bne.n	8003176 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d103      	bne.n	8003176 <HAL_SPI_TransmitReceive+0x7a>
 800316e:	183b      	adds	r3, r7, r0
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b04      	cmp	r3, #4
 8003174:	d004      	beq.n	8003180 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003176:	232b      	movs	r3, #43	; 0x2b
 8003178:	18fb      	adds	r3, r7, r3
 800317a:	2202      	movs	r2, #2
 800317c:	701a      	strb	r2, [r3, #0]
    goto error;
 800317e:	e17d      	b.n	800347c <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d006      	beq.n	8003194 <HAL_SPI_TransmitReceive+0x98>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <HAL_SPI_TransmitReceive+0x98>
 800318c:	1cbb      	adds	r3, r7, #2
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d104      	bne.n	800319e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003194:	232b      	movs	r3, #43	; 0x2b
 8003196:	18fb      	adds	r3, r7, r3
 8003198:	2201      	movs	r2, #1
 800319a:	701a      	strb	r2, [r3, #0]
    goto error;
 800319c:	e16e      	b.n	800347c <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2251      	movs	r2, #81	; 0x51
 80031a2:	5c9b      	ldrb	r3, [r3, r2]
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d003      	beq.n	80031b2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2251      	movs	r2, #81	; 0x51
 80031ae:	2105      	movs	r1, #5
 80031b0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	1cba      	adds	r2, r7, #2
 80031c2:	8812      	ldrh	r2, [r2, #0]
 80031c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	1cba      	adds	r2, r7, #2
 80031ca:	8812      	ldrh	r2, [r2, #0]
 80031cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1cba      	adds	r2, r7, #2
 80031d8:	8812      	ldrh	r2, [r2, #0]
 80031da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	1cba      	adds	r2, r7, #2
 80031e0:	8812      	ldrh	r2, [r2, #0]
 80031e2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2240      	movs	r2, #64	; 0x40
 80031f8:	4013      	ands	r3, r2
 80031fa:	2b40      	cmp	r3, #64	; 0x40
 80031fc:	d007      	beq.n	800320e <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2140      	movs	r1, #64	; 0x40
 800320a:	430a      	orrs	r2, r1
 800320c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	2380      	movs	r3, #128	; 0x80
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	429a      	cmp	r2, r3
 8003218:	d000      	beq.n	800321c <HAL_SPI_TransmitReceive+0x120>
 800321a:	e07f      	b.n	800331c <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d005      	beq.n	8003230 <HAL_SPI_TransmitReceive+0x134>
 8003224:	231a      	movs	r3, #26
 8003226:	18fb      	adds	r3, r7, r3
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d000      	beq.n	8003230 <HAL_SPI_TransmitReceive+0x134>
 800322e:	e06a      	b.n	8003306 <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003234:	881a      	ldrh	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003240:	1c9a      	adds	r2, r3, #2
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800324a:	b29b      	uxth	r3, r3
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003254:	e057      	b.n	8003306 <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2202      	movs	r2, #2
 800325e:	4013      	ands	r3, r2
 8003260:	2b02      	cmp	r3, #2
 8003262:	d11b      	bne.n	800329c <HAL_SPI_TransmitReceive+0x1a0>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003268:	b29b      	uxth	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d016      	beq.n	800329c <HAL_SPI_TransmitReceive+0x1a0>
 800326e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003270:	2b01      	cmp	r3, #1
 8003272:	d113      	bne.n	800329c <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003278:	881a      	ldrh	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003284:	1c9a      	adds	r2, r3, #2
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800328e:	b29b      	uxth	r3, r3
 8003290:	3b01      	subs	r3, #1
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2201      	movs	r2, #1
 80032a4:	4013      	ands	r3, r2
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d119      	bne.n	80032de <HAL_SPI_TransmitReceive+0x1e2>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d014      	beq.n	80032de <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032be:	b292      	uxth	r2, r2
 80032c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c6:	1c9a      	adds	r2, r3, #2
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032da:	2301      	movs	r3, #1
 80032dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80032de:	f7fd ffd9 	bl	8001294 <HAL_GetTick>
 80032e2:	0002      	movs	r2, r0
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d80b      	bhi.n	8003306 <HAL_SPI_TransmitReceive+0x20a>
 80032ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f0:	3301      	adds	r3, #1
 80032f2:	d008      	beq.n	8003306 <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 80032f4:	232b      	movs	r3, #43	; 0x2b
 80032f6:	18fb      	adds	r3, r7, r3
 80032f8:	2203      	movs	r2, #3
 80032fa:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2251      	movs	r2, #81	; 0x51
 8003300:	2101      	movs	r1, #1
 8003302:	5499      	strb	r1, [r3, r2]
        goto error;
 8003304:	e0ba      	b.n	800347c <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800330a:	b29b      	uxth	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1a2      	bne.n	8003256 <HAL_SPI_TransmitReceive+0x15a>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003314:	b29b      	uxth	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d19d      	bne.n	8003256 <HAL_SPI_TransmitReceive+0x15a>
 800331a:	e083      	b.n	8003424 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <HAL_SPI_TransmitReceive+0x234>
 8003324:	231a      	movs	r3, #26
 8003326:	18fb      	adds	r3, r7, r3
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d000      	beq.n	8003330 <HAL_SPI_TransmitReceive+0x234>
 800332e:	e06f      	b.n	8003410 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	330c      	adds	r3, #12
 800333a:	7812      	ldrb	r2, [r2, #0]
 800333c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	1c5a      	adds	r2, r3, #1
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800334c:	b29b      	uxth	r3, r3
 800334e:	3b01      	subs	r3, #1
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003356:	e05b      	b.n	8003410 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	2202      	movs	r2, #2
 8003360:	4013      	ands	r3, r2
 8003362:	2b02      	cmp	r3, #2
 8003364:	d11c      	bne.n	80033a0 <HAL_SPI_TransmitReceive+0x2a4>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d017      	beq.n	80033a0 <HAL_SPI_TransmitReceive+0x2a4>
 8003370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003372:	2b01      	cmp	r3, #1
 8003374:	d114      	bne.n	80033a0 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	330c      	adds	r3, #12
 8003380:	7812      	ldrb	r2, [r2, #0]
 8003382:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003392:	b29b      	uxth	r3, r3
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2201      	movs	r2, #1
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d119      	bne.n	80033e2 <HAL_SPI_TransmitReceive+0x2e6>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d014      	beq.n	80033e2 <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ca:	1c5a      	adds	r2, r3, #1
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	3b01      	subs	r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033de:	2301      	movs	r3, #1
 80033e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033e2:	f7fd ff57 	bl	8001294 <HAL_GetTick>
 80033e6:	0002      	movs	r2, r0
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d802      	bhi.n	80033f8 <HAL_SPI_TransmitReceive+0x2fc>
 80033f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f4:	3301      	adds	r3, #1
 80033f6:	d102      	bne.n	80033fe <HAL_SPI_TransmitReceive+0x302>
 80033f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d108      	bne.n	8003410 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 80033fe:	232b      	movs	r3, #43	; 0x2b
 8003400:	18fb      	adds	r3, r7, r3
 8003402:	2203      	movs	r2, #3
 8003404:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2251      	movs	r2, #81	; 0x51
 800340a:	2101      	movs	r1, #1
 800340c:	5499      	strb	r1, [r3, r2]
        goto error;
 800340e:	e035      	b.n	800347c <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003414:	b29b      	uxth	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d19e      	bne.n	8003358 <HAL_SPI_TransmitReceive+0x25c>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800341e:	b29b      	uxth	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	d199      	bne.n	8003358 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003426:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	0018      	movs	r0, r3
 800342c:	f000 f92a 	bl	8003684 <SPI_EndRxTxTransaction>
 8003430:	1e03      	subs	r3, r0, #0
 8003432:	d007      	beq.n	8003444 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8003434:	232b      	movs	r3, #43	; 0x2b
 8003436:	18fb      	adds	r3, r7, r3
 8003438:	2201      	movs	r2, #1
 800343a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2220      	movs	r2, #32
 8003440:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003442:	e01b      	b.n	800347c <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10a      	bne.n	8003462 <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003466:	2b00      	cmp	r3, #0
 8003468:	d004      	beq.n	8003474 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 800346a:	232b      	movs	r3, #43	; 0x2b
 800346c:	18fb      	adds	r3, r7, r3
 800346e:	2201      	movs	r2, #1
 8003470:	701a      	strb	r2, [r3, #0]
 8003472:	e003      	b.n	800347c <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2251      	movs	r2, #81	; 0x51
 8003478:	2101      	movs	r1, #1
 800347a:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2250      	movs	r2, #80	; 0x50
 8003480:	2100      	movs	r1, #0
 8003482:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003484:	232b      	movs	r3, #43	; 0x2b
 8003486:	18fb      	adds	r3, r7, r3
 8003488:	781b      	ldrb	r3, [r3, #0]
}
 800348a:	0018      	movs	r0, r3
 800348c:	46bd      	mov	sp, r7
 800348e:	b00c      	add	sp, #48	; 0x30
 8003490:	bd80      	pop	{r7, pc}
	...

08003494 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	1dfb      	adds	r3, r7, #7
 80034a2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034a4:	f7fd fef6 	bl	8001294 <HAL_GetTick>
 80034a8:	0002      	movs	r2, r0
 80034aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ac:	1a9b      	subs	r3, r3, r2
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	18d3      	adds	r3, r2, r3
 80034b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034b4:	f7fd feee 	bl	8001294 <HAL_GetTick>
 80034b8:	0003      	movs	r3, r0
 80034ba:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034bc:	4b3a      	ldr	r3, [pc, #232]	; (80035a8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	015b      	lsls	r3, r3, #5
 80034c2:	0d1b      	lsrs	r3, r3, #20
 80034c4:	69fa      	ldr	r2, [r7, #28]
 80034c6:	4353      	muls	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034ca:	e058      	b.n	800357e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	3301      	adds	r3, #1
 80034d0:	d055      	beq.n	800357e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034d2:	f7fd fedf 	bl	8001294 <HAL_GetTick>
 80034d6:	0002      	movs	r2, r0
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	69fa      	ldr	r2, [r7, #28]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d902      	bls.n	80034e8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d142      	bne.n	800356e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	21e0      	movs	r1, #224	; 0xe0
 80034f4:	438a      	bics	r2, r1
 80034f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	2382      	movs	r3, #130	; 0x82
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	429a      	cmp	r2, r3
 8003502:	d113      	bne.n	800352c <SPI_WaitFlagStateUntilTimeout+0x98>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	2380      	movs	r3, #128	; 0x80
 800350a:	021b      	lsls	r3, r3, #8
 800350c:	429a      	cmp	r2, r3
 800350e:	d005      	beq.n	800351c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	2380      	movs	r3, #128	; 0x80
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	429a      	cmp	r2, r3
 800351a:	d107      	bne.n	800352c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2140      	movs	r1, #64	; 0x40
 8003528:	438a      	bics	r2, r1
 800352a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003530:	2380      	movs	r3, #128	; 0x80
 8003532:	019b      	lsls	r3, r3, #6
 8003534:	429a      	cmp	r2, r3
 8003536:	d110      	bne.n	800355a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	491a      	ldr	r1, [pc, #104]	; (80035ac <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003544:	400a      	ands	r2, r1
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2180      	movs	r1, #128	; 0x80
 8003554:	0189      	lsls	r1, r1, #6
 8003556:	430a      	orrs	r2, r1
 8003558:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2251      	movs	r2, #81	; 0x51
 800355e:	2101      	movs	r1, #1
 8003560:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2250      	movs	r2, #80	; 0x50
 8003566:	2100      	movs	r1, #0
 8003568:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e017      	b.n	800359e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	3b01      	subs	r3, #1
 800357c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	4013      	ands	r3, r2
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	425a      	negs	r2, r3
 800358e:	4153      	adcs	r3, r2
 8003590:	b2db      	uxtb	r3, r3
 8003592:	001a      	movs	r2, r3
 8003594:	1dfb      	adds	r3, r7, #7
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	429a      	cmp	r2, r3
 800359a:	d197      	bne.n	80034cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	0018      	movs	r0, r3
 80035a0:	46bd      	mov	sp, r7
 80035a2:	b008      	add	sp, #32
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	20000000 	.word	0x20000000
 80035ac:	ffffdfff 	.word	0xffffdfff

080035b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af02      	add	r7, sp, #8
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	2382      	movs	r3, #130	; 0x82
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d113      	bne.n	80035f0 <SPI_EndRxTransaction+0x40>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	2380      	movs	r3, #128	; 0x80
 80035ce:	021b      	lsls	r3, r3, #8
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d005      	beq.n	80035e0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	2380      	movs	r3, #128	; 0x80
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	429a      	cmp	r2, r3
 80035de:	d107      	bne.n	80035f0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2140      	movs	r1, #64	; 0x40
 80035ec:	438a      	bics	r2, r1
 80035ee:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	2382      	movs	r3, #130	; 0x82
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d12b      	bne.n	8003654 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	2380      	movs	r3, #128	; 0x80
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	429a      	cmp	r2, r3
 8003606:	d012      	beq.n	800362e <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	0013      	movs	r3, r2
 8003612:	2200      	movs	r2, #0
 8003614:	2180      	movs	r1, #128	; 0x80
 8003616:	f7ff ff3d 	bl	8003494 <SPI_WaitFlagStateUntilTimeout>
 800361a:	1e03      	subs	r3, r0, #0
 800361c:	d02d      	beq.n	800367a <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003622:	2220      	movs	r2, #32
 8003624:	431a      	orrs	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e026      	b.n	800367c <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	0013      	movs	r3, r2
 8003638:	2200      	movs	r2, #0
 800363a:	2101      	movs	r1, #1
 800363c:	f7ff ff2a 	bl	8003494 <SPI_WaitFlagStateUntilTimeout>
 8003640:	1e03      	subs	r3, r0, #0
 8003642:	d01a      	beq.n	800367a <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003648:	2220      	movs	r2, #32
 800364a:	431a      	orrs	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e013      	b.n	800367c <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	0013      	movs	r3, r2
 800365e:	2200      	movs	r2, #0
 8003660:	2101      	movs	r1, #1
 8003662:	f7ff ff17 	bl	8003494 <SPI_WaitFlagStateUntilTimeout>
 8003666:	1e03      	subs	r3, r0, #0
 8003668:	d007      	beq.n	800367a <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366e:	2220      	movs	r2, #32
 8003670:	431a      	orrs	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e000      	b.n	800367c <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	0018      	movs	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	b004      	add	sp, #16
 8003682:	bd80      	pop	{r7, pc}

08003684 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b088      	sub	sp, #32
 8003688:	af02      	add	r7, sp, #8
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003690:	4b1d      	ldr	r3, [pc, #116]	; (8003708 <SPI_EndRxTxTransaction+0x84>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	491d      	ldr	r1, [pc, #116]	; (800370c <SPI_EndRxTxTransaction+0x88>)
 8003696:	0018      	movs	r0, r3
 8003698:	f7fc fd36 	bl	8000108 <__udivsi3>
 800369c:	0003      	movs	r3, r0
 800369e:	001a      	movs	r2, r3
 80036a0:	0013      	movs	r3, r2
 80036a2:	015b      	lsls	r3, r3, #5
 80036a4:	1a9b      	subs	r3, r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	189b      	adds	r3, r3, r2
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	2382      	movs	r3, #130	; 0x82
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d112      	bne.n	80036e0 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	0013      	movs	r3, r2
 80036c4:	2200      	movs	r2, #0
 80036c6:	2180      	movs	r1, #128	; 0x80
 80036c8:	f7ff fee4 	bl	8003494 <SPI_WaitFlagStateUntilTimeout>
 80036cc:	1e03      	subs	r3, r0, #0
 80036ce:	d016      	beq.n	80036fe <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d4:	2220      	movs	r2, #32
 80036d6:	431a      	orrs	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e00f      	b.n	8003700 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	3b01      	subs	r3, #1
 80036ea:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	2280      	movs	r2, #128	; 0x80
 80036f4:	4013      	ands	r3, r2
 80036f6:	2b80      	cmp	r3, #128	; 0x80
 80036f8:	d0f2      	beq.n	80036e0 <SPI_EndRxTxTransaction+0x5c>
 80036fa:	e000      	b.n	80036fe <SPI_EndRxTxTransaction+0x7a>
        break;
 80036fc:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	0018      	movs	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	b006      	add	sp, #24
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20000000 	.word	0x20000000
 800370c:	016e3600 	.word	0x016e3600

08003710 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e032      	b.n	8003788 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2239      	movs	r2, #57	; 0x39
 8003726:	5c9b      	ldrb	r3, [r3, r2]
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d107      	bne.n	800373e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2238      	movs	r2, #56	; 0x38
 8003732:	2100      	movs	r1, #0
 8003734:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	0018      	movs	r0, r3
 800373a:	f7fd fc51 	bl	8000fe0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2239      	movs	r2, #57	; 0x39
 8003742:	2102      	movs	r1, #2
 8003744:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3304      	adds	r3, #4
 800374e:	0019      	movs	r1, r3
 8003750:	0010      	movs	r0, r2
 8003752:	f000 f9ff 	bl	8003b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	223e      	movs	r2, #62	; 0x3e
 800375a:	2101      	movs	r1, #1
 800375c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	223a      	movs	r2, #58	; 0x3a
 8003762:	2101      	movs	r1, #1
 8003764:	5499      	strb	r1, [r3, r2]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	223b      	movs	r2, #59	; 0x3b
 800376a:	2101      	movs	r1, #1
 800376c:	5499      	strb	r1, [r3, r2]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	223c      	movs	r2, #60	; 0x3c
 8003772:	2101      	movs	r1, #1
 8003774:	5499      	strb	r1, [r3, r2]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	223d      	movs	r2, #61	; 0x3d
 800377a:	2101      	movs	r1, #1
 800377c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2239      	movs	r2, #57	; 0x39
 8003782:	2101      	movs	r1, #1
 8003784:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	0018      	movs	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	b002      	add	sp, #8
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e032      	b.n	8003808 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2239      	movs	r2, #57	; 0x39
 80037a6:	5c9b      	ldrb	r3, [r3, r2]
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d107      	bne.n	80037be <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2238      	movs	r2, #56	; 0x38
 80037b2:	2100      	movs	r1, #0
 80037b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	0018      	movs	r0, r3
 80037ba:	f000 f829 	bl	8003810 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2239      	movs	r2, #57	; 0x39
 80037c2:	2102      	movs	r1, #2
 80037c4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	3304      	adds	r3, #4
 80037ce:	0019      	movs	r1, r3
 80037d0:	0010      	movs	r0, r2
 80037d2:	f000 f9bf 	bl	8003b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	223e      	movs	r2, #62	; 0x3e
 80037da:	2101      	movs	r1, #1
 80037dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	223a      	movs	r2, #58	; 0x3a
 80037e2:	2101      	movs	r1, #1
 80037e4:	5499      	strb	r1, [r3, r2]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	223b      	movs	r2, #59	; 0x3b
 80037ea:	2101      	movs	r1, #1
 80037ec:	5499      	strb	r1, [r3, r2]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	223c      	movs	r2, #60	; 0x3c
 80037f2:	2101      	movs	r1, #1
 80037f4:	5499      	strb	r1, [r3, r2]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	223d      	movs	r2, #61	; 0x3d
 80037fa:	2101      	movs	r1, #1
 80037fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2239      	movs	r2, #57	; 0x39
 8003802:	2101      	movs	r1, #1
 8003804:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	0018      	movs	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	b002      	add	sp, #8
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003818:	46c0      	nop			; (mov r8, r8)
 800381a:	46bd      	mov	sp, r7
 800381c:	b002      	add	sp, #8
 800381e:	bd80      	pop	{r7, pc}

08003820 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800382c:	2317      	movs	r3, #23
 800382e:	18fb      	adds	r3, r7, r3
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2238      	movs	r2, #56	; 0x38
 8003838:	5c9b      	ldrb	r3, [r3, r2]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d101      	bne.n	8003842 <HAL_TIM_PWM_ConfigChannel+0x22>
 800383e:	2302      	movs	r3, #2
 8003840:	e0ad      	b.n	800399e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2238      	movs	r2, #56	; 0x38
 8003846:	2101      	movs	r1, #1
 8003848:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b0c      	cmp	r3, #12
 800384e:	d100      	bne.n	8003852 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003850:	e076      	b.n	8003940 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b0c      	cmp	r3, #12
 8003856:	d900      	bls.n	800385a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003858:	e095      	b.n	8003986 <HAL_TIM_PWM_ConfigChannel+0x166>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b08      	cmp	r3, #8
 800385e:	d04e      	beq.n	80038fe <HAL_TIM_PWM_ConfigChannel+0xde>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b08      	cmp	r3, #8
 8003864:	d900      	bls.n	8003868 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003866:	e08e      	b.n	8003986 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_TIM_PWM_ConfigChannel+0x56>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b04      	cmp	r3, #4
 8003872:	d021      	beq.n	80038b8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003874:	e087      	b.n	8003986 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	0011      	movs	r1, r2
 800387e:	0018      	movs	r0, r3
 8003880:	f000 f9b2 	bl	8003be8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699a      	ldr	r2, [r3, #24]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2108      	movs	r1, #8
 8003890:	430a      	orrs	r2, r1
 8003892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699a      	ldr	r2, [r3, #24]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2104      	movs	r1, #4
 80038a0:	438a      	bics	r2, r1
 80038a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6999      	ldr	r1, [r3, #24]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	619a      	str	r2, [r3, #24]
      break;
 80038b6:	e06b      	b.n	8003990 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	0011      	movs	r1, r2
 80038c0:	0018      	movs	r0, r3
 80038c2:	f000 f9cd 	bl	8003c60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699a      	ldr	r2, [r3, #24]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2180      	movs	r1, #128	; 0x80
 80038d2:	0109      	lsls	r1, r1, #4
 80038d4:	430a      	orrs	r2, r1
 80038d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699a      	ldr	r2, [r3, #24]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4931      	ldr	r1, [pc, #196]	; (80039a8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80038e4:	400a      	ands	r2, r1
 80038e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6999      	ldr	r1, [r3, #24]
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	021a      	lsls	r2, r3, #8
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	619a      	str	r2, [r3, #24]
      break;
 80038fc:	e048      	b.n	8003990 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	0011      	movs	r1, r2
 8003906:	0018      	movs	r0, r3
 8003908:	f000 f9ec 	bl	8003ce4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	69da      	ldr	r2, [r3, #28]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2108      	movs	r1, #8
 8003918:	430a      	orrs	r2, r1
 800391a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	69da      	ldr	r2, [r3, #28]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2104      	movs	r1, #4
 8003928:	438a      	bics	r2, r1
 800392a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	69d9      	ldr	r1, [r3, #28]
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	61da      	str	r2, [r3, #28]
      break;
 800393e:	e027      	b.n	8003990 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	0011      	movs	r1, r2
 8003948:	0018      	movs	r0, r3
 800394a:	f000 fa0b 	bl	8003d64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	69da      	ldr	r2, [r3, #28]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2180      	movs	r1, #128	; 0x80
 800395a:	0109      	lsls	r1, r1, #4
 800395c:	430a      	orrs	r2, r1
 800395e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	69da      	ldr	r2, [r3, #28]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	490f      	ldr	r1, [pc, #60]	; (80039a8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800396c:	400a      	ands	r2, r1
 800396e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	69d9      	ldr	r1, [r3, #28]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	021a      	lsls	r2, r3, #8
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	61da      	str	r2, [r3, #28]
      break;
 8003984:	e004      	b.n	8003990 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003986:	2317      	movs	r3, #23
 8003988:	18fb      	adds	r3, r7, r3
 800398a:	2201      	movs	r2, #1
 800398c:	701a      	strb	r2, [r3, #0]
      break;
 800398e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2238      	movs	r2, #56	; 0x38
 8003994:	2100      	movs	r1, #0
 8003996:	5499      	strb	r1, [r3, r2]

  return status;
 8003998:	2317      	movs	r3, #23
 800399a:	18fb      	adds	r3, r7, r3
 800399c:	781b      	ldrb	r3, [r3, #0]
}
 800399e:	0018      	movs	r0, r3
 80039a0:	46bd      	mov	sp, r7
 80039a2:	b006      	add	sp, #24
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	fffffbff 	.word	0xfffffbff

080039ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039b6:	230f      	movs	r3, #15
 80039b8:	18fb      	adds	r3, r7, r3
 80039ba:	2200      	movs	r2, #0
 80039bc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2238      	movs	r2, #56	; 0x38
 80039c2:	5c9b      	ldrb	r3, [r3, r2]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_TIM_ConfigClockSource+0x20>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e0bc      	b.n	8003b46 <HAL_TIM_ConfigClockSource+0x19a>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2238      	movs	r2, #56	; 0x38
 80039d0:	2101      	movs	r1, #1
 80039d2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2239      	movs	r2, #57	; 0x39
 80039d8:	2102      	movs	r1, #2
 80039da:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2277      	movs	r2, #119	; 0x77
 80039e8:	4393      	bics	r3, r2
 80039ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	4a58      	ldr	r2, [pc, #352]	; (8003b50 <HAL_TIM_ConfigClockSource+0x1a4>)
 80039f0:	4013      	ands	r3, r2
 80039f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2280      	movs	r2, #128	; 0x80
 8003a02:	0192      	lsls	r2, r2, #6
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d040      	beq.n	8003a8a <HAL_TIM_ConfigClockSource+0xde>
 8003a08:	2280      	movs	r2, #128	; 0x80
 8003a0a:	0192      	lsls	r2, r2, #6
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d900      	bls.n	8003a12 <HAL_TIM_ConfigClockSource+0x66>
 8003a10:	e088      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x178>
 8003a12:	2280      	movs	r2, #128	; 0x80
 8003a14:	0152      	lsls	r2, r2, #5
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d100      	bne.n	8003a1c <HAL_TIM_ConfigClockSource+0x70>
 8003a1a:	e088      	b.n	8003b2e <HAL_TIM_ConfigClockSource+0x182>
 8003a1c:	2280      	movs	r2, #128	; 0x80
 8003a1e:	0152      	lsls	r2, r2, #5
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d900      	bls.n	8003a26 <HAL_TIM_ConfigClockSource+0x7a>
 8003a24:	e07e      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x178>
 8003a26:	2b70      	cmp	r3, #112	; 0x70
 8003a28:	d018      	beq.n	8003a5c <HAL_TIM_ConfigClockSource+0xb0>
 8003a2a:	d900      	bls.n	8003a2e <HAL_TIM_ConfigClockSource+0x82>
 8003a2c:	e07a      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x178>
 8003a2e:	2b60      	cmp	r3, #96	; 0x60
 8003a30:	d04f      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0x126>
 8003a32:	d900      	bls.n	8003a36 <HAL_TIM_ConfigClockSource+0x8a>
 8003a34:	e076      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x178>
 8003a36:	2b50      	cmp	r3, #80	; 0x50
 8003a38:	d03b      	beq.n	8003ab2 <HAL_TIM_ConfigClockSource+0x106>
 8003a3a:	d900      	bls.n	8003a3e <HAL_TIM_ConfigClockSource+0x92>
 8003a3c:	e072      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x178>
 8003a3e:	2b40      	cmp	r3, #64	; 0x40
 8003a40:	d057      	beq.n	8003af2 <HAL_TIM_ConfigClockSource+0x146>
 8003a42:	d900      	bls.n	8003a46 <HAL_TIM_ConfigClockSource+0x9a>
 8003a44:	e06e      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x178>
 8003a46:	2b30      	cmp	r3, #48	; 0x30
 8003a48:	d063      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0x166>
 8003a4a:	d86b      	bhi.n	8003b24 <HAL_TIM_ConfigClockSource+0x178>
 8003a4c:	2b20      	cmp	r3, #32
 8003a4e:	d060      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0x166>
 8003a50:	d868      	bhi.n	8003b24 <HAL_TIM_ConfigClockSource+0x178>
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d05d      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0x166>
 8003a56:	2b10      	cmp	r3, #16
 8003a58:	d05b      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0x166>
 8003a5a:	e063      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a6c:	f000 fa3a 	bl	8003ee4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	2277      	movs	r2, #119	; 0x77
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	609a      	str	r2, [r3, #8]
      break;
 8003a88:	e052      	b.n	8003b30 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a9a:	f000 fa23 	bl	8003ee4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2180      	movs	r1, #128	; 0x80
 8003aaa:	01c9      	lsls	r1, r1, #7
 8003aac:	430a      	orrs	r2, r1
 8003aae:	609a      	str	r2, [r3, #8]
      break;
 8003ab0:	e03e      	b.n	8003b30 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003abe:	001a      	movs	r2, r3
 8003ac0:	f000 f996 	bl	8003df0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2150      	movs	r1, #80	; 0x50
 8003aca:	0018      	movs	r0, r3
 8003acc:	f000 f9f0 	bl	8003eb0 <TIM_ITRx_SetConfig>
      break;
 8003ad0:	e02e      	b.n	8003b30 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ade:	001a      	movs	r2, r3
 8003ae0:	f000 f9b4 	bl	8003e4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2160      	movs	r1, #96	; 0x60
 8003aea:	0018      	movs	r0, r3
 8003aec:	f000 f9e0 	bl	8003eb0 <TIM_ITRx_SetConfig>
      break;
 8003af0:	e01e      	b.n	8003b30 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003afe:	001a      	movs	r2, r3
 8003b00:	f000 f976 	bl	8003df0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2140      	movs	r1, #64	; 0x40
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	f000 f9d0 	bl	8003eb0 <TIM_ITRx_SetConfig>
      break;
 8003b10:	e00e      	b.n	8003b30 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	0019      	movs	r1, r3
 8003b1c:	0010      	movs	r0, r2
 8003b1e:	f000 f9c7 	bl	8003eb0 <TIM_ITRx_SetConfig>
      break;
 8003b22:	e005      	b.n	8003b30 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003b24:	230f      	movs	r3, #15
 8003b26:	18fb      	adds	r3, r7, r3
 8003b28:	2201      	movs	r2, #1
 8003b2a:	701a      	strb	r2, [r3, #0]
      break;
 8003b2c:	e000      	b.n	8003b30 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003b2e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2239      	movs	r2, #57	; 0x39
 8003b34:	2101      	movs	r1, #1
 8003b36:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2238      	movs	r2, #56	; 0x38
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	5499      	strb	r1, [r3, r2]

  return status;
 8003b40:	230f      	movs	r3, #15
 8003b42:	18fb      	adds	r3, r7, r3
 8003b44:	781b      	ldrb	r3, [r3, #0]
}
 8003b46:	0018      	movs	r0, r3
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	b004      	add	sp, #16
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	ffff00ff 	.word	0xffff00ff

08003b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	2380      	movs	r3, #128	; 0x80
 8003b68:	05db      	lsls	r3, r3, #23
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d003      	beq.n	8003b76 <TIM_Base_SetConfig+0x22>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a1b      	ldr	r2, [pc, #108]	; (8003be0 <TIM_Base_SetConfig+0x8c>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d108      	bne.n	8003b88 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2270      	movs	r2, #112	; 0x70
 8003b7a:	4393      	bics	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	2380      	movs	r3, #128	; 0x80
 8003b8c:	05db      	lsls	r3, r3, #23
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d003      	beq.n	8003b9a <TIM_Base_SetConfig+0x46>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a12      	ldr	r2, [pc, #72]	; (8003be0 <TIM_Base_SetConfig+0x8c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d108      	bne.n	8003bac <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	4a11      	ldr	r2, [pc, #68]	; (8003be4 <TIM_Base_SetConfig+0x90>)
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2280      	movs	r2, #128	; 0x80
 8003bb0:	4393      	bics	r3, r2
 8003bb2:	001a      	movs	r2, r3
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	615a      	str	r2, [r3, #20]
}
 8003bd8:	46c0      	nop			; (mov r8, r8)
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	b004      	add	sp, #16
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40010800 	.word	0x40010800
 8003be4:	fffffcff 	.word	0xfffffcff

08003be8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	4393      	bics	r3, r2
 8003bfa:	001a      	movs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2270      	movs	r2, #112	; 0x70
 8003c16:	4393      	bics	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2203      	movs	r2, #3
 8003c1e:	4393      	bics	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	4393      	bics	r3, r2
 8003c32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	621a      	str	r2, [r3, #32]
}
 8003c58:	46c0      	nop			; (mov r8, r8)
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	b006      	add	sp, #24
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	2210      	movs	r2, #16
 8003c70:	4393      	bics	r3, r2
 8003c72:	001a      	movs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4a13      	ldr	r2, [pc, #76]	; (8003cdc <TIM_OC2_SetConfig+0x7c>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	4a12      	ldr	r2, [pc, #72]	; (8003ce0 <TIM_OC2_SetConfig+0x80>)
 8003c96:	4013      	ands	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	021b      	lsls	r3, r3, #8
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	4393      	bics	r3, r2
 8003cac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	621a      	str	r2, [r3, #32]
}
 8003cd4:	46c0      	nop			; (mov r8, r8)
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	b006      	add	sp, #24
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	ffff8fff 	.word	0xffff8fff
 8003ce0:	fffffcff 	.word	0xfffffcff

08003ce4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	4a1a      	ldr	r2, [pc, #104]	; (8003d5c <TIM_OC3_SetConfig+0x78>)
 8003cf4:	401a      	ands	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2270      	movs	r2, #112	; 0x70
 8003d10:	4393      	bics	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2203      	movs	r2, #3
 8003d18:	4393      	bics	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	4a0d      	ldr	r2, [pc, #52]	; (8003d60 <TIM_OC3_SetConfig+0x7c>)
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	021b      	lsls	r3, r3, #8
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	621a      	str	r2, [r3, #32]
}
 8003d54:	46c0      	nop			; (mov r8, r8)
 8003d56:	46bd      	mov	sp, r7
 8003d58:	b006      	add	sp, #24
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	fffffeff 	.word	0xfffffeff
 8003d60:	fffffdff 	.word	0xfffffdff

08003d64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	4a1b      	ldr	r2, [pc, #108]	; (8003de0 <TIM_OC4_SetConfig+0x7c>)
 8003d74:	401a      	ands	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4a15      	ldr	r2, [pc, #84]	; (8003de4 <TIM_OC4_SetConfig+0x80>)
 8003d90:	4013      	ands	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4a14      	ldr	r2, [pc, #80]	; (8003de8 <TIM_OC4_SetConfig+0x84>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	021b      	lsls	r3, r3, #8
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	4a10      	ldr	r2, [pc, #64]	; (8003dec <TIM_OC4_SetConfig+0x88>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	031b      	lsls	r3, r3, #12
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	621a      	str	r2, [r3, #32]
}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b006      	add	sp, #24
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	ffffefff 	.word	0xffffefff
 8003de4:	ffff8fff 	.word	0xffff8fff
 8003de8:	fffffcff 	.word	0xfffffcff
 8003dec:	ffffdfff 	.word	0xffffdfff

08003df0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	2201      	movs	r2, #1
 8003e08:	4393      	bics	r3, r2
 8003e0a:	001a      	movs	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	22f0      	movs	r2, #240	; 0xf0
 8003e1a:	4393      	bics	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	011b      	lsls	r3, r3, #4
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	220a      	movs	r2, #10
 8003e2c:	4393      	bics	r3, r2
 8003e2e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	621a      	str	r2, [r3, #32]
}
 8003e44:	46c0      	nop			; (mov r8, r8)
 8003e46:	46bd      	mov	sp, r7
 8003e48:	b006      	add	sp, #24
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	2210      	movs	r2, #16
 8003e5e:	4393      	bics	r3, r2
 8003e60:	001a      	movs	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	4a0d      	ldr	r2, [pc, #52]	; (8003eac <TIM_TI2_ConfigInputStage+0x60>)
 8003e76:	4013      	ands	r3, r2
 8003e78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	031b      	lsls	r3, r3, #12
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	22a0      	movs	r2, #160	; 0xa0
 8003e88:	4393      	bics	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	621a      	str	r2, [r3, #32]
}
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	b006      	add	sp, #24
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	ffff0fff 	.word	0xffff0fff

08003eb0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2270      	movs	r2, #112	; 0x70
 8003ec4:	4393      	bics	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	2207      	movs	r2, #7
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	609a      	str	r2, [r3, #8]
}
 8003eda:	46c0      	nop			; (mov r8, r8)
 8003edc:	46bd      	mov	sp, r7
 8003ede:	b004      	add	sp, #16
 8003ee0:	bd80      	pop	{r7, pc}
	...

08003ee4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	4a09      	ldr	r2, [pc, #36]	; (8003f20 <TIM_ETR_SetConfig+0x3c>)
 8003efc:	4013      	ands	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	021a      	lsls	r2, r3, #8
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	431a      	orrs	r2, r3
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	609a      	str	r2, [r3, #8]
}
 8003f18:	46c0      	nop			; (mov r8, r8)
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	b006      	add	sp, #24
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	ffff00ff 	.word	0xffff00ff

08003f24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2238      	movs	r2, #56	; 0x38
 8003f32:	5c9b      	ldrb	r3, [r3, r2]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d101      	bne.n	8003f3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f38:	2302      	movs	r3, #2
 8003f3a:	e03d      	b.n	8003fb8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2238      	movs	r2, #56	; 0x38
 8003f40:	2101      	movs	r1, #1
 8003f42:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2239      	movs	r2, #57	; 0x39
 8003f48:	2102      	movs	r1, #2
 8003f4a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2270      	movs	r2, #112	; 0x70
 8003f60:	4393      	bics	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	2380      	movs	r3, #128	; 0x80
 8003f7c:	05db      	lsls	r3, r3, #23
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d004      	beq.n	8003f8c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a0e      	ldr	r2, [pc, #56]	; (8003fc0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d10c      	bne.n	8003fa6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2280      	movs	r2, #128	; 0x80
 8003f90:	4393      	bics	r3, r2
 8003f92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2239      	movs	r2, #57	; 0x39
 8003faa:	2101      	movs	r1, #1
 8003fac:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2238      	movs	r2, #56	; 0x38
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	0018      	movs	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b004      	add	sp, #16
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40010800 	.word	0x40010800

08003fc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e044      	b.n	8004060 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d107      	bne.n	8003fee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2278      	movs	r2, #120	; 0x78
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	0018      	movs	r0, r3
 8003fea:	f7fd f84b 	bl	8001084 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2224      	movs	r2, #36	; 0x24
 8003ff2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2101      	movs	r1, #1
 8004000:	438a      	bics	r2, r1
 8004002:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	0018      	movs	r0, r3
 8004008:	f000 f830 	bl	800406c <UART_SetConfig>
 800400c:	0003      	movs	r3, r0
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e024      	b.n	8004060 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	0018      	movs	r0, r3
 8004022:	f000 fa6d 	bl	8004500 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	490d      	ldr	r1, [pc, #52]	; (8004068 <HAL_UART_Init+0xa4>)
 8004032:	400a      	ands	r2, r1
 8004034:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	212a      	movs	r1, #42	; 0x2a
 8004042:	438a      	bics	r2, r1
 8004044:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2101      	movs	r1, #1
 8004052:	430a      	orrs	r2, r1
 8004054:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	0018      	movs	r0, r3
 800405a:	f000 fb05 	bl	8004668 <UART_CheckIdleState>
 800405e:	0003      	movs	r3, r0
}
 8004060:	0018      	movs	r0, r3
 8004062:	46bd      	mov	sp, r7
 8004064:	b002      	add	sp, #8
 8004066:	bd80      	pop	{r7, pc}
 8004068:	ffffb7ff 	.word	0xffffb7ff

0800406c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800406c:	b5b0      	push	{r4, r5, r7, lr}
 800406e:	b08e      	sub	sp, #56	; 0x38
 8004070:	af00      	add	r7, sp, #0
 8004072:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004074:	231a      	movs	r3, #26
 8004076:	2218      	movs	r2, #24
 8004078:	189b      	adds	r3, r3, r2
 800407a:	19db      	adds	r3, r3, r7
 800407c:	2200      	movs	r2, #0
 800407e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	431a      	orrs	r2, r3
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	431a      	orrs	r2, r3
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	4313      	orrs	r3, r2
 8004096:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4ab4      	ldr	r2, [pc, #720]	; (8004370 <UART_SetConfig+0x304>)
 80040a0:	4013      	ands	r3, r2
 80040a2:	0019      	movs	r1, r3
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040aa:	430a      	orrs	r2, r1
 80040ac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	4aaf      	ldr	r2, [pc, #700]	; (8004374 <UART_SetConfig+0x308>)
 80040b6:	4013      	ands	r3, r2
 80040b8:	0019      	movs	r1, r3
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	68da      	ldr	r2, [r3, #12]
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4aa9      	ldr	r2, [pc, #676]	; (8004378 <UART_SetConfig+0x30c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d004      	beq.n	80040e0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040dc:	4313      	orrs	r3, r2
 80040de:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	4aa5      	ldr	r2, [pc, #660]	; (800437c <UART_SetConfig+0x310>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	0019      	movs	r1, r3
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040f2:	430a      	orrs	r2, r1
 80040f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4aa1      	ldr	r2, [pc, #644]	; (8004380 <UART_SetConfig+0x314>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d131      	bne.n	8004164 <UART_SetConfig+0xf8>
 8004100:	4ba0      	ldr	r3, [pc, #640]	; (8004384 <UART_SetConfig+0x318>)
 8004102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004104:	220c      	movs	r2, #12
 8004106:	4013      	ands	r3, r2
 8004108:	2b0c      	cmp	r3, #12
 800410a:	d01d      	beq.n	8004148 <UART_SetConfig+0xdc>
 800410c:	d823      	bhi.n	8004156 <UART_SetConfig+0xea>
 800410e:	2b08      	cmp	r3, #8
 8004110:	d00c      	beq.n	800412c <UART_SetConfig+0xc0>
 8004112:	d820      	bhi.n	8004156 <UART_SetConfig+0xea>
 8004114:	2b00      	cmp	r3, #0
 8004116:	d002      	beq.n	800411e <UART_SetConfig+0xb2>
 8004118:	2b04      	cmp	r3, #4
 800411a:	d00e      	beq.n	800413a <UART_SetConfig+0xce>
 800411c:	e01b      	b.n	8004156 <UART_SetConfig+0xea>
 800411e:	231b      	movs	r3, #27
 8004120:	2218      	movs	r2, #24
 8004122:	189b      	adds	r3, r3, r2
 8004124:	19db      	adds	r3, r3, r7
 8004126:	2200      	movs	r2, #0
 8004128:	701a      	strb	r2, [r3, #0]
 800412a:	e065      	b.n	80041f8 <UART_SetConfig+0x18c>
 800412c:	231b      	movs	r3, #27
 800412e:	2218      	movs	r2, #24
 8004130:	189b      	adds	r3, r3, r2
 8004132:	19db      	adds	r3, r3, r7
 8004134:	2202      	movs	r2, #2
 8004136:	701a      	strb	r2, [r3, #0]
 8004138:	e05e      	b.n	80041f8 <UART_SetConfig+0x18c>
 800413a:	231b      	movs	r3, #27
 800413c:	2218      	movs	r2, #24
 800413e:	189b      	adds	r3, r3, r2
 8004140:	19db      	adds	r3, r3, r7
 8004142:	2204      	movs	r2, #4
 8004144:	701a      	strb	r2, [r3, #0]
 8004146:	e057      	b.n	80041f8 <UART_SetConfig+0x18c>
 8004148:	231b      	movs	r3, #27
 800414a:	2218      	movs	r2, #24
 800414c:	189b      	adds	r3, r3, r2
 800414e:	19db      	adds	r3, r3, r7
 8004150:	2208      	movs	r2, #8
 8004152:	701a      	strb	r2, [r3, #0]
 8004154:	e050      	b.n	80041f8 <UART_SetConfig+0x18c>
 8004156:	231b      	movs	r3, #27
 8004158:	2218      	movs	r2, #24
 800415a:	189b      	adds	r3, r3, r2
 800415c:	19db      	adds	r3, r3, r7
 800415e:	2210      	movs	r2, #16
 8004160:	701a      	strb	r2, [r3, #0]
 8004162:	e049      	b.n	80041f8 <UART_SetConfig+0x18c>
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a83      	ldr	r2, [pc, #524]	; (8004378 <UART_SetConfig+0x30c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d13e      	bne.n	80041ec <UART_SetConfig+0x180>
 800416e:	4b85      	ldr	r3, [pc, #532]	; (8004384 <UART_SetConfig+0x318>)
 8004170:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004172:	23c0      	movs	r3, #192	; 0xc0
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	4013      	ands	r3, r2
 8004178:	22c0      	movs	r2, #192	; 0xc0
 800417a:	0112      	lsls	r2, r2, #4
 800417c:	4293      	cmp	r3, r2
 800417e:	d027      	beq.n	80041d0 <UART_SetConfig+0x164>
 8004180:	22c0      	movs	r2, #192	; 0xc0
 8004182:	0112      	lsls	r2, r2, #4
 8004184:	4293      	cmp	r3, r2
 8004186:	d82a      	bhi.n	80041de <UART_SetConfig+0x172>
 8004188:	2280      	movs	r2, #128	; 0x80
 800418a:	0112      	lsls	r2, r2, #4
 800418c:	4293      	cmp	r3, r2
 800418e:	d011      	beq.n	80041b4 <UART_SetConfig+0x148>
 8004190:	2280      	movs	r2, #128	; 0x80
 8004192:	0112      	lsls	r2, r2, #4
 8004194:	4293      	cmp	r3, r2
 8004196:	d822      	bhi.n	80041de <UART_SetConfig+0x172>
 8004198:	2b00      	cmp	r3, #0
 800419a:	d004      	beq.n	80041a6 <UART_SetConfig+0x13a>
 800419c:	2280      	movs	r2, #128	; 0x80
 800419e:	00d2      	lsls	r2, r2, #3
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d00e      	beq.n	80041c2 <UART_SetConfig+0x156>
 80041a4:	e01b      	b.n	80041de <UART_SetConfig+0x172>
 80041a6:	231b      	movs	r3, #27
 80041a8:	2218      	movs	r2, #24
 80041aa:	189b      	adds	r3, r3, r2
 80041ac:	19db      	adds	r3, r3, r7
 80041ae:	2200      	movs	r2, #0
 80041b0:	701a      	strb	r2, [r3, #0]
 80041b2:	e021      	b.n	80041f8 <UART_SetConfig+0x18c>
 80041b4:	231b      	movs	r3, #27
 80041b6:	2218      	movs	r2, #24
 80041b8:	189b      	adds	r3, r3, r2
 80041ba:	19db      	adds	r3, r3, r7
 80041bc:	2202      	movs	r2, #2
 80041be:	701a      	strb	r2, [r3, #0]
 80041c0:	e01a      	b.n	80041f8 <UART_SetConfig+0x18c>
 80041c2:	231b      	movs	r3, #27
 80041c4:	2218      	movs	r2, #24
 80041c6:	189b      	adds	r3, r3, r2
 80041c8:	19db      	adds	r3, r3, r7
 80041ca:	2204      	movs	r2, #4
 80041cc:	701a      	strb	r2, [r3, #0]
 80041ce:	e013      	b.n	80041f8 <UART_SetConfig+0x18c>
 80041d0:	231b      	movs	r3, #27
 80041d2:	2218      	movs	r2, #24
 80041d4:	189b      	adds	r3, r3, r2
 80041d6:	19db      	adds	r3, r3, r7
 80041d8:	2208      	movs	r2, #8
 80041da:	701a      	strb	r2, [r3, #0]
 80041dc:	e00c      	b.n	80041f8 <UART_SetConfig+0x18c>
 80041de:	231b      	movs	r3, #27
 80041e0:	2218      	movs	r2, #24
 80041e2:	189b      	adds	r3, r3, r2
 80041e4:	19db      	adds	r3, r3, r7
 80041e6:	2210      	movs	r2, #16
 80041e8:	701a      	strb	r2, [r3, #0]
 80041ea:	e005      	b.n	80041f8 <UART_SetConfig+0x18c>
 80041ec:	231b      	movs	r3, #27
 80041ee:	2218      	movs	r2, #24
 80041f0:	189b      	adds	r3, r3, r2
 80041f2:	19db      	adds	r3, r3, r7
 80041f4:	2210      	movs	r2, #16
 80041f6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a5e      	ldr	r2, [pc, #376]	; (8004378 <UART_SetConfig+0x30c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d000      	beq.n	8004204 <UART_SetConfig+0x198>
 8004202:	e084      	b.n	800430e <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004204:	231b      	movs	r3, #27
 8004206:	2218      	movs	r2, #24
 8004208:	189b      	adds	r3, r3, r2
 800420a:	19db      	adds	r3, r3, r7
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	2b08      	cmp	r3, #8
 8004210:	d01d      	beq.n	800424e <UART_SetConfig+0x1e2>
 8004212:	dc20      	bgt.n	8004256 <UART_SetConfig+0x1ea>
 8004214:	2b04      	cmp	r3, #4
 8004216:	d015      	beq.n	8004244 <UART_SetConfig+0x1d8>
 8004218:	dc1d      	bgt.n	8004256 <UART_SetConfig+0x1ea>
 800421a:	2b00      	cmp	r3, #0
 800421c:	d002      	beq.n	8004224 <UART_SetConfig+0x1b8>
 800421e:	2b02      	cmp	r3, #2
 8004220:	d005      	beq.n	800422e <UART_SetConfig+0x1c2>
 8004222:	e018      	b.n	8004256 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004224:	f7fe fafe 	bl	8002824 <HAL_RCC_GetPCLK1Freq>
 8004228:	0003      	movs	r3, r0
 800422a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800422c:	e01c      	b.n	8004268 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800422e:	4b55      	ldr	r3, [pc, #340]	; (8004384 <UART_SetConfig+0x318>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2210      	movs	r2, #16
 8004234:	4013      	ands	r3, r2
 8004236:	d002      	beq.n	800423e <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004238:	4b53      	ldr	r3, [pc, #332]	; (8004388 <UART_SetConfig+0x31c>)
 800423a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800423c:	e014      	b.n	8004268 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 800423e:	4b53      	ldr	r3, [pc, #332]	; (800438c <UART_SetConfig+0x320>)
 8004240:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004242:	e011      	b.n	8004268 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004244:	f7fe fa3e 	bl	80026c4 <HAL_RCC_GetSysClockFreq>
 8004248:	0003      	movs	r3, r0
 800424a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800424c:	e00c      	b.n	8004268 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800424e:	2380      	movs	r3, #128	; 0x80
 8004250:	021b      	lsls	r3, r3, #8
 8004252:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004254:	e008      	b.n	8004268 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8004256:	2300      	movs	r3, #0
 8004258:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800425a:	231a      	movs	r3, #26
 800425c:	2218      	movs	r2, #24
 800425e:	189b      	adds	r3, r3, r2
 8004260:	19db      	adds	r3, r3, r7
 8004262:	2201      	movs	r2, #1
 8004264:	701a      	strb	r2, [r3, #0]
        break;
 8004266:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426a:	2b00      	cmp	r3, #0
 800426c:	d100      	bne.n	8004270 <UART_SetConfig+0x204>
 800426e:	e12f      	b.n	80044d0 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	0013      	movs	r3, r2
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	189b      	adds	r3, r3, r2
 800427a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800427c:	429a      	cmp	r2, r3
 800427e:	d305      	bcc.n	800428c <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004288:	429a      	cmp	r2, r3
 800428a:	d906      	bls.n	800429a <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 800428c:	231a      	movs	r3, #26
 800428e:	2218      	movs	r2, #24
 8004290:	189b      	adds	r3, r3, r2
 8004292:	19db      	adds	r3, r3, r7
 8004294:	2201      	movs	r2, #1
 8004296:	701a      	strb	r2, [r3, #0]
 8004298:	e11a      	b.n	80044d0 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800429a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429c:	613b      	str	r3, [r7, #16]
 800429e:	2300      	movs	r3, #0
 80042a0:	617b      	str	r3, [r7, #20]
 80042a2:	6939      	ldr	r1, [r7, #16]
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	000b      	movs	r3, r1
 80042a8:	0e1b      	lsrs	r3, r3, #24
 80042aa:	0010      	movs	r0, r2
 80042ac:	0205      	lsls	r5, r0, #8
 80042ae:	431d      	orrs	r5, r3
 80042b0:	000b      	movs	r3, r1
 80042b2:	021c      	lsls	r4, r3, #8
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	085b      	lsrs	r3, r3, #1
 80042ba:	60bb      	str	r3, [r7, #8]
 80042bc:	2300      	movs	r3, #0
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	68b8      	ldr	r0, [r7, #8]
 80042c2:	68f9      	ldr	r1, [r7, #12]
 80042c4:	1900      	adds	r0, r0, r4
 80042c6:	4169      	adcs	r1, r5
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	603b      	str	r3, [r7, #0]
 80042ce:	2300      	movs	r3, #0
 80042d0:	607b      	str	r3, [r7, #4]
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f7fb ffa3 	bl	8000220 <__aeabi_uldivmod>
 80042da:	0002      	movs	r2, r0
 80042dc:	000b      	movs	r3, r1
 80042de:	0013      	movs	r3, r2
 80042e0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042e4:	23c0      	movs	r3, #192	; 0xc0
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d309      	bcc.n	8004300 <UART_SetConfig+0x294>
 80042ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ee:	2380      	movs	r3, #128	; 0x80
 80042f0:	035b      	lsls	r3, r3, #13
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d204      	bcs.n	8004300 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042fc:	60da      	str	r2, [r3, #12]
 80042fe:	e0e7      	b.n	80044d0 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8004300:	231a      	movs	r3, #26
 8004302:	2218      	movs	r2, #24
 8004304:	189b      	adds	r3, r3, r2
 8004306:	19db      	adds	r3, r3, r7
 8004308:	2201      	movs	r2, #1
 800430a:	701a      	strb	r2, [r3, #0]
 800430c:	e0e0      	b.n	80044d0 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	69da      	ldr	r2, [r3, #28]
 8004312:	2380      	movs	r3, #128	; 0x80
 8004314:	021b      	lsls	r3, r3, #8
 8004316:	429a      	cmp	r2, r3
 8004318:	d000      	beq.n	800431c <UART_SetConfig+0x2b0>
 800431a:	e082      	b.n	8004422 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 800431c:	231b      	movs	r3, #27
 800431e:	2218      	movs	r2, #24
 8004320:	189b      	adds	r3, r3, r2
 8004322:	19db      	adds	r3, r3, r7
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b08      	cmp	r3, #8
 8004328:	d834      	bhi.n	8004394 <UART_SetConfig+0x328>
 800432a:	009a      	lsls	r2, r3, #2
 800432c:	4b18      	ldr	r3, [pc, #96]	; (8004390 <UART_SetConfig+0x324>)
 800432e:	18d3      	adds	r3, r2, r3
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004334:	f7fe fa76 	bl	8002824 <HAL_RCC_GetPCLK1Freq>
 8004338:	0003      	movs	r3, r0
 800433a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800433c:	e033      	b.n	80043a6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800433e:	f7fe fa87 	bl	8002850 <HAL_RCC_GetPCLK2Freq>
 8004342:	0003      	movs	r3, r0
 8004344:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004346:	e02e      	b.n	80043a6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004348:	4b0e      	ldr	r3, [pc, #56]	; (8004384 <UART_SetConfig+0x318>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2210      	movs	r2, #16
 800434e:	4013      	ands	r3, r2
 8004350:	d002      	beq.n	8004358 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004352:	4b0d      	ldr	r3, [pc, #52]	; (8004388 <UART_SetConfig+0x31c>)
 8004354:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004356:	e026      	b.n	80043a6 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8004358:	4b0c      	ldr	r3, [pc, #48]	; (800438c <UART_SetConfig+0x320>)
 800435a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800435c:	e023      	b.n	80043a6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800435e:	f7fe f9b1 	bl	80026c4 <HAL_RCC_GetSysClockFreq>
 8004362:	0003      	movs	r3, r0
 8004364:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004366:	e01e      	b.n	80043a6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004368:	2380      	movs	r3, #128	; 0x80
 800436a:	021b      	lsls	r3, r3, #8
 800436c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800436e:	e01a      	b.n	80043a6 <UART_SetConfig+0x33a>
 8004370:	efff69f3 	.word	0xefff69f3
 8004374:	ffffcfff 	.word	0xffffcfff
 8004378:	40004800 	.word	0x40004800
 800437c:	fffff4ff 	.word	0xfffff4ff
 8004380:	40004400 	.word	0x40004400
 8004384:	40021000 	.word	0x40021000
 8004388:	003d0900 	.word	0x003d0900
 800438c:	00f42400 	.word	0x00f42400
 8004390:	080049f8 	.word	0x080049f8
      default:
        pclk = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004398:	231a      	movs	r3, #26
 800439a:	2218      	movs	r2, #24
 800439c:	189b      	adds	r3, r3, r2
 800439e:	19db      	adds	r3, r3, r7
 80043a0:	2201      	movs	r2, #1
 80043a2:	701a      	strb	r2, [r3, #0]
        break;
 80043a4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d100      	bne.n	80043ae <UART_SetConfig+0x342>
 80043ac:	e090      	b.n	80044d0 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b0:	005a      	lsls	r2, r3, #1
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	085b      	lsrs	r3, r3, #1
 80043b8:	18d2      	adds	r2, r2, r3
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	0019      	movs	r1, r3
 80043c0:	0010      	movs	r0, r2
 80043c2:	f7fb fea1 	bl	8000108 <__udivsi3>
 80043c6:	0003      	movs	r3, r0
 80043c8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043cc:	2b0f      	cmp	r3, #15
 80043ce:	d921      	bls.n	8004414 <UART_SetConfig+0x3a8>
 80043d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043d2:	2380      	movs	r3, #128	; 0x80
 80043d4:	025b      	lsls	r3, r3, #9
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d21c      	bcs.n	8004414 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043dc:	b29a      	uxth	r2, r3
 80043de:	200e      	movs	r0, #14
 80043e0:	2418      	movs	r4, #24
 80043e2:	1903      	adds	r3, r0, r4
 80043e4:	19db      	adds	r3, r3, r7
 80043e6:	210f      	movs	r1, #15
 80043e8:	438a      	bics	r2, r1
 80043ea:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ee:	085b      	lsrs	r3, r3, #1
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2207      	movs	r2, #7
 80043f4:	4013      	ands	r3, r2
 80043f6:	b299      	uxth	r1, r3
 80043f8:	1903      	adds	r3, r0, r4
 80043fa:	19db      	adds	r3, r3, r7
 80043fc:	1902      	adds	r2, r0, r4
 80043fe:	19d2      	adds	r2, r2, r7
 8004400:	8812      	ldrh	r2, [r2, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	1902      	adds	r2, r0, r4
 800440c:	19d2      	adds	r2, r2, r7
 800440e:	8812      	ldrh	r2, [r2, #0]
 8004410:	60da      	str	r2, [r3, #12]
 8004412:	e05d      	b.n	80044d0 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8004414:	231a      	movs	r3, #26
 8004416:	2218      	movs	r2, #24
 8004418:	189b      	adds	r3, r3, r2
 800441a:	19db      	adds	r3, r3, r7
 800441c:	2201      	movs	r2, #1
 800441e:	701a      	strb	r2, [r3, #0]
 8004420:	e056      	b.n	80044d0 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004422:	231b      	movs	r3, #27
 8004424:	2218      	movs	r2, #24
 8004426:	189b      	adds	r3, r3, r2
 8004428:	19db      	adds	r3, r3, r7
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b08      	cmp	r3, #8
 800442e:	d822      	bhi.n	8004476 <UART_SetConfig+0x40a>
 8004430:	009a      	lsls	r2, r3, #2
 8004432:	4b2f      	ldr	r3, [pc, #188]	; (80044f0 <UART_SetConfig+0x484>)
 8004434:	18d3      	adds	r3, r2, r3
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800443a:	f7fe f9f3 	bl	8002824 <HAL_RCC_GetPCLK1Freq>
 800443e:	0003      	movs	r3, r0
 8004440:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004442:	e021      	b.n	8004488 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004444:	f7fe fa04 	bl	8002850 <HAL_RCC_GetPCLK2Freq>
 8004448:	0003      	movs	r3, r0
 800444a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800444c:	e01c      	b.n	8004488 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800444e:	4b29      	ldr	r3, [pc, #164]	; (80044f4 <UART_SetConfig+0x488>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2210      	movs	r2, #16
 8004454:	4013      	ands	r3, r2
 8004456:	d002      	beq.n	800445e <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004458:	4b27      	ldr	r3, [pc, #156]	; (80044f8 <UART_SetConfig+0x48c>)
 800445a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800445c:	e014      	b.n	8004488 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 800445e:	4b27      	ldr	r3, [pc, #156]	; (80044fc <UART_SetConfig+0x490>)
 8004460:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004462:	e011      	b.n	8004488 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004464:	f7fe f92e 	bl	80026c4 <HAL_RCC_GetSysClockFreq>
 8004468:	0003      	movs	r3, r0
 800446a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800446c:	e00c      	b.n	8004488 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800446e:	2380      	movs	r3, #128	; 0x80
 8004470:	021b      	lsls	r3, r3, #8
 8004472:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004474:	e008      	b.n	8004488 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800447a:	231a      	movs	r3, #26
 800447c:	2218      	movs	r2, #24
 800447e:	189b      	adds	r3, r3, r2
 8004480:	19db      	adds	r3, r3, r7
 8004482:	2201      	movs	r2, #1
 8004484:	701a      	strb	r2, [r3, #0]
        break;
 8004486:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448a:	2b00      	cmp	r3, #0
 800448c:	d020      	beq.n	80044d0 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	085a      	lsrs	r2, r3, #1
 8004494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004496:	18d2      	adds	r2, r2, r3
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	0019      	movs	r1, r3
 800449e:	0010      	movs	r0, r2
 80044a0:	f7fb fe32 	bl	8000108 <__udivsi3>
 80044a4:	0003      	movs	r3, r0
 80044a6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044aa:	2b0f      	cmp	r3, #15
 80044ac:	d90a      	bls.n	80044c4 <UART_SetConfig+0x458>
 80044ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044b0:	2380      	movs	r3, #128	; 0x80
 80044b2:	025b      	lsls	r3, r3, #9
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d205      	bcs.n	80044c4 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	60da      	str	r2, [r3, #12]
 80044c2:	e005      	b.n	80044d0 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80044c4:	231a      	movs	r3, #26
 80044c6:	2218      	movs	r2, #24
 80044c8:	189b      	adds	r3, r3, r2
 80044ca:	19db      	adds	r3, r3, r7
 80044cc:	2201      	movs	r2, #1
 80044ce:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	2200      	movs	r2, #0
 80044d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	2200      	movs	r2, #0
 80044da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80044dc:	231a      	movs	r3, #26
 80044de:	2218      	movs	r2, #24
 80044e0:	189b      	adds	r3, r3, r2
 80044e2:	19db      	adds	r3, r3, r7
 80044e4:	781b      	ldrb	r3, [r3, #0]
}
 80044e6:	0018      	movs	r0, r3
 80044e8:	46bd      	mov	sp, r7
 80044ea:	b00e      	add	sp, #56	; 0x38
 80044ec:	bdb0      	pop	{r4, r5, r7, pc}
 80044ee:	46c0      	nop			; (mov r8, r8)
 80044f0:	08004a1c 	.word	0x08004a1c
 80044f4:	40021000 	.word	0x40021000
 80044f8:	003d0900 	.word	0x003d0900
 80044fc:	00f42400 	.word	0x00f42400

08004500 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	2201      	movs	r2, #1
 800450e:	4013      	ands	r3, r2
 8004510:	d00b      	beq.n	800452a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	4a4a      	ldr	r2, [pc, #296]	; (8004644 <UART_AdvFeatureConfig+0x144>)
 800451a:	4013      	ands	r3, r2
 800451c:	0019      	movs	r1, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	2202      	movs	r2, #2
 8004530:	4013      	ands	r3, r2
 8004532:	d00b      	beq.n	800454c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	4a43      	ldr	r2, [pc, #268]	; (8004648 <UART_AdvFeatureConfig+0x148>)
 800453c:	4013      	ands	r3, r2
 800453e:	0019      	movs	r1, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	2204      	movs	r2, #4
 8004552:	4013      	ands	r3, r2
 8004554:	d00b      	beq.n	800456e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	4a3b      	ldr	r2, [pc, #236]	; (800464c <UART_AdvFeatureConfig+0x14c>)
 800455e:	4013      	ands	r3, r2
 8004560:	0019      	movs	r1, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	2208      	movs	r2, #8
 8004574:	4013      	ands	r3, r2
 8004576:	d00b      	beq.n	8004590 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	4a34      	ldr	r2, [pc, #208]	; (8004650 <UART_AdvFeatureConfig+0x150>)
 8004580:	4013      	ands	r3, r2
 8004582:	0019      	movs	r1, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	2210      	movs	r2, #16
 8004596:	4013      	ands	r3, r2
 8004598:	d00b      	beq.n	80045b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	4a2c      	ldr	r2, [pc, #176]	; (8004654 <UART_AdvFeatureConfig+0x154>)
 80045a2:	4013      	ands	r3, r2
 80045a4:	0019      	movs	r1, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	2220      	movs	r2, #32
 80045b8:	4013      	ands	r3, r2
 80045ba:	d00b      	beq.n	80045d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	4a25      	ldr	r2, [pc, #148]	; (8004658 <UART_AdvFeatureConfig+0x158>)
 80045c4:	4013      	ands	r3, r2
 80045c6:	0019      	movs	r1, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	2240      	movs	r2, #64	; 0x40
 80045da:	4013      	ands	r3, r2
 80045dc:	d01d      	beq.n	800461a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	4a1d      	ldr	r2, [pc, #116]	; (800465c <UART_AdvFeatureConfig+0x15c>)
 80045e6:	4013      	ands	r3, r2
 80045e8:	0019      	movs	r1, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045fa:	2380      	movs	r3, #128	; 0x80
 80045fc:	035b      	lsls	r3, r3, #13
 80045fe:	429a      	cmp	r2, r3
 8004600:	d10b      	bne.n	800461a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	4a15      	ldr	r2, [pc, #84]	; (8004660 <UART_AdvFeatureConfig+0x160>)
 800460a:	4013      	ands	r3, r2
 800460c:	0019      	movs	r1, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	2280      	movs	r2, #128	; 0x80
 8004620:	4013      	ands	r3, r2
 8004622:	d00b      	beq.n	800463c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	4a0e      	ldr	r2, [pc, #56]	; (8004664 <UART_AdvFeatureConfig+0x164>)
 800462c:	4013      	ands	r3, r2
 800462e:	0019      	movs	r1, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	605a      	str	r2, [r3, #4]
  }
}
 800463c:	46c0      	nop			; (mov r8, r8)
 800463e:	46bd      	mov	sp, r7
 8004640:	b002      	add	sp, #8
 8004642:	bd80      	pop	{r7, pc}
 8004644:	fffdffff 	.word	0xfffdffff
 8004648:	fffeffff 	.word	0xfffeffff
 800464c:	fffbffff 	.word	0xfffbffff
 8004650:	ffff7fff 	.word	0xffff7fff
 8004654:	ffffefff 	.word	0xffffefff
 8004658:	ffffdfff 	.word	0xffffdfff
 800465c:	ffefffff 	.word	0xffefffff
 8004660:	ff9fffff 	.word	0xff9fffff
 8004664:	fff7ffff 	.word	0xfff7ffff

08004668 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b092      	sub	sp, #72	; 0x48
 800466c:	af02      	add	r7, sp, #8
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2284      	movs	r2, #132	; 0x84
 8004674:	2100      	movs	r1, #0
 8004676:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004678:	f7fc fe0c 	bl	8001294 <HAL_GetTick>
 800467c:	0003      	movs	r3, r0
 800467e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2208      	movs	r2, #8
 8004688:	4013      	ands	r3, r2
 800468a:	2b08      	cmp	r3, #8
 800468c:	d12c      	bne.n	80046e8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800468e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004690:	2280      	movs	r2, #128	; 0x80
 8004692:	0391      	lsls	r1, r2, #14
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	4a46      	ldr	r2, [pc, #280]	; (80047b0 <UART_CheckIdleState+0x148>)
 8004698:	9200      	str	r2, [sp, #0]
 800469a:	2200      	movs	r2, #0
 800469c:	f000 f88c 	bl	80047b8 <UART_WaitOnFlagUntilTimeout>
 80046a0:	1e03      	subs	r3, r0, #0
 80046a2:	d021      	beq.n	80046e8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046a4:	f3ef 8310 	mrs	r3, PRIMASK
 80046a8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80046ae:	2301      	movs	r3, #1
 80046b0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b4:	f383 8810 	msr	PRIMASK, r3
}
 80046b8:	46c0      	nop			; (mov r8, r8)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2180      	movs	r1, #128	; 0x80
 80046c6:	438a      	bics	r2, r1
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d0:	f383 8810 	msr	PRIMASK, r3
}
 80046d4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2220      	movs	r2, #32
 80046da:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2278      	movs	r2, #120	; 0x78
 80046e0:	2100      	movs	r1, #0
 80046e2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e05f      	b.n	80047a8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2204      	movs	r2, #4
 80046f0:	4013      	ands	r3, r2
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d146      	bne.n	8004784 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046f8:	2280      	movs	r2, #128	; 0x80
 80046fa:	03d1      	lsls	r1, r2, #15
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	4a2c      	ldr	r2, [pc, #176]	; (80047b0 <UART_CheckIdleState+0x148>)
 8004700:	9200      	str	r2, [sp, #0]
 8004702:	2200      	movs	r2, #0
 8004704:	f000 f858 	bl	80047b8 <UART_WaitOnFlagUntilTimeout>
 8004708:	1e03      	subs	r3, r0, #0
 800470a:	d03b      	beq.n	8004784 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800470c:	f3ef 8310 	mrs	r3, PRIMASK
 8004710:	60fb      	str	r3, [r7, #12]
  return(result);
 8004712:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004714:	637b      	str	r3, [r7, #52]	; 0x34
 8004716:	2301      	movs	r3, #1
 8004718:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	f383 8810 	msr	PRIMASK, r3
}
 8004720:	46c0      	nop			; (mov r8, r8)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4921      	ldr	r1, [pc, #132]	; (80047b4 <UART_CheckIdleState+0x14c>)
 800472e:	400a      	ands	r2, r1
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004734:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f383 8810 	msr	PRIMASK, r3
}
 800473c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800473e:	f3ef 8310 	mrs	r3, PRIMASK
 8004742:	61bb      	str	r3, [r7, #24]
  return(result);
 8004744:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004746:	633b      	str	r3, [r7, #48]	; 0x30
 8004748:	2301      	movs	r3, #1
 800474a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	f383 8810 	msr	PRIMASK, r3
}
 8004752:	46c0      	nop			; (mov r8, r8)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2101      	movs	r1, #1
 8004760:	438a      	bics	r2, r1
 8004762:	609a      	str	r2, [r3, #8]
 8004764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004766:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	f383 8810 	msr	PRIMASK, r3
}
 800476e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2280      	movs	r2, #128	; 0x80
 8004774:	2120      	movs	r1, #32
 8004776:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2278      	movs	r2, #120	; 0x78
 800477c:	2100      	movs	r1, #0
 800477e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e011      	b.n	80047a8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2220      	movs	r2, #32
 8004788:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2280      	movs	r2, #128	; 0x80
 800478e:	2120      	movs	r1, #32
 8004790:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2278      	movs	r2, #120	; 0x78
 80047a2:	2100      	movs	r1, #0
 80047a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	0018      	movs	r0, r3
 80047aa:	46bd      	mov	sp, r7
 80047ac:	b010      	add	sp, #64	; 0x40
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	01ffffff 	.word	0x01ffffff
 80047b4:	fffffedf 	.word	0xfffffedf

080047b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	603b      	str	r3, [r7, #0]
 80047c4:	1dfb      	adds	r3, r7, #7
 80047c6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c8:	e04b      	b.n	8004862 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	3301      	adds	r3, #1
 80047ce:	d048      	beq.n	8004862 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d0:	f7fc fd60 	bl	8001294 <HAL_GetTick>
 80047d4:	0002      	movs	r2, r0
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d302      	bcc.n	80047e6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e04b      	b.n	8004882 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2204      	movs	r2, #4
 80047f2:	4013      	ands	r3, r2
 80047f4:	d035      	beq.n	8004862 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	2208      	movs	r2, #8
 80047fe:	4013      	ands	r3, r2
 8004800:	2b08      	cmp	r3, #8
 8004802:	d111      	bne.n	8004828 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2208      	movs	r2, #8
 800480a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	0018      	movs	r0, r3
 8004810:	f000 f83c 	bl	800488c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2284      	movs	r2, #132	; 0x84
 8004818:	2108      	movs	r1, #8
 800481a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2278      	movs	r2, #120	; 0x78
 8004820:	2100      	movs	r1, #0
 8004822:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e02c      	b.n	8004882 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	69da      	ldr	r2, [r3, #28]
 800482e:	2380      	movs	r3, #128	; 0x80
 8004830:	011b      	lsls	r3, r3, #4
 8004832:	401a      	ands	r2, r3
 8004834:	2380      	movs	r3, #128	; 0x80
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	429a      	cmp	r2, r3
 800483a:	d112      	bne.n	8004862 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2280      	movs	r2, #128	; 0x80
 8004842:	0112      	lsls	r2, r2, #4
 8004844:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	0018      	movs	r0, r3
 800484a:	f000 f81f 	bl	800488c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2284      	movs	r2, #132	; 0x84
 8004852:	2120      	movs	r1, #32
 8004854:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2278      	movs	r2, #120	; 0x78
 800485a:	2100      	movs	r1, #0
 800485c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e00f      	b.n	8004882 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	4013      	ands	r3, r2
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	425a      	negs	r2, r3
 8004872:	4153      	adcs	r3, r2
 8004874:	b2db      	uxtb	r3, r3
 8004876:	001a      	movs	r2, r3
 8004878:	1dfb      	adds	r3, r7, #7
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	429a      	cmp	r2, r3
 800487e:	d0a4      	beq.n	80047ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	0018      	movs	r0, r3
 8004884:	46bd      	mov	sp, r7
 8004886:	b004      	add	sp, #16
 8004888:	bd80      	pop	{r7, pc}
	...

0800488c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08e      	sub	sp, #56	; 0x38
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004894:	f3ef 8310 	mrs	r3, PRIMASK
 8004898:	617b      	str	r3, [r7, #20]
  return(result);
 800489a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800489c:	637b      	str	r3, [r7, #52]	; 0x34
 800489e:	2301      	movs	r3, #1
 80048a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	f383 8810 	msr	PRIMASK, r3
}
 80048a8:	46c0      	nop			; (mov r8, r8)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4926      	ldr	r1, [pc, #152]	; (8004950 <UART_EndRxTransfer+0xc4>)
 80048b6:	400a      	ands	r2, r1
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	f383 8810 	msr	PRIMASK, r3
}
 80048c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048c6:	f3ef 8310 	mrs	r3, PRIMASK
 80048ca:	623b      	str	r3, [r7, #32]
  return(result);
 80048cc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ce:	633b      	str	r3, [r7, #48]	; 0x30
 80048d0:	2301      	movs	r3, #1
 80048d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	f383 8810 	msr	PRIMASK, r3
}
 80048da:	46c0      	nop			; (mov r8, r8)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689a      	ldr	r2, [r3, #8]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2101      	movs	r1, #1
 80048e8:	438a      	bics	r2, r1
 80048ea:	609a      	str	r2, [r3, #8]
 80048ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f2:	f383 8810 	msr	PRIMASK, r3
}
 80048f6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d118      	bne.n	8004932 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004900:	f3ef 8310 	mrs	r3, PRIMASK
 8004904:	60bb      	str	r3, [r7, #8]
  return(result);
 8004906:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800490a:	2301      	movs	r3, #1
 800490c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f383 8810 	msr	PRIMASK, r3
}
 8004914:	46c0      	nop			; (mov r8, r8)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2110      	movs	r1, #16
 8004922:	438a      	bics	r2, r1
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004928:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f383 8810 	msr	PRIMASK, r3
}
 8004930:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2280      	movs	r2, #128	; 0x80
 8004936:	2120      	movs	r1, #32
 8004938:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	46bd      	mov	sp, r7
 800494a:	b00e      	add	sp, #56	; 0x38
 800494c:	bd80      	pop	{r7, pc}
 800494e:	46c0      	nop			; (mov r8, r8)
 8004950:	fffffedf 	.word	0xfffffedf

08004954 <memset>:
 8004954:	0003      	movs	r3, r0
 8004956:	1882      	adds	r2, r0, r2
 8004958:	4293      	cmp	r3, r2
 800495a:	d100      	bne.n	800495e <memset+0xa>
 800495c:	4770      	bx	lr
 800495e:	7019      	strb	r1, [r3, #0]
 8004960:	3301      	adds	r3, #1
 8004962:	e7f9      	b.n	8004958 <memset+0x4>

08004964 <__libc_init_array>:
 8004964:	b570      	push	{r4, r5, r6, lr}
 8004966:	2600      	movs	r6, #0
 8004968:	4c0c      	ldr	r4, [pc, #48]	; (800499c <__libc_init_array+0x38>)
 800496a:	4d0d      	ldr	r5, [pc, #52]	; (80049a0 <__libc_init_array+0x3c>)
 800496c:	1b64      	subs	r4, r4, r5
 800496e:	10a4      	asrs	r4, r4, #2
 8004970:	42a6      	cmp	r6, r4
 8004972:	d109      	bne.n	8004988 <__libc_init_array+0x24>
 8004974:	2600      	movs	r6, #0
 8004976:	f000 f819 	bl	80049ac <_init>
 800497a:	4c0a      	ldr	r4, [pc, #40]	; (80049a4 <__libc_init_array+0x40>)
 800497c:	4d0a      	ldr	r5, [pc, #40]	; (80049a8 <__libc_init_array+0x44>)
 800497e:	1b64      	subs	r4, r4, r5
 8004980:	10a4      	asrs	r4, r4, #2
 8004982:	42a6      	cmp	r6, r4
 8004984:	d105      	bne.n	8004992 <__libc_init_array+0x2e>
 8004986:	bd70      	pop	{r4, r5, r6, pc}
 8004988:	00b3      	lsls	r3, r6, #2
 800498a:	58eb      	ldr	r3, [r5, r3]
 800498c:	4798      	blx	r3
 800498e:	3601      	adds	r6, #1
 8004990:	e7ee      	b.n	8004970 <__libc_init_array+0xc>
 8004992:	00b3      	lsls	r3, r6, #2
 8004994:	58eb      	ldr	r3, [r5, r3]
 8004996:	4798      	blx	r3
 8004998:	3601      	adds	r6, #1
 800499a:	e7f2      	b.n	8004982 <__libc_init_array+0x1e>
 800499c:	08004a48 	.word	0x08004a48
 80049a0:	08004a48 	.word	0x08004a48
 80049a4:	08004a4c 	.word	0x08004a4c
 80049a8:	08004a48 	.word	0x08004a48

080049ac <_init>:
 80049ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049b2:	bc08      	pop	{r3}
 80049b4:	469e      	mov	lr, r3
 80049b6:	4770      	bx	lr

080049b8 <_fini>:
 80049b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ba:	46c0      	nop			; (mov r8, r8)
 80049bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049be:	bc08      	pop	{r3}
 80049c0:	469e      	mov	lr, r3
 80049c2:	4770      	bx	lr
